{"version":3,"sources":["../../src/methods/iterator.js"],"names":["GetIterator","realm","obj","intrinsics","undefined","_method","method","SymbolIterator","iterator","ObjectValue","createErrorThrowCompletion","TypeError","IteratorStep","result","IteratorNext","done","IteratorComplete","IteratorValue","iterResult","To","ToBooleanPartial","value","CreateListIterator","list","Create","ObjectCreate","IteratorPrototype","$IteratorNext","$IteratedList","$ListIteratorNextIndex","next","ListIterator_next","CreateMethodProperty","StringValue","func","NativeFunctionValue","context","O","f","index","len","length","CreateIterResultObject","CreateMapIterator","map","kind","$MapData","MapIteratorPrototype","$Map","$MapNextIndex","$MapIterationKind","NumberValue","CreateSetIterator","set","$SetData","SetIteratorPrototype","$IteratedSet","$SetNextIndex","$SetIterationKind","IteratorClose","completion","Completion","ret","UndefinedValue","innerResult","throwIfNotConcrete","error","AbruptCompletion","ThrowCompletion","IterableToList","items","values","nextValue","push"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport type { CallableObjectValue } from \"../types.js\";\nimport { Completion, AbruptCompletion, ThrowCompletion } from \"../completions.js\";\nimport { NativeFunctionValue, NumberValue, ObjectValue, StringValue, UndefinedValue, Value } from \"../values/index.js\";\nimport { Call, Get, GetMethod, Invoke } from \"./index.js\";\nimport invariant from \"../invariant.js\";\nimport type { IterationKind } from \"../types.js\";\nimport { SameValue } from \"./abstract.js\";\nimport { Create, To } from \"../singletons.js\";\n\n// ECMA262 7.4.1\nexport function GetIterator(realm: Realm, obj: Value = realm.intrinsics.undefined, _method?: Value): ObjectValue {\n  let method = _method;\n  // 1. If method was not passed, then\n  if (!method) {\n    // a. Let method be ? GetMethod(obj, @@iterator).\n    method = GetMethod(realm, obj, realm.intrinsics.SymbolIterator);\n  }\n\n  // 2. Let iterator be ? Call(method, obj).\n  let iterator = Call(realm, (method: Value), obj);\n\n  // 3. If Type(iterator) is not Object, throw a TypeError exception.\n  if (!(iterator instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 4. Return iterator.\n  return iterator;\n}\n\n// ECMA262 7.4.5\nexport function IteratorStep(realm: Realm, iterator: Value): false | ObjectValue {\n  // 1. Let result be ? IteratorNext(iterator).\n  let result = IteratorNext(realm, iterator);\n\n  // 2. Let done be ? IteratorComplete(result).\n  let done = IteratorComplete(realm, result);\n\n  // 3. If done is true, return false.\n  if (done) return false;\n\n  // 4. Return result.\n  return result;\n}\n\n// ECMA262 7.4.4\nexport function IteratorValue(realm: Realm, iterResult: ObjectValue): Value {\n  // 1. Assert: Type(iterResult) is Object.\n  invariant(iterResult instanceof ObjectValue, \"expected obj\");\n\n  // 2. Return ? Get(iterResult, \"value\").\n  return Get(realm, iterResult, \"value\");\n}\n\n// ECMA262 7.4.2\nexport function IteratorComplete(realm: Realm, iterResult: ObjectValue): boolean {\n  // 1. Assert: Type(iterResult) is Object.\n  invariant(iterResult instanceof ObjectValue, \"expected obj\");\n\n  // 2. Return ToBoolean(? Get(iterResult, \"done\")).\n  return To.ToBooleanPartial(realm, Get(realm, iterResult, \"done\"));\n}\n\n// ECMA262 7.4.2\nexport function IteratorNext(realm: Realm, iterator: Value, value?: Value): ObjectValue {\n  // 1. If value was not passed, then\n  let result;\n  if (!value) {\n    // a. Let result be ? Invoke(iterator, \"next\", « »).\n    result = Invoke(realm, iterator, \"next\", []);\n  } else {\n    // 2. Else,\n    // a. Let result be ? Invoke(iterator, \"next\", « value »).\n    result = Invoke(realm, iterator, \"next\", [value]);\n  }\n\n  // 3. If Type(result) is not Object, throw a TypeError exception.\n  if (!(result instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 4. Return result.\n  return result;\n}\n\n// ECMA262 7.4.8\nexport function CreateListIterator(realm: Realm, list: Array<Value>): ObjectValue {\n  // 1. Let iterator be ObjectCreate(%IteratorPrototype%, « [[IteratorNext]], [[IteratedList]], [[ListIteratorNextIndex]] »).\n  let iterator = Create.ObjectCreate(realm, realm.intrinsics.IteratorPrototype, {\n    $IteratorNext: undefined,\n    $IteratedList: undefined,\n    $ListIteratorNextIndex: undefined,\n  });\n\n  // 2. Set iterator's [[IteratedList]] internal slot to list.\n  iterator.$IteratedList = list;\n\n  // 3. Set iterator's [[ListIteratorNextIndex]] internal slot to 0.\n  iterator.$ListIteratorNextIndex = 0;\n\n  // 4. Let next be a new built-in function object as defined in ListIterator next (7.4.8.1).\n  let next = ListIterator_next(realm);\n\n  // 5. Set iterator's [[IteratorNext]] internal slot to next.\n  iterator.$IteratorNext = next;\n\n  // 6. Perform CreateMethodProperty(iterator, \"next\", next).\n  Create.CreateMethodProperty(realm, iterator, new StringValue(realm, \"next\"), next);\n\n  // 7. Return iterator.\n  return iterator;\n}\n\n// ECMA262 7.4.8.1\nfunction ListIterator_next(realm: Realm): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, undefined, \"next\", 0, context => {\n    invariant(context instanceof ObjectValue);\n\n    // 1. Let O be the this value.\n    let O = context;\n\n    // 2. Let f be the active function object.\n    let f = func;\n\n    // 3. If O does not have a [[IteratorNext]] internal slot, throw a TypeError exception.\n    if (!O.$IteratorNext) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"O does not have an [[IteratorNext]] internal slot\"\n      );\n    }\n\n    // 4. Let next be the value of the [[IteratorNext]] internal slot of O.\n    let next = O.$IteratorNext;\n\n    // 5. If SameValue(f, next) is false, throw a TypeError exception.\n    if (!SameValue(realm, f, next)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 6. If O does not have an [[IteratedList]] internal slot, throw a TypeError exception.\n    if (!O.$IteratedList) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"O does not have an [[IteratedList]] internal slot\"\n      );\n    }\n\n    // 7. Let list be the value of the [[IteratedList]] internal slot of O.\n    let list = O.$IteratedList;\n\n    invariant(typeof O.$ListIteratorNextIndex === \"number\");\n\n    // 8. Let index be the value of the [[ListIteratorNextIndex]] internal slot of O.\n    // Default to 0 for Flow.\n    let index = O.$ListIteratorNextIndex;\n\n    // 9. Let len be the number of elements of list.\n    let len = list.length;\n\n    // 10. If index ≥ len, then\n    if (index >= len) {\n      // a. Return CreateIterResultObject(undefined, true).\n      return Create.CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n    }\n\n    // 11. Set the value of the [[ListIteratorNextIndex]] internal slot of O to index+1.\n    O.$ListIteratorNextIndex = index + 1;\n\n    // 12. Return CreateIterResultObject(list[index], false).\n    return Create.CreateIterResultObject(realm, list[index], false);\n  });\n\n  return func;\n}\n\n// ECMA262 23.1.5.1\nexport function CreateMapIterator(realm: Realm, map: Value, kind: IterationKind): ObjectValue {\n  // 1. If Type(map) is not Object, throw a TypeError exception.\n  if (!(map instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. If map does not have a [[MapData]] internal slot, throw a TypeError exception.\n  if (!map.$MapData) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Let iterator be ObjectCreate(%MapIteratorPrototype%, « [[Map]], [[MapNextIndex]], [[MapIterationKind]] »).\n  let iterator = Create.ObjectCreate(realm, realm.intrinsics.MapIteratorPrototype, {\n    $Map: undefined,\n    $MapNextIndex: undefined,\n    $MapIterationKind: undefined,\n  });\n\n  // 4. Set iterator's [[Map]] internal slot to map.\n  iterator.$Map = map;\n\n  // 5. Set iterator's [[MapNextIndex]] internal slot to 0.\n  iterator.$MapNextIndex = new NumberValue(realm, 0);\n\n  // 6. Set iterator's [[MapIterationKind]] internal slot to kind.\n  iterator.$MapIterationKind = kind;\n\n  // 7. Return iterator.\n  return iterator;\n}\n\n// ECMA262 23.2.5.1\nexport function CreateSetIterator(realm: Realm, set: Value, kind: IterationKind): ObjectValue {\n  // 1. If Type(set) is not Object, throw a TypeError exception.\n  if (!(set instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. If set does not have a [[SetData]] internal slot, throw a TypeError exception.\n  if (!set.$SetData) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Let iterator be ObjectCreate(%SetIteratorPrototype%, « [[IteratedSet]], [[SetNextIndex]], [[SetIterationKind]] »).\n  let iterator = Create.ObjectCreate(realm, realm.intrinsics.SetIteratorPrototype, {\n    $IteratedSet: undefined,\n    $SetNextIndex: undefined,\n    $SetIterationKind: undefined,\n  });\n\n  // 4. Set iterator's [[IteratedSet]] internal slot to set.\n  iterator.$IteratedSet = set;\n\n  // 5. Set iterator's [[SetNextIndex]] internal slot to 0.\n  iterator.$SetNextIndex = 0;\n\n  // 6. Set iterator's [[SetIterationKind]] internal slot to kind.\n  iterator.$SetIterationKind = kind;\n\n  // 7. Return iterator.\n  return iterator;\n}\n\n// ECMA262 7.4.6\nexport function IteratorClose(realm: Realm, iterator: ObjectValue, completion: Completion): Completion {\n  // 1. Assert: Type(iterator) is Object.\n  invariant(iterator instanceof ObjectValue, \"expected object\");\n\n  // 2. Assert: completion is a Completion Record.\n  invariant(completion instanceof Completion, \"expected completion record\");\n\n  // 3. Let return be ? GetMethod(iterator, \"return\").\n  let ret = GetMethod(realm, iterator, \"return\");\n\n  // 4. If return is undefined, return Completion(completion).\n  if (ret instanceof UndefinedValue) return completion;\n\n  // 5. Let innerResult be Call(return, iterator, « »).\n  let innerResult;\n  try {\n    innerResult = Call(realm, ret.throwIfNotConcrete(), iterator, []);\n  } catch (error) {\n    if (error instanceof AbruptCompletion) {\n      innerResult = error;\n    } else {\n      throw error;\n    }\n  }\n\n  // 6. If completion.[[Type]] is throw, return Completion(completion).\n  if (completion instanceof ThrowCompletion) return completion;\n\n  // 7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n  if (innerResult instanceof ThrowCompletion) return innerResult;\n\n  // 8. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.\n  if (!(innerResult instanceof ObjectValue)) {\n    return realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 9. Return Completion(completion).\n  return completion;\n}\n\n// ECMA262 22.2.2.1.1\nexport function IterableToList(realm: Realm, items: Value, method: CallableObjectValue): Array<Value> {\n  // 1. Let iterator be ? GetIterator(items, method).\n  let iterator = GetIterator(realm, items, method);\n\n  // 2. Let values be a new empty List.\n  let values = [];\n\n  // 3. Let next be true.\n  let next = true;\n\n  // 4. Repeat, while next is not false\n  while (next !== false) {\n    // a. Let next be ? IteratorStep(iterator).\n    next = IteratorStep(realm, iterator);\n\n    // b. If next is not false, then\n    if (next !== false) {\n      // i. Let nextValue be ? IteratorValue(next).\n      let nextValue = IteratorValue(realm, next);\n\n      // ii. Append nextValue to the end of the List values.\n      values.push(nextValue);\n    }\n  }\n\n  // 5. Return values.\n  return values;\n}\n"],"file":"iterator.js"}