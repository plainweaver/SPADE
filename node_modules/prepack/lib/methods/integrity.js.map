{"version":3,"sources":["../../src/methods/integrity.js"],"names":["OrdinaryPreventExtensions","realm","O","mightBeLeakedObject","getExtensible","FatalError","setExtensible","SetIntegrityLevel","level","ObjectValue","status","$PreventExtensions","keys","$OwnPropertyKeys","k","Properties","DefinePropertyOrThrow","PropertyDescriptor","configurable","currentDesc","$GetOwnProperty","ThrowIfMightHaveBeenDeleted","desc","writable","TestIntegrityLevel","throwIfNotConcrete"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport { ObjectValue } from \"../values/index.js\";\nimport { IsExtensible, IsDataDescriptor, IsAccessorDescriptor } from \"./index.js\";\nimport { Properties } from \"../singletons.js\";\nimport { FatalError } from \"../errors.js\";\nimport invariant from \"../invariant.js\";\nimport { PropertyDescriptor } from \"../descriptors.js\";\n\ntype IntegrityLevels = \"sealed\" | \"frozen\";\n\n// ECMA262 9.1.4.1\nexport function OrdinaryPreventExtensions(realm: Realm, O: ObjectValue): boolean {\n  if (O.mightBeLeakedObject() && O.getExtensible()) {\n    // todo: emit a diagnostic messsage\n    throw new FatalError();\n  }\n\n  // 1. Set the value of the [[Extensible]] internal slot of O to false.\n  O.setExtensible(false);\n\n  // 2. Return true.\n  return true;\n}\n\n// ECMA262 7.3.14\nexport function SetIntegrityLevel(realm: Realm, O: ObjectValue, level: IntegrityLevels): boolean {\n  // 1. Assert: Type(O) is Object.\n  invariant(O instanceof ObjectValue, \"expected an object\");\n\n  // 2. Assert: level is either \"sealed\" or \"frozen\".\n  invariant(level === \"sealed\" || level === \"frozen\", \"invalid level\");\n\n  // 3. Let status be ? O.[[PreventExtensions]]().\n  let status = O.$PreventExtensions();\n\n  // 4. If status is false, return false.\n  if (status === false) return false;\n\n  // 5. Let keys be ? O.[[OwnPropertyKeys]]().\n  let keys = O.$OwnPropertyKeys();\n\n  // 6. If level is \"sealed\", then\n  if (level === \"sealed\") {\n    // a. Repeat for each element k of keys,\n    for (let k of keys) {\n      // i. Perform ? DefinePropertyOrThrow(O, k, PropertyDescriptor{[[Configurable]]: false}).\n      Properties.DefinePropertyOrThrow(\n        realm,\n        O,\n        k,\n        new PropertyDescriptor({\n          configurable: false,\n        })\n      );\n    }\n  } else if (level === \"frozen\") {\n    // 7. Else level is \"frozen\",\n    // a. Repeat for each element k of keys,\n    for (let k of keys) {\n      // i. Let currentDesc be ? O.[[GetOwnProperty]](k).\n      let currentDesc = O.$GetOwnProperty(k);\n\n      // ii. If currentDesc is not undefined, then\n      if (currentDesc) {\n        Properties.ThrowIfMightHaveBeenDeleted(currentDesc);\n        let desc;\n\n        // 1. If IsAccessorDescriptor(currentDesc) is true, then\n        if (IsAccessorDescriptor(realm, currentDesc)) {\n          // a. Let desc be the PropertyDescriptor{[[Configurable]]: false}.\n          desc = new PropertyDescriptor({ configurable: false });\n        } else {\n          // 2. Else,\n          // b. Let desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\n          desc = new PropertyDescriptor({ configurable: false, writable: false });\n        }\n\n        // 3. Perform ? DefinePropertyOrThrow(O, k, desc).\n        Properties.DefinePropertyOrThrow(realm, O, k, desc);\n      }\n    }\n  }\n\n  // 8. Return true.\n  return true;\n}\n\n// ECMA262 7.3.15\nexport function TestIntegrityLevel(realm: Realm, O: ObjectValue, level: IntegrityLevels): boolean {\n  // 1. Assert: Type(O) is Object.\n  invariant(O instanceof ObjectValue, \"expected an object\");\n\n  // 2. Assert: level is either \"sealed\" or \"frozen\".\n  invariant(level === \"sealed\" || level === \"frozen\", \"invalid level\");\n\n  // 3. Let status be ? IsExtensible(O).\n  let status = IsExtensible(realm, O);\n\n  // 4. If status is true, return false.\n  if (status === true) return false;\n\n  // 5. NOTE If the object is extensible, none of its properties are examined.\n\n  // 6. Let keys be ? O.[[OwnPropertyKeys]]().\n  let keys = O.$OwnPropertyKeys();\n\n  // 7. Repeat for each element k of keys,\n  for (let k of keys) {\n    // a. Let currentDesc be ? O.[[GetOwnProperty]](k).\n    let currentDesc = O.$GetOwnProperty(k);\n\n    // b. If currentDesc is not undefined, then\n    if (currentDesc) {\n      Properties.ThrowIfMightHaveBeenDeleted(currentDesc);\n      currentDesc = currentDesc.throwIfNotConcrete(realm);\n\n      // i. If currentDesc.[[Configurable]] is true, return false.\n      if (currentDesc.configurable === true) return false;\n\n      // ii. If level is \"frozen\" and IsDataDescriptor(currentDesc) is true, then\n      if (level === \"frozen\" && IsDataDescriptor(realm, currentDesc) === true) {\n        // 1. If currentDesc.[[Writable]] is true, return false.\n        if (currentDesc.writable === true) return false;\n      }\n    }\n  }\n\n  // 8. Return true.\n  return true;\n}\n"],"file":"integrity.js"}