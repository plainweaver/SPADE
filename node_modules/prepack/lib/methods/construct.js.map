{"version":3,"sources":["../../src/methods/construct.js"],"names":["MakeConstructor","realm","F","_writablePrototype","_prototype","writablePrototype","prototype","ECMAScriptSourceFunctionValue","$Construct","undefined","getExtensible","Create","ObjectCreate","intrinsics","ObjectPrototype","originalConstructor","Properties","DefinePropertyOrThrow","PropertyDescriptor","value","writable","enumerable","configurable","Construct","_argumentsList","_newTarget","argumentsList","newTarget","SpeciesConstructor","O","defaultConstructor","ObjectValue","C","UndefinedValue","mightNotBeObject","mightBeObject","throwIfNotConcrete","createErrorThrowCompletion","TypeError","AbstractObjectValue","S","SymbolSpecies","NullValue","MakeClassConstructor","$FunctionKind","ConstructorMethod","ClassElementList","ClassElement","length","empty","key","name","head","slice","EmptyValue","NonConstructorMethodDefinitions","list","push"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport {\n  AbstractObjectValue,\n  ECMAScriptSourceFunctionValue,\n  ObjectValue,\n  UndefinedValue,\n  NullValue,\n  Value,\n  EmptyValue,\n} from \"../values/index.js\";\nimport { IsConstructor, IsStatic } from \"./is.js\";\nimport { Get } from \"./get.js\";\nimport { HasSomeCompatibleType } from \"./has.js\";\nimport { Create, Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport type { BabelNodeClassMethod } from \"@babel/types\";\nimport { PropertyDescriptor } from \"../descriptors.js\";\n\n// ECMA262 9.2.8\nexport function MakeConstructor(\n  realm: Realm,\n  F: ECMAScriptSourceFunctionValue,\n  _writablePrototype?: boolean,\n  _prototype?: ObjectValue\n): UndefinedValue {\n  let writablePrototype = _writablePrototype;\n  let prototype = _prototype;\n  // 1. Assert: F is an ECMAScript function object.\n  invariant(F instanceof ECMAScriptSourceFunctionValue, \"expected function value\");\n\n  // 2. Assert: F has a [[Construct]] internal method.\n  invariant(F.$Construct !== undefined, \"expected construct internal method\");\n\n  // 3. Assert: F is an extensible object that does not have a prototype own property.\n  invariant(F.getExtensible(), \"expected extensible object that doesn't have prototype own property\");\n\n  // 4. If the writablePrototype argument was not provided, let writablePrototype be true.\n  if (writablePrototype === null || writablePrototype === undefined) {\n    writablePrototype = true;\n  }\n\n  // 5. If the prototype argument was not provided, then\n  if (!prototype) {\n    // a. Let prototype be ObjectCreate(%ObjectPrototype%).\n    prototype = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n    prototype.originalConstructor = F;\n\n    // b. Perform ! DefinePropertyOrThrow(prototype, \"constructor\", PropertyDescriptor{[[Value]]: F, [[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: true }).\n    Properties.DefinePropertyOrThrow(\n      realm,\n      prototype,\n      \"constructor\",\n      new PropertyDescriptor({\n        value: F,\n        writable: writablePrototype,\n        enumerable: false,\n        configurable: true,\n      })\n    );\n  }\n\n  // 6. Perform ! DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor{[[Value]]: prototype, [[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: false}).\n  Properties.DefinePropertyOrThrow(\n    realm,\n    F,\n    \"prototype\",\n    new PropertyDescriptor({\n      value: prototype,\n      writable: writablePrototype,\n      enumerable: false,\n      configurable: false,\n    })\n  );\n\n  // 7. Return NormalCompletion(undefined).\n  return realm.intrinsics.undefined;\n}\n\n// ECMA262 7.3.13\nexport function Construct(\n  realm: Realm,\n  F: ObjectValue,\n  _argumentsList?: Array<Value>,\n  _newTarget?: ObjectValue\n): ObjectValue | AbstractObjectValue {\n  let argumentsList = _argumentsList;\n  let newTarget = _newTarget;\n  // If newTarget was not passed, let newTarget be F.\n  if (!newTarget) newTarget = F;\n\n  // If argumentsList was not passed, let argumentsList be a new empty List.\n  if (!argumentsList) argumentsList = [];\n\n  // Assert: IsConstructor(F) is true.\n  invariant(IsConstructor(realm, F), \"expected constructor\");\n\n  // Assert: IsConstructor(newTarget) is true.\n  invariant(IsConstructor(realm, newTarget), \"expected constructor\");\n\n  // Return ? F.[[Construct]](argumentsList, newTarget).\n  invariant(F.$Construct !== undefined, \"no construct method on realm value\");\n  return F.$Construct(argumentsList, newTarget);\n}\n\n// ECMA262 7.3.20\nexport function SpeciesConstructor(realm: Realm, O: ObjectValue, defaultConstructor: ObjectValue): ObjectValue {\n  // 1. Assert: Type(O) is Object.\n  invariant(O instanceof ObjectValue, \"Type(O) is Object\");\n\n  // 2. Let C be ? Get(O, \"constructor\").\n  let C = Get(realm, O, \"constructor\");\n\n  // 3. If C is undefined, return defaultConstructor.\n  if (C instanceof UndefinedValue) return defaultConstructor;\n\n  // 4. If Type(C) is not Object, throw a TypeError exception.\n  if (C.mightNotBeObject()) {\n    if (C.mightBeObject()) C.throwIfNotConcrete();\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(C) is not an object\");\n  }\n  invariant(C instanceof ObjectValue || C instanceof AbstractObjectValue);\n\n  // 5. Let S be ? Get(C, @@species).\n  let S = Get(realm, C, realm.intrinsics.SymbolSpecies);\n\n  // 6. If S is either undefined or null, return defaultConstructor.\n  if (HasSomeCompatibleType(S, UndefinedValue, NullValue)) return defaultConstructor;\n\n  // 7. If IsConstructor(S) is true, return S.\n  if (IsConstructor(realm, S)) {\n    invariant(S instanceof ObjectValue);\n    return S;\n  }\n\n  // 8. Throw a TypeError exception.\n  throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Throw a TypeError exception\");\n}\n\n// ECMA 9.2.9\nexport function MakeClassConstructor(realm: Realm, F: ECMAScriptSourceFunctionValue): UndefinedValue {\n  // 1. Assert: F is an ECMAScript function object.\n  invariant(F instanceof ECMAScriptSourceFunctionValue, \"expected function value\");\n\n  // 2. Assert: F’s [[FunctionKind]] internal slot is \"normal\".\n  invariant(F.$FunctionKind === \"normal\");\n\n  // 3. Set F’s [[FunctionKind]] internal slot to \"classConstructor\".\n  F.$FunctionKind = \"classConstructor\";\n\n  // 4. Return NormalCompletion(undefined).\n  return realm.intrinsics.undefined;\n}\n\n// ECMA 14.5.3\nexport function ConstructorMethod(\n  realm: Realm,\n  ClassElementList: Array<BabelNodeClassMethod>\n): EmptyValue | BabelNodeClassMethod {\n  let ClassElement;\n  // ClassElementList : ClassElement\n  if (ClassElementList.length === 1) {\n    ClassElement = ClassElementList[0];\n    // 1. If ClassElement is the production ClassElement : ; , return empty.\n    // It looks like Babel parses out ClassElements that are only ;\n\n    // 2. If IsStatic of ClassElement is true, return empty.\n    if (IsStatic(ClassElement)) {\n      return realm.intrinsics.empty;\n    }\n    // 3. If PropName of ClassElement is not \"constructor\", return empty.\n    if (ClassElement.key.name !== \"constructor\") {\n      return realm.intrinsics.empty;\n    }\n\n    // 4. Return ClassElement.\n    return ClassElement;\n  } else {\n    // ClassElementList : ClassElementList ClassElement\n    // 1. Let head be ConstructorMethod of ClassElementList.\n    let head = ConstructorMethod(realm, ClassElementList.slice(0, -1));\n    // 2. If head is not empty, return head.\n    if (!(head instanceof EmptyValue)) {\n      return head;\n    }\n\n    ClassElement = ClassElementList[ClassElementList.length - 1];\n    // 3. If ClassElement is the production ClassElement : ; , return empty.\n    // It looks like Babel parses out ClassElements that are only ;\n\n    // 4. If IsStatic of ClassElement is true, return empty.\n    if (IsStatic(ClassElement)) {\n      return realm.intrinsics.empty;\n    }\n    // If PropName of ClassElement is not \"constructor\", return empty.\n    if (ClassElement.key.name !== \"constructor\") {\n      return realm.intrinsics.empty;\n    }\n\n    // Return ClassElement.\n    return ClassElement;\n  }\n}\n\n// ECMA 14.5.10\nexport function NonConstructorMethodDefinitions(\n  realm: Realm,\n  ClassElementList: Array<BabelNodeClassMethod>\n): Array<BabelNodeClassMethod> {\n  let ClassElement;\n  // ClassElementList : ClassElement\n  if (ClassElementList.length === 1) {\n    ClassElement = ClassElementList[0];\n    // If ClassElement is the production ClassElement : ; , return a new empty List.\n\n    // If IsStatic of ClassElement is false and PropName of ClassElement is \"constructor\", return a new empty List.\n    if (!IsStatic(ClassElement) && ClassElement.key.name === \"constructor\") {\n      return [];\n    }\n    // Return a List containing ClassElement.\n    return [ClassElement];\n  } else {\n    // ClassElementList : ClassElementList ClassElement\n    ClassElement = ClassElementList[ClassElementList.length - 1];\n\n    // Let list be NonConstructorMethodDefinitions of ClassElementList.\n    let list = NonConstructorMethodDefinitions(realm, ClassElementList.slice(0, -1));\n\n    // If ClassElement is the production ClassElement : ; , return list.\n\n    // If IsStatic of ClassElement is false and PropName of ClassElement is \"constructor\", return list.\n    if (!IsStatic(ClassElement) && ClassElement.key.name === \"constructor\") {\n      return list;\n    }\n\n    // Append ClassElement to the end of list.\n    list.push(ClassElement);\n\n    // Return list.\n    return list;\n  }\n}\n"],"file":"construct.js"}