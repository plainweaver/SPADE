{"version":3,"sources":["../../src/methods/proxy.js"],"names":["ProxyCall","realm","O","thisArgument","argumentsList","handler","$ProxyHandler","NullValue","createErrorThrowCompletion","intrinsics","TypeError","ObjectValue","target","$ProxyTarget","trap","UndefinedValue","argArray","Create","CreateArrayFromList","throwIfNotConcrete","ProxyConstruct","newTarget","$Construct","throwIfNotConcreteObject","newObj","ProxyCreate","_target","_handler","ProxyValue","P","$Call","argsList"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport { ProxyValue, NullValue, ObjectValue, Value, UndefinedValue } from \"../values/index.js\";\nimport { IsCallable } from \"./is.js\";\nimport { GetMethod } from \"./get.js\";\nimport { Construct } from \"./construct.js\";\nimport { Call } from \"./call.js\";\nimport { Create } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\n\n// ECMA262 9.5.12\nexport function ProxyCall(realm: Realm, O: ProxyValue, thisArgument: Value, argumentsList: Array<Value>): Value {\n  // 1. Let handler be the value of the [[ProxyHandler]] internal slot of O.\n  let handler = O.$ProxyHandler;\n\n  // 2. If handler is null, throw a TypeError exception.\n  if (handler instanceof NullValue) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Assert: Type(handler) is Object.\n  invariant(handler instanceof ObjectValue, \"expected an object\");\n\n  // 4. Let target be the value of the [[ProxyTarget]] internal slot of O.\n  let target = O.$ProxyTarget;\n\n  // 5. Let trap be ? GetMethod(handler, \"apply\").\n  let trap = GetMethod(realm, handler, \"apply\");\n\n  // 6. If trap is undefined, then\n  if (trap instanceof UndefinedValue) {\n    // a. Return ? Call(target, thisArgument, argumentsList).\n    return Call(realm, target, thisArgument, argumentsList);\n  }\n\n  // 7. Let argArray be CreateArrayFromList(argumentsList).\n  let argArray = Create.CreateArrayFromList(realm, argumentsList);\n\n  // 8. Return ? Call(trap, handler, « target, thisArgument, argArray »).\n  return Call(realm, trap.throwIfNotConcrete(), handler, [target, thisArgument, argArray]);\n}\n\n// ECMA262 9.5.13\nexport function ProxyConstruct(\n  realm: Realm,\n  O: ProxyValue,\n  argumentsList: Array<Value>,\n  newTarget: ObjectValue\n): ObjectValue {\n  // 1. Let handler be the value of the [[ProxyHandler]] internal slot of O.\n  let handler = O.$ProxyHandler;\n\n  // 2. If handler is null, throw a TypeError exception.\n  if (handler instanceof NullValue) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Assert: Type(handler) is Object.\n  invariant(handler instanceof ObjectValue, \"expected an object\");\n\n  // 4. Let target be the value of the [[ProxyTarget]] internal slot of O.\n  let target = O.$ProxyTarget;\n  invariant(target instanceof ObjectValue);\n\n  // 5. Let trap be ? GetMethod(handler, \"construct\").\n  let trap = GetMethod(realm, handler, \"construct\");\n\n  // 6. If trap is undefined, then\n  if (trap instanceof UndefinedValue) {\n    // a. Assert: target has a [[Construct]] internal method.\n    invariant(target.$Construct, \"expected construct method\");\n\n    // b. Return ? Construct(target, argumentsList, newTarget).\n    return Construct(realm, target, argumentsList, newTarget).throwIfNotConcreteObject();\n  }\n\n  // 7. Let argArray be CreateArrayFromList(argumentsList).\n  let argArray = Create.CreateArrayFromList(realm, argumentsList);\n\n  // 8. Let newObj be ? Call(trap, handler, « target, argArray, newTarget »).\n  let newObj = Call(realm, trap.throwIfNotConcrete(), handler, [target, argArray, newTarget]).throwIfNotConcrete();\n\n  // 9. If Type(newObj) is not Object, throw a TypeError exception.\n  if (!(newObj instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 10. Return newObj.\n  return newObj;\n}\n\n// ECMA262 9.5.14\nexport function ProxyCreate(realm: Realm, _target: Value, _handler: Value): ProxyValue {\n  let handler = _handler;\n  let target = _target.throwIfNotConcrete();\n\n  // 1. If Type(target) is not Object, throw a TypeError exception.\n  if (!(target instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. If target is a Proxy exotic object and the value of the [[ProxyHandler]] internal slot of target is null, throw a TypeError exception.\n  if (target instanceof ProxyValue && (!target.$ProxyHandler || target.$ProxyHandler instanceof NullValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  handler = handler.throwIfNotConcrete();\n  // 3. If Type(handler) is not Object, throw a TypeError exception.\n  if (!(handler instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 4. If handler is a Proxy exotic object and the value of the [[ProxyHandler]] internal slot of handler is null, throw a TypeError exception.\n  if (handler instanceof ProxyValue && (!handler.$ProxyHandler || handler.$ProxyHandler instanceof NullValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 5. Let P be a newly created object.\n  // 6. Set P's essential internal methods (except for [[Call]] and [[Construct]]) to the definitions specified in 9.5.\n  let P = new ProxyValue(realm);\n\n  // 7. If IsCallable(target) is true, then\n  if (IsCallable(realm, target)) {\n    // a. Set the [[Call]] internal method of P as specified in 9.5.12.\n    P.$Call = (thisArgument, argsList) => {\n      return ProxyCall(realm, P, thisArgument, argsList);\n    };\n\n    // b. If target has a [[Construct]] internal method, then\n    if (target.$Construct) {\n      // i. Set the [[Construct]] internal method of P as specified in 9.5.13.\n      P.$Construct = (argumentsList, newTarget) => {\n        return ProxyConstruct(realm, P, argumentsList, newTarget);\n      };\n    }\n  }\n\n  // 8. Set the [[ProxyTarget]] internal slot of P to target.\n  P.$ProxyTarget = target;\n\n  // 9. Set the [[ProxyHandler]] internal slot of P to handler.\n  P.$ProxyHandler = handler;\n\n  // 10. Return P.\n  return P;\n}\n"],"file":"proxy.js"}