{"version":3,"sources":["../../src/methods/join.js"],"names":["joinGenerators","joinCondition","generator1","generator2","realm","$Realm","result","Generator","pathConditions","empty","joinArrays","v1","v2","getAbstractValue","e","Value","joinArraysOfValues","joinArrayOfsMapEntries","a1","a2","intrinsics","n","Math","max","length","i","$Key","key1","$Value","val1","key2","val2","undefined","key3","val3","JoinImplementation","composeCompletions","leftCompletion","rightCompletion","AbruptCompletion","JoinedNormalAndAbruptCompletions","composedWith","pathConditionsAtCreation","c","consequent","SimpleNormalCompletion","a","alternate","joinedCompletion","joinCompletions","savedEffects","Completion","value","__bottomValue","composeWithEffects","completion","normalEffects","selectAbrupt","composableCompletions","makeSelectedCompletionsInfeasibleInCopy","composedNormalCompletion","selectNormal","nonComposableCompletions","nonComposedEffects","AbstractValue","createJoinConditionForSelectedCompletions","joinEffects","_collapseSimilarCompletions","c1","c2","EmptyValue","createFromConditionalOp","BreakCompletion","target","val","joinValues","expressionLocation","ContinueCompletion","ReturnCompletion","ThrowCompletion","location","mightNotBeTrue","mightNotBeFalse","JoinedAbruptCompletions","NormalCompletion","e1","e2","canBeApplied","generator","modifiedBindings","modifiedBindings1","modifiedProperties","modifiedProperties1","createdObjects","createdObjects1","modifiedBindings2","modifiedProperties2","createdObjects2","modifiedGenerator1","modifiedGenerator2","bindings","_joinBindings","properties","joinPropertyBindings","Set","forEach","o","add","Effects","joinValuesOfSelectedCompletions","selector","keepInfeasiblePaths","bottom","Path","withInverseCondition","simplifyAndRefineAbstractValue","withCondition","jv","containsSelectedCompletion","cjv","joinMaps","m1","m2","join","m3","Map","key","map1","get","set","map2","has","g1","g2","rewritten1","rewritten2","leak","b","g","v","rewritten","h","appendGenerator","emitBindingAssignment","b1","b2","l1","hasLeaked","l2","joinedBindings","Array","isArray","throwIfNotConcrete","d1","d2","object","descriptor","joinDescriptors","clone_with_abstract_value","d","AbstractJoinedDescriptor","dc","dcValue","InternalSlotDescriptor","elem0","map","d3","descriptor2","descriptor1","PropertyDescriptor","mapAndJoin","values","joinConditionFactory","functionToMap","size","joinedEffects","condition","effects","evaluateForEffects","applyEffects","returnOrThrowCompletion"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Binding } from \"../environment.js\";\nimport type { Bindings, BindingEntry, PropertyBindings, CreatedObjects, Realm } from \"../realm.js\";\nimport { construct_empty_effects, Effects } from \"../realm.js\";\nimport type { Descriptor, PropertyBinding } from \"../types.js\";\nimport {\n  cloneDescriptor,\n  equalDescriptors,\n  PropertyDescriptor,\n  AbstractJoinedDescriptor,\n  InternalSlotDescriptor,\n} from \"../descriptors.js\";\n\nimport {\n  AbruptCompletion,\n  BreakCompletion,\n  Completion,\n  ContinueCompletion,\n  JoinedAbruptCompletions,\n  JoinedNormalAndAbruptCompletions,\n  SimpleNormalCompletion,\n  NormalCompletion,\n  ReturnCompletion,\n  ThrowCompletion,\n} from \"../completions.js\";\nimport { IsDataDescriptor, StrictEqualityComparison } from \"../methods/index.js\";\nimport { Path } from \"../singletons.js\";\nimport { Generator } from \"../utils/generator.js\";\nimport { AbstractValue, ConcreteValue, EmptyValue, Value } from \"../values/index.js\";\n\nimport invariant from \"../invariant.js\";\n\nfunction joinGenerators(joinCondition: AbstractValue, generator1: Generator, generator2: Generator): Generator {\n  let realm = joinCondition.$Realm;\n  let result = new Generator(realm, \"joined\", realm.pathConditions);\n  if (!generator1.empty() || !generator2.empty()) {\n    result.joinGenerators(joinCondition, generator1, generator2);\n  }\n  return result;\n}\n\nfunction joinArrays(\n  realm: Realm,\n  v1: void | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }>,\n  v2: void | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }>,\n  getAbstractValue: (void | Value, void | Value) => Value\n): Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }> {\n  let e = (v1 && v1[0]) || (v2 && v2[0]);\n  if (e instanceof Value) return joinArraysOfValues(realm, (v1: any), (v2: any), getAbstractValue);\n  else return joinArrayOfsMapEntries(realm, (v1: any), (v2: any), getAbstractValue);\n}\n\nfunction joinArrayOfsMapEntries(\n  realm: Realm,\n  a1: void | Array<{ $Key: void | Value, $Value: void | Value }>,\n  a2: void | Array<{ $Key: void | Value, $Value: void | Value }>,\n  getAbstractValue: (void | Value, void | Value) => Value\n): Array<{ $Key: void | Value, $Value: void | Value }> {\n  let empty = realm.intrinsics.empty;\n  let n = Math.max((a1 && a1.length) || 0, (a2 && a2.length) || 0);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    let { $Key: key1, $Value: val1 } = (a1 && a1[i]) || { $Key: empty, $Value: empty };\n    let { $Key: key2, $Value: val2 } = (a2 && a2[i]) || { $Key: empty, $Value: empty };\n    if (key1 === undefined && key2 === undefined) {\n      result[i] = { $Key: undefined, $Value: undefined };\n    } else {\n      let key3 = getAbstractValue(key1, key2);\n      let val3 = getAbstractValue(val1, val2);\n      result[i] = { $Key: key3, $Value: val3 };\n    }\n  }\n  return result;\n}\n\nfunction joinArraysOfValues(\n  realm: Realm,\n  a1: void | Array<Value>,\n  a2: void | Array<Value>,\n  getAbstractValue: (void | Value, void | Value) => Value\n): Array<Value> {\n  let n = Math.max((a1 && a1.length) || 0, (a2 && a2.length) || 0);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result[i] = getAbstractValue((a1 && a1[i]) || undefined, (a2 && a2[i]) || undefined);\n  }\n  return result;\n}\n\nexport class JoinImplementation {\n  composeCompletions(leftCompletion: void | Completion | Value, rightCompletion: Completion | Value): Completion {\n    if (leftCompletion instanceof AbruptCompletion) return leftCompletion;\n    if (leftCompletion instanceof JoinedNormalAndAbruptCompletions) {\n      if (rightCompletion instanceof JoinedNormalAndAbruptCompletions) {\n        rightCompletion.composedWith = leftCompletion;\n        rightCompletion.pathConditionsAtCreation = leftCompletion.pathConditionsAtCreation;\n        return rightCompletion;\n      }\n      let c = this.composeCompletions(leftCompletion.consequent, rightCompletion);\n      if (c instanceof Value) c = new SimpleNormalCompletion(c);\n      let a = this.composeCompletions(leftCompletion.alternate, rightCompletion);\n      if (a instanceof Value) a = new SimpleNormalCompletion(a);\n      let joinedCompletion = this.joinCompletions(leftCompletion.joinCondition, c, a);\n      if (joinedCompletion instanceof JoinedNormalAndAbruptCompletions) {\n        joinedCompletion.composedWith = leftCompletion.composedWith;\n        joinedCompletion.pathConditionsAtCreation = leftCompletion.pathConditionsAtCreation;\n        joinedCompletion.savedEffects = leftCompletion.savedEffects;\n      }\n      return joinedCompletion;\n    }\n    if (leftCompletion instanceof Value) leftCompletion = new SimpleNormalCompletion(leftCompletion);\n    if (\n      leftCompletion instanceof Completion &&\n      leftCompletion.value === leftCompletion.value.$Realm.intrinsics.__bottomValue\n    ) {\n      return leftCompletion;\n    }\n    if (rightCompletion instanceof Value) rightCompletion = new SimpleNormalCompletion(rightCompletion);\n    return rightCompletion;\n  }\n\n  composeWithEffects(completion: Completion, normalEffects: Effects): Effects {\n    if (completion instanceof JoinedNormalAndAbruptCompletions) {\n      let selectAbrupt = c => c instanceof AbruptCompletion && c.value !== c.value.$Realm.intrinsics.__bottomValue;\n      let composableCompletions = Completion.makeSelectedCompletionsInfeasibleInCopy(selectAbrupt, completion);\n      let composedNormalCompletion = this.composeCompletions(composableCompletions, normalEffects.result);\n      normalEffects.result = composedNormalCompletion;\n\n      let selectNormal = c =>\n        c instanceof SimpleNormalCompletion && c.value !== c.value.$Realm.intrinsics.__bottomValue;\n      let nonComposableCompletions = Completion.makeSelectedCompletionsInfeasibleInCopy(selectNormal, completion);\n      let nonComposedEffects = construct_empty_effects(completion.value.$Realm, nonComposableCompletions);\n\n      let joinCondition = AbstractValue.createJoinConditionForSelectedCompletions(selectNormal, completion);\n      return this.joinEffects(joinCondition, normalEffects, nonComposedEffects);\n    } else if (completion instanceof AbruptCompletion) {\n      return construct_empty_effects(completion.value.$Realm, completion);\n    } else {\n      return normalEffects;\n    }\n  }\n\n  _collapseSimilarCompletions(joinCondition: AbstractValue, c1: Completion, c2: Completion): void | Completion {\n    let realm = joinCondition.$Realm;\n    let getAbstractValue = (v1: void | Value, v2: void | Value): Value => {\n      if (v1 instanceof EmptyValue) return v2 || realm.intrinsics.undefined;\n      if (v2 instanceof EmptyValue) return v1 || realm.intrinsics.undefined;\n      return AbstractValue.createFromConditionalOp(realm, joinCondition, v1, v2);\n    };\n    if (c1 instanceof BreakCompletion && c2 instanceof BreakCompletion && c1.target === c2.target) {\n      let val = this.joinValues(realm, c1.value, c2.value, getAbstractValue);\n      invariant(val instanceof Value);\n      return new BreakCompletion(val, joinCondition.expressionLocation, c1.target);\n    }\n    if (c1 instanceof ContinueCompletion && c2 instanceof ContinueCompletion && c1.target === c2.target) {\n      return new ContinueCompletion(realm.intrinsics.empty, joinCondition.expressionLocation, c1.target);\n    }\n    if (c1 instanceof ReturnCompletion && c2 instanceof ReturnCompletion) {\n      let val = this.joinValues(realm, c1.value, c2.value, getAbstractValue);\n      invariant(val instanceof Value);\n      return new ReturnCompletion(val, joinCondition.expressionLocation);\n    }\n    if (c1 instanceof ThrowCompletion && c2 instanceof ThrowCompletion) {\n      getAbstractValue = (v1: void | Value, v2: void | Value) => {\n        return AbstractValue.createFromConditionalOp(realm, joinCondition, v1, v2);\n      };\n      let val = this.joinValues(realm, c1.value, c2.value, getAbstractValue);\n      invariant(val instanceof Value);\n      return new ThrowCompletion(val, c1.location);\n    }\n    if (c1 instanceof SimpleNormalCompletion && c2 instanceof SimpleNormalCompletion) {\n      return new SimpleNormalCompletion(getAbstractValue(c1.value, c2.value));\n    }\n    return undefined;\n  }\n\n  joinCompletions(joinCondition: Value, c1: Completion, c2: Completion): Completion {\n    if (!joinCondition.mightNotBeTrue()) return c1;\n    if (!joinCondition.mightNotBeFalse()) return c2;\n    invariant(joinCondition instanceof AbstractValue);\n\n    let c = this._collapseSimilarCompletions(joinCondition, c1, c2);\n    if (c === undefined) {\n      if (c1 instanceof AbruptCompletion && c2 instanceof AbruptCompletion)\n        c = new JoinedAbruptCompletions(joinCondition, c1, c2);\n      else {\n        invariant(c1 instanceof AbruptCompletion || c1 instanceof NormalCompletion);\n        invariant(c2 instanceof AbruptCompletion || c2 instanceof NormalCompletion);\n        c = new JoinedNormalAndAbruptCompletions(joinCondition, c1, c2);\n      }\n    }\n    return c;\n  }\n\n  joinEffects(joinCondition: Value, e1: Effects, e2: Effects): Effects {\n    invariant(e1.canBeApplied);\n    invariant(e2.canBeApplied);\n    if (!joinCondition.mightNotBeTrue()) return e1;\n    if (!joinCondition.mightNotBeFalse()) return e2;\n    invariant(joinCondition instanceof AbstractValue);\n\n    let {\n      result: c1,\n      generator: generator1,\n      modifiedBindings: modifiedBindings1,\n      modifiedProperties: modifiedProperties1,\n      createdObjects: createdObjects1,\n    } = e1;\n\n    let {\n      result: c2,\n      generator: generator2,\n      modifiedBindings: modifiedBindings2,\n      modifiedProperties: modifiedProperties2,\n      createdObjects: createdObjects2,\n    } = e2;\n\n    let realm = joinCondition.$Realm;\n\n    let c = this.joinCompletions(joinCondition, c1, c2);\n\n    let [modifiedGenerator1, modifiedGenerator2, bindings] = this._joinBindings(\n      joinCondition,\n      generator1,\n      modifiedBindings1,\n      generator2,\n      modifiedBindings2\n    );\n\n    let generator = joinGenerators(joinCondition, modifiedGenerator1, modifiedGenerator2);\n\n    let properties = this.joinPropertyBindings(\n      realm,\n      joinCondition,\n      modifiedProperties1,\n      modifiedProperties2,\n      createdObjects1,\n      createdObjects2\n    );\n    let createdObjects = new Set();\n    createdObjects1.forEach(o => {\n      createdObjects.add(o);\n    });\n    createdObjects2.forEach(o => {\n      createdObjects.add(o);\n    });\n\n    return new Effects(c, generator, bindings, properties, createdObjects);\n  }\n\n  joinValuesOfSelectedCompletions(\n    selector: Completion => boolean,\n    completion: Completion,\n    keepInfeasiblePaths: boolean = false\n  ): Value {\n    let realm = completion.value.$Realm;\n    let bottom = realm.intrinsics.__bottomValue;\n    if (completion instanceof JoinedAbruptCompletions || completion instanceof JoinedNormalAndAbruptCompletions) {\n      let joinCondition = completion.joinCondition;\n      let c = this.joinValuesOfSelectedCompletions(selector, completion.consequent);\n      let a = this.joinValuesOfSelectedCompletions(selector, completion.alternate);\n      // do some simplification\n      if (c === bottom) {\n        // joinCondition will never be true when this completion is reached\n        if (a instanceof AbstractValue) {\n          a = Path.withInverseCondition(joinCondition, () => {\n            invariant(a instanceof AbstractValue);\n            return realm.simplifyAndRefineAbstractValue(a);\n          });\n        }\n        if (!keepInfeasiblePaths) return a;\n      } else if (a === bottom) {\n        // joinCondition will never be false when this completion is reached\n        if (c instanceof AbstractValue) {\n          c = Path.withCondition(joinCondition, () => {\n            invariant(c instanceof AbstractValue);\n            return realm.simplifyAndRefineAbstractValue(c);\n          });\n        }\n        if (!keepInfeasiblePaths) return c;\n      }\n      let getAbstractValue = (v1: void | Value, v2: void | Value): Value => {\n        if (v1 === bottom) v1 = realm.intrinsics.empty;\n        if (v2 === bottom) v2 = realm.intrinsics.empty;\n        return AbstractValue.createFromConditionalOp(realm, joinCondition, v1, v2);\n      };\n      let jv = this.joinValues(realm, c, a, getAbstractValue);\n      invariant(jv instanceof Value);\n      if (completion instanceof JoinedNormalAndAbruptCompletions && completion.composedWith !== undefined) {\n        let composedWith = completion.composedWith;\n        if (!composedWith.containsSelectedCompletion(selector)) return jv;\n        let cjv = this.joinValuesOfSelectedCompletions(selector, composedWith);\n        joinCondition = AbstractValue.createJoinConditionForSelectedCompletions(selector, composedWith);\n        jv = this.joinValues(realm, jv, cjv, getAbstractValue);\n        invariant(jv instanceof Value);\n      }\n      return jv;\n    }\n    if (selector(completion)) return completion.value;\n    return bottom;\n  }\n\n  // Creates a single map that joins together maps m1 and m2 using the given join\n  // operator. If an entry is present in one map but not the other, the missing\n  // entry is treated as if it were there and its value were undefined.\n  joinMaps<K, V>(m1: Map<K, V>, m2: Map<K, V>, join: (K, void | V, void | V) => V): Map<K, V> {\n    let m3: Map<K, V> = new Map();\n    m1.forEach((val1, key, map1) => {\n      let val2 = m2.get(key);\n      let val3 = join(key, val1, val2);\n      m3.set(key, val3);\n    });\n    m2.forEach((val2, key, map2) => {\n      if (!m1.has(key)) {\n        m3.set(key, join(key, undefined, val2));\n      }\n    });\n    return m3;\n  }\n\n  // Creates a single map that has an key, value pair for the union of the key\n  // sets of m1 and m2. The value of a pair is the join of m1[key] and m2[key]\n  // where the join is defined to be just m1[key] if m1[key] === m2[key] and\n  // and abstract value with expression \"joinCondition ? m1[key] : m2[key]\" if not.\n  _joinBindings(\n    joinCondition: AbstractValue,\n    g1: Generator,\n    m1: Bindings,\n    g2: Generator,\n    m2: Bindings\n  ): [Generator, Generator, Bindings] {\n    let realm = joinCondition.$Realm;\n    let getAbstractValue = (v1: void | Value, v2: void | Value) => {\n      return AbstractValue.createFromConditionalOp(realm, joinCondition, v1, v2, undefined, true, true);\n    };\n    let rewritten1 = false;\n    let rewritten2 = false;\n    let leak = (b: Binding, g: Generator, v: void | Value, rewritten: boolean) => {\n      // just like to what happens in leakBinding, we are going to append a\n      // binding-assignment generator entry; however, we play it safe and don't\n      // mutate the generator; instead, we create a new one that wraps around the old one.\n      if (!rewritten) {\n        let h = new Generator(realm, \"RewrittenToAppendBindingAssignments\", g.pathConditions);\n        if (!g.empty()) h.appendGenerator(g, \"\");\n        g = h;\n        rewritten = true;\n      }\n      if (v !== undefined && v !== realm.intrinsics.undefined) g.emitBindingAssignment(b, v);\n      return [g, rewritten];\n    };\n    let join = (b: Binding, b1: void | BindingEntry, b2: void | BindingEntry) => {\n      let l1 = b1 === undefined ? b.hasLeaked : b1.hasLeaked;\n      let l2 = b2 === undefined ? b.hasLeaked : b2.hasLeaked;\n      let v1 = b1 === undefined ? b.value : b1.value;\n      let v2 = b2 === undefined ? b.value : b2.value;\n      // ensure that if either none or both sides have leaked\n      // note that if one side didn't have a binding entry yet, then there's nothing to actively leak\n      if (!l1 && l2) [g1, rewritten1] = leak(b, g1, v1, rewritten1);\n      else if (l1 && !l2) [g2, rewritten2] = leak(b, g2, v2, rewritten2);\n      let hasLeaked = l1 || l2;\n      // For leaked (and mutable) bindings, the actual value is no longer directly available.\n      // In that case, we reset the value to undefined to prevent any use of the last known value.\n      let value = hasLeaked ? undefined : this.joinValues(realm, v1, v2, getAbstractValue);\n      invariant(value === undefined || value instanceof Value);\n      return { hasLeaked, value };\n    };\n    let joinedBindings = this.joinMaps(m1, m2, join);\n    return [g1, g2, joinedBindings];\n  }\n\n  // If v1 is known and defined and v1 === v2 return v1,\n  // otherwise return getAbstractValue(v1, v2)\n  joinValues(\n    realm: Realm,\n    v1: void | Value | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }>,\n    v2: void | Value | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }>,\n    getAbstractValue: (void | Value, void | Value) => Value\n  ): Value | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }> {\n    if (Array.isArray(v1) || Array.isArray(v2)) {\n      invariant(v1 === undefined || Array.isArray(v1));\n      invariant(v2 === undefined || Array.isArray(v2));\n      return joinArrays(realm, ((v1: any): void | Array<Value>), ((v2: any): void | Array<Value>), getAbstractValue);\n    }\n    invariant(v1 === undefined || v1 instanceof Value);\n    invariant(v2 === undefined || v2 instanceof Value);\n    if (\n      v1 !== undefined &&\n      v2 !== undefined &&\n      !(v1 instanceof AbstractValue) &&\n      !(v2 instanceof AbstractValue) &&\n      StrictEqualityComparison(realm, v1.throwIfNotConcrete(), v2.throwIfNotConcrete())\n    ) {\n      return v1;\n    } else {\n      return getAbstractValue(v1, v2);\n    }\n  }\n\n  joinPropertyBindings(\n    realm: Realm,\n    joinCondition: AbstractValue,\n    m1: PropertyBindings,\n    m2: PropertyBindings,\n    c1: CreatedObjects,\n    c2: CreatedObjects\n  ): PropertyBindings {\n    let join = (b: PropertyBinding, d1: void | Descriptor, d2: void | Descriptor) => {\n      // If the PropertyBinding object has been freshly allocated do not join\n      if (d1 === undefined) {\n        if (c2.has(b.object)) return d2; // no join\n        if (b.descriptor !== undefined && m1.has(b)) {\n          // property was deleted\n          d1 = cloneDescriptor(b.descriptor.throwIfNotConcrete(realm));\n          invariant(d1 !== undefined);\n          d1.value = realm.intrinsics.empty;\n        } else {\n          // no write to property\n          d1 = b.descriptor; //Get value of property before the split\n        }\n      }\n      if (d2 === undefined) {\n        if (c1.has(b.object)) return d1; // no join\n        if (b.descriptor !== undefined && m2.has(b)) {\n          // property was deleted\n          d2 = cloneDescriptor(b.descriptor.throwIfNotConcrete(realm));\n          invariant(d2 !== undefined);\n          d2.value = realm.intrinsics.empty;\n        } else {\n          // no write to property\n          d2 = b.descriptor; //Get value of property before the split\n        }\n      }\n      return this.joinDescriptors(realm, joinCondition, d1, d2);\n    };\n    return this.joinMaps(m1, m2, join);\n  }\n\n  joinDescriptors(\n    realm: Realm,\n    joinCondition: AbstractValue,\n    d1: void | Descriptor,\n    d2: void | Descriptor\n  ): void | Descriptor {\n    let getAbstractValue = (v1: void | Value, v2: void | Value) => {\n      return AbstractValue.createFromConditionalOp(realm, joinCondition, v1, v2);\n    };\n    let clone_with_abstract_value = (d: Descriptor) => {\n      invariant(d === d1 || d === d2);\n      if (!IsDataDescriptor(realm, d)) {\n        return new AbstractJoinedDescriptor(joinCondition);\n      }\n      let dc;\n      let dcValue;\n      if (d instanceof InternalSlotDescriptor) {\n        dc = new InternalSlotDescriptor(d.value);\n        dcValue = dc.value;\n        if (Array.isArray(dcValue)) {\n          invariant(dcValue.length > 0);\n          let elem0 = dcValue[0];\n          if (elem0 instanceof Value) {\n            dc.value = dcValue.map(e => {\n              return d === d1\n                ? getAbstractValue((e: any), realm.intrinsics.empty)\n                : getAbstractValue(realm.intrinsics.empty, (e: any));\n            });\n          } else {\n            dc.value = dcValue.map(e => {\n              let { $Key: key1, $Value: val1 } = (e: any);\n              let key3 =\n                d === d1\n                  ? getAbstractValue(key1, realm.intrinsics.empty)\n                  : getAbstractValue(realm.intrinsics.empty, key1);\n              let val3 =\n                d === d1\n                  ? getAbstractValue(val1, realm.intrinsics.empty)\n                  : getAbstractValue(realm.intrinsics.empty, val1);\n              return { $Key: key3, $Value: val3 };\n            });\n          }\n        }\n      } else {\n        dc = cloneDescriptor(d.throwIfNotConcrete(realm));\n        invariant(dc !== undefined);\n        dcValue = dc.value;\n      }\n      invariant(dcValue === undefined || dcValue instanceof Value);\n      dc.value =\n        d === d1\n          ? getAbstractValue(dcValue, realm.intrinsics.empty)\n          : getAbstractValue(realm.intrinsics.empty, dcValue);\n      return dc;\n    };\n    if (d1 === undefined) {\n      if (d2 === undefined) return undefined;\n      // d2 is a new property created in only one branch, join with empty\n      let d3 = clone_with_abstract_value(d2);\n      if (d3 instanceof AbstractJoinedDescriptor) d3.descriptor2 = d2;\n      return d3;\n    } else if (d2 === undefined) {\n      invariant(d1 !== undefined);\n      // d1 is a new property created in only one branch, join with empty\n      let d3 = clone_with_abstract_value(d1);\n      if (d3 instanceof AbstractJoinedDescriptor) d3.descriptor1 = d1;\n      return d3;\n    } else {\n      if (\n        d1 instanceof PropertyDescriptor &&\n        d2 instanceof PropertyDescriptor &&\n        equalDescriptors(d1, d2) &&\n        IsDataDescriptor(realm, d1)\n      ) {\n        let dc = cloneDescriptor(d1);\n        invariant(dc !== undefined);\n        let dcValue = this.joinValues(realm, d1.value, d2.value, getAbstractValue);\n        invariant(dcValue instanceof Value);\n        dc.value = dcValue;\n        return dc;\n      }\n      if (d1 instanceof InternalSlotDescriptor && d2 instanceof InternalSlotDescriptor) {\n        return new InternalSlotDescriptor(this.joinValues(realm, d1.value, d2.value, getAbstractValue));\n      }\n      return new AbstractJoinedDescriptor(joinCondition, d1, d2);\n    }\n  }\n\n  mapAndJoin(\n    realm: Realm,\n    values: Set<ConcreteValue>,\n    joinConditionFactory: ConcreteValue => Value,\n    functionToMap: ConcreteValue => Completion | Value\n  ): Value {\n    invariant(values.size > 1);\n    let joinedEffects;\n    for (let val of values) {\n      let condition = joinConditionFactory(val);\n      let effects = realm.evaluateForEffects(\n        () => {\n          invariant(condition instanceof AbstractValue);\n          return Path.withCondition(condition, () => {\n            return functionToMap(val);\n          });\n        },\n        undefined,\n        \"mapAndJoin\"\n      );\n      joinedEffects = joinedEffects === undefined ? effects : this.joinEffects(condition, effects, joinedEffects);\n    }\n    invariant(joinedEffects !== undefined);\n    realm.applyEffects(joinedEffects);\n    return realm.returnOrThrowCompletion(joinedEffects.result);\n  }\n}\n"],"file":"join.js"}