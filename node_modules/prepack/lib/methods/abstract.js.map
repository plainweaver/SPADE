{"version":3,"sources":["../../src/methods/abstract.js"],"names":["URIReserved","URIAlpha","DecimalDigit","URIMark","URIUnescaped","SplitMatch","realm","S","q","R","r","length","s","i","RequireObjectCoercible","arg","argLoc","mightNotBeNull","mightNotBeUndefined","createErrorThrowCompletion","intrinsics","TypeError","AbstractValue","mightBeNull","mightBeUndefined","isInPureScope","error","CompilerDiagnostic","describe","handleError","FatalError","throwIfNotConcrete","HasSameType","x","y","xType","getType","yType","IntegralValue","NumberValue","AbstractRelationalComparison","LeftFirst","op","px","py","To","ToPrimitiveOrAbstract","res","createFromBinaryOp","BooleanValue","UndefinedValue","StringValue","value","startsWith","false","true","k","charCodeAt","m","n","nx","ToNumber","ny","isNaN","undefined","Object","is","AbstractEqualityComparison","strictResult","StrictEqualityComparison","NullValue","SymbolValue","ObjectValue","SameValueNonNumber","StrictEqualityComparisonPartial","SameValueZero","SameValueZeroPartial","SameValue","SameValuePartial","SamePropertyKey","Add","a","b","subtract","NaN","anum","bnum","createFromNumberValue","InstanceofOperator","O","C","mightBeObject","instOfHandler","SymbolHasInstance","ToBooleanPartial","OrdinaryHasInstance","BoundFunctionValue","BC","$BoundTargetFunction","P","$GetPrototypeOf","Type","val","mightNotBeObject","reportIntrospectionError","SymbolDescriptiveString","sym","desc","$Description","throwIfNotConcreteString","UpdateEmpty","completionRecord","ReturnCompletion","ThrowCompletion","EmptyValue","Value"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { PropertyKeyValue } from \"../types.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport {\n  BoundFunctionValue,\n  EmptyValue,\n  NumberValue,\n  IntegralValue,\n  SymbolValue,\n  StringValue,\n  NullValue,\n  ObjectValue,\n  Value,\n  BooleanValue,\n  UndefinedValue,\n  ConcreteValue,\n  AbstractValue,\n} from \"../values/index.js\";\nimport { Call } from \"./call.js\";\nimport { IsCallable } from \"./is.js\";\nimport { Completion, ReturnCompletion, ThrowCompletion } from \"../completions.js\";\nimport { GetMethod, Get } from \"./get.js\";\nimport { HasCompatibleType } from \"./has.js\";\nimport { To } from \"../singletons.js\";\nimport type { BabelNodeSourceLocation, BabelBinaryOperator } from \"@babel/types\";\nimport invariant from \"../invariant.js\";\n\nexport const URIReserved = \";/?:@&=+$,\";\nexport const URIAlpha = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nexport const DecimalDigit = \"0123456789\";\nexport const URIMark = \"-_.!~*'()\";\nexport const URIUnescaped = URIAlpha + DecimalDigit + URIMark;\n\n// ECMA262 21.1.3.17.1\nexport function SplitMatch(realm: Realm, S: string, q: number, R: string): false | number {\n  // 1. Assert: Type(R) is String.\n  invariant(typeof R === \"string\", \"expected a string\");\n\n  // 2. Let r be the number of code units in R.\n  let r = R.length;\n\n  // 3. Let s be the number of code units in S.\n  let s = S.length;\n\n  // 4. If q+r > s, return false.\n  if (q + r > s) return false;\n\n  // 5. If there exists an integer i between 0 (inclusive) and r (exclusive) such that the code unit at index\n  //    q+i of S is different from the code unit at index i of R, return false.\n  for (let i = 0; i < r; i++) {\n    if (S[q + i] !== R[i]) {\n      return false;\n    }\n  }\n\n  // 6. Return q+r.\n  return q + r;\n}\n\n// ECMA262 7.2.1\nexport function RequireObjectCoercible(\n  realm: Realm,\n  arg: Value,\n  argLoc?: ?BabelNodeSourceLocation\n): AbstractValue | ObjectValue | BooleanValue | StringValue | SymbolValue | NumberValue {\n  if (!arg.mightNotBeNull() || !arg.mightNotBeUndefined()) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"null or undefined\");\n  }\n  if (arg instanceof AbstractValue && (arg.mightBeNull() || arg.mightBeUndefined())) {\n    if (realm.isInPureScope()) {\n      // In a pure function it is ok to throw if this happens to be null or undefined.\n      return arg;\n    }\n    if (argLoc) {\n      let error = new CompilerDiagnostic(\n        `member expression object ${AbstractValue.describe(arg)} is unknown`,\n        argLoc,\n        \"PP0012\",\n        \"FatalError\"\n      );\n      realm.handleError(error);\n      throw new FatalError();\n    }\n    arg.throwIfNotConcrete();\n  }\n  return (arg: any);\n}\n\nexport function HasSameType(x: ConcreteValue, y: ConcreteValue): boolean {\n  const xType = x.getType();\n  const yType = y.getType();\n  return (\n    xType === yType ||\n    ((xType === IntegralValue || xType === NumberValue) && (yType === IntegralValue || yType === NumberValue))\n  );\n}\n\n// ECMA262 7.2.12 Abstract Relational Comparison\nexport function AbstractRelationalComparison(\n  realm: Realm,\n  x: ConcreteValue,\n  y: ConcreteValue,\n  LeftFirst: boolean,\n  op: BabelBinaryOperator\n): BooleanValue | UndefinedValue | AbstractValue {\n  let px, py;\n\n  // 1. If the LeftFirst flag is true, then\n  if (LeftFirst) {\n    // a. Let px be ? ToPrimitive(x, hint Number).\n    px = To.ToPrimitiveOrAbstract(realm, x, \"number\");\n\n    // b. Let py be ? ToPrimitive(y, hint Number).\n    py = To.ToPrimitiveOrAbstract(realm, y, \"number\");\n  } else {\n    // 2. Else the order of evaluation needs to be reversed to preserve left to right evaluation\n    // a. Let py be ? ToPrimitive(y, hint Number).\n    py = To.ToPrimitiveOrAbstract(realm, y, \"number\");\n\n    // b. Let px be ? ToPrimitive(x, hint Number).\n    px = To.ToPrimitiveOrAbstract(realm, x, \"number\");\n  }\n\n  if (px instanceof AbstractValue || py instanceof AbstractValue) {\n    let res;\n    if (LeftFirst) {\n      res = AbstractValue.createFromBinaryOp(realm, op, px, py);\n    } else {\n      res = AbstractValue.createFromBinaryOp(realm, op, py, px);\n    }\n    invariant(res instanceof BooleanValue || res instanceof UndefinedValue || res instanceof AbstractValue);\n    return res;\n  }\n\n  // 3. If both px and py are Strings, then\n  if (px instanceof StringValue && py instanceof StringValue) {\n    // a. If py is a prefix of px, return false. (A String value p is a prefix of String value q if q can be the result of concatenating p and some other String r. Note that any String is a prefix of itself, because r may be the empty String.)\n    if (px.value.startsWith(py.value)) return realm.intrinsics.false;\n\n    // b. If px is a prefix of py, return true.\n    if (py.value.startsWith(px.value)) return realm.intrinsics.true;\n\n    // c. Let k be the smallest nonnegative integer such that the code unit at index k within px is different from the code unit at index k within py. (There must be such a k, for neither String is a prefix of the other.)\n    let k = 0;\n    while (px.value.charCodeAt(k) === py.value.charCodeAt(k)) {\n      k += 1;\n    }\n\n    // d. Let m be the integer that is the code unit value at index k within px.\n    let m = px.value.charCodeAt(k);\n\n    // e. Let n be the integer that is the code unit value at index k within py.\n    let n = py.value.charCodeAt(k);\n\n    // f. If m < n, return true. Otherwise, return false.\n    return m < n ? realm.intrinsics.true : realm.intrinsics.false;\n  } else {\n    // 4. Else,\n    // a. Let nx be ? ToNumber(px). Because px and py are primitive values evaluation order is not important.\n    let nx = To.ToNumber(realm, px);\n\n    // b. Let ny be ? ToNumber(py).\n    let ny = To.ToNumber(realm, py);\n\n    // c. If nx is NaN, return undefined.\n    if (isNaN(nx)) return realm.intrinsics.undefined;\n\n    // d. If ny is NaN, return undefined.\n    if (isNaN(ny)) return realm.intrinsics.undefined;\n\n    // e. If nx and ny are the same Number value, return false.\n    if (Object.is(nx, ny)) {\n      return realm.intrinsics.false;\n    }\n\n    // f. If nx is +0 and ny is -0, return false.\n    if (Object.is(nx, +0) && Object.is(ny, -0)) {\n      return realm.intrinsics.false;\n    }\n\n    // g. If nx is -0 and ny is +0, return false.\n    if (Object.is(nx, -0) && Object.is(ny, +0)) {\n      return realm.intrinsics.false;\n    }\n\n    // h. If nx is +∞, return false.\n    // i. If ny is +∞, return true.\n    // j. If ny is -∞, return false.\n    // k. If nx is -∞, return true.\n\n    // i. If the mathematical value of nx is less than the mathematical value of ny —note that these\n    //    mathematical values are both finite and not both zero—return true. Otherwise, return false.\n    if (nx < ny) {\n      return realm.intrinsics.true;\n    } else {\n      return realm.intrinsics.false;\n    }\n  }\n}\n\n// ECMA262 7.2.13\nexport function AbstractEqualityComparison(\n  realm: Realm,\n  x: ConcreteValue,\n  y: ConcreteValue,\n  op: BabelBinaryOperator\n): BooleanValue | AbstractValue {\n  // 1. If Type(x) is the same as Type(y), then\n  if (HasSameType(x, y)) {\n    // a. Return the result of performing Strict Equality Comparison x === y.\n    const strictResult = StrictEqualityComparison(realm, x, y);\n    return new BooleanValue(realm, op === \"==\" ? strictResult : !strictResult);\n  }\n\n  // 2. If x is null and y is undefined, return true.\n  if (x instanceof NullValue && y instanceof UndefinedValue) {\n    return new BooleanValue(realm, op === \"==\");\n  }\n\n  // 3. If x is undefined and y is null, return true.\n  if (x instanceof UndefinedValue && y instanceof NullValue) {\n    return new BooleanValue(realm, op === \"==\");\n  }\n\n  // 4. If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y).\n  if (x instanceof NumberValue && y instanceof StringValue) {\n    return AbstractEqualityComparison(realm, x, new NumberValue(realm, To.ToNumber(realm, y)), op);\n  }\n\n  // 5. If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y.\n  if (x instanceof StringValue && y instanceof NumberValue) {\n    return AbstractEqualityComparison(realm, new NumberValue(realm, To.ToNumber(realm, x)), y, op);\n  }\n\n  // 6. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.\n  if (x instanceof BooleanValue) {\n    return AbstractEqualityComparison(realm, new NumberValue(realm, To.ToNumber(realm, x)), y, op);\n  }\n\n  // 7. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).\n  if (y instanceof BooleanValue) {\n    return AbstractEqualityComparison(realm, x, new NumberValue(realm, To.ToNumber(realm, y)), op);\n  }\n\n  // 8. If Type(x) is either String, Number, or Symbol and Type(y) is Object, return the result of the comparison x == ToPrimitive(y).\n  if ((x instanceof StringValue || x instanceof NumberValue || x instanceof SymbolValue) && y instanceof ObjectValue) {\n    const py = To.ToPrimitiveOrAbstract(realm, y);\n    if (py instanceof AbstractValue) {\n      let res = AbstractValue.createFromBinaryOp(realm, \"==\", x, py);\n      invariant(res instanceof BooleanValue || res instanceof AbstractValue);\n      return res;\n    }\n    return AbstractEqualityComparison(realm, x, py, op);\n  }\n\n  // 9. If Type(x) is Object and Type(y) is either String, Number, or Symbol, return the result of the comparison ToPrimitive(x) == y.\n  if (x instanceof ObjectValue && (y instanceof StringValue || y instanceof NumberValue || y instanceof SymbolValue)) {\n    const px = To.ToPrimitiveOrAbstract(realm, x);\n    if (px instanceof AbstractValue) {\n      let res = AbstractValue.createFromBinaryOp(realm, \"==\", px, y);\n      invariant(res instanceof BooleanValue || res instanceof AbstractValue);\n      return res;\n    }\n    return AbstractEqualityComparison(realm, px, y, op);\n  }\n\n  // 10. Return false.\n  return new BooleanValue(realm, op !== \"==\");\n}\n\n// ECMA262 7.2.14 Strict Equality Comparison\nexport function StrictEqualityComparison(realm: Realm, x: ConcreteValue, y: ConcreteValue): boolean {\n  // 1. If Type(x) is different from Type(y), return false.\n  if (!HasSameType(x, y)) {\n    return false;\n  }\n\n  // 2. If Type(x) is Number, then\n  if (x instanceof NumberValue && y instanceof NumberValue) {\n    // a. If x is NaN, return false.\n    if (isNaN(x.value)) return false;\n\n    // b. If y is NaN, return false.\n    if (isNaN(y.value)) return false;\n\n    // c. If x is the same Number value as y, return true.\n    // d. If x is +0 and y is -0, return true. (handled by c)\n    // e. If x is -0 and y is +0, return true. (handled by c)\n    if (x.value === y.value) return true;\n\n    // f. Return false.\n    return false;\n  }\n\n  // 3. Return SameValueNonNumber(x, y).\n  return SameValueNonNumber(realm, x, y);\n}\n\nexport function StrictEqualityComparisonPartial(realm: Realm, x: Value, y: Value): boolean {\n  return StrictEqualityComparison(realm, x.throwIfNotConcrete(), y.throwIfNotConcrete());\n}\n\n// ECMA262 7.2.10\nexport function SameValueZero(realm: Realm, x: ConcreteValue, y: ConcreteValue): boolean {\n  // 1. If Type(x) is different from Type(y), return false.\n  if (!HasSameType(x, y)) {\n    return false;\n  }\n\n  // 2. If Type(x) is Number, then\n  if (x instanceof NumberValue) {\n    invariant(y instanceof NumberValue);\n\n    // a. If x is NaN and y is NaN, return true.\n    if (isNaN(x.value) && isNaN(y.value)) return true;\n\n    // b. If x is +0 and y is -0, return true.\n    if (Object.is(x.value, +0) && Object.is(y.value, -0)) return true;\n\n    // c. If x is -0 and y is +0, return true.\n    if (Object.is(x.value, -0) && Object.is(y.value, +0)) return true;\n\n    // d. If x is the same Number value as y, return true.\n    if (x.value === y.value) return true;\n\n    // e. Return false.\n    return false;\n  }\n\n  // 3. Return SameValueNonNumber(x, y).\n  return SameValueNonNumber(realm, x, y);\n}\n\nexport function SameValueZeroPartial(realm: Realm, x: Value, y: Value): boolean {\n  return SameValueZero(realm, x.throwIfNotConcrete(), y.throwIfNotConcrete());\n}\n\n// ECMA262 7.2.9\nexport function SameValue(realm: Realm, x: ConcreteValue, y: ConcreteValue): boolean {\n  // 1. If Type(x) is different from Type(y), return false.\n  if (!HasSameType(x, y)) {\n    return false;\n  }\n\n  // 2. If Type(x) is Number, then\n  if (x instanceof NumberValue && y instanceof NumberValue) {\n    // a. If x is NaN and y is NaN, return true.\n    if (isNaN(x.value) && isNaN(y.value)) return true;\n\n    // b. If x is +0 and y is -0, return false.\n    if (Object.is(x.value, +0) && Object.is(y.value, -0)) return false;\n\n    // c. If x is -0 and y is +0, return false.\n    if (Object.is(x.value, -0) && Object.is(y.value, +0)) return false;\n\n    // d. If x is the same Number value as y, return true.\n    if (x.value === y.value) return true;\n\n    // e. Return false.\n    return false;\n  }\n\n  // 3. Return SameValueNonNumber(x, y).\n  return SameValueNonNumber(realm, x, y);\n}\n\nexport function SameValuePartial(realm: Realm, x: Value, y: Value): boolean {\n  return SameValue(realm, x.throwIfNotConcrete(), y.throwIfNotConcrete());\n}\n\n// ECMA262 7.2.11\nexport function SameValueNonNumber(realm: Realm, x: ConcreteValue, y: ConcreteValue): boolean {\n  // 1. Assert: Type(x) is not Number.\n  invariant(!(x instanceof NumberValue), \"numbers not allowed\");\n\n  // 2. Assert: Type(x) is the same as Type(y).\n  invariant(x.getType() === y.getType(), \"must be same type\");\n\n  // 3. If Type(x) is Undefined, return true.\n  if (x instanceof UndefinedValue) return true;\n\n  // 4. If Type(x) is Null, return true.\n  if (x instanceof NullValue) return true;\n\n  // 5. If Type(x) is String, then\n  if (x instanceof StringValue && y instanceof StringValue) {\n    // a. If x and y are exactly the same sequence of code units (same length and same code units at corresponding indices), return true; otherwise, return false.\n    return x.value === y.value;\n  }\n\n  // 6. If Type(x) is Boolean, then\n  if (x instanceof BooleanValue && y instanceof BooleanValue) {\n    // a. If x and y are both true or both false, return true; otherwise, return false.\n    return x.value === y.value;\n  }\n\n  // 7. If Type(x) is Symbol, then\n  if (x instanceof SymbolValue) {\n    // a. If x and y are both the same Symbol value, return true; otherwise, return false.\n    return x === y;\n  }\n\n  // 8. Return true if x and y are the same Object value. Otherwise, return false.\n  return x === y;\n}\n\n// Checks if two property keys are identical.\nexport function SamePropertyKey(realm: Realm, x: PropertyKeyValue, y: PropertyKeyValue): boolean {\n  if (typeof x === \"string\" && typeof y === \"string\") {\n    return x === y;\n  }\n  if (x instanceof StringValue && y instanceof StringValue) {\n    return x.value === y.value;\n  }\n  if (x instanceof SymbolValue && y instanceof SymbolValue) {\n    return x === y;\n  }\n  return false;\n}\n\n// ECMA262 12.8.5 Applying the Additive Operators to Numbers\nexport function Add(realm: Realm, a: number, b: number, subtract?: boolean = false): NumberValue {\n  // If either operand is NaN, the result is NaN.\n  if (isNaN(a) || isNaN(b)) {\n    return realm.intrinsics.NaN;\n  }\n\n  // The sum of two infinities of opposite sign is NaN.\n  // The sum of two infinities of the same sign is the infinity of that sign.\n  // The sum of an infinity and a finite value is equal to the infinite operand.\n  // The sum of two negative zeroes is -0. The sum of two positive zeroes, or of two zeroes of opposite sign, is +0.\n  // The sum of a zero and a nonzero finite value is equal to the nonzero operand.\n  // The sum of two nonzero finite values of the same magnitude and opposite sign is +0.\n\n  let anum = a;\n  let bnum = b;\n\n  // The - operator performs subtraction when applied to two operands of numeric type,\n  // producing the difference of its operands; the left operand is the minuend and the right\n  // operand is the subtrahend. Given numeric operands a and b, it is always the case that\n  // a-b produces the same result as a+(-b).\n  if (subtract) {\n    bnum = -bnum;\n  }\n\n  return IntegralValue.createFromNumberValue(realm, anum + bnum);\n}\n\n// ECMA262 12.10.4\nexport function InstanceofOperator(realm: Realm, O: Value, C: Value): boolean {\n  // 1. If Type(C) is not Object, throw a TypeError exception.\n  if (!C.mightBeObject()) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Expecting a function in instanceof check\");\n  }\n\n  // 2. Let instOfHandler be ? GetMethod(C, @@hasInstance).\n  let instOfHandler = GetMethod(realm, C, realm.intrinsics.SymbolHasInstance);\n\n  // 3. If instOfHandler is not undefined, then\n  if (!(instOfHandler instanceof UndefinedValue)) {\n    // a. Return ToBoolean(? Call(instOfHandler, C, « O »)).\n    return To.ToBooleanPartial(realm, Call(realm, instOfHandler, C, [O]));\n  }\n\n  // 4. If IsCallable(C) is false, throw a TypeError exception.\n  if (IsCallable(realm, C) === false) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Expecting a function in instanceof check\");\n  }\n\n  // 5. Return ? OrdinaryHasInstance(C, O).\n  return OrdinaryHasInstance(realm, C, O);\n}\n\n// ECMA262 7.3.19\nexport function OrdinaryHasInstance(realm: Realm, C: Value, O: Value): boolean {\n  // 1. If IsCallable(C) is false, return false.\n  if (IsCallable(realm, C) === false) return false;\n  invariant(C instanceof ObjectValue);\n\n  // 2. If C has a [[BoundTargetFunction]] internal slot, then\n  if (C instanceof BoundFunctionValue) {\n    // a. Let BC be the value of C's [[BoundTargetFunction]] internal slot.\n    let BC = C.$BoundTargetFunction;\n\n    // b. Return ? InstanceofOperator(O, BC).\n    return InstanceofOperator(realm, O, BC);\n  }\n\n  // 3. If Type(O) is not Object, return false.\n  O = O.throwIfNotConcrete();\n  if (!(O instanceof ObjectValue)) return false;\n\n  // 4. Let P be ? Get(C, \"prototype\").\n  let P = Get(realm, C, \"prototype\").throwIfNotConcrete();\n\n  // 5. If Type(P) is not Object, throw a TypeError exception.\n  if (!(P instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(P) is not Object\");\n  }\n\n  // 6. Repeat\n  while (true) {\n    // a. Let O be ? O.[[GetPrototypeOf]]().\n    O = O.$GetPrototypeOf();\n\n    // b. If O is null, return false.\n    if (O instanceof NullValue) return false;\n\n    // c. If SameValue(P, O) is true, return true.\n    if (SameValuePartial(realm, P, O) === true) return true;\n  }\n\n  return false;\n}\n\n//\nexport function Type(realm: Realm, val: Value): string {\n  if (val instanceof UndefinedValue) {\n    return \"Undefined\";\n  } else if (val instanceof NullValue) {\n    return \"Null\";\n  } else if (HasCompatibleType(val, BooleanValue)) {\n    return \"Boolean\";\n  } else if (HasCompatibleType(val, StringValue)) {\n    return \"String\";\n  } else if (HasCompatibleType(val, SymbolValue)) {\n    return \"Symbol\";\n  } else if (HasCompatibleType(val, IntegralValue)) {\n    return \"Number\";\n  } else if (HasCompatibleType(val, NumberValue)) {\n    return \"Number\";\n  } else if (!val.mightNotBeObject()) {\n    return \"Object\";\n  } else {\n    invariant(val instanceof AbstractValue);\n    AbstractValue.reportIntrospectionError(val);\n    throw new FatalError();\n  }\n}\n\n// ECMA262 19.4.3.2.1\nexport function SymbolDescriptiveString(realm: Realm, sym: SymbolValue): string {\n  // 1. Assert: Type(sym) is Symbol.\n  invariant(sym instanceof SymbolValue, \"expected symbol\");\n\n  // 2. Let desc be sym's [[Description]] value.\n  let desc = sym.$Description;\n\n  // 3. If desc is undefined, let desc be the empty string.\n  if (!desc) desc = \"\";\n  else desc = desc.throwIfNotConcreteString().value;\n\n  // 4. Assert: Type(desc) is String.\n  invariant(typeof desc === \"string\", \"expected string\");\n\n  // 5. Return the result of concatenating the strings \"Symbol(\", desc, and \")\".\n  return `Symbol(${desc})`;\n}\n\n// ECMA262 6.2.2.5\nexport function UpdateEmpty(realm: Realm, completionRecord: Completion | Value, value: Value): Completion | Value {\n  // 1. Assert: If completionRecord.[[Type]] is either return or throw, then completionRecord.[[Value]] is not empty.\n  if (completionRecord instanceof ReturnCompletion || completionRecord instanceof ThrowCompletion) {\n    invariant(completionRecord.value, \"expected completion record to have a value\");\n  }\n\n  // 2. If completionRecord.[[Value]] is not empty, return Completion(completionRecord).\n  if (completionRecord instanceof EmptyValue) return value;\n  if (completionRecord instanceof Value || (completionRecord.value && !(completionRecord.value instanceof EmptyValue)))\n    return completionRecord;\n\n  // 3. Return Completion{[[Type]]: completionRecord.[[Type]], [[Value]]: value, [[Target]]: completionRecord.[[Target]] }.'\n  completionRecord.value = value;\n  return completionRecord;\n}\n"],"file":"abstract.js"}