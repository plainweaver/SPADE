{"version":3,"sources":["../../src/methods/typedarray.js"],"names":["ArrayElementSize","Float32Array","Float64Array","Int8Array","Int16Array","Int32Array","Uint8Array","Uint16Array","Uint32Array","Uint8ClampedArray","ArrayElementType","IntegerIndexedObjectCreate","realm","prototype","internalSlotsList","A","IntegerIndexedExotic","Object","assign","$Prototype","setExtensible","IntegerIndexedElementGet","O","index","ObjectValue","$ViewedArrayBuffer","$ArrayLength","undefined","$ByteOffset","$TypedArrayName","buffer","createErrorThrowCompletion","intrinsics","TypeError","is","length","offset","arrayTypeName","elementSize","indexedPosition","elementType","IntegerIndexedElementSet","value","numValue","To","ToNumber","ValidateTypedArray","throwIfNotConcrete","AllocateTypedArray","constructorName","newTarget","defaultProto","proto","obj","$ByteLength","AllocateTypedArrayBuffer","isNewObject","byteLength","data","ArrayBuffer","TypedArrayCreate","constructor","argumentList","newTypedArray","throwIfNotConcreteObject","mightBeNumber","mightNotBeNumber","AbstractValue","reportIntrospectionError","FatalError","TypedArraySpeciesCreate","exemplar","defaultConstructor"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { TypedArrayKind } from \"../types.js\";\nimport { FatalError } from \"../errors.js\";\nimport {\n  AbstractValue,\n  AbstractObjectValue,\n  IntegerIndexedExotic,\n  ObjectValue,\n  Value,\n  NumberValue,\n  UndefinedValue,\n} from \"../values/index.js\";\nimport { GetPrototypeFromConstructor } from \"./get.js\";\nimport { AllocateArrayBuffer } from \"./arraybuffer.js\";\nimport { IsDetachedBuffer, IsInteger } from \"./is.js\";\nimport { GetValueFromBuffer, SetValueInBuffer } from \"./arraybuffer.js\";\nimport { Construct, SpeciesConstructor } from \"./construct.js\";\nimport { To } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\n\nexport const ArrayElementSize = {\n  Float32Array: 4,\n  Float64Array: 8,\n  Int8Array: 1,\n  Int16Array: 2,\n  Int32Array: 4,\n  Uint8Array: 1,\n  Uint16Array: 2,\n  Uint32Array: 4,\n  Uint8ClampedArray: 1,\n};\n\nexport const ArrayElementType = {\n  Float32Array: \"Float32\",\n  Float64Array: \"Float64\",\n  Int8Array: \"Int8\",\n  Int16Array: \"Int16\",\n  Int32Array: \"Int32\",\n  Uint8Array: \"Uint8\",\n  Uint16Array: \"Uint16\",\n  Uint32Array: \"Uint32\",\n  Uint8ClampedArray: \"Uint8Clamped\",\n};\n\n// ECMA262 9.4.5.7\nexport function IntegerIndexedObjectCreate(\n  realm: Realm,\n  prototype: ObjectValue | AbstractObjectValue,\n  internalSlotsList: { [key: string]: void }\n): ObjectValue {\n  // 1. Assert: internalSlotsList contains the names [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]].\n  invariant(\n    \"$ViewedArrayBuffer\" in internalSlotsList &&\n      \"$ArrayLength\" in internalSlotsList &&\n      \"$ByteOffset\" in internalSlotsList &&\n      \"$TypedArrayName\" in internalSlotsList\n  );\n\n  // 2. Let A be a newly created object with an internal slot for each name in internalSlotsList.\n  let A = new IntegerIndexedExotic(realm);\n  Object.assign(A, internalSlotsList);\n\n  // 3. Set A's essential internal methods to the default ordinary object definitions specified in 9.1.\n  // 4. Set the [[GetOwnProperty]] internal method of A as specified in 9.4.5.1.\n  // 5. Set the [[HasProperty]] internal method of A as specified in 9.4.5.2.\n  // 6. Set the [[DefineOwnProperty]] internal method of A as specified in 9.4.5.3.\n  // 7. Set the [[Get]] internal method of A as specified in 9.4.5.4.\n  // 8. Set the [[Set]] internal method of A as specified in 9.4.5.5.\n  // 9. Set the [[OwnPropertyKeys]] internal method of A as specified in 9.4.5.6.\n\n  // 10. Set A.[[Prototype]] to prototype.\n  A.$Prototype = prototype;\n\n  // 11. Set A.[[Extensible]] to true.\n  A.setExtensible(true);\n\n  // 12. Return A.\n  return A;\n}\n\n// ECMA262 9.4.5.8\nexport function IntegerIndexedElementGet(realm: Realm, O: ObjectValue, index: number): NumberValue | UndefinedValue {\n  // 1. Assert: Type(index) is Number.\n  invariant(typeof index === \"number\", \"Type(index) is Number\");\n\n  // 2. Assert: O is an Object that has [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]] internal slots.\n  invariant(\n    O instanceof ObjectValue &&\n      O.$ViewedArrayBuffer &&\n      O.$ArrayLength !== undefined &&\n      O.$ByteOffset !== undefined &&\n      O.$TypedArrayName\n  );\n\n  // 3. Let buffer be O.[[ViewedArrayBuffer]].\n  let buffer = O.$ViewedArrayBuffer;\n\n  // 4. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n  if (IsDetachedBuffer(realm, buffer) === true) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(buffer) is true\");\n  }\n\n  // 5. If IsInteger(index) is false, return undefined.\n  if (IsInteger(realm, index) === false) return realm.intrinsics.undefined;\n\n  // 6. If index = -0, return undefined.\n  if (Object.is(index, -0)) return realm.intrinsics.undefined;\n\n  // 7. Let length be O.[[ArrayLength]].\n  let length = O.$ArrayLength;\n  invariant(typeof length === \"number\");\n\n  // 8. If index < 0 or index ≥ length, return undefined.\n  if (index < 0 || index >= length) return realm.intrinsics.undefined;\n\n  // 9. Let offset be O.[[ByteOffset]].\n  let offset = O.$ByteOffset;\n  invariant(typeof offset === \"number\");\n\n  // 10. Let arrayTypeName be the String value of O.[[TypedArrayName]].\n  let arrayTypeName = O.$TypedArrayName;\n  invariant(typeof arrayTypeName === \"string\");\n\n  // 11. Let elementSize be the Number value of the Element Size value specified in Table 50 for arrayTypeName.\n  let elementSize = ArrayElementSize[arrayTypeName];\n\n  // 12. Let indexedPosition be (index × elementSize) + offset.\n  let indexedPosition = index * elementSize + offset;\n\n  // 13. Let elementType be the String value of the Element Type value in Table 50 for arrayTypeName.\n  let elementType = ArrayElementType[arrayTypeName];\n\n  // 14. Return GetValueFromBuffer(buffer, indexedPosition, elementType).\n  return GetValueFromBuffer(realm, buffer, indexedPosition, elementType);\n}\n\n// ECMA262 9.4.5.9\nexport function IntegerIndexedElementSet(realm: Realm, O: ObjectValue, index: number, value: Value): boolean {\n  // 1. Assert: Type(index) is Number.\n  invariant(typeof index === \"number\", \"Type(index) is Number\");\n\n  // 2. Assert: O is an Object that has [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]] internal slots.\n  invariant(\n    O instanceof ObjectValue &&\n      O.$ViewedArrayBuffer &&\n      O.$ArrayLength !== undefined &&\n      O.$ByteOffset !== undefined &&\n      O.$TypedArrayName\n  );\n\n  // 3. Let numValue be ? ToNumber(value).\n  let numValue = To.ToNumber(realm, value);\n\n  // 4. Let buffer be O.[[ViewedArrayBuffer]].\n  let buffer = O.$ViewedArrayBuffer;\n  invariant(buffer);\n\n  // 5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n  if (IsDetachedBuffer(realm, buffer) === true) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(buffer) is true\");\n  }\n\n  // 6. If IsInteger(index) is false, return false.\n  if (IsInteger(realm, index) === false) return false;\n\n  // 7. If index = -0, return false.\n  if (Object.is(index, -0)) return false;\n\n  // 8. Let length be O.[[ArrayLength]].\n  let length = O.$ArrayLength;\n  invariant(typeof length === \"number\");\n\n  // 9. If index < 0 or index ≥ length, return false.\n  if (index < 0 || index >= length) return false;\n\n  // 10. Let offset be O.[[ByteOffset]].\n  let offset = O.$ByteOffset;\n  invariant(typeof offset === \"number\");\n\n  // 11. Let arrayTypeName be the String value of O.[[TypedArrayName]].\n  let arrayTypeName = O.$TypedArrayName;\n  invariant(typeof arrayTypeName === \"string\");\n\n  // 12. Let elementSize be the Number value of the Element Size value specified in Table 50 for arrayTypeName.\n  let elementSize = ArrayElementSize[arrayTypeName];\n\n  // 13. Let indexedPosition be (index × elementSize) + offset.\n  let indexedPosition = index * elementSize + offset;\n\n  // 14. Let elementType be the String value of the Element Type value in Table 50 for arrayTypeName.\n  let elementType = ArrayElementType[arrayTypeName];\n\n  // 15. Perform SetValueInBuffer(buffer, indexedPosition, elementType, numValue).\n  SetValueInBuffer(realm, buffer, indexedPosition, elementType, numValue);\n\n  // 16. Return true.\n  return true;\n}\n\n// ECMA262 22.2.3.5.1\nexport function ValidateTypedArray(realm: Realm, O: Value): ObjectValue {\n  O = O.throwIfNotConcrete();\n\n  // 1. If Type(O) is not Object, throw a TypeError exception.\n  if (!(O instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n  }\n\n  // 2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError exception.\n  if (!O.$TypedArrayName) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n  }\n\n  // 3. Assert: O has a [[ViewedArrayBuffer]] internal slot.\n  invariant(O.$ViewedArrayBuffer, \"O has a [[ViewedArrayBuffer]] internal slot\");\n\n  // 4. Let buffer be O.[[ViewedArrayBuffer]].\n  let buffer = O.$ViewedArrayBuffer;\n\n  // 5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n  if (IsDetachedBuffer(realm, buffer) === true) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(buffer) is true\");\n  }\n\n  // 6. Return buffer.\n  return buffer;\n}\n\n// ECMA262 22.2.4.2.1\nexport function AllocateTypedArray(\n  realm: Realm,\n  constructorName: TypedArrayKind,\n  newTarget: ObjectValue,\n  defaultProto: string,\n  length?: number\n): ObjectValue {\n  // 1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n  let proto = GetPrototypeFromConstructor(realm, newTarget, defaultProto);\n\n  // 2. Let obj be IntegerIndexedObjectCreate(proto, « [[ViewedArrayBuffer]], [[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] »).\n  let obj = IntegerIndexedObjectCreate(realm, proto, {\n    $ViewedArrayBuffer: undefined,\n    $TypedArrayName: undefined,\n    $ByteLength: undefined,\n    $ByteOffset: undefined,\n    $ArrayLength: undefined,\n  });\n\n  // 3. Assert: obj.[[ViewedArrayBuffer]] is undefined.\n  invariant(obj.$ViewedArrayBuffer === undefined);\n\n  // 4. Set obj.[[TypedArrayName]] to constructorName.\n  obj.$TypedArrayName = constructorName;\n\n  // 5. If length was not passed, then\n  if (length === undefined) {\n    // a. Set obj.[[ByteLength]] to 0.\n    obj.$ByteLength = 0;\n\n    // b. Set obj.[[ByteOffset]] to 0.\n    obj.$ByteOffset = 0;\n\n    // c. Set obj.[[ArrayLength]] to 0.\n    obj.$ArrayLength = 0;\n  } else {\n    // 6. Else,\n    // a. Perform ? AllocateTypedArrayBuffer(obj, length).\n    AllocateTypedArrayBuffer(realm, obj, length);\n  }\n\n  // 7. Return obj.\n  return obj;\n}\n\n// ECMA262 22.2.4.2.2\nexport function AllocateTypedArrayBuffer(realm: Realm, O: ObjectValue, length: number): ObjectValue {\n  // Note that O is a new object, and we can thus write to internal slots\n  invariant(realm.isNewObject(O));\n\n  // 1. Assert: O is an Object that has a [[ViewedArrayBuffer]] internal slot.\n  invariant(\n    O instanceof ObjectValue && \"$ViewedArrayBuffer\" in O,\n    \"O is an Object that has a [[ViewedArrayBuffer]] internal slot\"\n  );\n\n  // 2. Assert: O.[[ViewedArrayBuffer]] is undefined.\n  invariant(O.$ViewedArrayBuffer === undefined, \"O.[[ViewedArrayBuffer]] is undefined\");\n\n  // 3. Assert: length ≥ 0.\n  invariant(length >= 0, \"length ≥ 0\");\n\n  // 4. Let constructorName be the String value of O.[[TypedArrayName]].\n  let constructorName = O.$TypedArrayName;\n  invariant(constructorName);\n\n  // 5. Let elementSize be the Element Size value in Table 50 for constructorName.\n  let elementSize = ArrayElementSize[constructorName];\n\n  // 6. Let byteLength be elementSize × length.\n  let byteLength = elementSize * length;\n\n  // 7. Let data be ? AllocateArrayBuffer(%ArrayBuffer%, byteLength).\n  let data = AllocateArrayBuffer(realm, realm.intrinsics.ArrayBuffer, byteLength);\n\n  // 8. Set O.[[ViewedArrayBuffer]] to data.\n  O.$ViewedArrayBuffer = data;\n\n  // 9. Set O.[[ByteLength]] to byteLength.\n  O.$ByteLength = byteLength;\n\n  // 10. Set O.[[ByteOffset]] to 0.\n  O.$ByteOffset = 0;\n\n  // 11. Set O.[[ArrayLength]] to length.\n  O.$ArrayLength = length;\n\n  // 12. Return O.\n  return O;\n}\n\n// ECMA262 22.2.4.6\nexport function TypedArrayCreate(realm: Realm, constructor: ObjectValue, argumentList: Array<Value>): ObjectValue {\n  // 1. Let newTypedArray be ? Construct(constructor, argumentList).\n  let newTypedArray = Construct(realm, constructor, argumentList).throwIfNotConcreteObject();\n\n  // 2. Perform ? ValidateTypedArray(newTypedArray).\n  ValidateTypedArray(realm, newTypedArray);\n\n  // 3. If argumentList is a List of a single Number, then\n  if (argumentList.length === 1 && argumentList[0].mightBeNumber()) {\n    if (argumentList[0].mightNotBeNumber()) {\n      invariant(argumentList[0] instanceof AbstractValue);\n      AbstractValue.reportIntrospectionError(argumentList[0]);\n      throw new FatalError();\n    }\n    // a. If newTypedArray.[[ArrayLength]] < argumentList[0], throw a TypeError exception.\n    invariant(typeof newTypedArray.$ArrayLength === \"number\");\n    if (newTypedArray.$ArrayLength < ((argumentList[0].throwIfNotConcrete(): any): NumberValue).value) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"newTypedArray.[[ArrayLength]] < argumentList[0]\"\n      );\n    }\n  }\n\n  // 4. Return newTypedArray.\n  return newTypedArray;\n}\n\n// ECMA262 22.2.4.7\nexport function TypedArraySpeciesCreate(realm: Realm, exemplar: ObjectValue, argumentList: Array<Value>): ObjectValue {\n  // 1. Assert: exemplar is an Object that has a [[TypedArrayName]] internal slot.\n  invariant(exemplar instanceof ObjectValue && typeof exemplar.$TypedArrayName === \"string\");\n\n  // 2. Let defaultConstructor be the intrinsic object listed in column one of Table 50 for exemplar.[[TypedArrayName]].\n  invariant(typeof exemplar.$TypedArrayName === \"string\");\n  let defaultConstructor = {\n    Float32Array: realm.intrinsics.Float32Array,\n    Float64Array: realm.intrinsics.Float64Array,\n    Int8Array: realm.intrinsics.Int8Array,\n    Int16Array: realm.intrinsics.Int16Array,\n    Int32Array: realm.intrinsics.Int32Array,\n    Uint8Array: realm.intrinsics.Uint8Array,\n    Uint16Array: realm.intrinsics.Uint16Array,\n    Uint32Array: realm.intrinsics.Uint32Array,\n    Uint8ClampedArray: realm.intrinsics.Uint8ClampedArray,\n  }[exemplar.$TypedArrayName];\n\n  // 3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n  let constructor = SpeciesConstructor(realm, exemplar, defaultConstructor);\n\n  // 4. Return ? TypedArrayCreate(constructor, argumentList).\n  return TypedArrayCreate(realm, constructor, argumentList);\n}\n"],"file":"typedarray.js"}