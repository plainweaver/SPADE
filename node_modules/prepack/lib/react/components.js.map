{"version":3,"sources":["../../src/react/components.js"],"names":["lifecycleMethods","Set","whitelistedProperties","getInitialProps","realm","componentType","modelString","componentModel","undefined","JSON","parse","shape","ShapeInformation","createForReactComponentProps","propsName","formalParameters","BoundFunctionValue","$BoundTargetFunction","ECMAScriptSourceFunctionValue","$FormalParameters","length","firstParam","t","isIdentifier","name","abstractPropsObject","AbstractValue","createAbstractObject","AbstractObjectValue","makeFinal","getInitialContext","contextName","superTypeParameters","$SuperTypeParameters","ExpectedBailOut","secondParam","value","visitClassMethodAstForThisUsage","method","code","$ECMAScriptCode","file","program","expressionStatement","functionExpression","ThisExpression","path","parentNode","parentPath","node","isMemberExpression","SimpleClassBailOut","createSimpleClassInstance","props","context","componentPrototype","ObjectValue","instance","allowedPropertyAccess","properties","has","add","Properties","$GetOwnProperty","P","call","refuseSerialization","deeplyApplyInstancePrototypeProperties","classMetadata","instanceProperties","instanceSymbols","proto","$Prototype","intrinsics","ObjectPrototype","symbol","symbols","createClassInstanceForFirstRenderOnly","evaluatedNode","objectAssign","Object","ECMAScriptFunctionValue","objectAssignCall","$Call","state","setState","NativeFunctionValue","_context","stateToUpdate","callback","prevState","newState","key","binding","descriptor","PropertyDescriptor","enumerable","intrinsicName","createClassInstance","evaluateClassConstructor","constructorFunc","evaluatePure","evaluateForEffects","propertyName","getName","applyGetDerivedStateFromProps","getDerivedStateFromProps","getDerivedStateFromPropsCall","partialState","null","deriveState","kind","condition","args","a","b","Value","createFromConditionalOp","false","createFromLogicalOp","createFromBinaryOp","c","preludeGenerator","createTemporalObjectAssign","makeSimple","makePartial","conditional","e","isInPureScope","FatalError"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport {\n  AbstractValue,\n  BoundFunctionValue,\n  ECMAScriptSourceFunctionValue,\n  ObjectValue,\n  AbstractObjectValue,\n  SymbolValue,\n  NativeFunctionValue,\n  ECMAScriptFunctionValue,\n  Value,\n} from \"../values/index.js\";\nimport * as t from \"@babel/types\";\nimport type { BabelNodeIdentifier } from \"@babel/types\";\nimport {\n  flagPropsWithNoPartialKeyOrRef,\n  getProperty,\n  getValueFromFunctionCall,\n  hardModifyReactObjectPropertyBinding,\n  valueIsClassComponent,\n} from \"./utils.js\";\nimport { ExpectedBailOut, SimpleClassBailOut } from \"./errors.js\";\nimport { Get, Construct } from \"../methods/index.js\";\nimport { Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport traverse from \"@babel/traverse\";\nimport type { ClassComponentMetadata, ReactComponentTreeConfig } from \"../types.js\";\nimport type { ReactEvaluatedNode } from \"../serializer/types.js\";\nimport { FatalError } from \"../errors.js\";\nimport { type ComponentModel, ShapeInformation } from \"../utils/ShapeInformation.js\";\nimport { PropertyDescriptor } from \"../descriptors.js\";\n\nconst lifecycleMethods = new Set([\n  \"componentWillUnmount\",\n  \"componentDidMount\",\n  \"componentWillMount\",\n  \"componentDidUpdate\",\n  \"componentWillUpdate\",\n  \"componentDidCatch\",\n  \"componentWillReceiveProps\",\n]);\n\nconst whitelistedProperties = new Set([\"props\", \"context\", \"refs\", \"setState\"]);\n\nexport function getInitialProps(\n  realm: Realm,\n  componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue | null,\n  { modelString }: ReactComponentTreeConfig\n): AbstractObjectValue {\n  let componentModel = modelString !== undefined ? (JSON.parse(modelString): ComponentModel) : undefined;\n  let shape = ShapeInformation.createForReactComponentProps(componentModel);\n  let propsName = null;\n  if (componentType !== null) {\n    if (valueIsClassComponent(realm, componentType)) {\n      propsName = \"this.props\";\n    } else {\n      let formalParameters;\n      if (componentType instanceof BoundFunctionValue) {\n        invariant(componentType.$BoundTargetFunction instanceof ECMAScriptSourceFunctionValue);\n        formalParameters = componentType.$BoundTargetFunction.$FormalParameters;\n      } else {\n        formalParameters = componentType.$FormalParameters;\n      }\n      // otherwise it's a functional component, where the first paramater of the function is \"props\" (if it exists)\n      if (formalParameters.length > 0) {\n        let firstParam = formalParameters[0];\n        if (t.isIdentifier(firstParam)) {\n          propsName = ((firstParam: any): BabelNodeIdentifier).name;\n        }\n      }\n    }\n  }\n  let abstractPropsObject = AbstractValue.createAbstractObject(realm, propsName || \"props\", shape);\n  invariant(abstractPropsObject instanceof AbstractObjectValue);\n  flagPropsWithNoPartialKeyOrRef(realm, abstractPropsObject);\n  abstractPropsObject.makeFinal();\n  return abstractPropsObject;\n}\n\nexport function getInitialContext(\n  realm: Realm,\n  componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue\n): AbstractObjectValue {\n  let contextName = null;\n  if (valueIsClassComponent(realm, componentType)) {\n    // it's a class component, so we need to check the type on for context of the component prototype\n    let superTypeParameters = componentType.$SuperTypeParameters;\n    contextName = \"this.context\";\n\n    if (superTypeParameters !== undefined) {\n      throw new ExpectedBailOut(\"context on class components not yet supported\");\n    }\n  } else {\n    let formalParameters;\n    if (componentType instanceof BoundFunctionValue) {\n      invariant(componentType.$BoundTargetFunction instanceof ECMAScriptSourceFunctionValue);\n      formalParameters = componentType.$BoundTargetFunction.$FormalParameters;\n    } else {\n      formalParameters = componentType.$FormalParameters;\n    }\n    // otherwise it's a functional component, where the second paramater of the function is \"context\" (if it exists)\n    if (formalParameters.length > 1) {\n      let secondParam = formalParameters[1];\n      if (t.isIdentifier(secondParam)) {\n        contextName = ((secondParam: any): BabelNodeIdentifier).name;\n      }\n    }\n  }\n  let value = AbstractValue.createAbstractObject(realm, contextName || \"context\");\n  return value;\n}\n\nfunction visitClassMethodAstForThisUsage(realm: Realm, method: ECMAScriptSourceFunctionValue): void {\n  let formalParameters = method.$FormalParameters;\n  let code = method.$ECMAScriptCode;\n\n  traverse(\n    t.file(t.program([t.expressionStatement(t.functionExpression(null, formalParameters, code))])),\n    {\n      ThisExpression(path) {\n        let parentNode = path.parentPath.node;\n\n        if (!t.isMemberExpression(parentNode)) {\n          throw new SimpleClassBailOut(`possible leakage of independent \"this\" reference found`);\n        }\n      },\n    },\n    null,\n    {}\n  );\n}\n\nexport function createSimpleClassInstance(\n  realm: Realm,\n  componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n  props: ObjectValue | AbstractValue,\n  context: ObjectValue | AbstractValue\n): AbstractObjectValue {\n  let componentPrototype = Get(realm, componentType, \"prototype\");\n  invariant(componentPrototype instanceof ObjectValue);\n  // create an instance object and disable serialization as we don't want to output the internals we set below\n  let instance = new ObjectValue(realm, componentPrototype, \"this\", true);\n  let allowedPropertyAccess = new Set([\"props\", \"context\"]);\n  for (let [name] of componentPrototype.properties) {\n    if (lifecycleMethods.has(name)) {\n      // this error will result in the simple class falling back to a complex class\n      throw new SimpleClassBailOut(\"lifecycle methods are not supported on simple classes\");\n    } else if (name !== \"constructor\") {\n      allowedPropertyAccess.add(name);\n      let method = Get(realm, componentPrototype, name);\n      if (method instanceof ECMAScriptSourceFunctionValue) {\n        visitClassMethodAstForThisUsage(realm, method);\n      }\n      Properties.Set(realm, instance, name, method, true);\n    }\n  }\n  // assign props\n  Properties.Set(realm, instance, \"props\", props, true);\n  // assign context\n  Properties.Set(realm, instance, \"context\", context, true);\n  // as this object is simple, we want to check if any access to anything other than\n  // \"this.props\" or \"this.context\" or methods on the class occur\n  let $GetOwnProperty = instance.$GetOwnProperty;\n  instance.$GetOwnProperty = P => {\n    if (!allowedPropertyAccess.has(P)) {\n      // this error will result in the simple class falling back to a complex class\n      throw new SimpleClassBailOut(\"access to basic class instance properties is not supported on simple classes\");\n    }\n    return $GetOwnProperty.call(instance, P);\n  };\n  // enable serialization to support simple instance variables properties\n  instance.refuseSerialization = false;\n  // return the instance\n  return instance;\n}\n\nfunction deeplyApplyInstancePrototypeProperties(\n  realm: Realm,\n  instance: ObjectValue,\n  componentPrototype: ObjectValue,\n  classMetadata: ClassComponentMetadata\n) {\n  let { instanceProperties, instanceSymbols } = classMetadata;\n  let proto = componentPrototype.$Prototype;\n\n  if (proto instanceof ObjectValue && proto !== realm.intrinsics.ObjectPrototype) {\n    deeplyApplyInstancePrototypeProperties(realm, instance, proto, classMetadata);\n  }\n\n  for (let [name] of componentPrototype.properties) {\n    // ensure we don't set properties that were defined on the instance\n    if (name !== \"constructor\" && !instanceProperties.has(name)) {\n      Properties.Set(realm, instance, name, Get(realm, componentPrototype, name), true);\n    }\n  }\n  for (let [symbol] of componentPrototype.symbols) {\n    // ensure we don't set symbols that were defined on the instance\n    if (!instanceSymbols.has(symbol)) {\n      Properties.Set(realm, instance, symbol, Get(realm, componentPrototype, symbol), true);\n    }\n  }\n}\n\nexport function createClassInstanceForFirstRenderOnly(\n  realm: Realm,\n  componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n  props: ObjectValue | AbstractValue,\n  context: ObjectValue | AbstractValue,\n  evaluatedNode: ReactEvaluatedNode\n): ObjectValue {\n  let instance = getValueFromFunctionCall(realm, componentType, realm.intrinsics.undefined, [props, context], true);\n  let objectAssign = Get(realm, realm.intrinsics.Object, \"assign\");\n  invariant(objectAssign instanceof ECMAScriptFunctionValue);\n  let objectAssignCall = objectAssign.$Call;\n  invariant(objectAssignCall !== undefined);\n\n  invariant(instance instanceof ObjectValue);\n  instance.refuseSerialization = true;\n  // assign props\n  Properties.Set(realm, instance, \"props\", props, true);\n  // assign context\n  Properties.Set(realm, instance, \"context\", context, true);\n  let state = Get(realm, instance, \"state\");\n  if (state instanceof AbstractObjectValue || state instanceof ObjectValue) {\n    state.makeFinal();\n  }\n  // assign a mocked setState\n  let setState = new NativeFunctionValue(realm, undefined, `setState`, 1, (_context, [stateToUpdate, callback]) => {\n    invariant(instance instanceof ObjectValue);\n    let prevState = Get(realm, instance, \"state\");\n    invariant(prevState instanceof ObjectValue);\n\n    if (stateToUpdate instanceof ECMAScriptSourceFunctionValue && stateToUpdate.$Call) {\n      stateToUpdate = stateToUpdate.$Call(instance, [prevState]);\n    }\n    if (stateToUpdate instanceof ObjectValue) {\n      let newState = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n      objectAssignCall(realm.intrinsics.undefined, [newState, prevState]);\n      newState.makeFinal();\n\n      for (let [key, binding] of stateToUpdate.properties) {\n        if (binding && binding.descriptor) {\n          invariant(binding.descriptor instanceof PropertyDescriptor);\n          if (binding.descriptor.enumerable) {\n            let value = getProperty(realm, stateToUpdate, key);\n            hardModifyReactObjectPropertyBinding(realm, newState, key, value);\n          }\n        }\n      }\n\n      Properties.Set(realm, instance, \"state\", newState, true);\n    }\n    if (callback instanceof ECMAScriptSourceFunctionValue && callback.$Call) {\n      callback.$Call(instance, []);\n    }\n    return realm.intrinsics.undefined;\n  });\n  setState.intrinsicName = \"(function() {})\";\n  Properties.Set(realm, instance, \"setState\", setState, true);\n\n  instance.refuseSerialization = false;\n  return instance;\n}\n\nexport function createClassInstance(\n  realm: Realm,\n  componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n  props: ObjectValue | AbstractValue,\n  context: ObjectValue | AbstractValue,\n  classMetadata: ClassComponentMetadata\n): AbstractObjectValue {\n  let componentPrototype = Get(realm, componentType, \"prototype\");\n  invariant(componentPrototype instanceof ObjectValue);\n  // create an instance object and disable serialization as we don't want to output the internals we set below\n  let instance = new ObjectValue(realm, componentPrototype, \"this\", true);\n  deeplyApplyInstancePrototypeProperties(realm, instance, componentPrototype, classMetadata);\n\n  // assign refs\n  Properties.Set(realm, instance, \"refs\", AbstractValue.createAbstractObject(realm, \"this.refs\"), true);\n  // assign props\n  Properties.Set(realm, instance, \"props\", props, true);\n  // assign context\n  Properties.Set(realm, instance, \"context\", context, true);\n  // enable serialization to support simple instance variables properties\n  instance.refuseSerialization = false;\n  // return the instance in an abstract object\n  let value = AbstractValue.createAbstractObject(realm, \"this\", instance);\n  invariant(value instanceof AbstractObjectValue);\n  return value;\n}\n\nexport function evaluateClassConstructor(\n  realm: Realm,\n  constructorFunc: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n  props: ObjectValue | AbstractValue | AbstractObjectValue,\n  context: ObjectValue | AbstractObjectValue\n): { instanceProperties: Set<string>, instanceSymbols: Set<SymbolValue> } {\n  let instanceProperties = new Set();\n  let instanceSymbols = new Set();\n\n  realm.evaluatePure(\n    () =>\n      realm.evaluateForEffects(\n        () => {\n          let instance = Construct(realm, constructorFunc, [props, context]);\n          invariant(instance instanceof ObjectValue);\n          for (let [propertyName] of instance.properties) {\n            if (!whitelistedProperties.has(propertyName)) {\n              instanceProperties.add(propertyName);\n            }\n          }\n          for (let [symbol] of instance.symbols) {\n            instanceSymbols.add(symbol);\n          }\n          return instance;\n        },\n        /*state*/ null,\n        `react component constructor: ${constructorFunc.getName()}`\n      ),\n    /*bubbles*/ true,\n    /*reportSideEffectFunc*/ null\n  );\n\n  return {\n    instanceProperties,\n    instanceSymbols,\n  };\n}\n\nexport function applyGetDerivedStateFromProps(\n  realm: Realm,\n  getDerivedStateFromProps: ECMAScriptSourceFunctionValue,\n  instance: ObjectValue,\n  props: ObjectValue | AbstractValue | AbstractObjectValue\n): void {\n  let prevState = Get(realm, instance, \"state\");\n  let getDerivedStateFromPropsCall = getDerivedStateFromProps.$Call;\n  invariant(getDerivedStateFromPropsCall !== undefined);\n  let partialState = getDerivedStateFromPropsCall(realm.intrinsics.null, [props, prevState]);\n\n  const deriveState = state => {\n    let objectAssign = Get(realm, realm.intrinsics.Object, \"assign\");\n    invariant(objectAssign instanceof ECMAScriptFunctionValue);\n    let objectAssignCall = objectAssign.$Call;\n    invariant(objectAssignCall !== undefined);\n\n    if (state instanceof AbstractValue && !(state instanceof AbstractObjectValue)) {\n      const kind = state.kind;\n\n      if (kind === \"conditional\") {\n        let condition = state.args[0];\n        let a = deriveState(state.args[1]);\n        let b = deriveState(state.args[2]);\n        invariant(condition instanceof AbstractValue);\n        if (a === null && b === null) {\n          return null;\n        } else if (a === null) {\n          invariant(b instanceof Value);\n          return AbstractValue.createFromConditionalOp(realm, condition, realm.intrinsics.false, b);\n        } else if (b === null) {\n          invariant(a instanceof Value);\n          return AbstractValue.createFromConditionalOp(realm, condition, a, realm.intrinsics.false);\n        } else {\n          invariant(a instanceof Value);\n          invariant(b instanceof Value);\n          return AbstractValue.createFromConditionalOp(realm, condition, a, b);\n        }\n      } else if (kind === \"||\" || kind === \"&&\") {\n        let a = deriveState(state.args[0]);\n        let b = deriveState(state.args[1]);\n        if (b === null) {\n          invariant(a instanceof Value);\n          return AbstractValue.createFromLogicalOp(realm, kind, a, realm.intrinsics.false);\n        } else {\n          invariant(a instanceof Value);\n          invariant(b instanceof Value);\n          return AbstractValue.createFromLogicalOp(realm, kind, a, b);\n        }\n      } else {\n        invariant(state.args !== undefined, \"TODO: unknown abstract value passed to deriveState\");\n        // as the value is completely abstract, we need to add a bunch of\n        // operations to be emitted to ensure we do the right thing at runtime\n        let a = AbstractValue.createFromBinaryOp(realm, \"!==\", state, realm.intrinsics.null);\n        let b = AbstractValue.createFromBinaryOp(realm, \"!==\", state, realm.intrinsics.undefined);\n        let c = AbstractValue.createFromLogicalOp(realm, \"&&\", a, b);\n        invariant(c instanceof AbstractValue);\n        let newState = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n        let preludeGenerator = realm.preludeGenerator;\n        invariant(preludeGenerator !== undefined);\n        // we cannot use the standard Object.assign as partial state\n        // is not simple. however, given getDerivedStateFromProps is\n        // meant to be pure, we can assume that there are no getters on\n        // the partial abstract state\n        AbstractValue.createTemporalObjectAssign(realm, newState, [prevState, state]);\n        newState.makeSimple();\n        newState.makePartial();\n        newState.makeFinal();\n        let conditional = AbstractValue.createFromLogicalOp(realm, \"&&\", c, newState);\n        return conditional;\n      }\n    } else if (state !== realm.intrinsics.null && state !== realm.intrinsics.undefined) {\n      let newState = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n      try {\n        objectAssignCall(realm.intrinsics.undefined, [newState, prevState, state]);\n      } catch (e) {\n        if (realm.isInPureScope() && e instanceof FatalError) {\n          let preludeGenerator = realm.preludeGenerator;\n          invariant(preludeGenerator !== undefined);\n          AbstractValue.createTemporalObjectAssign(realm, newState, [prevState, state]);\n          newState.makeSimple();\n          newState.makePartial();\n          return newState;\n        }\n        throw e;\n      }\n      newState.makeFinal();\n      return newState;\n    } else {\n      return null;\n    }\n  };\n\n  let newState = deriveState(partialState);\n  if (newState !== null) {\n    if (newState instanceof AbstractValue) {\n      newState = AbstractValue.createFromLogicalOp(realm, \"||\", newState, prevState);\n    }\n    invariant(newState instanceof Value);\n    Properties.Set(realm, instance, \"state\", newState, true);\n  }\n}\n"],"file":"components.js"}