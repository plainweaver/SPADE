{"version":3,"sources":["../../src/react/elements.js"],"names":["createPropsObject","realm","type","config","children","activeReconciler","react","firstRenderOnly","undefined","componentTreeConfig","defaultProps","ObjectValue","AbstractObjectValue","intrinsics","props","Create","ObjectCreate","ObjectPrototype","makeFinal","reactProps","add","key","null","ref","diagnostic","CompilerDiagnostic","currentLocation","handleError","FatalError","possibleKey","keyNotNeeded","AbstractValue","properties","has","emptyString","possibleRef","refNotNeeded","setProp","name","value","applyProperties","propKey","binding","descriptor","PropertyDescriptor","enumerable","isPartialObject","isSimpleObject","defaultPropsEvaluated","propName","propBinding","get","size","makePartial","makeSimple","condition","createFromBinaryOp","conditionalChildren","createFromConditionalOp","defaultPropsHelper","snapshot","getSnapshot","temporalAlias","temporalArgs","temporalTo","createTemporalFromBuildFunction","skipInvariant","mutatesOnly","values","ValuesDomain","splitReactElementsByConditionalType","condValue","consequentVal","alternateVal","evaluateWithAbstractConditional","evaluateForEffects","createReactElement","splitReactElementsByConditionalConfig","cloneReactElement","reactElement","elementProps","NullValue","elementChildren","kind","args","wrapReactElementWithKeyedFragment","keyValue","fbLibraries","reactFragment","fragmentConfigValue","CreateDataPropertyOrThrow","fragmentChildrenValue","ArrayCreate","traverseReactElement","traversalVisitor","typeValue","visitType","visitKey","refValue","visitRef","loopArrayElements","childrenValue","length","i","child","visitChildNode","handleChildren","propsValue","ArrayValue","intrinsicName","childrenLength","NumberValue","visitAbstractOrPartialProps","visitConcreteProps"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport { ValuesDomain } from \"../domains/index.js\";\nimport {\n  AbstractValue,\n  AbstractObjectValue,\n  ArrayValue,\n  NullValue,\n  NumberValue,\n  ObjectValue,\n  Value,\n} from \"../values/index.js\";\nimport { Create } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport { Get } from \"../methods/index.js\";\nimport {\n  applyObjectAssignConfigsForReactElement,\n  createInternalReactElement,\n  flagPropsWithNoPartialKeyOrRef,\n  flattenChildren,\n  getMaxLength,\n  hardModifyReactObjectPropertyBinding,\n  getProperty,\n  hasNoPartialKeyOrRef,\n} from \"./utils.js\";\nimport { computeBinary } from \"../evaluators/BinaryExpression.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport { createOperationDescriptor } from \"../utils/generator.js\";\nimport { PropertyDescriptor } from \"../descriptors.js\";\n\nfunction createPropsObject(\n  realm: Realm,\n  type: Value,\n  config: ObjectValue | AbstractObjectValue,\n  children: void | Value\n): { key: Value, ref: Value, props: ObjectValue } {\n  // If we're in \"rendering\" a React component tree, we should have an active reconciler\n  let activeReconciler = realm.react.activeReconciler;\n  let firstRenderOnly = activeReconciler !== undefined ? activeReconciler.componentTreeConfig.firstRenderOnly : false;\n  let defaultProps =\n    type instanceof ObjectValue || type instanceof AbstractObjectValue\n      ? Get(realm, type, \"defaultProps\")\n      : realm.intrinsics.undefined;\n\n  let props = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  props.makeFinal();\n  realm.react.reactProps.add(props);\n\n  let key = realm.intrinsics.null;\n  let ref = realm.intrinsics.null;\n\n  if (!hasNoPartialKeyOrRef(realm, config)) {\n    // if either are abstract, this will impact the reconcilation process\n    // and ultimately prevent us from folding ReactElements properly\n    let diagnostic = new CompilerDiagnostic(\n      `unable to evaluate \"key\" and \"ref\" on a ReactElement due to an abstract config passed to createElement`,\n      realm.currentLocation,\n      \"PP0025\",\n      \"FatalError\"\n    );\n    realm.handleError(diagnostic);\n    if (realm.handleError(diagnostic) === \"Fail\") throw new FatalError();\n  }\n\n  let possibleKey = Get(realm, config, \"key\");\n  if (possibleKey !== realm.intrinsics.null && possibleKey !== realm.intrinsics.undefined) {\n    // if the config has been marked as having no partial key or ref and the possible key\n    // is abstract, yet the config doesn't have a key property, then the key can remain null\n    let keyNotNeeded =\n      hasNoPartialKeyOrRef(realm, config) &&\n      possibleKey instanceof AbstractValue &&\n      config instanceof ObjectValue &&\n      !config.properties.has(\"key\");\n\n    if (!keyNotNeeded) {\n      key = computeBinary(realm, \"+\", realm.intrinsics.emptyString, possibleKey);\n    }\n  }\n\n  let possibleRef = Get(realm, config, \"ref\");\n  if (possibleRef !== realm.intrinsics.null && possibleRef !== realm.intrinsics.undefined && !firstRenderOnly) {\n    // if the config has been marked as having no partial key or ref and the possible ref\n    // is abstract, yet the config doesn't have a ref property, then the ref can remain null\n    let refNotNeeded =\n      hasNoPartialKeyOrRef(realm, config) &&\n      possibleRef instanceof AbstractValue &&\n      config instanceof ObjectValue &&\n      !config.properties.has(\"ref\");\n\n    if (!refNotNeeded) {\n      ref = possibleRef;\n    }\n  }\n\n  const setProp = (name: string, value: Value): void => {\n    if (name !== \"__self\" && name !== \"__source\" && name !== \"key\" && name !== \"ref\") {\n      invariant(props instanceof ObjectValue);\n      hardModifyReactObjectPropertyBinding(realm, props, name, value);\n    }\n  };\n\n  const applyProperties = () => {\n    if (config instanceof ObjectValue) {\n      for (let [propKey, binding] of config.properties) {\n        if (binding && binding.descriptor) {\n          invariant(binding.descriptor instanceof PropertyDescriptor);\n          if (binding.descriptor.enumerable) {\n            setProp(propKey, Get(realm, config, propKey));\n          }\n        }\n      }\n    }\n  };\n\n  if (\n    (config instanceof AbstractObjectValue && config.isPartialObject()) ||\n    (config instanceof ObjectValue && config.isPartialObject() && config.isSimpleObject())\n  ) {\n    // create a new props object that will be the target of the Object.assign\n    props = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n    realm.react.reactProps.add(props);\n\n    applyObjectAssignConfigsForReactElement(realm, props, [config]);\n    props.makeFinal();\n\n    if (children !== undefined) {\n      hardModifyReactObjectPropertyBinding(realm, props, \"children\", children);\n    }\n    // handle default props on a partial/abstract config\n    if (defaultProps !== realm.intrinsics.undefined) {\n      let defaultPropsEvaluated = 0;\n\n      // first see if we can apply all the defaultProps without needing the helper\n      if (defaultProps instanceof ObjectValue && !defaultProps.isPartialObject()) {\n        for (let [propName, binding] of defaultProps.properties) {\n          if (binding.descriptor !== undefined) {\n            invariant(binding.descriptor instanceof PropertyDescriptor);\n            if (binding.descriptor.value !== realm.intrinsics.undefined) {\n              // see if we have this on our props object\n              let propBinding = props.properties.get(propName);\n              // if the binding exists and value is abstract, it might be undefined\n              // so in that case we need the helper, otherwise we can continue\n              if (\n                propBinding !== undefined &&\n                !(\n                  propBinding.descriptor instanceof PropertyDescriptor &&\n                  propBinding.descriptor.value instanceof AbstractValue\n                )\n              ) {\n                defaultPropsEvaluated++;\n                // if the value we have is undefined, we can apply the defaultProp\n                if (propBinding.descriptor) {\n                  invariant(propBinding.descriptor instanceof PropertyDescriptor);\n                  if (propBinding.descriptor.value === realm.intrinsics.undefined)\n                    hardModifyReactObjectPropertyBinding(realm, props, propName, Get(realm, defaultProps, propName));\n                }\n              }\n            }\n          }\n        }\n      }\n      // if defaultPropsEvaluated === the amount of properties defaultProps has, then we've successfully\n      // ensured all the defaultProps have already been dealt with, so we don't need the helper\n      if (\n        !(defaultProps instanceof ObjectValue) ||\n        (defaultProps.isPartialObject() || defaultPropsEvaluated !== defaultProps.properties.size)\n      ) {\n        props.makePartial();\n        props.makeSimple();\n        // if the props has any properties that are \"undefined\", we need to make them abstract\n        // as the helper function applies defaultProps on values that are undefined or do not\n        // exist\n        for (let [propName, binding] of props.properties) {\n          if (binding.descriptor !== undefined) {\n            invariant(binding.descriptor instanceof PropertyDescriptor);\n            if (binding.descriptor.value === realm.intrinsics.undefined) {\n              invariant(defaultProps instanceof AbstractObjectValue || defaultProps instanceof ObjectValue);\n              hardModifyReactObjectPropertyBinding(realm, props, propName, Get(realm, defaultProps, propName));\n            }\n          }\n        }\n        // if we have children and they are abstract, they might be undefined at runtime\n        if (children !== undefined && children instanceof AbstractValue) {\n          // children === undefined ? defaultProps.children : children;\n          let condition = AbstractValue.createFromBinaryOp(realm, \"===\", children, realm.intrinsics.undefined);\n          invariant(defaultProps instanceof AbstractObjectValue || defaultProps instanceof ObjectValue);\n          let conditionalChildren = AbstractValue.createFromConditionalOp(\n            realm,\n            condition,\n            Get(realm, defaultProps, \"children\"),\n            children\n          );\n          hardModifyReactObjectPropertyBinding(realm, props, \"children\", conditionalChildren);\n        }\n        let defaultPropsHelper = realm.react.defaultPropsHelper;\n        invariant(defaultPropsHelper !== undefined);\n        let snapshot = props.getSnapshot();\n        props.temporalAlias = snapshot;\n        let temporalArgs = [defaultPropsHelper, snapshot, defaultProps];\n        let temporalTo = AbstractValue.createTemporalFromBuildFunction(\n          realm,\n          ObjectValue,\n          temporalArgs,\n          createOperationDescriptor(\"REACT_DEFAULT_PROPS_HELPER\"),\n          { skipInvariant: true, mutatesOnly: [snapshot] }\n        );\n        invariant(temporalTo instanceof AbstractObjectValue);\n        if (props instanceof AbstractObjectValue) {\n          temporalTo.values = props.values;\n        } else {\n          invariant(props instanceof ObjectValue);\n          temporalTo.values = new ValuesDomain(props);\n        }\n        props.temporalAlias = temporalTo;\n      }\n    }\n  } else {\n    applyProperties();\n\n    if (children !== undefined) {\n      setProp(\"children\", children);\n    }\n    if (defaultProps instanceof AbstractObjectValue || defaultProps.isPartialObject()) {\n      invariant(false, \"TODO: we need to eventually support this\");\n    } else if (defaultProps instanceof ObjectValue) {\n      for (let [propKey, binding] of defaultProps.properties) {\n        if (binding && binding.descriptor) {\n          invariant(binding.descriptor instanceof PropertyDescriptor);\n          if (binding.descriptor.enumerable && Get(realm, props, propKey) === realm.intrinsics.undefined) {\n            setProp(propKey, Get(realm, defaultProps, propKey));\n          }\n        }\n      }\n    }\n  }\n  invariant(props instanceof ObjectValue);\n  // We know the props has no keys because if it did it would have thrown above\n  // so we can remove them the props we create.\n  flagPropsWithNoPartialKeyOrRef(realm, props);\n  return { key, props, ref };\n}\n\nfunction splitReactElementsByConditionalType(\n  realm: Realm,\n  condValue: AbstractValue,\n  consequentVal: Value,\n  alternateVal: Value,\n  config: ObjectValue | AbstractObjectValue,\n  children: void | Value\n): Value {\n  return realm.evaluateWithAbstractConditional(\n    condValue,\n    () => {\n      return realm.evaluateForEffects(\n        () => createReactElement(realm, consequentVal, config, children),\n        null,\n        \"splitReactElementsByConditionalType consequent\"\n      );\n    },\n    () => {\n      return realm.evaluateForEffects(\n        () => createReactElement(realm, alternateVal, config, children),\n        null,\n        \"splitReactElementsByConditionalType alternate\"\n      );\n    }\n  );\n}\n\nfunction splitReactElementsByConditionalConfig(\n  realm: Realm,\n  condValue: AbstractValue,\n  consequentVal: ObjectValue | AbstractObjectValue,\n  alternateVal: ObjectValue | AbstractObjectValue,\n  type: Value,\n  children: void | Value\n): Value {\n  return realm.evaluateWithAbstractConditional(\n    condValue,\n    () => {\n      return realm.evaluateForEffects(\n        () => createReactElement(realm, type, consequentVal, children),\n        null,\n        \"splitReactElementsByConditionalConfig consequent\"\n      );\n    },\n    () => {\n      return realm.evaluateForEffects(\n        () => createReactElement(realm, type, alternateVal, children),\n        null,\n        \"splitReactElementsByConditionalConfig alternate\"\n      );\n    }\n  );\n}\n\nexport function cloneReactElement(\n  realm: Realm,\n  reactElement: ObjectValue,\n  config: ObjectValue | AbstractObjectValue | NullValue,\n  children: void | Value\n): ObjectValue {\n  let props = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  realm.react.reactProps.add(props);\n\n  const setProp = (name: string, value: Value): void => {\n    if (name !== \"__self\" && name !== \"__source\" && name !== \"key\" && name !== \"ref\") {\n      invariant(props instanceof ObjectValue);\n      hardModifyReactObjectPropertyBinding(realm, props, name, value);\n    }\n  };\n\n  let elementProps = getProperty(realm, reactElement, \"props\");\n  applyObjectAssignConfigsForReactElement(realm, props, [elementProps, config]);\n  props.makeFinal();\n\n  let key = getProperty(realm, reactElement, \"key\");\n  let ref = getProperty(realm, reactElement, \"ref\");\n  let type = getProperty(realm, reactElement, \"type\");\n\n  if (!(config instanceof NullValue)) {\n    let possibleKey = Get(realm, config, \"key\");\n    if (possibleKey !== realm.intrinsics.null && possibleKey !== realm.intrinsics.undefined) {\n      // if the config has been marked as having no partial key or ref and the possible key\n      // is abstract, yet the config doesn't have a key property, then the key can remain null\n      let keyNotNeeded =\n        hasNoPartialKeyOrRef(realm, config) &&\n        possibleKey instanceof AbstractValue &&\n        config instanceof ObjectValue &&\n        !config.properties.has(\"key\");\n\n      if (!keyNotNeeded) {\n        key = computeBinary(realm, \"+\", realm.intrinsics.emptyString, possibleKey);\n      }\n    }\n\n    let possibleRef = Get(realm, config, \"ref\");\n    if (possibleRef !== realm.intrinsics.null && possibleRef !== realm.intrinsics.undefined) {\n      // if the config has been marked as having no partial key or ref and the possible ref\n      // is abstract, yet the config doesn't have a ref property, then the ref can remain null\n      let refNotNeeded =\n        hasNoPartialKeyOrRef(realm, config) &&\n        possibleRef instanceof AbstractValue &&\n        config instanceof ObjectValue &&\n        !config.properties.has(\"ref\");\n\n      if (!refNotNeeded) {\n        ref = possibleRef;\n      }\n    }\n    let defaultProps =\n      type instanceof ObjectValue || type instanceof AbstractObjectValue\n        ? Get(realm, type, \"defaultProps\")\n        : realm.intrinsics.undefined;\n\n    if (defaultProps instanceof ObjectValue) {\n      for (let [propKey, binding] of defaultProps.properties) {\n        if (binding && binding.descriptor) {\n          invariant(binding.descriptor instanceof PropertyDescriptor);\n          if (binding.descriptor.enumerable && Get(realm, props, propKey) === realm.intrinsics.undefined) {\n            setProp(propKey, Get(realm, defaultProps, propKey));\n          }\n        }\n      }\n    } else if (defaultProps instanceof AbstractObjectValue) {\n      invariant(false, \"TODO: we need to eventually support this\");\n    }\n  }\n\n  if (children !== undefined) {\n    hardModifyReactObjectPropertyBinding(realm, props, \"children\", children);\n  } else {\n    invariant(elementProps instanceof ObjectValue);\n    let elementChildren = getProperty(realm, elementProps, \"children\");\n    hardModifyReactObjectPropertyBinding(realm, props, \"children\", elementChildren);\n  }\n\n  return createInternalReactElement(realm, type, key, ref, props);\n}\n\nexport function createReactElement(\n  realm: Realm,\n  type: Value,\n  config: ObjectValue | AbstractObjectValue,\n  children: void | Value\n): Value {\n  if (type instanceof AbstractValue && type.kind === \"conditional\") {\n    let [condValue, consequentVal, alternateVal] = type.args;\n    invariant(condValue instanceof AbstractValue);\n    return splitReactElementsByConditionalType(realm, condValue, consequentVal, alternateVal, config, children);\n  } else if (config instanceof AbstractObjectValue && config.kind === \"conditional\") {\n    let [condValue, consequentVal, alternateVal] = config.args;\n    invariant(condValue instanceof AbstractValue);\n    invariant(consequentVal instanceof ObjectValue || consequentVal instanceof AbstractObjectValue);\n    invariant(alternateVal instanceof ObjectValue || alternateVal instanceof AbstractObjectValue);\n    return splitReactElementsByConditionalConfig(realm, condValue, consequentVal, alternateVal, type, children);\n  }\n  let { key, props, ref } = createPropsObject(realm, type, config, children);\n  return createInternalReactElement(realm, type, key, ref, props);\n}\n\n// Wraps a React element in a `<React.Fragment key={keyValue}>` so that we can\n// add a key without mutating or cloning the element.\nexport function wrapReactElementWithKeyedFragment(realm: Realm, keyValue: Value, reactElement: Value): Value {\n  const react = realm.fbLibraries.react;\n  invariant(react instanceof ObjectValue);\n  const reactFragment = getProperty(realm, react, \"Fragment\");\n  const fragmentConfigValue = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  Create.CreateDataPropertyOrThrow(realm, fragmentConfigValue, \"key\", keyValue);\n  let fragmentChildrenValue = Create.ArrayCreate(realm, 1);\n  Create.CreateDataPropertyOrThrow(realm, fragmentChildrenValue, \"0\", reactElement);\n  fragmentChildrenValue = flattenChildren(realm, fragmentChildrenValue, true);\n  return createReactElement(realm, reactFragment, fragmentConfigValue, fragmentChildrenValue);\n}\n\ntype ElementTraversalVisitor = {\n  visitType: (typeValue: Value) => void,\n  visitKey: (keyValue: Value) => void,\n  visitRef: (keyValue: Value) => void,\n  visitAbstractOrPartialProps: (propsValue: AbstractValue | ObjectValue) => void,\n  visitConcreteProps: (propsValue: ObjectValue) => void,\n  visitChildNode: (childValue: Value) => void,\n};\n\nexport function traverseReactElement(\n  realm: Realm,\n  reactElement: ObjectValue,\n  traversalVisitor: ElementTraversalVisitor\n): void {\n  let typeValue = getProperty(realm, reactElement, \"type\");\n  traversalVisitor.visitType(typeValue);\n\n  let keyValue = getProperty(realm, reactElement, \"key\");\n  if (keyValue !== realm.intrinsics.null && keyValue !== realm.intrinsics.undefined) {\n    traversalVisitor.visitKey(keyValue);\n  }\n\n  let refValue = getProperty(realm, reactElement, \"ref\");\n  if (refValue !== realm.intrinsics.null && refValue !== realm.intrinsics.undefined) {\n    traversalVisitor.visitRef(refValue);\n  }\n\n  const loopArrayElements = (childrenValue: ArrayValue, length: number): void => {\n    for (let i = 0; i < length; i++) {\n      let child = getProperty(realm, childrenValue, \"\" + i);\n      traversalVisitor.visitChildNode(child);\n    }\n  };\n\n  const handleChildren = () => {\n    // handle children\n    invariant(propsValue instanceof ObjectValue);\n    if (propsValue.properties.has(\"children\")) {\n      let childrenValue = getProperty(realm, propsValue, \"children\");\n      if (childrenValue !== realm.intrinsics.undefined && childrenValue !== realm.intrinsics.null) {\n        if (childrenValue instanceof ArrayValue && !childrenValue.intrinsicName) {\n          let childrenLength = getProperty(realm, childrenValue, \"length\");\n          if (childrenLength instanceof NumberValue) {\n            loopArrayElements(childrenValue, childrenLength.value);\n          } else if (childrenLength instanceof AbstractValue && childrenLength.kind === \"conditional\") {\n            loopArrayElements(childrenValue, getMaxLength(childrenLength, 0));\n          } else {\n            invariant(false, \"TODO: support other types of array length value\");\n          }\n        } else {\n          traversalVisitor.visitChildNode(childrenValue);\n        }\n      }\n    }\n  };\n\n  let propsValue = getProperty(realm, reactElement, \"props\");\n  if (propsValue instanceof AbstractValue) {\n    // visit object, as it's going to be spread\n    traversalVisitor.visitAbstractOrPartialProps(propsValue);\n  } else if (propsValue instanceof ObjectValue) {\n    if (propsValue.isPartialObject()) {\n      traversalVisitor.visitAbstractOrPartialProps(propsValue);\n      handleChildren();\n    } else {\n      traversalVisitor.visitConcreteProps(propsValue);\n      handleChildren();\n    }\n  }\n}\n"],"file":"elements.js"}