{"version":3,"sources":["../../src/react/reconcilation.js"],"names":["setContextCurrentValue","contextObject","value","AbstractObjectValue","values","isTop","elements","getElements","size","element","ObjectValue","ExpectedBailOut","binding","properties","get","descriptor","PropertyDescriptor","throwUnsupportedSideEffectError","msg","UnsupportedSideEffect","Reconciler","constructor","realm","componentTreeConfig","alreadyEvaluated","statistics","logger","componentTreeState","_createComponentTreeState","branchedComponentTrees","resolveReactComponentTree","componentType","props","context","evaluatedRootNode","resolveComponentTree","initialProps","initialContext","result","_resolveComponent","optimizedTrees","error","AbruptCompletion","_handleComponentTreeRootFailure","react","activeReconciler","wrapInGlobalEnv","evaluatePure","evaluateForEffects","sideEffectType","expressionLocation","failOnUnsupportedSideEffects","undefined","clearComponentTreeState","_queueNewComponentTree","rootValue","evaluatedNode","SymbolValue","ECMAScriptSourceFunctionValue","AbstractValue","deadEnds","has","push","_resolveComplexClassComponent","classMetadata","branchStatus","evaluatedComplexNode","status","NewComponentTreeBranch","instance","renderMethod","_resolveSimpleClassComponent","_resolveFunctionalComponent","intrinsics","_getClassComponentMetadata","classComponentMetadata","set","_resolveContextProviderComponent","reactElement","typeValue","propsValue","evaluatedChildNode","children","componentsEvaluated","contextConsumer","lastValueProp","_incremementReferenceForContextNode","valueProp","firstRenderOnly","resolvedReactElement","_resolveReactElementHostChildren","resolvedPropsValue","Value","_decremementReferenceForContextNode","childrenValue","inlinedComponents","contextNode","references","contextNodeReferences","_isContextValueKnown","isRoot","_resolveContextConsumerComponent","renderProp","_findReactComponentTrees","_resolveDeeply","_evaluateNestedOptimizedFunctionAndStoreEffects","_resolveForwardRefComponent","refValue","forwardedComponent","BoundFunctionValue","_resolveRelayQueryRendererComponent","_resolveClassComponent","instanceProperties","instanceSymbols","SimpleClassBailOut","_resolveClassComponentForFirstRenderOnly","getDerivedStateFromProps","getSnapshotBeforeUpdate","$Call","componentWillMount","unsafeComponentWillMount","_resolveRelayContainer","reactHint","message","firstRenderValue","abstractRelayContext","createAbstractObject","abstractRelayEnvironment","abstractRelayInternal","Properties","Set","contextTypes","add","DoNotOptimize","abstractHints","object","fbLibraries","reactRelay","childContext","Map","_getComponentResolutionStrategy","QueryRenderer","kind","$$typeof","_resolveReactDomPortal","createPortalNode","args","reactPortalValue","domNodeValue","resolvedReactPortalValue","reactDomValue","reactDom","reactDomPortalFunc","createTemporalFromBuildFunction","skipInvariant","isPure","_resolveAbstractConditionalValue","condValue","consequentVal","alternateVal","evaluateWithAbstractConditional","_resolveAbstractLogicalValue","leftValue","rightValue","operator","_resolveAbstractValue","generator","propertyName","_resolveUnknownComponentType","bailOutMessage","_assignBailOutMessage","_resolveReactElementBadRef","_resolveReactElementUndefinedRender","resolvedChildren","ArrayValue","intrinsicName","newProps","_resolveFragmentComponent","_resolveReactElement","needsKey","keyValue","StringValue","componentResolutionStrategy","NullValue","render","verbose","logInformation","name","UndefinedValue","mightNotBeNull","_resolveComponentResolutionFailure","ReconcilerFatalError","FatalError","NumberValue","BooleanValue","_isFinal","_resolveArray","$BailOutReason","arrayValue","isIntrinsicAndHasWidenedNumericProperty","nestedOptimizedFunctionEffects","func","effects","funcCall","applyEffects","SimpleNormalCompletion","pureFuncCall","resolvedEffects","optimizedNestedClosures","collectedNestedOptimizedFunctionEffects","elementValue","makeFinal","treatFunctionsAs","length","arg","ref","propName","enumerable","thisValue","optimizeNestedFunctions","funcToModel","$BoundTargetFunction","$BoundThis","Utils","createModelledFunctionCall","NestedOptimizedFunctionSideEffect","e","Leak"],"mappings":";;;;;;;AAWA;;AACA;;AAeA;;AACA;;AAmBA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AASA;;AAQA;;AACA;;AAEA;;AACA;;AACA;;;;AA/EA;;;;;;;;AAgHA,SAASA,sBAAT,CAAgCC,aAAhC,EAAkFC,KAAlF,EAAsG;AACpG,MAAID,aAAa,YAAYE,0BAAzB,IAAgD,CAACF,aAAa,CAACG,MAAd,CAAqBC,KAArB,EAArD,EAAmF;AACjF,QAAIC,QAAQ,GAAGL,aAAa,CAACG,MAAd,CAAqBG,WAArB,EAAf;;AACA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,IAAT,KAAkB,CAAlC,EAAqC;AACnC,WAAK,IAAIC,OAAT,IAAoBH,QAApB,EAA8B;AAC5B,gCAAUG,OAAO,YAAYC,kBAA7B;AACAT,QAAAA,aAAa,GAAGQ,OAAhB;AACD;AACF,KALD,MAKO;AACL,8BAAU,KAAV,EAAiB,mDAAjB;AACD;AACF;;AACD,MAAI,EAAER,aAAa,YAAYS,kBAA3B,CAAJ,EAA6C;AAC3C,UAAM,IAAIC,wBAAJ,CAAoB,yDAApB,CAAN;AACD;;AACD,MAAIC,OAAO,GAAGX,aAAa,CAACY,UAAd,CAAyBC,GAAzB,CAA6B,cAA7B,CAAd;;AAEA,MAAIF,OAAO,IAAIA,OAAO,CAACG,UAAvB,EAAmC;AACjC,4BAAUH,OAAO,CAACG,UAAR,YAA8BC,+BAAxC;AACAJ,IAAAA,OAAO,CAACG,UAAR,CAAmBb,KAAnB,GAA2BA,KAA3B;AACD,GAHD,MAGO;AACL,4BAAU,KAAV,EAAiB,uDAAjB;AACD;AACF;;AAED,SAASe,+BAAT,CAAyCC,GAAzC,EAAsD;AACpD,QAAM,IAAIC,8BAAJ,CAA0BD,GAA1B,CAAN;AACD;;AAEM,MAAME,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CACTC,KADS,EAETC,mBAFS,EAGTC,gBAHS,EAITC,UAJS,EAKTC,MALS,EAMT;AACA,SAAKJ,KAAL,GAAaA,KAAb;AACA,SAAKG,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKH,mBAAL,GAA2BA,mBAA3B;AACA,SAAKI,kBAAL,GAA0B,KAAKC,yBAAL,EAA1B;AACA,SAAKJ,gBAAL,GAAwBA,gBAAxB;AACA,SAAKK,sBAAL,GAA8B,EAA9B;AACD;;AAWDC,EAAAA,yBAAyB,CACvBC,aADuB,EAEvBC,KAFuB,EAGvBC,OAHuB,EAIvBC,iBAJuB,EAKd;AACT,UAAMC,oBAAoB,GAAG,MAAM;AACjC,UAAI;AACF,YAAIC,YAAY,GAAGJ,KAAK,IAAI,iCAAgB,KAAKV,KAArB,EAA4BS,aAA5B,EAA2C,KAAKR,mBAAhD,CAA5B;AACA,YAAIc,cAAc,GAAGJ,OAAO,IAAI,mCAAkB,KAAKX,KAAvB,EAA8BS,aAA9B,CAAhC;;AACA,YAAI;AAAEO,UAAAA;AAAF,YAAa,KAAKC,iBAAL,CAAuBR,aAAvB,EAAsCK,YAAtC,EAAoDC,cAApD,EAAoE,MAApE,EAA4EH,iBAA5E,CAAjB;;AACA,aAAKT,UAAL,CAAgBe,cAAhB;AACA,eAAOF,MAAP;AACD,OAND,CAME,OAAOG,KAAP,EAAc;AACd,YAAIA,KAAK,YAAYC,6BAArB,EAAuC,MAAMD,KAAN;;AACvC,aAAKE,+BAAL,CAAqCF,KAArC,EAA4CP,iBAA5C,EAFc,CAGd;;;AACA,gCAAU,KAAV,EAAiB,uDAAjB;AACD;AACF,KAbD;;AAeA,QAAI;AACF,WAAKZ,KAAL,CAAWsB,KAAX,CAAiBC,gBAAjB,GAAoC,IAApC;AACA,aAAO,KAAKvB,KAAL,CAAWwB,eAAX,CAA2B,MAChC,KAAKxB,KAAL,CAAWyB,YAAX,CACE,MACE,KAAKzB,KAAL,CAAW0B,kBAAX,CACEb,oBADF;AAEE;AAAU,UAFZ,EAGG,oBAAmB,6BAAiB,KAAKb,KAAtB,EAA6BS,aAA7B,CAA4C,EAHlE,CAFJ;AAOE;AAAY,UAPd,EAQE,CAACkB,cAAD,EAAiBrC,OAAjB,EAA0BsC,kBAA1B,KAAiD;AAC/C,YAAI,KAAK5B,KAAL,CAAWsB,KAAX,CAAiBO,4BAArB,EAAmD;AACjD,gDAAyBlC,+BAAzB,EAA0DgC,cAA1D,EAA0ErC,OAA1E,EAAmFsC,kBAAnF;AACD;AACF,OAZH,CADK,CAAP;AAgBD,KAlBD,SAkBU;AACR,WAAK5B,KAAL,CAAWsB,KAAX,CAAiBC,gBAAjB,GAAoCO,SAApC;AACD;AACF;;AAEDC,EAAAA,uBAAuB,GAAS;AAC9B,SAAK1B,kBAAL,GAA0B,KAAKC,yBAAL,EAA1B;AACD;;AAED0B,EAAAA,sBAAsB,CACpBC,SADoB,EAEpBC,aAFoB,EAGpBxB,KAAgD,GAAG,IAH/B,EAIpBC,OAAkD,GAAG,IAJjC,EAKd;AACN,QAAIsB,SAAS,YAAYE,kBAAzB,EAAsC;AACpC;AACD;;AACD,4BAAUF,SAAS,YAAYG,oCAArB,IAAsDH,SAAS,YAAYI,oBAArF;AACA,SAAKhC,kBAAL,CAAwBiC,QAAxB;AACA,QAAI7B,aAAa,GAAG,0CAA8B,KAAKT,KAAnC,EAA0CiC,SAA1C,CAApB;;AACA,QAAIxB,aAAa,KAAK,IAAlB,IAA0B,CAAC,KAAKP,gBAAL,CAAsBqC,GAAtB,CAA0B9B,aAA1B,CAA/B,EAAyE;AACvE,WAAKF,sBAAL,CAA4BiC,IAA5B,CAAiC;AAC/B7B,QAAAA,OAD+B;AAE/BuB,QAAAA,aAF+B;AAG/BxB,QAAAA,KAH+B;AAI/BuB,QAAAA;AAJ+B,OAAjC;AAMD;AACF;;AAEDQ,EAAAA,6BAA6B,CAC3BhC,aAD2B,EAE3BC,KAF2B,EAG3BC,OAH2B,EAI3B+B,aAJ2B,EAK3BC,YAL2B,EAM3BT,aAN2B,EAOpB;AACP,QAAIS,YAAY,KAAK,MAArB,EAA6B;AAC3B;AACA;AACA,UAAIC,oBAAoB,GAAG,KAAK1C,gBAAL,CAAsBV,GAAtB,CAA0BiB,aAA1B,CAA3B;;AACA,UACEkC,YAAY,KAAK,WAAjB,IACA,KAAKtC,kBAAL,CAAwBwC,MAAxB,KAAmC,QADnC,IAEAD,oBAFA,IAGAA,oBAAoB,CAACC,MAArB,KAAgC,cAJlC,EAKE;AACA,aAAKxC,kBAAL,CAAwBI,aAAxB,GAAwCA,aAAxC;AACD,OAPD,MAOO;AACL,aAAKuB,sBAAL,CAA4BvB,aAA5B,EAA2CyB,aAA3C;;AACAA,QAAAA,aAAa,CAACW,MAAd,GAAuB,UAAvB;AACA,cAAM,IAAIC,+BAAJ,CAA2BZ,aAA3B,CAAN;AACD;AACF;;AACD,SAAK7B,kBAAL,CAAwBwC,MAAxB,GAAiC,SAAjC,CAlBO,CAmBP;;AACA,QAAIE,QAAQ,GAAG,qCAAoB,KAAK/C,KAAzB,EAAgCS,aAAhC,EAA+CC,KAA/C,EAAsDC,OAAtD,EAA+D+B,aAA/D,CAAf,CApBO,CAqBP;;AACA,QAAIM,YAAY,GAAG,iBAAI,KAAKhD,KAAT,EAAgB+C,QAAhB,EAA0B,QAA1B,CAAnB;AACA,4BAAUC,YAAY,YAAYZ,oCAAlC,EAvBO,CAwBP;;AACA,WAAO,qCAAyB,KAAKpC,KAA9B,EAAqCgD,YAArC,EAAmDD,QAAnD,EAA6D,EAA7D,CAAP;AACD;;AAEDE,EAAAA,4BAA4B,CAC1BxC,aAD0B,EAE1BC,KAF0B,EAG1BC,OAH0B,EAI1BgC,YAJ0B,EAK1BT,aAL0B,EAMnB;AACP;AACA,QAAIa,QAAQ,GAAG,2CAA0B,KAAK/C,KAA/B,EAAsCS,aAAtC,EAAqDC,KAArD,EAA4DC,OAA5D,CAAf,CAFO,CAGP;;AACA,QAAIqC,YAAY,GAAG,iBAAI,KAAKhD,KAAT,EAAgB+C,QAAhB,EAA0B,QAA1B,CAAnB;AACA,4BAAUC,YAAY,YAAYZ,oCAAlC,EALO,CAMP;;AACA,WAAO,qCAAyB,KAAKpC,KAA9B,EAAqCgD,YAArC,EAAmDD,QAAnD,EAA6D,EAA7D,CAAP;AACD;;AAEDG,EAAAA,2BAA2B,CACzBzC,aADyB,EAEzBC,KAFyB,EAGzBC,OAHyB,EAIzBuB,aAJyB,EAKzB;AACA,WAAO,qCAAyB,KAAKlC,KAA9B,EAAqCS,aAArC,EAAoD,KAAKT,KAAL,CAAWmD,UAAX,CAAsBrB,SAA1E,EAAqF,CAACpB,KAAD,EAAQC,OAAR,CAArF,CAAP;AACD;;AAEDyC,EAAAA,0BAA0B,CACxB3C,aADwB,EAExBC,KAFwB,EAGxBC,OAHwB,EAIA;AACxB,QAAI,KAAKX,KAAL,CAAWsB,KAAX,CAAiB+B,sBAAjB,CAAwCd,GAAxC,CAA4C9B,aAA5C,CAAJ,EAAgE;AAC9D,UAAIiC,aAAa,GAAG,KAAK1C,KAAL,CAAWsB,KAAX,CAAiB+B,sBAAjB,CAAwC7D,GAAxC,CAA4CiB,aAA5C,CAApB;AACA,8BAAUiC,aAAV;AACA,aAAOA,aAAP;AACD,KALuB,CAMxB;;;AACA,QAAIA,aAAa,GAAG,0CAAyB,KAAK1C,KAA9B,EAAqCS,aAArC,EAAoDC,KAApD,EAA2DC,OAA3D,CAApB;AACA,SAAKX,KAAL,CAAWsB,KAAX,CAAiB+B,sBAAjB,CAAwCC,GAAxC,CAA4C7C,aAA5C,EAA2DiC,aAA3D;AACA,WAAOA,aAAP;AACD;;AAEDa,EAAAA,gCAAgC,CAC9B9C,aAD8B,EAE9B+C,YAF8B,EAG9B7C,OAH8B,EAI9BgC,YAJ8B,EAK9BT,aAL8B,EAMvB;AACP,QAAIuB,SAAS,GAAG,wBAAY,KAAKzD,KAAjB,EAAwBwD,YAAxB,EAAsC,MAAtC,CAAhB;AACA,QAAIE,UAAU,GAAG,wBAAY,KAAK1D,KAAjB,EAAwBwD,YAAxB,EAAsC,OAAtC,CAAjB;AAEA,QAAIG,kBAAkB,GAAG,qCAAyB,QAAzB,EAAmC,kBAAnC,CAAzB;AACAzB,IAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;AACA,SAAKxD,UAAL,CAAgB0D,mBAAhB;AACA,4BAAUJ,SAAS,YAAYrE,kBAArB,IAAoCqE,SAAS,YAAY5E,0BAAnE;AACA,UAAMiF,eAAe,GAAG,wBAAY,KAAK9D,KAAjB,EAAwByD,SAAxB,EAAmC,SAAnC,CAAxB;AACA,4BAAUK,eAAe,YAAY1E,kBAA3B,IAA0C0E,eAAe,YAAYjF,0BAA/E;AACA,QAAIkF,aAAa,GAAG,wBAAY,KAAK/D,KAAjB,EAAwB8D,eAAxB,EAAyC,cAAzC,CAApB;;AACA,SAAKE,mCAAL,CAAyCF,eAAzC;;AAEA,QAAIG,SAAJ,CAbO,CAcP;;AACA,QAAIP,UAAU,YAAYtE,kBAAtB,IAAqCsE,UAAU,YAAY7E,0BAA/D,EAAoF;AAClFoF,MAAAA,SAAS,GAAG,iBAAI,KAAKjE,KAAT,EAAgB0D,UAAhB,EAA4B,OAA5B,CAAZ;AACAhF,MAAAA,sBAAsB,CAACoF,eAAD,EAAkBG,SAAlB,CAAtB;AACD;;AACD,QAAIP,UAAU,YAAYtE,kBAA1B,EAAuC;AACrC;AACA;AACA,UAAI,EAAE6E,SAAS,YAAY5B,oBAAvB,KAAyC,KAAKpC,mBAAL,CAAyBiE,eAAtE,EAAuF;AACrF,YAAIC,oBAAoB,GAAG,KAAKC,gCAAL,CACzB3D,aADyB,EAEzB+C,YAFyB,EAGzB7C,OAHyB,EAIzBgC,YAJyB,EAKzBgB,kBALyB,CAA3B;;AAOA,YAAIU,kBAAkB,GAAG,wBAAY,KAAKrE,KAAjB,EAAwBmE,oBAAxB,EAA8C,OAA9C,CAAzB;AACA,gCAAUE,kBAAkB,YAAYjF,kBAA9B,IAA6CiF,kBAAkB,YAAYxF,0BAArF;AACA,gCAAUkF,aAAa,YAAYO,YAAnC;AACA5F,QAAAA,sBAAsB,CAACoF,eAAD,EAAkBC,aAAlB,CAAtB;;AACA,aAAKQ,mCAAL,CAAyCT,eAAzC,EAZqF,CAarF;;;AACA,YAAI,KAAKzD,kBAAL,CAAwBiC,QAAxB,KAAqC,CAAzC,EAA4C;AAC1C,cAAIkC,aAAa,GAAG,iBAAI,KAAKxE,KAAT,EAAgBqE,kBAAhB,EAAoC,UAApC,CAApB;AACAV,UAAAA,kBAAkB,CAACd,MAAnB,GAA4B,SAA5B;AACA,eAAK1C,UAAL,CAAgBsE,iBAAhB;AACA,iBAAOD,aAAP;AACD;;AACD,eAAOL,oBAAP;AACD;AACF;;AACD,QAAIP,QAAQ,GAAG,KAAKQ,gCAAL,CACb3D,aADa,EAEb+C,YAFa,EAGb7C,OAHa,EAIbgC,YAJa,EAKbgB,kBALa,CAAf;;AAOAjF,IAAAA,sBAAsB,CAACoF,eAAD,EAAkBC,aAAlB,CAAtB;;AACA,SAAKQ,mCAAL,CAAyCT,eAAzC;;AACA,WAAOF,QAAP;AACD;;AAEDW,EAAAA,mCAAmC,CAACG,WAAD,EAAuD;AACxF,QAAIC,UAAU,GAAG,KAAKtE,kBAAL,CAAwBuE,qBAAxB,CAA8CpF,GAA9C,CAAkDkF,WAAlD,CAAjB;;AACA,QAAI,CAACC,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAG,CAAb;AACD,KAFD,MAEO;AACLA,MAAAA,UAAU;AACX;;AACD,SAAKtE,kBAAL,CAAwBuE,qBAAxB,CAA8CtB,GAA9C,CAAkDoB,WAAlD,EAA+DC,UAA/D;AACD;;AAEDX,EAAAA,mCAAmC,CAACU,WAAD,EAAuD;AACxF,QAAIC,UAAU,GAAG,KAAKtE,kBAAL,CAAwBuE,qBAAxB,CAA8CpF,GAA9C,CAAkDkF,WAAlD,CAAjB;;AACA,QAAI,CAACC,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAG,CAAb;AACD,KAFD,MAEO;AACLA,MAAAA,UAAU;AACX;;AACD,SAAKtE,kBAAL,CAAwBuE,qBAAxB,CAA8CtB,GAA9C,CAAkDoB,WAAlD,EAA+DC,UAA/D;AACD;;AAEDE,EAAAA,oBAAoB,CAACH,WAAD,EAA0D;AAC5E,QAAI,KAAKzE,mBAAL,CAAyB6E,MAA7B,EAAqC;AACnC,aAAO,IAAP;AACD;;AACD,QAAI,KAAKzE,kBAAL,CAAwBuE,qBAAxB,CAA8CrC,GAA9C,CAAkDmC,WAAlD,CAAJ,EAAoE;AAClE,UAAIC,UAAU,GAAG,KAAKtE,kBAAL,CAAwBuE,qBAAxB,CAA8CpF,GAA9C,CAAkDkF,WAAlD,CAAjB;;AACA,UAAI,CAACC,UAAL,EAAiB;AACf,eAAO,KAAP;AACD;;AACD,aAAOA,UAAU,GAAG,CAApB;AACD;;AACD,WAAO,KAAP;AACD;;AAEDI,EAAAA,gCAAgC,CAC9BtE,aAD8B,EAE9B+C,YAF8B,EAG9B7C,OAH8B,EAI9BgC,YAJ8B,EAK9BT,aAL8B,EAMhB;AACd,QAAIuB,SAAS,GAAG,wBAAY,KAAKzD,KAAjB,EAAwBwD,YAAxB,EAAsC,MAAtC,CAAhB;AACA,QAAIE,UAAU,GAAG,wBAAY,KAAK1D,KAAjB,EAAwBwD,YAAxB,EAAsC,OAAtC,CAAjB;AACA,QAAIG,kBAAkB,GAAG,qCAAyB,cAAzB,EAAyC,kBAAzC,CAAzB;AACAzB,IAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;;AAEA,QAAID,UAAU,YAAYtE,kBAAtB,IAAqCsE,UAAU,YAAY7E,0BAA/D,EAAoF;AAClF;AACA,UAAI6E,UAAU,YAAYtE,kBAAtB,IAAqCsE,UAAU,CAACnE,UAAX,CAAsBgD,GAAtB,CAA0B,UAA1B,CAAzC,EAAgF;AAC9E,YAAIyC,UAAU,GAAG,wBAAY,KAAKhF,KAAjB,EAAwB0D,UAAxB,EAAoC,UAApC,CAAjB;;AAEA,aAAKuB,wBAAL,CACEvB,UADF,EAEEC,kBAFF,EAGE,kBAHF,EAIElD,aAJF,EAKEE,OALF,EAMEgC,YANF;;AAQA,YAAIqC,UAAU,YAAY5C,oCAA1B,EAAyD;AACvD,cAAIqB,SAAS,YAAYrE,kBAArB,IAAoCqE,SAAS,YAAY5E,0BAA7D,EAAkF;AAChF;AACA,gBAAI,KAAKgG,oBAAL,CAA0BpB,SAA1B,CAAJ,EAA0C;AACxC,kBAAIQ,SAAS,GAAG,iBAAI,KAAKjE,KAAT,EAAgByD,SAAhB,EAA2B,cAA3B,CAAhB,CADwC,CAExC;AACA;;AACA,kBAAI,EAAEQ,SAAS,YAAY5B,oBAAvB,KAAyC,KAAKpC,mBAAL,CAAyBiE,eAAtE,EAAuF;AACrF,oBAAIlD,MAAM,GAAG,qCAAyB,KAAKhB,KAA9B,EAAqCgF,UAArC,EAAiD,KAAKhF,KAAL,CAAWmD,UAAX,CAAsBrB,SAAvE,EAAkF,CAC7FmC,SAD6F,CAAlF,CAAb;AAGA,qBAAK9D,UAAL,CAAgBsE,iBAAhB;AACA,qBAAKtE,UAAL,CAAgB0D,mBAAhB;AACAF,gBAAAA,kBAAkB,CAACd,MAAnB,GAA4B,SAA5B;AACA,uBAAO,KAAKqC,cAAL,CAAoBzE,aAApB,EAAmCO,MAAnC,EAA2CL,OAA3C,EAAoDgC,YAApD,EAAkET,aAAlE,CAAP;AACD;AACF;AACF;;AACD,eAAKiD,+CAAL,CACE1E,aADF,EAEEE,OAFF,EAGEgC,YAHF,EAIEgB,kBAJF,EAKEqB,UALF;;AAOA;AACD,SA1BD,MA0BO;AACL,eAAKC,wBAAL,CACED,UADF,EAEErB,kBAFF,EAGE,iBAHF,EAIElD,aAJF,EAKEE,OALF,EAMEgC,YANF;AAQD;AACF;AACF;;AACD,SAAKtC,kBAAL,CAAwBiC,QAAxB;AACA;AACD;;AAED8C,EAAAA,2BAA2B,CACzB3E,aADyB,EAEzB+C,YAFyB,EAGzB7C,OAHyB,EAIzBgC,YAJyB,EAKzBT,aALyB,EAMX;AACd,QAAIuB,SAAS,GAAG,wBAAY,KAAKzD,KAAjB,EAAwBwD,YAAxB,EAAsC,MAAtC,CAAhB;AACA,QAAIE,UAAU,GAAG,wBAAY,KAAK1D,KAAjB,EAAwBwD,YAAxB,EAAsC,OAAtC,CAAjB;AACA,QAAI6B,QAAQ,GAAG,wBAAY,KAAKrF,KAAjB,EAAwBwD,YAAxB,EAAsC,KAAtC,CAAf;AACA,4BAAUC,SAAS,YAAY5E,0BAArB,IAA4C4E,SAAS,YAAYrE,kBAA3E;AACA,QAAIkG,kBAAkB,GAAG,wBAAY,KAAKtF,KAAjB,EAAwByD,SAAxB,EAAmC,QAAnC,CAAzB;AACA,QAAIE,kBAAkB,GAAG,qCAAyB,aAAzB,EAAwC,6BAAiB,KAAK3D,KAAtB,EAA6BsF,kBAA7B,CAAxC,CAAzB;AACApD,IAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;AACA,4BACE2B,kBAAkB,YAAYlD,oCAA9B,IAA+DkD,kBAAkB,YAAYC,yBAD/F,EAEE,uDAFF;AAIA,QAAI3G,KAAK,GAAG,qCAAyB,KAAKoB,KAA9B,EAAqCsF,kBAArC,EAAyD,KAAKtF,KAAL,CAAWmD,UAAX,CAAsBrB,SAA/E,EAA0F,CACpG4B,UADoG,EAEpG2B,QAFoG,CAA1F,CAAZ;AAIA,WAAO,KAAKH,cAAL,CAAoBzE,aAApB,EAAmC7B,KAAnC,EAA0C+B,OAA1C,EAAmDgC,YAAnD,EAAiEgB,kBAAjE,CAAP;AACD;;AAED6B,EAAAA,mCAAmC,CACjC/E,aADiC,EAEjC+C,YAFiC,EAGjC7C,OAHiC,EAIjCgC,YAJiC,EAKjCT,aALiC,EAMnB;AACd,QAAIuB,SAAS,GAAG,wBAAY,KAAKzD,KAAjB,EAAwBwD,YAAxB,EAAsC,MAAtC,CAAhB;AACA,QAAIE,UAAU,GAAG,wBAAY,KAAK1D,KAAjB,EAAwBwD,YAAxB,EAAsC,OAAtC,CAAjB;AAEA,QAAIG,kBAAkB,GAAG,qCAAyB,cAAzB,EAAyC,6BAAiB,KAAK3D,KAAtB,EAA6ByD,SAA7B,CAAzC,CAAzB;AACAvB,IAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;;AAEA,QAAID,UAAU,YAAYtE,kBAAtB,IAAqCsE,UAAU,YAAY7E,0BAA/D,EAAoF;AAClF;AACA,UAAI6E,UAAU,YAAYtE,kBAAtB,IAAqCsE,UAAU,CAACnE,UAAX,CAAsBgD,GAAtB,CAA0B,QAA1B,CAAzC,EAA8E;AAC5E,YAAIyC,UAAU,GAAG,wBAAY,KAAKhF,KAAjB,EAAwB0D,UAAxB,EAAoC,QAApC,CAAjB;;AAEA,YAAIsB,UAAU,YAAY5C,oCAA1B,EAAyD;AACvD,eAAK+C,+CAAL,CACE1E,aADF,EAEEE,OAFF,EAGEgC,YAHF,EAIEgB,kBAJF,EAKEqB,UALF;AAOD,SARD,MAQO,IAAIA,UAAU,YAAY3C,oBAA1B,EAAyC;AAC9C,eAAK4C,wBAAL,CACED,UADF,EAEErB,kBAFF,EAGE,iBAHF,EAIElD,aAJF,EAKEE,OALF,EAMEgC,YANF;AAQD;AACF;;AACD,WAAKsC,wBAAL,CACEvB,UADF,EAEEC,kBAFF,EAGE,kBAHF,EAIElD,aAJF,EAKEE,OALF,EAMEgC,YANF;;AAQA;AACD,KAxCa,CAyCd;AACA;AACA;;;AACA,SAAKtC,kBAAL,CAAwBiC,QAAxB;AACD;;AAEDmD,EAAAA,sBAAsB,CACpBhF,aADoB,EAEpBC,KAFoB,EAGpBC,OAHoB,EAIpBgC,YAJoB,EAKpBT,aALoB,EAMb;AACP,QAAItD,KAAJ;;AAEA,QAAI8D,aAAa,GAAG,KAAKU,0BAAL,CAAgC3C,aAAhC,EAA+CC,KAA/C,EAAsDC,OAAtD,CAApB;;AACA,QAAI;AAAE+E,MAAAA,kBAAF;AAAsBC,MAAAA;AAAtB,QAA0CjD,aAA9C,CAJO,CAMP;;AACA,QAAIgD,kBAAkB,CAACxG,IAAnB,KAA4B,CAA5B,IAAiCyG,eAAe,CAACzG,IAAhB,KAAyB,CAA9D,EAAiE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAI;AACFN,QAAAA,KAAK,GAAG,KAAKqE,4BAAL,CAAkCxC,aAAlC,EAAiDC,KAAjD,EAAwDC,OAAxD,EAAiEgC,YAAjE,EAA+ET,aAA/E,CAAR;AACD,OAFD,CAEE,OAAOf,KAAP,EAAc;AACd;AACA;AACA,YAAIA,KAAK,YAAYyE,2BAArB,EAAyC,CACvC;AACD,SAFD,MAEO;AACL;AACA,gBAAMzE,KAAN;AACD;AACF;AACF,KArCM,CAsCP;;;AACA,QAAIvC,KAAK,KAAKkD,SAAd,EAAyB;AACvBlD,MAAAA,KAAK,GAAG,KAAK6D,6BAAL,CACNhC,aADM,EAENC,KAFM,EAGNC,OAHM,EAIN+B,aAJM,EAKNC,YALM,EAMNT,aANM,CAAR;AAQD;;AACD,WAAOtD,KAAP;AACD;;AAEDiH,EAAAA,wCAAwC,CACtCpF,aADsC,EAEtCC,KAFsC,EAGtCC,OAHsC,EAItCgC,YAJsC,EAKtCT,aALsC,EAM/B;AACP;AACA,QAAIa,QAAQ,GAAG,uDAAsC,KAAK/C,KAA3C,EAAkDS,aAAlD,EAAiEC,KAAjE,EAAwEC,OAAxE,EAAiFuB,aAAjF,CAAf;AACA,QAAI4D,wBAAwB,GAAG,iBAAI,KAAK9F,KAAT,EAAgBS,aAAhB,EAA+B,0BAA/B,CAA/B;AACA,QAAIsF,uBAAuB,GAAG,iBAAI,KAAK/F,KAAT,EAAgB+C,QAAhB,EAA0B,yBAA1B,CAA9B,CAJO,CAMP;AACA;;AACA,QACE+C,wBAAwB,KAAK,KAAK9F,KAAL,CAAWmD,UAAX,CAAsBrB,SAAnD,IACAiE,uBAAuB,KAAK,KAAK/F,KAAL,CAAWmD,UAAX,CAAsBrB,SAFpD,EAGE;AACA,UAAIgE,wBAAwB,YAAY1D,oCAApC,IAAqE0D,wBAAwB,CAACE,KAAlG,EAAyG;AACvG,uDAA8B,KAAKhG,KAAnC,EAA0C8F,wBAA1C,EAAoE/C,QAApE,EAA8ErC,KAA9E;AACD;AACF,KAPD,MAOO;AACL;AACA,UAAIuF,kBAAkB,GAAG,iBAAI,KAAKjG,KAAT,EAAgB+C,QAAhB,EAA0B,oBAA1B,CAAzB;;AAEA,UAAIkD,kBAAkB,YAAY7D,oCAA9B,IAA+D6D,kBAAkB,CAACD,KAAtF,EAA6F;AAC3FC,QAAAA,kBAAkB,CAACD,KAAnB,CAAyBjD,QAAzB,EAAmC,EAAnC;AACD;;AACD,UAAImD,wBAAwB,GAAG,iBAAI,KAAKlG,KAAT,EAAgB+C,QAAhB,EAA0B,2BAA1B,CAA/B;;AAEA,UAAImD,wBAAwB,YAAY9D,oCAApC,IAAqE8D,wBAAwB,CAACF,KAAlG,EAAyG;AACvGE,QAAAA,wBAAwB,CAACF,KAAzB,CAA+BjD,QAA/B,EAAyC,EAAzC;AACD;AACF;;AACD,QAAIC,YAAY,GAAG,iBAAI,KAAKhD,KAAT,EAAgB+C,QAAhB,EAA0B,QAA1B,CAAnB;AAEA,4BAAUC,YAAY,YAAYZ,oCAAlC;AACA,WAAO,qCAAyB,KAAKpC,KAA9B,EAAqCgD,YAArC,EAAmDD,QAAnD,EAA6D,EAA7D,CAAP;AACD;;AAEDoD,EAAAA,sBAAsB,CACpBC,SADoB,EAEpB1F,KAFoB,EAGpBC,OAHoB,EAIpBgC,YAJoB,EAKpBT,aALoB,EAMpB;AACAA,IAAAA,aAAa,CAACW,MAAd,GAAuB,SAAvB;AACAX,IAAAA,aAAa,CAACmE,OAAd,GAAwB,gBAAxB;AACA,4BAAUD,SAAS,CAACE,gBAAV,YAAsChC,YAAhD,EAHA,CAIA;;AACA,QAAI,wBAAY,KAAKtE,KAAjB,EAAwBW,OAAxB,EAAiC,OAAjC,MAA8C,KAAKX,KAAL,CAAWmD,UAAX,CAAsBrB,SAAxE,EAAmF;AACjF,UAAIyE,oBAAoB,GAAGlE,qBAAcmE,oBAAd,CAAmC,KAAKxG,KAAxC,EAA+C,eAA/C,CAA3B;;AACA,UAAIyG,wBAAwB,GAAGpE,qBAAcmE,oBAAd,CAAmC,KAAKxG,KAAxC,EAA+C,2BAA/C,CAA/B;;AACA,UAAI0G,qBAAqB,GAAGrE,qBAAcmE,oBAAd,CAC1B,KAAKxG,KADqB,EAE1B,6CAF0B,CAA5B;;AAIA2G,6BAAWC,GAAX,CAAe,KAAK5G,KAApB,EAA2BW,OAA3B,EAAoC,OAApC,EAA6C4F,oBAA7C,EAAmE,IAAnE;;AACAI,6BAAWC,GAAX,CAAe,KAAK5G,KAApB,EAA2BuG,oBAA3B,EAAiD,aAAjD,EAAgEE,wBAAhE,EAA0F,IAA1F;;AACAE,6BAAWC,GAAX,CAAe,KAAK5G,KAApB,EAA2ByG,wBAA3B,EAAqD,mBAArD,EAA0EC,qBAA1E,EAAiG,IAAjG;AACD,KAfD,CAgBA;;;AACA,SAAKrG,kBAAL,CAAwBwG,YAAxB,CAAqCC,GAArC,CAAyC,OAAzC;AACA,WAAO,KAAK7F,iBAAL,CAAuBmF,SAAS,CAACE,gBAAjC,EAAmD5F,KAAnD,EAA0DC,OAA1D,EAAmEgC,YAAnE,EAAiFT,aAAjF,CAAP;AACD;;AAEDjB,EAAAA,iBAAiB,CACfR,aADe,EAEfC,KAFe,EAGfC,OAHe,EAIfgC,YAJe,EAKfT,aALe,EAMf;AACA,QAAI,mCAAuB,KAAKlC,KAA5B,EAAmCS,aAAnC,CAAJ,EAAuD;AACrD,YAAM,IAAIsG,sBAAJ,CAAkB,4CAAlB,CAAN;AACD;;AACD,SAAK5G,UAAL,CAAgB0D,mBAAhB;;AACA,QAAI,yCAA6B,KAAK7D,KAAlC,EAAyCS,aAAzC,CAAJ,EAA6D;AAC3D,8BAAUA,aAAa,YAAY4B,oBAAnC;AACA,UAAI+D,SAAS,GAAG,KAAKpG,KAAL,CAAWsB,KAAX,CAAiB0F,aAAjB,CAA+BxH,GAA/B,CAAmCiB,aAAnC,CAAhB;AAEA,8BAAU2F,SAAV;;AACA,UACE,OAAOA,SAAP,KAAqB,QAArB,IACAA,SAAS,CAACa,MAAV,KAAqB,KAAKjH,KAAL,CAAWkH,WAAX,CAAuBC,UAD5C,IAEA,KAAKlH,mBAAL,CAAyBiE,eAH3B,EAIE;AACA,eAAO,KAAKiC,sBAAL,CAA4BC,SAA5B,EAAuC1F,KAAvC,EAA8CC,OAA9C,EAAuDgC,YAAvD,EAAqET,aAArE,CAAP;AACD;;AACD,WAAKF,sBAAL,CAA4BvB,aAA5B,EAA2CyB,aAA3C;;AACAA,MAAAA,aAAa,CAACW,MAAd,GAAuB,UAAvB;AACAX,MAAAA,aAAa,CAACmE,OAAd,GAAwB,gBAAxB;AACA,YAAM,IAAIvD,+BAAJ,CAA2BZ,aAA3B,CAAN;AACD;;AACD,4BAAUzB,aAAa,YAAY2B,oCAAzB,IAA0D3B,aAAa,YAAY8E,yBAA7F;AACA,QAAI3G,KAAJ;AACA,QAAIwI,YAAY,GAAGzG,OAAnB,CAxBA,CA0BA;;AACA,QAAI,8CAAkC,KAAKX,KAAvC,EAA8CS,aAA9C,CAAJ,EAAkE;AAChE,YAAM,IAAIpB,wBAAJ,CAAoB,8DAApB,CAAN;AACD,KAFD,MAEO,IAAI,kCAAsB,KAAKW,KAA3B,EAAkCS,aAAlC,CAAJ,EAAsD;AAC3D,UAAI,KAAKR,mBAAL,CAAyBiE,eAA7B,EAA8C;AAC5CtF,QAAAA,KAAK,GAAG,KAAKiH,wCAAL,CACNpF,aADM,EAENC,KAFM,EAGNC,OAHM,EAINgC,YAJM,EAKNT,aALM,CAAR;AAOD,OARD,MAQO;AACLtD,QAAAA,KAAK,GAAG,KAAK6G,sBAAL,CAA4BhF,aAA5B,EAA2CC,KAA3C,EAAkDC,OAAlD,EAA2DgC,YAA3D,EAAyET,aAAzE,CAAR;AACD;AACF,KAZM,MAYA;AACLtD,MAAAA,KAAK,GAAG,KAAKsE,2BAAL,CAAiCzC,aAAjC,EAAgDC,KAAhD,EAAuDC,OAAvD,EAAgEuB,aAAhE,CAAR;;AACA,UAAI,yCAA6B,KAAKlC,KAAlC,EAAyCpB,KAAzC,CAAJ,EAAqD;AACnD,gCAAUA,KAAK,YAAYQ,kBAA3B;;AACA,YAAIuD,YAAY,KAAK,MAArB,EAA6B;AAC3B,gBAAM,IAAItD,wBAAJ,CAAoB,oDAApB,CAAN;AACD,SAFD,MAEO;AACL;AACA,iBAAO;AACL2B,YAAAA,MAAM,EAAEpC,KADH;AAELwI,YAAAA;AAFK,WAAP;AAID;AACF;AACF;;AACD,4BAAUxI,KAAK,KAAKkD,SAApB;AACA,WAAO;AACLd,MAAAA,MAAM,EAAE,KAAKkE,cAAL,CACNzE,aADM,EAEN7B,KAFM,EAGN+B,OAHM,EAINgC,YAAY,KAAK,MAAjB,GAA0B,WAA1B,GAAwCA,YAJlC,EAKNT,aALM,CADH;AAQLkF,MAAAA;AARK,KAAP;AAUD;;AAED9G,EAAAA,yBAAyB,GAAuB;AAC9C,WAAO;AACLG,MAAAA,aAAa,EAAEqB,SADV;AAEL+E,MAAAA,YAAY,EAAE,IAAID,GAAJ,EAFT;AAGLtE,MAAAA,QAAQ,EAAE,CAHL;AAILO,MAAAA,MAAM,EAAE,QAJH;AAKL+B,MAAAA,qBAAqB,EAAE,IAAIyC,GAAJ;AALlB,KAAP;AAOD;;AAEDC,EAAAA,+BAA+B,CAAC1I,KAAD,EAA4C;AACzE;AACA,QAAI,KAAKoB,KAAL,CAAWkH,WAAX,CAAuBC,UAAvB,KAAsCrF,SAA1C,EAAqD;AACnD,UAAIyF,aAAa,GAAG,wBAAY,KAAKvH,KAAjB,EAAwB,KAAKA,KAAL,CAAWkH,WAAX,CAAuBC,UAA/C,EAA2D,eAA3D,CAApB;;AACA,UAAIvI,KAAK,KAAK2I,aAAd,EAA6B;AAC3B,eAAO,sBAAP;AACD;AACF;;AACD,QAAI3I,KAAK,KAAK,2BAAe,gBAAf,EAAiC,KAAKoB,KAAtC,CAAd,EAA4D;AAC1D,aAAO,UAAP;AACD;;AACD,QAAI,CAACpB,KAAK,YAAYQ,kBAAjB,IAAgCR,KAAK,YAAYC,0BAAlD,KAA0ED,KAAK,CAAC4I,IAAN,KAAe,aAA7F,EAA4G;AAC1G,UAAIC,QAAQ,GAAG,wBAAY,KAAKzH,KAAjB,EAAwBpB,KAAxB,EAA+B,UAA/B,CAAf;;AAEA,UAAI6I,QAAQ,KAAK,2BAAe,eAAf,EAAgC,KAAKzH,KAArC,CAAjB,EAA8D;AAC5D,eAAO,kBAAP;AACD;;AACD,UAAIyH,QAAQ,KAAK,2BAAe,gBAAf,EAAiC,KAAKzH,KAAtC,CAAjB,EAA+D;AAC7D,eAAO,kBAAP;AACD;;AACD,UAAIyH,QAAQ,KAAK,2BAAe,mBAAf,EAAoC,KAAKzH,KAAzC,CAAjB,EAAkE;AAChE,eAAO,aAAP;AACD;AACF;;AACD,WAAO,QAAP;AACD;;AAED0H,EAAAA,sBAAsB,CACpBC,gBADoB,EAEpBC,IAFoB,EAGpBnH,aAHoB,EAIpBE,OAJoB,EAKpBgC,YALoB,EAMpBT,aANoB,EAOpB;AACA,QAAI,CAAC2F,gBAAD,EAAmBC,YAAnB,IAAmCF,IAAvC;AACA,QAAIjE,kBAAkB,GAAG,qCAAyB,SAAzB,EAAoC,uBAApC,CAAzB;;AACA,QAAIoE,wBAAwB,GAAG,KAAK7C,cAAL,CAC7BzE,aAD6B,EAE7BoH,gBAF6B,EAG7BlH,OAH6B,EAI7BgC,YAJ6B,EAK7BgB,kBAL6B,CAA/B;;AAOAzB,IAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;;AACA,QAAIoE,wBAAwB,KAAKF,gBAAjC,EAAmD;AACjD,WAAK1H,UAAL,CAAgBsE,iBAAhB;AACA,UAAIuD,aAAa,GAAG,KAAKhI,KAAL,CAAWkH,WAAX,CAAuBe,QAA3C;AACA,8BAAUD,aAAa,YAAY5I,kBAAnC;AACA,UAAI8I,kBAAkB,GAAG,wBAAY,KAAKlI,KAAjB,EAAwBgI,aAAxB,EAAuC,cAAvC,CAAzB;AACA,aAAO3F,qBAAc8F,+BAAd,CACL,KAAKnI,KADA,EAELZ,kBAFK,EAGL,CAAC8I,kBAAD,EAAqBH,wBAArB,EAA+CD,YAA/C,CAHK,EAIL,0CAA0B,qBAA1B,CAJK,EAKL;AAAEM,QAAAA,aAAa,EAAE,IAAjB;AAAuBC,QAAAA,MAAM,EAAE;AAA/B,OALK,CAAP;AAOD;;AACD,WAAOV,gBAAP;AACD;;AAEDW,EAAAA,gCAAgC,CAC9B7H,aAD8B,EAE9B8H,SAF8B,EAG9BC,aAH8B,EAI9BC,YAJ8B,EAK9B9H,OAL8B,EAM9BuB,aAN8B,EAO9B;AACA,QAAItD,KAAK,GAAG,KAAKoB,KAAL,CAAW0I,+BAAX,CACVH,SADU,EAEV,MAAM;AACJ,aAAO,KAAKvI,KAAL,CAAW0B,kBAAX,CACL,MACE,sDACE,KAAK1B,KADP,EAEE,KAAKkF,cAAL,CAAoBzE,aAApB,EAAmC+H,aAAnC,EAAkD7H,OAAlD,EAA2D,YAA3D,EAAyEuB,aAAzE,CAFF,CAFG,EAML,IANK,EAOL,6CAPK,CAAP;AASD,KAZS,EAaV,MAAM;AACJ,aAAO,KAAKlC,KAAL,CAAW0B,kBAAX,CACL,MACE,sDACE,KAAK1B,KADP,EAEE,KAAKkF,cAAL,CAAoBzE,aAApB,EAAmCgI,YAAnC,EAAiD9H,OAAjD,EAA0D,YAA1D,EAAwEuB,aAAxE,CAFF,CAFG,EAML,IANK,EAOL,4CAPK,CAAP;AASD,KAvBS,CAAZ;;AAyBA,QAAItD,KAAK,YAAYyD,oBAAjB,IAAkCzD,KAAK,CAAC4I,IAAN,KAAe,aAArD,EAAoE;AAClE,aAAO,kDAAkC,KAAKxH,KAAvC,EAA8CwI,aAA9C,EAA6DC,YAA7D,EAA2E7J,KAA3E,CAAP;AACD;;AACD,WAAOA,KAAP;AACD;;AAED+J,EAAAA,4BAA4B,CAC1BlI,aAD0B,EAE1B7B,KAF0B,EAG1B+B,OAH0B,EAI1BuB,aAJ0B,EAK1B;AACA,QAAI,CAAC0G,SAAD,EAAYC,UAAZ,IAA0BjK,KAAK,CAACgJ,IAApC;AACA,QAAIkB,QAAQ,GAAGlK,KAAK,CAAC4I,IAArB;AAEA,4BAAUoB,SAAS,YAAYvG,oBAA/B;;AACA,QAAIyG,QAAQ,KAAK,IAAjB,EAAuB;AACrB,aAAO,KAAKR,gCAAL,CACL7H,aADK,EAELmI,SAFK,EAGLA,SAHK,EAILC,UAJK,EAKLlI,OALK,EAMLuB,aANK,CAAP;AAQD,KATD,MASO;AACL,aAAO,KAAKoG,gCAAL,CACL7H,aADK,EAELmI,SAFK,EAGLC,UAHK,EAILD,SAJK,EAKLjI,OALK,EAMLuB,aANK,CAAP;AAQD;AACF;;AAED6G,EAAAA,qBAAqB,CACnBtI,aADmB,EAEnB7B,KAFmB,EAGnB+B,OAHmB,EAInBgC,YAJmB,EAKnBT,aALmB,EAMZ;AACP,4BAAU,KAAKlC,KAAL,CAAWgJ,SAArB,EADO,CAEP;;AACA,QAAIpK,KAAK,CAAC4I,IAAN,KAAe,aAAnB,EAAkC;AAChC,UAAI,CAACe,SAAD,EAAYC,aAAZ,EAA2BC,YAA3B,IAA2C7J,KAAK,CAACgJ,IAArD;AACA,8BAAUW,SAAS,YAAYlG,oBAA/B;AACA,aAAO,KAAKiG,gCAAL,CACL7H,aADK,EAEL8H,SAFK,EAGLC,aAHK,EAILC,YAJK,EAKL9H,OALK,EAMLuB,aANK,CAAP;AAQD,KAXD,MAWO,IAAItD,KAAK,CAAC4I,IAAN,KAAe,IAAf,IAAuB5I,KAAK,CAAC4I,IAAN,KAAe,IAA1C,EAAgD;AACrD,aAAO,KAAKmB,4BAAL,CAAkClI,aAAlC,EAAiD7B,KAAjD,EAAwD+B,OAAxD,EAAiEuB,aAAjE,CAAP;AACD,KAFM,MAEA;AACL,UAAItD,KAAK,YAAYyD,oBAAjB,IAAkC,KAAKrC,KAAL,CAAWsB,KAAX,CAAiB0F,aAAjB,CAA+BzE,GAA/B,CAAmC3D,KAAnC,CAAtC,EAAiF;AAC/E,YAAIwH,SAAS,GAAG,KAAKpG,KAAL,CAAWsB,KAAX,CAAiB0F,aAAjB,CAA+BxH,GAA/B,CAAmCZ,KAAnC,CAAhB;AAEA,gCAAUwH,SAAS,KAAKtE,SAAxB;;AACA,YAAIsE,SAAS,CAACa,MAAV,KAAqB,KAAKjH,KAAL,CAAWkH,WAAX,CAAuBe,QAA5C,IAAwD7B,SAAS,CAAC6C,YAAV,KAA2B,cAAvF,EAAuG;AACrG,iBAAO,KAAKvB,sBAAL,CACL9I,KADK,EAELwH,SAAS,CAACwB,IAFL,EAGLnH,aAHK,EAILE,OAJK,EAKLgC,YALK,EAMLT,aANK,CAAP;AAQD;AACF;;AACD,WAAK7B,kBAAL,CAAwBiC,QAAxB;AACD;;AACD,WAAO1D,KAAP;AACD;;AAEDsK,EAAAA,4BAA4B,CAC1BzI,aAD0B,EAE1B+C,YAF0B,EAG1B7C,OAH0B,EAI1BgC,YAJ0B,EAK1BT,aAL0B,EAMb;AACb,QAAIuB,SAAS,GAAG,wBAAY,KAAKzD,KAAjB,EAAwBwD,YAAxB,EAAsC,MAAtC,CAAhB;AACA,QAAIE,UAAU,GAAG,wBAAY,KAAK1D,KAAjB,EAAwBwD,YAAxB,EAAsC,OAAtC,CAAjB;;AAEA,SAAKyB,wBAAL,CAA8BvB,UAA9B,EAA0CxB,aAA1C,EAAyD,kBAAzD,EAA6EzB,aAA7E,EAA4FE,OAA5F,EAAqGgC,YAArG;;AACA,QAAIc,SAAS,YAAYpB,oBAAzB,EAAwC;AACtC,WAAK4C,wBAAL,CACExB,SADF,EAEEvB,aAFF,EAGE,uBAHF,EAIEzB,aAJF,EAKEE,OALF,EAMEgC,YANF;;AAQA,aAAOa,YAAP;AACD,KAVD,MAUO;AACL,UAAIG,kBAAkB,GAAG,qCAAyB,UAAzB,EAAqC,6BAAiB,KAAK3D,KAAtB,EAA6ByD,SAA7B,CAArC,CAAzB;AACAvB,MAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;AACA,UAAIwF,cAAc,GAAI,+DAAtB;AACAxF,MAAAA,kBAAkB,CAAC0C,OAAnB,GAA6B8C,cAA7B;;AACA,WAAKC,qBAAL,CAA2B5F,YAA3B,EAAyC2F,cAAzC;;AACA,WAAK9I,kBAAL,CAAwBiC,QAAxB;AACA,aAAOkB,YAAP;AACD;AACF;;AAED6F,EAAAA,0BAA0B,CACxB5I,aADwB,EAExB+C,YAFwB,EAGxB7C,OAHwB,EAIxBgC,YAJwB,EAKxBT,aALwB,EAMX;AACb,QAAIuB,SAAS,GAAG,wBAAY,KAAKzD,KAAjB,EAAwBwD,YAAxB,EAAsC,MAAtC,CAAhB;AACA,QAAIE,UAAU,GAAG,wBAAY,KAAK1D,KAAjB,EAAwBwD,YAAxB,EAAsC,OAAtC,CAAjB;AAEA,QAAIG,kBAAkB,GAAG,qCAAyB,UAAzB,EAAqC,6BAAiB,KAAK3D,KAAtB,EAA6ByD,SAA7B,CAArC,CAAzB;AACAvB,IAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;AACA,QAAIwF,cAAc,GAAI,0CAAtB;AACAxF,IAAAA,kBAAkB,CAAC0C,OAAnB,GAA6B8C,cAA7B;;AAEA,SAAKnH,sBAAL,CAA4ByB,SAA5B,EAAuCE,kBAAvC;;AACA,SAAKsB,wBAAL,CAA8BvB,UAA9B,EAA0CxB,aAA1C,EAAyD,kBAAzD,EAA6EzB,aAA7E,EAA4FE,OAA5F,EAAqGgC,YAArG;;AACA,SAAKyG,qBAAL,CAA2B5F,YAA3B,EAAyC2F,cAAzC;;AACA,WAAO3F,YAAP;AACD;;AAED8F,EAAAA,mCAAmC,CACjC7I,aADiC,EAEjC+C,YAFiC,EAGjC7C,OAHiC,EAIjCgC,YAJiC,EAKjCT,aALiC,EAMpB;AACb,QAAIuB,SAAS,GAAG,wBAAY,KAAKzD,KAAjB,EAAwBwD,YAAxB,EAAsC,MAAtC,CAAhB;AACA,QAAIE,UAAU,GAAG,wBAAY,KAAK1D,KAAjB,EAAwBwD,YAAxB,EAAsC,OAAtC,CAAjB;AAEA,QAAIG,kBAAkB,GAAG,qCAAyB,UAAzB,EAAqC,6BAAiB,KAAK3D,KAAtB,EAA6ByD,SAA7B,CAArC,CAAzB;AACAvB,IAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;AACA,QAAIwF,cAAc,GAAI,oCAAtB;AACAxF,IAAAA,kBAAkB,CAAC0C,OAAnB,GAA6B8C,cAA7B;;AAEA,SAAKC,qBAAL,CAA2B5F,YAA3B,EAAyC2F,cAAzC;;AACA,SAAKlE,wBAAL,CAA8BvB,UAA9B,EAA0CxB,aAA1C,EAAyD,kBAAzD,EAA6EzB,aAA7E,EAA4FE,OAA5F,EAAqGgC,YAArG;;AACA,WAAOa,YAAP;AACD;;AAEDY,EAAAA,gCAAgC,CAC9B3D,aAD8B,EAE9B+C,YAF8B,EAG9B7C,OAH8B,EAI9BgC,YAJ8B,EAK9BT,aAL8B,EAMjB;AACb,QAAIwB,UAAU,GAAG,wBAAY,KAAK1D,KAAjB,EAAwBwD,YAAxB,EAAsC,OAAtC,CAAjB,CADa,CAEb;;AACA,QAAIE,UAAU,YAAYtE,kBAAtB,IAAqCsE,UAAU,CAACnE,UAAX,CAAsBgD,GAAtB,CAA0B,UAA1B,CAAzC,EAAgF;AAC9E,UAAIiC,aAAa,GAAG,iBAAI,KAAKxE,KAAT,EAAgB0D,UAAhB,EAA4B,UAA5B,CAApB;;AAEA,UAAIc,aAAa,YAAYF,YAA7B,EAAoC;AAClC,YAAIiF,gBAAgB,GAAG,KAAKrE,cAAL,CACrBzE,aADqB,EAErB+D,aAFqB,EAGrB7D,OAHqB,EAIrBgC,YAJqB,EAKrBT,aALqB,EAMrB,KANqB,CAAvB,CADkC,CASlC;;;AACA,YAAIqH,gBAAgB,YAAYC,iBAA5B,IAA0C,CAACD,gBAAgB,CAACE,aAAhE,EAA+E;AAC7EF,UAAAA,gBAAgB,GAAG,4BAAgB,KAAKvJ,KAArB,EAA4BuJ,gBAA5B,EAA8C,IAA9C,CAAnB;AACD;;AACD,YAAIA,gBAAgB,KAAK/E,aAAzB,EAAwC;AACtC,cAAIkF,QAAQ,GAAG,uBAAW,KAAK1J,KAAhB,EAAuB0D,UAAvB,EAAmC6F,gBAAnC,CAAf,CADsC,CAGtC;AACA;AACA;AACA;;AACA,2DAAqC,KAAKvJ,KAA1C,EAAiDwD,YAAjD,EAA+D,OAA/D,EAAwEkG,QAAxE;AACD;AACF;AACF;;AACD,WAAOlG,YAAP;AACD;;AAEDmG,EAAAA,yBAAyB,CACvBlJ,aADuB,EAEvB+C,YAFuB,EAGvB7C,OAHuB,EAIvBgC,YAJuB,EAKvBT,aALuB,EAMV;AACb,SAAK/B,UAAL,CAAgB0D,mBAAhB;;AACA,QAAI,KAAK5D,mBAAL,CAAyBiE,eAA7B,EAA8C;AAC5C,UAAIP,kBAAkB,GAAG,qCAAyB,SAAzB,EAAoC,gBAApC,CAAzB;AACAzB,MAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;AACA,WAAKxD,UAAL,CAAgBsE,iBAAhB;;AACA,UAAIb,QAAQ,GAAG,KAAKQ,gCAAL,CACb3D,aADa,EAEb+C,YAFa,EAGb7C,OAHa,EAIbgC,YAJa,EAKbgB,kBALa,CAAf;;AAOA,aAAOC,QAAP;AACD,KAZD,MAYO;AACL,UAAID,kBAAkB,GAAG,qCAAyB,QAAzB,EAAmC,gBAAnC,CAAzB;AACAzB,MAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;AACA,aAAO,KAAKS,gCAAL,CACL3D,aADK,EAEL+C,YAFK,EAGL7C,OAHK,EAILgC,YAJK,EAKLgB,kBALK,CAAP;AAOD;AACF;;AAEDiG,EAAAA,oBAAoB,CAClBnJ,aADkB,EAElB+C,YAFkB,EAGlB7C,OAHkB,EAIlBgC,YAJkB,EAKlBT,aALkB,EAMlB2H,QANkB,EAOlB;AACA;AACA;AACA;AACA;AACA;AACArG,IAAAA,YAAY,GAAG,8BAAkB,KAAKxD,KAAvB,EAA8BwD,YAA9B,EAA4C,KAA5C,CAAf;AACA,QAAIC,SAAS,GAAG,wBAAY,KAAKzD,KAAjB,EAAwBwD,YAAxB,EAAsC,MAAtC,CAAhB;AACA,QAAIE,UAAU,GAAG,wBAAY,KAAK1D,KAAjB,EAAwBwD,YAAxB,EAAsC,OAAtC,CAAjB;AACA,QAAI6B,QAAQ,GAAG,wBAAY,KAAKrF,KAAjB,EAAwBwD,YAAxB,EAAsC,KAAtC,CAAf;AACA,QAAIsG,QAAQ,GAAG,wBAAY,KAAK9J,KAAjB,EAAwBwD,YAAxB,EAAsC,KAAtC,CAAf;AAEA,4BACE,EAAEC,SAAS,YAAYpB,oBAArB,IAAsCoB,SAAS,CAAC+D,IAAV,KAAmB,aAA3D,CADF,EAEG,gGAFH;AAIA,4BACE,EAAE9D,UAAU,YAAYrB,oBAAtB,IAAuCqB,UAAU,CAAC8D,IAAX,KAAoB,aAA7D,CADF,EAEG,iGAFH;;AAKA,QAAI/D,SAAS,YAAYsG,kBAAzB,EAAsC;AACpC,aAAO,KAAK3F,gCAAL,CAAsC3D,aAAtC,EAAqD+C,YAArD,EAAmE7C,OAAnE,EAA4EgC,YAA5E,EAA0FT,aAA1F,CAAP;AACD;;AACD,QAAI,EAAEwB,UAAU,YAAYtE,kBAAtB,IAAqCsE,UAAU,YAAY7E,0BAA7D,CAAJ,EAAuF;AACrF,WAAKuK,qBAAL,CACE5F,YADF,EAEG,6EAFH;;AAIA,aAAOA,YAAP;AACD;;AAED,QAAIwG,2BAA2B,GAAG,KAAK1C,+BAAL,CAAqC7D,SAArC,CAAlC,CAhCA,CAkCA;AACA;;;AACA,QACE,CAAC,KAAKxD,mBAAL,CAAyBiE,eAA1B,IACA,EAAEmB,QAAQ,YAAY4E,gBAAtB,CADA,IAEAD,2BAA2B,KAAK,aAFhC,IAGA;AACA;AACA;AACA,MAAE3E,QAAQ,YAAYhD,oBAAtB,CAPF,EAQE;AACA,WAAKgH,0BAAL,CAAgC5I,aAAhC,EAA+C+C,YAA/C,EAA6D7C,OAA7D,EAAsEgC,YAAtE,EAAoFT,aAApF;AACD;;AAED,QAAI;AACF,UAAIlB,MAAJ;;AAEA,cAAQgJ,2BAAR;AACE,aAAK,QAAL;AAAe;AACb,gBACE,EACEvG,SAAS,YAAYrB,oCAArB,IACAqB,SAAS,YAAY8B,yBADrB,IAEA,yCAA6B,KAAKvF,KAAlC,EAAyCyD,SAAzC,CAHF,CADF,EAME;AACA,qBAAO,KAAKyF,4BAAL,CAAkCzI,aAAlC,EAAiD+C,YAAjD,EAA+D7C,OAA/D,EAAwEgC,YAAxE,EAAsFT,aAAtF,CAAP;AACD;;AACD,gBAAIyB,kBAAkB,GAAG,qCAAyB,SAAzB,EAAoC,6BAAiB,KAAK3D,KAAtB,EAA6ByD,SAA7B,CAApC,CAAzB;;AACA,gBAAIyG,MAAM,GAAG,KAAKjJ,iBAAL,CACXwC,SADW,EAEXC,UAFW,EAGX/C,OAHW,EAIXgC,YAAY,KAAK,YAAjB,GAAgC,QAAhC,GAA2CA,YAJhC,EAKXgB,kBALW,CAAb;;AAOA,gBAAI,KAAKvD,MAAL,KAAgB0B,SAAhB,IAA6B,KAAK9B,KAAL,CAAWsB,KAAX,CAAiB6I,OAA9C,IAAyDxG,kBAAkB,CAACd,MAAnB,KAA8B,SAA3F,EAAsG;AACpG,mBAAKzC,MAAL,CAAYgK,cAAZ,CAA4B,SAAQzG,kBAAkB,CAAC0G,IAAK,YAA5D;AACD;;AACDnI,YAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;AACA3C,YAAAA,MAAM,GAAGkJ,MAAM,CAAClJ,MAAhB;AACA,iBAAKb,UAAL,CAAgBsE,iBAAhB;AACA;AACD;;AACD,aAAK,UAAL;AAAiB;AACfzD,YAAAA,MAAM,GAAG,KAAK2I,yBAAL,CAA+BlJ,aAA/B,EAA8C+C,YAA9C,EAA4D7C,OAA5D,EAAqEgC,YAArE,EAAmFT,aAAnF,CAAT;AACA;AACD;;AACD,aAAK,sBAAL;AAA6B;AAC3B,oCAAUuB,SAAS,YAAY5E,0BAA/B;AACAmC,YAAAA,MAAM,GAAG,KAAKwE,mCAAL,CACP/E,aADO,EAEP+C,YAFO,EAGP7C,OAHO,EAIPgC,YAJO,EAKPT,aALO,CAAT;AAOA;AACD;;AACD,aAAK,kBAAL;AAAyB;AACvBlB,YAAAA,MAAM,GAAG,KAAKuC,gCAAL,CACP9C,aADO,EAEP+C,YAFO,EAGP7C,OAHO,EAIPgC,YAJO,EAKPT,aALO,CAAT;AAOA;AACD;;AACD,aAAK,kBAAL;AAAyB;AACvBlB,YAAAA,MAAM,GAAG,KAAK+D,gCAAL,CACPtE,aADO,EAEP+C,YAFO,EAGP7C,OAHO,EAIPgC,YAJO,EAKPT,aALO,CAAT;AAOA;AACD;;AACD,aAAK,aAAL;AAAoB;AAClBlB,YAAAA,MAAM,GAAG,KAAKoE,2BAAL,CAAiC3E,aAAjC,EAAgD+C,YAAhD,EAA8D7C,OAA9D,EAAuEgC,YAAvE,EAAqFT,aAArF,CAAT;AACA;AACD;;AACD;AACE,kCAAU,KAAV,EAAiB,2CAAjB;AAnEJ;;AAsEA,UAAIlB,MAAM,KAAKc,SAAf,EAA0B;AACxBd,QAAAA,MAAM,GAAGwC,YAAT;AACD;;AAED,UAAIxC,MAAM,YAAYsJ,qBAAtB,EAAsC;AACpC,eAAO,KAAKhB,mCAAL,CACL7I,aADK,EAEL+C,YAFK,EAGL7C,OAHK,EAILgC,YAJK,EAKLT,aALK,CAAP;AAOD,OArFC,CAuFF;AACA;;;AACA,UAAI,CAAC,KAAKjC,mBAAL,CAAyBiE,eAA1B,IAA6C2F,QAA7C,IAAyDC,QAAQ,CAACS,cAAT,EAA7D,EAAwF;AACtFvJ,QAAAA,MAAM,GAAG,iDAAkC,KAAKhB,KAAvC,EAA8C8J,QAA9C,EAAwD9I,MAAxD,CAAT;AACD;;AAED,aAAOA,MAAP;AACD,KA9FD,CA8FE,OAAOG,KAAP,EAAc;AACd,UAAIA,KAAK,YAAYC,6BAArB,EAAuC,MAAMD,KAAN;AACvC,aAAO,KAAKqJ,kCAAL,CACL/J,aADK,EAELU,KAFK,EAGLqC,YAHK,EAIL7C,OAJK,EAKLuB,aALK,EAMLS,YANK,CAAP;AAQD;AACF;;AAEDtB,EAAAA,+BAA+B,CAACF,KAAD,EAAeP,iBAAf,EAA4D;AACzF,QAAIO,KAAK,CAACkJ,IAAN,KAAe,qBAAnB,EAA0C;AACxC,YAAMlJ,KAAN;AACD,KAFD,MAEO,IAAIA,KAAK,YAAYsJ,6BAArB,EAA2C;AAChD,YAAM,IAAIA,6BAAJ,CAAyBtJ,KAAK,CAACkF,OAA/B,EAAwCzF,iBAAxC,CAAN;AACD,KAFM,MAEA,IAAIO,KAAK,YAAYtB,8BAAjB,IAA0CsB,KAAK,YAAY4F,sBAA/D,EAA8E;AACnF,YAAM,IAAI0D,6BAAJ,CACH,0CAAyC7J,iBAAiB,CAACyJ,IAAK,YAAWlJ,KAAK,CAACkF,OAAQ,EADtF,EAEJzF,iBAFI,CAAN;AAID;;AACD,QAAIyF,OAAJ;;AACA,QAAIlF,KAAK,YAAY9B,wBAArB,EAAsC;AACpCgH,MAAAA,OAAO,GAAI,gDAA+CzF,iBAAiB,CAACyJ,IAAK,kCAC/ElJ,KAAK,CAACkF,OACP,EAFD;AAGD,KAJD,MAIO,IAAIlF,KAAK,YAAYuJ,kBAArB,EAAiC;AACtCrE,MAAAA,OAAO,GAAI,gDACTzF,iBAAiB,CAACyJ,IACnB,6CAA4ClJ,KAAK,CAACkF,OAAQ,EAF3D;AAGD,KAJM,MAIA;AACL;AACA,YAAMlF,KAAN;AACD;;AACD,UAAM,IAAIsJ,6BAAJ,CAAyBpE,OAAzB,EAAkCzF,iBAAlC,CAAN;AACD;;AAED4J,EAAAA,kCAAkC,CAChC/J,aADgC,EAEhCU,KAFgC,EAGhCqC,YAHgC,EAIhC7C,OAJgC,EAKhCuB,aALgC,EAMhCS,YANgC,EAOzB;AACP,QAAIxB,KAAK,CAACkJ,IAAN,KAAe,qBAAnB,EAA0C;AACxC,YAAMlJ,KAAN;AACD,KAFD,MAEO,IAAIA,KAAK,YAAYsJ,6BAArB,EAA2C;AAChD,YAAMtJ,KAAN;AACD,KAFM,MAEA,IAAIA,KAAK,YAAYtB,8BAArB,EAA4C;AACjD,YAAM,IAAI4K,6BAAJ,CACH,qCAAoCvI,aAAa,CAACmI,IAAK,YAAWlJ,KAAK,CAACkF,OAAQ,EAD7E,EAEJnE,aAFI,CAAN;AAID,KALM,MAKA,IAAIf,KAAK,YAAY4F,sBAArB,EAAoC;AACzC,aAAOvD,YAAP;AACD;;AACD,QAAIC,SAAS,GAAG,wBAAY,KAAKzD,KAAjB,EAAwBwD,YAAxB,EAAsC,MAAtC,CAAhB;AACA,QAAIE,UAAU,GAAG,wBAAY,KAAK1D,KAAjB,EAAwBwD,YAAxB,EAAsC,OAAtC,CAAjB,CAdO,CAeP;;AACA,QAAIrC,KAAK,YAAY2B,+BAArB,EAA6C;AAC3C,WAAKmC,wBAAL,CACEvB,UADF,EAEExB,aAFF,EAGE,kBAHF,EAIEzB,aAJF,EAKEE,OALF,EAMEgC,YANF;;AAQAT,MAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BrB,KAAK,CAACe,aAAlC,EAT2C,CAU3C;AACD,KAXD,MAWO;AACL,UAAIyB,kBAAkB,GAAG,qCAAyB,UAAzB,EAAqC,6BAAiB,KAAK3D,KAAtB,EAA6ByD,SAA7B,CAArC,CAAzB;;AACA,UAAI,KAAKrD,MAAL,KAAgB0B,SAAhB,IAA6B,KAAK9B,KAAL,CAAWsB,KAAX,CAAiB6I,OAAlD,EAA2D;AACzD,aAAK/J,MAAL,CAAYgK,cAAZ,CAA4B,SAAQzG,kBAAkB,CAAC0G,IAAK,aAA5D;AACD;;AACDnI,MAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;;AACA,WAAK3B,sBAAL,CAA4ByB,SAA5B,EAAuCE,kBAAvC;;AACA,WAAKsB,wBAAL,CACEvB,UADF,EAEExB,aAFF,EAGE,kBAHF,EAIEzB,aAJF,EAKEE,OALF,EAMEgC,YANF;;AAQA,UAAIxB,KAAK,YAAY9B,wBAArB,EAAsC;AACpCsE,QAAAA,kBAAkB,CAAC0C,OAAnB,GAA6BlF,KAAK,CAACkF,OAAnC;;AACA,aAAK+C,qBAAL,CAA2B5F,YAA3B,EAAyCrC,KAAK,CAACkF,OAA/C;AACD,OAHD,MAGO,IAAIlF,KAAK,YAAYuJ,kBAArB,EAAiC;AACtC,YAAIrE,OAAO,GAAG,mBAAd;AACA1C,QAAAA,kBAAkB,CAAC0C,OAAnB,GAA6BA,OAA7B;;AACA,aAAK+C,qBAAL,CAA2B5F,YAA3B,EAAyC6C,OAAzC;AACD,OAJM,MAIA;AACL1C,QAAAA,kBAAkB,CAAC0C,OAAnB,GAA8B,eAA9B;AACA,cAAMlF,KAAN;AACD;AACF,KArDM,CAsDP;;;AACA,WAAOqC,YAAP;AACD;;AAED0B,EAAAA,cAAc,CACZzE,aADY,EAEZ7B,KAFY,EAGZ+B,OAHY,EAIZgC,YAJY,EAKZT,aALY,EAMZ2H,QANY,EAOL;AACP,QACEjL,KAAK,YAAYmL,kBAAjB,IACAnL,KAAK,YAAY+L,kBADjB,IAEA/L,KAAK,YAAYgM,mBAFjB,IAGAhM,KAAK,YAAYqL,gBAHjB,IAIArL,KAAK,YAAY0L,qBALnB,EAME;AACA;AACA,aAAO1L,KAAP;AACD;;AACD,4BACE,EAAEA,KAAK,YAAYQ,kBAAnB,KAAmCR,KAAK,CAACiM,QAAN,KAAmB/I,SADxD,EAEG,+FAFH;;AAIA,QAAIlD,KAAK,YAAYyD,oBAArB,EAAoC;AAClC,aAAO,KAAK0G,qBAAL,CAA2BtI,aAA3B,EAA0C7B,KAA1C,EAAiD+B,OAAjD,EAA0DgC,YAA1D,EAAwET,aAAxE,CAAP;AACD,KAFD,MAEO,IAAItD,KAAK,YAAY4K,iBAArB,EAAiC;AACtC;AACA,aAAO,KAAKsB,aAAL,CAAmBrK,aAAnB,EAAkC7B,KAAlC,EAAyC+B,OAAzC,EAAkDgC,YAAlD,EAAgET,aAAhE,EAA+E2H,QAA/E,CAAP;AACD,KAHM,MAGA,IAAIjL,KAAK,YAAYQ,kBAAjB,IAAgC,2BAAeR,KAAf,CAApC,EAA2D;AAChE,aAAO,KAAKgL,oBAAL,CAA0BnJ,aAA1B,EAAyC7B,KAAzC,EAAgD+B,OAAhD,EAAyDgC,YAAzD,EAAuET,aAAvE,EAAsF2H,QAAtF,CAAP;AACD,KAtBM,CAuBP;AACA;AACA;AACA;;;AACA,WAAOjL,KAAP;AACD;;AAEDwK,EAAAA,qBAAqB,CAAC5F,YAAD,EAA4B6C,OAA5B,EAAmD;AACtE;AACA;AACAA,IAAAA,OAAO,GAAI,aAAYA,OAAQ,EAA/B;;AACA,QAAI7C,YAAY,CAACuH,cAAb,KAAgCjJ,SAApC,EAA+C;AAC7C;AACA0B,MAAAA,YAAY,CAACuH,cAAb,IAAgC,KAAI1E,OAAQ,EAA5C;AACD,KAHD,MAGO;AACL7C,MAAAA,YAAY,CAACuH,cAAb,GAA8B1E,OAA9B;AACD;AACF;;AAEDyE,EAAAA,aAAa,CACXrK,aADW,EAEXuK,UAFW,EAGXrK,OAHW,EAIXgC,YAJW,EAKXT,aALW,EAMX2H,QANW,EAOC;AACZ,QAAIL,kBAAWyB,uCAAX,CAAmDD,UAAnD,CAAJ,EAAoE;AAClE,UAAIE,8BAA8B,GAAGF,UAAU,CAACE,8BAAhD;;AAEA,UAAIA,8BAA8B,KAAKpJ,SAAvC,EAAkD;AAChD,aAAK,IAAI,CAACqJ,IAAD,EAAOC,OAAP,CAAT,IAA4BF,8BAA5B,EAA4D;AAC1D,cAAIG,QAAQ,GAAG,MAAM;AACnB,gBAAIrK,MAAM,GAAGoK,OAAO,CAACpK,MAArB;AACA,iBAAKhB,KAAL,CAAWsL,YAAX,CAAwBF,OAAxB;;AACA,gBAAIpK,MAAM,YAAYuK,mCAAtB,EAA8C;AAC5CvK,cAAAA,MAAM,GAAGA,MAAM,CAACpC,KAAhB;AACD,aAFD,MAEO;AACL,sCAAU,KAAV,EAAiB,wCAAjB;AACD;;AACD,oCAAUoC,MAAM,YAAYsD,YAA5B;AACA,mBAAO,KAAKY,cAAL,CAAoBzE,aAApB,EAAmCO,MAAnC,EAA2CL,OAA3C,EAAoDgC,YAApD,EAAkET,aAAlE,EAAiF2H,QAAjF,CAAP;AACD,WAVD;;AAWA,cAAI2B,YAAY,GAAG,MACjB,KAAKxL,KAAL,CAAWyB,YAAX,CAAwB4J,QAAxB;AAAkC;AAAY,cAA9C,EAAoD,CAAC1J,cAAD,EAAiBrC,OAAjB,EAA0BsC,kBAA1B,KAClD,sCAAyBjC,+BAAzB,EAA0DgC,cAA1D,EAA0ErC,OAA1E,EAAmFsC,kBAAnF,CADF,CADF;;AAKA,cAAI6J,eAAJ;AACAA,UAAAA,eAAe,GAAG,KAAKzL,KAAL,CAAW0B,kBAAX,CAChB8J,YADgB;AAEhB;AAAU,cAFM,EAGf,wCAHe,CAAlB;AAKA,eAAKrL,UAAL,CAAgBuL,uBAAhB;AACAR,UAAAA,8BAA8B,CAAC5H,GAA/B,CAAmC6H,IAAnC,EAAyCM,eAAzC;AACA,eAAKzL,KAAL,CAAW2L,uCAAX,CAAmDrI,GAAnD,CAAuD6H,IAAvD,EAA6DM,eAA7D;AACD;AACF;;AACD,aAAOT,UAAP;AACD;;AACD,QAAInB,QAAQ,KAAK,KAAjB,EAAwBA,QAAQ,GAAG,IAAX;AACxB,QAAIjG,QAAQ,GAAG,0BAAc,KAAK5D,KAAnB,EAA0BgL,UAA1B,EAAsCY,YAAY,IAC/D,KAAK1G,cAAL,CAAoBzE,aAApB,EAAmCmL,YAAnC,EAAiDjL,OAAjD,EAA0D,YAA1D,EAAwEuB,aAAxE,EAAuF2H,QAAvF,CADa,CAAf;AAGAjG,IAAAA,QAAQ,CAACiI,SAAT;AACA,WAAOjI,QAAP;AACD;;AAEDqB,EAAAA,wBAAwB,CACtBrG,KADsB,EAEtBsD,aAFsB,EAGtB4J,gBAHsB,EAItBrL,aAJsB,EAKtBE,OALsB,EAMtBgC,YANsB,EAOhB;AACN,QAAI/D,KAAK,YAAYyD,oBAArB,EAAoC;AAClC,UAAIzD,KAAK,CAACgJ,IAAN,CAAWmE,MAAX,GAAoB,CAAxB,EAA2B;AACzB,aAAK,IAAIC,GAAT,IAAgBpN,KAAK,CAACgJ,IAAtB,EAA4B;AAC1B,eAAK3C,wBAAL,CAA8B+G,GAA9B,EAAmC9J,aAAnC,EAAkD4J,gBAAlD,EAAoErL,aAApE,EAAmFE,OAAnF,EAA4FgC,YAA5F;AACD;AACF,OAJD,MAIO;AACL,aAAKtC,kBAAL,CAAwBiC,QAAxB;AACD;AACF,KARD,MAQO,IAAI,yCAA6B,KAAKtC,KAAlC,EAAyCpB,KAAzC,CAAJ,EAAqD;AAC1D,UAAI+E,kBAAkB,GAAG,qCAAyB,UAAzB,EAAqC,6BAAiB,KAAK3D,KAAtB,EAA6BpB,KAA7B,CAArC,CAAzB;AACAsD,MAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;;AACA,WAAK3B,sBAAL,CAA4BpD,KAA5B,EAAmC+E,kBAAnC;AACD,KAJM,MAIA,IAAI/E,KAAK,YAAYwD,oCAAjB,IAAkDxD,KAAK,YAAY2G,yBAAvE,EAA2F;AAChG,UAAI,kCAAsB,KAAKvF,KAA3B,EAAkCpB,KAAlC,KAA4CkN,gBAAgB,KAAK,uBAArE,EAA8F;AAC5F,YAAInI,kBAAkB,GAAG,qCAAyB,UAAzB,EAAqC,6BAAiB,KAAK3D,KAAtB,EAA6BpB,KAA7B,CAArC,CAAzB;AACAsD,QAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;;AACA,aAAK3B,sBAAL,CAA4BpD,KAA5B,EAAmC+E,kBAAnC;AACD,OAJD,MAIO,IAAImI,gBAAgB,KAAK,iBAAzB,EAA4C;AACjD,gCAAUrL,aAAa,IAAIE,OAA3B;AACA,YAAIgD,kBAAkB,GAAG,qCAAyB,cAAzB,EAAyC,6BAAiB,KAAK3D,KAAtB,EAA6BpB,KAA7B,CAAzC,CAAzB;;AACA,aAAKuG,+CAAL,CACE1E,aADF,EAEEE,OAFF,EAGEgC,YAHF,EAIEgB,kBAJF,EAKE/E,KALF;AAOD;AACF,KAhBM,MAgBA,IAAIA,KAAK,YAAYQ,kBAArB,EAAkC;AACvC,UAAI,2BAAeR,KAAf,CAAJ,EAA2B;AACzB,YAAI6E,SAAS,GAAG,wBAAY,KAAKzD,KAAjB,EAAwBpB,KAAxB,EAA+B,MAA/B,CAAhB;AACA,YAAIqN,GAAG,GAAG,wBAAY,KAAKjM,KAAjB,EAAwBpB,KAAxB,EAA+B,KAA/B,CAAV;AACA,YAAI8B,KAAK,GAAG,wBAAY,KAAKV,KAAjB,EAAwBpB,KAAxB,EAA+B,OAA/B,CAAZ;;AAEA,YAAI,yCAA6B,KAAKoB,KAAlC,EAAyCyD,SAAzC,KAAuDA,SAAS,YAAYrB,oCAAhF,EAA+G;AAC7G,cAAIuB,kBAAkB,GAAG,qCAAyB,UAAzB,EAAqC,6BAAiB,KAAK3D,KAAtB,EAA6ByD,SAA7B,CAArC,CAAzB;AACAvB,UAAAA,aAAa,CAAC0B,QAAd,CAAuBpB,IAAvB,CAA4BmB,kBAA5B;;AACA,eAAK3B,sBAAL,CAA4ByB,SAA5B,EAAuCE,kBAAvC;AACD;;AACD,aAAKsB,wBAAL,CAA8BgH,GAA9B,EAAmC/J,aAAnC,EAAkD4J,gBAAlD,EAAoErL,aAApE,EAAmFE,OAAnF,EAA4FgC,YAA5F;;AACA,aAAKsC,wBAAL,CAA8BvE,KAA9B,EAAqCwB,aAArC,EAAoD4J,gBAApD,EAAsErL,aAAtE,EAAqFE,OAArF,EAA8FgC,YAA9F;AACD,OAZD,MAYO;AACL,aAAK,IAAI,CAACuJ,QAAD,EAAW5M,OAAX,CAAT,IAAgCV,KAAK,CAACW,UAAtC,EAAkD;AAChD,cAAID,OAAO,IAAIA,OAAO,CAACG,UAAvB,EAAmC;AACjC,oCAAUH,OAAO,CAACG,UAAR,YAA8BC,+BAAxC;;AACA,gBAAIJ,OAAO,CAACG,UAAR,CAAmB0M,UAAvB,EAAmC;AACjC,mBAAKlH,wBAAL,CACE,wBAAY,KAAKjF,KAAjB,EAAwBpB,KAAxB,EAA+BsN,QAA/B,CADF,EAEEhK,aAFF,EAGE4J,gBAHF,EAIErL,aAJF,EAKEE,OALF,EAMEgC,YANF;AAQD;AACF;AACF;AACF;AACF;AACF;;AAEDwC,EAAAA,+CAA+C,CAC7C1E,aAD6C,EAE7CE,OAF6C,EAG7CgC,YAH6C,EAI7CT,aAJ6C,EAK7CiJ,IAL6C,EAM7CiB,SAAiB,GAAG,KAAKpM,KAAL,CAAWmD,UAAX,CAAsBrB,SANG,EAOvC;AACN,QAAI,CAAC,KAAK9B,KAAL,CAAWsB,KAAX,CAAiB+K,uBAAtB,EAA+C;AAC7C;AACD;;AACD,QAAIC,WAAW,GAAGnB,IAAlB;;AACA,QAAIA,IAAI,YAAY5F,yBAApB,EAAwC;AACtC+G,MAAAA,WAAW,GAAGnB,IAAI,CAACoB,oBAAnB;AACAH,MAAAA,SAAS,GAAGjB,IAAI,CAACqB,UAAjB;AACD;;AACD,4BAAUF,WAAW,YAAYlK,oCAAjC;;AACA,QAAIiJ,QAAQ,GAAGoB,kBAAMC,0BAAN,CAAiC,KAAK1M,KAAtC,EAA6CsM,WAA7C,EAA0DxK,SAA1D,EAAqEsK,SAArE,CAAf,CAVM,CAWN;AACA;AACA;;;AACA,QAAIZ,YAAY,GAAG,MACjB,KAAKxL,KAAL,CAAWyB,YAAX,CAAwB4J,QAAxB;AAAkC;AAAY,SAA9C,EAAqD,MAAM;AACzD,YAAM,IAAIsB,yCAAJ,EAAN;AACD,KAFD,CADF;;AAIA,QAAIvB,OAAJ;;AACA,QAAI;AACFA,MAAAA,OAAO,GAAG,KAAKpL,KAAL,CAAW0B,kBAAX,CACR,MAAM;AACJ,YAAIV,MAAM,GAAGwK,YAAY,EAAzB;AACA,eAAO,KAAKtG,cAAL,CAAoBzE,aAApB,EAAmCO,MAAnC,EAA2CL,OAA3C,EAAoDgC,YAApD,EAAkET,aAAlE,EAAiF,KAAjF,CAAP;AACD,OAJO,EAKR,IALQ,EAMR,+BANQ,CAAV;AAQD,KATD,CASE,OAAO0K,CAAP,EAAU;AACV;AACA;AACA;AACA,UAAIA,CAAC,YAAYD,yCAAjB,EAAoD;AAClDE,yBAAKjO,KAAL,CAAW,KAAKoB,KAAhB,EAAuBmL,IAAvB;;AACA;AACD;;AACD,YAAMyB,CAAN;AACD;;AACD,SAAKzM,UAAL,CAAgBuL,uBAAhB;AACA,SAAK1L,KAAL,CAAW2L,uCAAX,CAAmDrI,GAAnD,CAAuDgJ,WAAvD,EAAoElB,OAApE;AACD;;AAp4CqB","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, type Effects } from \"../realm.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  ArrayValue,\n  BooleanValue,\n  BoundFunctionValue,\n  ECMAScriptSourceFunctionValue,\n  NullValue,\n  NumberValue,\n  ObjectValue,\n  StringValue,\n  SymbolValue,\n  Value,\n  UndefinedValue,\n} from \"../values/index.js\";\nimport { ReactStatistics, type ReactEvaluatedNode } from \"../serializer/types.js\";\nimport {\n  cloneReactElement,\n  cloneProps,\n  createReactEvaluatedNode,\n  doNotOptimizeComponent,\n  flattenChildren,\n  hardModifyReactObjectPropertyBinding,\n  getComponentName,\n  getComponentTypeFromRootValue,\n  getProperty,\n  getReactSymbol,\n  getValueFromFunctionCall,\n  isReactElement,\n  mapArrayValue,\n  valueIsClassComponent,\n  valueIsFactoryClassComponent,\n  valueIsKnownReactAbstraction,\n  valueIsLegacyCreateClassComponent,\n} from \"./utils.js\";\nimport { Get } from \"../methods/index.js\";\nimport invariant from \"../invariant.js\";\nimport { Leak, Properties, Utils } from \"../singletons.js\";\nimport { FatalError, NestedOptimizedFunctionSideEffect } from \"../errors.js\";\nimport {\n  type BranchStatusEnum,\n  getValueWithBranchingLogicApplied,\n  wrapReactElementInBranchOrReturnValue,\n} from \"./branching.js\";\nimport { AbruptCompletion, SimpleNormalCompletion } from \"../completions.js\";\nimport {\n  getInitialProps,\n  getInitialContext,\n  createClassInstance,\n  createSimpleClassInstance,\n  evaluateClassConstructor,\n  createClassInstanceForFirstRenderOnly,\n  applyGetDerivedStateFromProps,\n} from \"./components.js\";\nimport {\n  DoNotOptimize,\n  ExpectedBailOut,\n  NewComponentTreeBranch,\n  ReconcilerFatalError,\n  SimpleClassBailOut,\n  UnsupportedSideEffect,\n} from \"./errors.js\";\nimport { wrapReactElementWithKeyedFragment } from \"./elements.js\";\nimport { Logger } from \"../utils/logger.js\";\nimport type { ClassComponentMetadata, ReactComponentTreeConfig, ReactHint } from \"../types.js\";\nimport { handleReportedSideEffect } from \"../serializer/utils.js\";\nimport { createOperationDescriptor } from \"../utils/generator.js\";\nimport { PropertyDescriptor } from \"../descriptors.js\";\n\ntype ComponentResolutionStrategy =\n  | \"NORMAL\"\n  | \"FRAGMENT\"\n  | \"RELAY_QUERY_RENDERER\"\n  | \"CONTEXT_PROVIDER\"\n  | \"CONTEXT_CONSUMER\"\n  | \"FORWARD_REF\";\n\nexport type OptimizedClosure = {\n  evaluatedNode: ReactEvaluatedNode,\n  func: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n  nestedEffects: Array<Effects>,\n  componentType: Value | null,\n  context: ObjectValue | AbstractObjectValue | null,\n};\n\nexport type BranchReactComponentTree = {\n  context: ObjectValue | AbstractObjectValue | null,\n  evaluatedNode: ReactEvaluatedNode,\n  props: ObjectValue | AbstractObjectValue | null,\n  rootValue: ECMAScriptSourceFunctionValue | AbstractValue,\n};\n\nexport type ComponentTreeState = {\n  componentType: void | ECMAScriptSourceFunctionValue | BoundFunctionValue,\n  contextTypes: Set<string>,\n  deadEnds: number,\n  status: \"SIMPLE\" | \"COMPLEX\",\n  contextNodeReferences: Map<ObjectValue | AbstractObjectValue, number>,\n};\n\nfunction setContextCurrentValue(contextObject: ObjectValue | AbstractObjectValue, value: Value): void {\n  if (contextObject instanceof AbstractObjectValue && !contextObject.values.isTop()) {\n    let elements = contextObject.values.getElements();\n    if (elements && elements.size === 1) {\n      for (let element of elements) {\n        invariant(element instanceof ObjectValue);\n        contextObject = element;\n      }\n    } else {\n      invariant(false, \"TODO: deal with multiple possible context objects\");\n    }\n  }\n  if (!(contextObject instanceof ObjectValue)) {\n    throw new ExpectedBailOut(\"cannot set currentValue on an abstract context consumer\");\n  }\n  let binding = contextObject.properties.get(\"currentValue\");\n\n  if (binding && binding.descriptor) {\n    invariant(binding.descriptor instanceof PropertyDescriptor);\n    binding.descriptor.value = value;\n  } else {\n    invariant(false, \"setContextCurrentValue failed to set the currentValue\");\n  }\n}\n\nfunction throwUnsupportedSideEffectError(msg: string) {\n  throw new UnsupportedSideEffect(msg);\n}\n\nexport class Reconciler {\n  constructor(\n    realm: Realm,\n    componentTreeConfig: ReactComponentTreeConfig,\n    alreadyEvaluated: Map<ECMAScriptSourceFunctionValue | BoundFunctionValue, ReactEvaluatedNode>,\n    statistics: ReactStatistics,\n    logger?: Logger\n  ) {\n    this.realm = realm;\n    this.statistics = statistics;\n    this.logger = logger;\n    this.componentTreeConfig = componentTreeConfig;\n    this.componentTreeState = this._createComponentTreeState();\n    this.alreadyEvaluated = alreadyEvaluated;\n    this.branchedComponentTrees = [];\n  }\n\n  realm: Realm;\n  statistics: ReactStatistics;\n  logger: void | Logger;\n  componentTreeState: ComponentTreeState;\n  alreadyEvaluated: Map<ECMAScriptSourceFunctionValue | BoundFunctionValue, ReactEvaluatedNode>;\n  componentTreeConfig: ReactComponentTreeConfig;\n  currentEffectsStack: Array<Effects>;\n  branchedComponentTrees: Array<BranchReactComponentTree>;\n\n  resolveReactComponentTree(\n    componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n    props: ObjectValue | AbstractObjectValue | null,\n    context: ObjectValue | AbstractObjectValue | null,\n    evaluatedRootNode: ReactEvaluatedNode\n  ): Effects {\n    const resolveComponentTree = () => {\n      try {\n        let initialProps = props || getInitialProps(this.realm, componentType, this.componentTreeConfig);\n        let initialContext = context || getInitialContext(this.realm, componentType);\n        let { result } = this._resolveComponent(componentType, initialProps, initialContext, \"ROOT\", evaluatedRootNode);\n        this.statistics.optimizedTrees++;\n        return result;\n      } catch (error) {\n        if (error instanceof AbruptCompletion) throw error;\n        this._handleComponentTreeRootFailure(error, evaluatedRootNode);\n        // flow belives we can get here, when it should never be possible\n        invariant(false, \"resolveReactComponentTree error not handled correctly\");\n      }\n    };\n\n    try {\n      this.realm.react.activeReconciler = this;\n      return this.realm.wrapInGlobalEnv(() =>\n        this.realm.evaluatePure(\n          () =>\n            this.realm.evaluateForEffects(\n              resolveComponentTree,\n              /*state*/ null,\n              `react component: ${getComponentName(this.realm, componentType)}`\n            ),\n          /*bubbles*/ true,\n          (sideEffectType, binding, expressionLocation) => {\n            if (this.realm.react.failOnUnsupportedSideEffects) {\n              handleReportedSideEffect(throwUnsupportedSideEffectError, sideEffectType, binding, expressionLocation);\n            }\n          }\n        )\n      );\n    } finally {\n      this.realm.react.activeReconciler = undefined;\n    }\n  }\n\n  clearComponentTreeState(): void {\n    this.componentTreeState = this._createComponentTreeState();\n  }\n\n  _queueNewComponentTree(\n    rootValue: Value,\n    evaluatedNode: ReactEvaluatedNode,\n    props?: ObjectValue | AbstractObjectValue | null = null,\n    context?: ObjectValue | AbstractObjectValue | null = null\n  ): void {\n    if (rootValue instanceof SymbolValue) {\n      return;\n    }\n    invariant(rootValue instanceof ECMAScriptSourceFunctionValue || rootValue instanceof AbstractValue);\n    this.componentTreeState.deadEnds++;\n    let componentType = getComponentTypeFromRootValue(this.realm, rootValue);\n    if (componentType !== null && !this.alreadyEvaluated.has(componentType)) {\n      this.branchedComponentTrees.push({\n        context,\n        evaluatedNode,\n        props,\n        rootValue,\n      });\n    }\n  }\n\n  _resolveComplexClassComponent(\n    componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    classMetadata: ClassComponentMetadata,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    if (branchStatus !== \"ROOT\") {\n      // if the tree is simple and we're not in a branch, we can make this tree complex\n      // and make this complex component the root\n      let evaluatedComplexNode = this.alreadyEvaluated.get(componentType);\n      if (\n        branchStatus === \"NO_BRANCH\" &&\n        this.componentTreeState.status === \"SIMPLE\" &&\n        evaluatedComplexNode &&\n        evaluatedComplexNode.status !== \"RENDER_PROPS\"\n      ) {\n        this.componentTreeState.componentType = componentType;\n      } else {\n        this._queueNewComponentTree(componentType, evaluatedNode);\n        evaluatedNode.status = \"NEW_TREE\";\n        throw new NewComponentTreeBranch(evaluatedNode);\n      }\n    }\n    this.componentTreeState.status = \"COMPLEX\";\n    // create a new instance of this React class component\n    let instance = createClassInstance(this.realm, componentType, props, context, classMetadata);\n    // get the \"render\" method off the instance\n    let renderMethod = Get(this.realm, instance, \"render\");\n    invariant(renderMethod instanceof ECMAScriptSourceFunctionValue);\n    // the render method doesn't have any arguments, so we just assign the context of \"this\" to be the instance\n    return getValueFromFunctionCall(this.realm, renderMethod, instance, []);\n  }\n\n  _resolveSimpleClassComponent(\n    componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    // create a new simple instance of this React class component\n    let instance = createSimpleClassInstance(this.realm, componentType, props, context);\n    // get the \"render\" method off the instance\n    let renderMethod = Get(this.realm, instance, \"render\");\n    invariant(renderMethod instanceof ECMAScriptSourceFunctionValue);\n    // the render method doesn't have any arguments, so we just assign the context of \"this\" to be the instance\n    return getValueFromFunctionCall(this.realm, renderMethod, instance, []);\n  }\n\n  _resolveFunctionalComponent(\n    componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    return getValueFromFunctionCall(this.realm, componentType, this.realm.intrinsics.undefined, [props, context]);\n  }\n\n  _getClassComponentMetadata(\n    componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue\n  ): ClassComponentMetadata {\n    if (this.realm.react.classComponentMetadata.has(componentType)) {\n      let classMetadata = this.realm.react.classComponentMetadata.get(componentType);\n      invariant(classMetadata);\n      return classMetadata;\n    }\n    // get all this assignments in the constructor\n    let classMetadata = evaluateClassConstructor(this.realm, componentType, props, context);\n    this.realm.react.classComponentMetadata.set(componentType, classMetadata);\n    return classMetadata;\n  }\n\n  _resolveContextProviderComponent(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n\n    let evaluatedChildNode = createReactEvaluatedNode(\"NORMAL\", \"Context.Provider\");\n    evaluatedNode.children.push(evaluatedChildNode);\n    this.statistics.componentsEvaluated++;\n    invariant(typeValue instanceof ObjectValue || typeValue instanceof AbstractObjectValue);\n    const contextConsumer = getProperty(this.realm, typeValue, \"context\");\n    invariant(contextConsumer instanceof ObjectValue || contextConsumer instanceof AbstractObjectValue);\n    let lastValueProp = getProperty(this.realm, contextConsumer, \"currentValue\");\n    this._incremementReferenceForContextNode(contextConsumer);\n\n    let valueProp;\n    // if we have a value prop, set it\n    if (propsValue instanceof ObjectValue || propsValue instanceof AbstractObjectValue) {\n      valueProp = Get(this.realm, propsValue, \"value\");\n      setContextCurrentValue(contextConsumer, valueProp);\n    }\n    if (propsValue instanceof ObjectValue) {\n      // if the value is abstract, we need to keep the render prop as unless\n      // we are in firstRenderOnly mode, where we can just inline the abstract value\n      if (!(valueProp instanceof AbstractValue) || this.componentTreeConfig.firstRenderOnly) {\n        let resolvedReactElement = this._resolveReactElementHostChildren(\n          componentType,\n          reactElement,\n          context,\n          branchStatus,\n          evaluatedChildNode\n        );\n        let resolvedPropsValue = getProperty(this.realm, resolvedReactElement, \"props\");\n        invariant(resolvedPropsValue instanceof ObjectValue || resolvedPropsValue instanceof AbstractObjectValue);\n        invariant(lastValueProp instanceof Value);\n        setContextCurrentValue(contextConsumer, lastValueProp);\n        this._decremementReferenceForContextNode(contextConsumer);\n        // if we no dead ends, we know the rest of the tree and can safely remove the provider\n        if (this.componentTreeState.deadEnds === 0) {\n          let childrenValue = Get(this.realm, resolvedPropsValue, \"children\");\n          evaluatedChildNode.status = \"INLINED\";\n          this.statistics.inlinedComponents++;\n          return childrenValue;\n        }\n        return resolvedReactElement;\n      }\n    }\n    let children = this._resolveReactElementHostChildren(\n      componentType,\n      reactElement,\n      context,\n      branchStatus,\n      evaluatedChildNode\n    );\n    setContextCurrentValue(contextConsumer, lastValueProp);\n    this._decremementReferenceForContextNode(contextConsumer);\n    return children;\n  }\n\n  _decremementReferenceForContextNode(contextNode: ObjectValue | AbstractObjectValue): void {\n    let references = this.componentTreeState.contextNodeReferences.get(contextNode);\n    if (!references) {\n      references = 0;\n    } else {\n      references--;\n    }\n    this.componentTreeState.contextNodeReferences.set(contextNode, references);\n  }\n\n  _incremementReferenceForContextNode(contextNode: ObjectValue | AbstractObjectValue): void {\n    let references = this.componentTreeState.contextNodeReferences.get(contextNode);\n    if (!references) {\n      references = 1;\n    } else {\n      references++;\n    }\n    this.componentTreeState.contextNodeReferences.set(contextNode, references);\n  }\n\n  _isContextValueKnown(contextNode: ObjectValue | AbstractObjectValue): boolean {\n    if (this.componentTreeConfig.isRoot) {\n      return true;\n    }\n    if (this.componentTreeState.contextNodeReferences.has(contextNode)) {\n      let references = this.componentTreeState.contextNodeReferences.get(contextNode);\n      if (!references) {\n        return false;\n      }\n      return references > 0;\n    }\n    return false;\n  }\n\n  _resolveContextConsumerComponent(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value | void {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n    let evaluatedChildNode = createReactEvaluatedNode(\"RENDER_PROPS\", \"Context.Consumer\");\n    evaluatedNode.children.push(evaluatedChildNode);\n\n    if (propsValue instanceof ObjectValue || propsValue instanceof AbstractObjectValue) {\n      // get the \"render\" prop child off the instance\n      if (propsValue instanceof ObjectValue && propsValue.properties.has(\"children\")) {\n        let renderProp = getProperty(this.realm, propsValue, \"children\");\n\n        this._findReactComponentTrees(\n          propsValue,\n          evaluatedChildNode,\n          \"NORMAL_FUNCTIONS\",\n          componentType,\n          context,\n          branchStatus\n        );\n        if (renderProp instanceof ECMAScriptSourceFunctionValue) {\n          if (typeValue instanceof ObjectValue || typeValue instanceof AbstractObjectValue) {\n            // make sure this context is in our tree\n            if (this._isContextValueKnown(typeValue)) {\n              let valueProp = Get(this.realm, typeValue, \"currentValue\");\n              // if the value is abstract, we need to keep the render prop as unless\n              // we are in firstRenderOnly mode, where we can just inline the abstract value\n              if (!(valueProp instanceof AbstractValue) || this.componentTreeConfig.firstRenderOnly) {\n                let result = getValueFromFunctionCall(this.realm, renderProp, this.realm.intrinsics.undefined, [\n                  valueProp,\n                ]);\n                this.statistics.inlinedComponents++;\n                this.statistics.componentsEvaluated++;\n                evaluatedChildNode.status = \"INLINED\";\n                return this._resolveDeeply(componentType, result, context, branchStatus, evaluatedNode);\n              }\n            }\n          }\n          this._evaluateNestedOptimizedFunctionAndStoreEffects(\n            componentType,\n            context,\n            branchStatus,\n            evaluatedChildNode,\n            renderProp\n          );\n          return;\n        } else {\n          this._findReactComponentTrees(\n            renderProp,\n            evaluatedChildNode,\n            \"NESTED_CLOSURES\",\n            componentType,\n            context,\n            branchStatus\n          );\n        }\n      }\n    }\n    this.componentTreeState.deadEnds++;\n    return;\n  }\n\n  _resolveForwardRefComponent(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value | void {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n    let refValue = getProperty(this.realm, reactElement, \"ref\");\n    invariant(typeValue instanceof AbstractObjectValue || typeValue instanceof ObjectValue);\n    let forwardedComponent = getProperty(this.realm, typeValue, \"render\");\n    let evaluatedChildNode = createReactEvaluatedNode(\"FORWARD_REF\", getComponentName(this.realm, forwardedComponent));\n    evaluatedNode.children.push(evaluatedChildNode);\n    invariant(\n      forwardedComponent instanceof ECMAScriptSourceFunctionValue || forwardedComponent instanceof BoundFunctionValue,\n      \"expect React.forwardRef() to be passed function value\"\n    );\n    let value = getValueFromFunctionCall(this.realm, forwardedComponent, this.realm.intrinsics.undefined, [\n      propsValue,\n      refValue,\n    ]);\n    return this._resolveDeeply(componentType, value, context, branchStatus, evaluatedChildNode);\n  }\n\n  _resolveRelayQueryRendererComponent(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value | void {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n\n    let evaluatedChildNode = createReactEvaluatedNode(\"RENDER_PROPS\", getComponentName(this.realm, typeValue));\n    evaluatedNode.children.push(evaluatedChildNode);\n\n    if (propsValue instanceof ObjectValue || propsValue instanceof AbstractObjectValue) {\n      // get the \"render\" prop\n      if (propsValue instanceof ObjectValue && propsValue.properties.has(\"render\")) {\n        let renderProp = getProperty(this.realm, propsValue, \"render\");\n\n        if (renderProp instanceof ECMAScriptSourceFunctionValue) {\n          this._evaluateNestedOptimizedFunctionAndStoreEffects(\n            componentType,\n            context,\n            branchStatus,\n            evaluatedChildNode,\n            renderProp\n          );\n        } else if (renderProp instanceof AbstractValue) {\n          this._findReactComponentTrees(\n            renderProp,\n            evaluatedChildNode,\n            \"NESTED_CLOSURES\",\n            componentType,\n            context,\n            branchStatus\n          );\n        }\n      }\n      this._findReactComponentTrees(\n        propsValue,\n        evaluatedChildNode,\n        \"NORMAL_FUNCTIONS\",\n        componentType,\n        context,\n        branchStatus\n      );\n      return;\n    }\n    // this is the worst case, we were unable to find the render prop function\n    // and won't be able to find any further components to evaluate as trees\n    // because of that\n    this.componentTreeState.deadEnds++;\n  }\n\n  _resolveClassComponent(\n    componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    let value;\n\n    let classMetadata = this._getClassComponentMetadata(componentType, props, context);\n    let { instanceProperties, instanceSymbols } = classMetadata;\n\n    // if there were no this assignments we can try and render it as a simple class component\n    if (instanceProperties.size === 0 && instanceSymbols.size === 0) {\n      // We first need to know what type of class component we're dealing with.\n      // A \"simple\" class component is defined as:\n      //\n      // - having only a \"render\" method\n      // - having no lifecycle events\n      // - having no state\n      // - having no instance variables\n      //\n      // the only things a class component should be able to access on \"this\" are:\n      // - this.props\n      // - this.context\n      // - this._someRenderMethodX() etc\n      //\n      // Otherwise, the class component is a \"complex\" one.\n      // To begin with, we don't know what type of component it is, so we try and render it as if it were\n      // a simple component using the above heuristics. If an error occurs during this process, we assume\n      // that the class wasn't simple, then try again with the \"complex\" heuristics.\n      try {\n        value = this._resolveSimpleClassComponent(componentType, props, context, branchStatus, evaluatedNode);\n      } catch (error) {\n        // if we get back a SimpleClassBailOut error, we know that this class component\n        // wasn't a simple one and is likely to be a complex class component instead\n        if (error instanceof SimpleClassBailOut) {\n          // the component was not simple, so we continue with complex case\n        } else {\n          // else we rethrow the error\n          throw error;\n        }\n      }\n    }\n    // handle the complex class component if there is not value\n    if (value === undefined) {\n      value = this._resolveComplexClassComponent(\n        componentType,\n        props,\n        context,\n        classMetadata,\n        branchStatus,\n        evaluatedNode\n      );\n    }\n    return value;\n  }\n\n  _resolveClassComponentForFirstRenderOnly(\n    componentType: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    // create a new simple instance of this React class component\n    let instance = createClassInstanceForFirstRenderOnly(this.realm, componentType, props, context, evaluatedNode);\n    let getDerivedStateFromProps = Get(this.realm, componentType, \"getDerivedStateFromProps\");\n    let getSnapshotBeforeUpdate = Get(this.realm, instance, \"getSnapshotBeforeUpdate\");\n\n    // if either getDerivedStateFromProps or getSnapshotBeforeUpdate exist, then\n    // we don't try and execute componentWillMount and UNSAFE_componentWillMount\n    if (\n      getDerivedStateFromProps !== this.realm.intrinsics.undefined ||\n      getSnapshotBeforeUpdate !== this.realm.intrinsics.undefined\n    ) {\n      if (getDerivedStateFromProps instanceof ECMAScriptSourceFunctionValue && getDerivedStateFromProps.$Call) {\n        applyGetDerivedStateFromProps(this.realm, getDerivedStateFromProps, instance, props);\n      }\n    } else {\n      // get the \"componentWillMount\" and \"render\" methods off the instance\n      let componentWillMount = Get(this.realm, instance, \"componentWillMount\");\n\n      if (componentWillMount instanceof ECMAScriptSourceFunctionValue && componentWillMount.$Call) {\n        componentWillMount.$Call(instance, []);\n      }\n      let unsafeComponentWillMount = Get(this.realm, instance, \"UNSAFE_componentWillMount\");\n\n      if (unsafeComponentWillMount instanceof ECMAScriptSourceFunctionValue && unsafeComponentWillMount.$Call) {\n        unsafeComponentWillMount.$Call(instance, []);\n      }\n    }\n    let renderMethod = Get(this.realm, instance, \"render\");\n\n    invariant(renderMethod instanceof ECMAScriptSourceFunctionValue);\n    return getValueFromFunctionCall(this.realm, renderMethod, instance, []);\n  }\n\n  _resolveRelayContainer(\n    reactHint: ReactHint,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    evaluatedNode.status = \"INLINED\";\n    evaluatedNode.message = \"RelayContainer\";\n    invariant(reactHint.firstRenderValue instanceof Value);\n    // for better serialization, ensure context has the right abstract properties defined\n    if (getProperty(this.realm, context, \"relay\") === this.realm.intrinsics.undefined) {\n      let abstractRelayContext = AbstractValue.createAbstractObject(this.realm, \"context.relay\");\n      let abstractRelayEnvironment = AbstractValue.createAbstractObject(this.realm, \"context.relay.environment\");\n      let abstractRelayInternal = AbstractValue.createAbstractObject(\n        this.realm,\n        \"context.relay.environment.unstable_internal\"\n      );\n      Properties.Set(this.realm, context, \"relay\", abstractRelayContext, true);\n      Properties.Set(this.realm, abstractRelayContext, \"environment\", abstractRelayEnvironment, true);\n      Properties.Set(this.realm, abstractRelayEnvironment, \"unstable_internal\", abstractRelayInternal, true);\n    }\n    // add contextType to this component\n    this.componentTreeState.contextTypes.add(\"relay\");\n    return this._resolveComponent(reactHint.firstRenderValue, props, context, branchStatus, evaluatedNode);\n  }\n\n  _resolveComponent(\n    componentType: Value,\n    props: ObjectValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    if (doNotOptimizeComponent(this.realm, componentType)) {\n      throw new DoNotOptimize(\"__reactCompilerDoNotOptimize flag detected\");\n    }\n    this.statistics.componentsEvaluated++;\n    if (valueIsKnownReactAbstraction(this.realm, componentType)) {\n      invariant(componentType instanceof AbstractValue);\n      let reactHint = this.realm.react.abstractHints.get(componentType);\n\n      invariant(reactHint);\n      if (\n        typeof reactHint !== \"string\" &&\n        reactHint.object === this.realm.fbLibraries.reactRelay &&\n        this.componentTreeConfig.firstRenderOnly\n      ) {\n        return this._resolveRelayContainer(reactHint, props, context, branchStatus, evaluatedNode);\n      }\n      this._queueNewComponentTree(componentType, evaluatedNode);\n      evaluatedNode.status = \"NEW_TREE\";\n      evaluatedNode.message = \"RelayContainer\";\n      throw new NewComponentTreeBranch(evaluatedNode);\n    }\n    invariant(componentType instanceof ECMAScriptSourceFunctionValue || componentType instanceof BoundFunctionValue);\n    let value;\n    let childContext = context;\n\n    // first we check if it's a legacy class component\n    if (valueIsLegacyCreateClassComponent(this.realm, componentType)) {\n      throw new ExpectedBailOut(\"components created with create-react-class are not supported\");\n    } else if (valueIsClassComponent(this.realm, componentType)) {\n      if (this.componentTreeConfig.firstRenderOnly) {\n        value = this._resolveClassComponentForFirstRenderOnly(\n          componentType,\n          props,\n          context,\n          branchStatus,\n          evaluatedNode\n        );\n      } else {\n        value = this._resolveClassComponent(componentType, props, context, branchStatus, evaluatedNode);\n      }\n    } else {\n      value = this._resolveFunctionalComponent(componentType, props, context, evaluatedNode);\n      if (valueIsFactoryClassComponent(this.realm, value)) {\n        invariant(value instanceof ObjectValue);\n        if (branchStatus !== \"ROOT\") {\n          throw new ExpectedBailOut(\"non-root factory class components are not suppoted\");\n        } else {\n          // TODO support factory components\n          return {\n            result: value,\n            childContext,\n          };\n        }\n      }\n    }\n    invariant(value !== undefined);\n    return {\n      result: this._resolveDeeply(\n        componentType,\n        value,\n        context,\n        branchStatus === \"ROOT\" ? \"NO_BRANCH\" : branchStatus,\n        evaluatedNode\n      ),\n      childContext,\n    };\n  }\n\n  _createComponentTreeState(): ComponentTreeState {\n    return {\n      componentType: undefined,\n      contextTypes: new Set(),\n      deadEnds: 0,\n      status: \"SIMPLE\",\n      contextNodeReferences: new Map(),\n    };\n  }\n\n  _getComponentResolutionStrategy(value: Value): ComponentResolutionStrategy {\n    // check if it's a ReactRelay.QueryRenderer\n    if (this.realm.fbLibraries.reactRelay !== undefined) {\n      let QueryRenderer = getProperty(this.realm, this.realm.fbLibraries.reactRelay, \"QueryRenderer\");\n      if (value === QueryRenderer) {\n        return \"RELAY_QUERY_RENDERER\";\n      }\n    }\n    if (value === getReactSymbol(\"react.fragment\", this.realm)) {\n      return \"FRAGMENT\";\n    }\n    if ((value instanceof ObjectValue || value instanceof AbstractObjectValue) && value.kind !== \"conditional\") {\n      let $$typeof = getProperty(this.realm, value, \"$$typeof\");\n\n      if ($$typeof === getReactSymbol(\"react.context\", this.realm)) {\n        return \"CONTEXT_CONSUMER\";\n      }\n      if ($$typeof === getReactSymbol(\"react.provider\", this.realm)) {\n        return \"CONTEXT_PROVIDER\";\n      }\n      if ($$typeof === getReactSymbol(\"react.forward_ref\", this.realm)) {\n        return \"FORWARD_REF\";\n      }\n    }\n    return \"NORMAL\";\n  }\n\n  _resolveReactDomPortal(\n    createPortalNode: AbstractValue,\n    args: Array<Value>,\n    componentType: Value,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    let [reactPortalValue, domNodeValue] = args;\n    let evaluatedChildNode = createReactEvaluatedNode(\"INLINED\", \"ReactDOM.createPortal\");\n    let resolvedReactPortalValue = this._resolveDeeply(\n      componentType,\n      reactPortalValue,\n      context,\n      branchStatus,\n      evaluatedChildNode\n    );\n    evaluatedNode.children.push(evaluatedChildNode);\n    if (resolvedReactPortalValue !== reactPortalValue) {\n      this.statistics.inlinedComponents++;\n      let reactDomValue = this.realm.fbLibraries.reactDom;\n      invariant(reactDomValue instanceof ObjectValue);\n      let reactDomPortalFunc = getProperty(this.realm, reactDomValue, \"createPortal\");\n      return AbstractValue.createTemporalFromBuildFunction(\n        this.realm,\n        ObjectValue,\n        [reactDomPortalFunc, resolvedReactPortalValue, domNodeValue],\n        createOperationDescriptor(\"REACT_TEMPORAL_FUNC\"),\n        { skipInvariant: true, isPure: true }\n      );\n    }\n    return createPortalNode;\n  }\n\n  _resolveAbstractConditionalValue(\n    componentType: Value,\n    condValue: AbstractValue,\n    consequentVal: Value,\n    alternateVal: Value,\n    context: ObjectValue | AbstractObjectValue,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    let value = this.realm.evaluateWithAbstractConditional(\n      condValue,\n      () => {\n        return this.realm.evaluateForEffects(\n          () =>\n            wrapReactElementInBranchOrReturnValue(\n              this.realm,\n              this._resolveDeeply(componentType, consequentVal, context, \"NEW_BRANCH\", evaluatedNode)\n            ),\n          null,\n          \"_resolveAbstractConditionalValue consequent\"\n        );\n      },\n      () => {\n        return this.realm.evaluateForEffects(\n          () =>\n            wrapReactElementInBranchOrReturnValue(\n              this.realm,\n              this._resolveDeeply(componentType, alternateVal, context, \"NEW_BRANCH\", evaluatedNode)\n            ),\n          null,\n          \"_resolveAbstractConditionalValue alternate\"\n        );\n      }\n    );\n    if (value instanceof AbstractValue && value.kind === \"conditional\") {\n      return getValueWithBranchingLogicApplied(this.realm, consequentVal, alternateVal, value);\n    }\n    return value;\n  }\n\n  _resolveAbstractLogicalValue(\n    componentType: Value,\n    value: AbstractValue,\n    context: ObjectValue | AbstractObjectValue,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    let [leftValue, rightValue] = value.args;\n    let operator = value.kind;\n\n    invariant(leftValue instanceof AbstractValue);\n    if (operator === \"||\") {\n      return this._resolveAbstractConditionalValue(\n        componentType,\n        leftValue,\n        leftValue,\n        rightValue,\n        context,\n        evaluatedNode\n      );\n    } else {\n      return this._resolveAbstractConditionalValue(\n        componentType,\n        leftValue,\n        rightValue,\n        leftValue,\n        context,\n        evaluatedNode\n      );\n    }\n  }\n\n  _resolveAbstractValue(\n    componentType: Value,\n    value: AbstractValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    invariant(this.realm.generator);\n    // TODO investigate what other kinds than \"conditional\" might be safe to deeply resolve\n    if (value.kind === \"conditional\") {\n      let [condValue, consequentVal, alternateVal] = value.args;\n      invariant(condValue instanceof AbstractValue);\n      return this._resolveAbstractConditionalValue(\n        componentType,\n        condValue,\n        consequentVal,\n        alternateVal,\n        context,\n        evaluatedNode\n      );\n    } else if (value.kind === \"||\" || value.kind === \"&&\") {\n      return this._resolveAbstractLogicalValue(componentType, value, context, evaluatedNode);\n    } else {\n      if (value instanceof AbstractValue && this.realm.react.abstractHints.has(value)) {\n        let reactHint = this.realm.react.abstractHints.get(value);\n\n        invariant(reactHint !== undefined);\n        if (reactHint.object === this.realm.fbLibraries.reactDom && reactHint.propertyName === \"createPortal\") {\n          return this._resolveReactDomPortal(\n            value,\n            reactHint.args,\n            componentType,\n            context,\n            branchStatus,\n            evaluatedNode\n          );\n        }\n      }\n      this.componentTreeState.deadEnds++;\n    }\n    return value;\n  }\n\n  _resolveUnknownComponentType(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): ObjectValue {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n\n    this._findReactComponentTrees(propsValue, evaluatedNode, \"NORMAL_FUNCTIONS\", componentType, context, branchStatus);\n    if (typeValue instanceof AbstractValue) {\n      this._findReactComponentTrees(\n        typeValue,\n        evaluatedNode,\n        \"FUNCTIONAL_COMPONENTS\",\n        componentType,\n        context,\n        branchStatus\n      );\n      return reactElement;\n    } else {\n      let evaluatedChildNode = createReactEvaluatedNode(\"BAIL-OUT\", getComponentName(this.realm, typeValue));\n      evaluatedNode.children.push(evaluatedChildNode);\n      let bailOutMessage = `type on <Component /> was not a ECMAScriptSourceFunctionValue`;\n      evaluatedChildNode.message = bailOutMessage;\n      this._assignBailOutMessage(reactElement, bailOutMessage);\n      this.componentTreeState.deadEnds++;\n      return reactElement;\n    }\n  }\n\n  _resolveReactElementBadRef(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): ObjectValue {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n\n    let evaluatedChildNode = createReactEvaluatedNode(\"BAIL-OUT\", getComponentName(this.realm, typeValue));\n    evaluatedNode.children.push(evaluatedChildNode);\n    let bailOutMessage = `refs are not supported on <Components />`;\n    evaluatedChildNode.message = bailOutMessage;\n\n    this._queueNewComponentTree(typeValue, evaluatedChildNode);\n    this._findReactComponentTrees(propsValue, evaluatedNode, \"NORMAL_FUNCTIONS\", componentType, context, branchStatus);\n    this._assignBailOutMessage(reactElement, bailOutMessage);\n    return reactElement;\n  }\n\n  _resolveReactElementUndefinedRender(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): ObjectValue {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n\n    let evaluatedChildNode = createReactEvaluatedNode(\"BAIL-OUT\", getComponentName(this.realm, typeValue));\n    evaluatedNode.children.push(evaluatedChildNode);\n    let bailOutMessage = `undefined was returned from render`;\n    evaluatedChildNode.message = bailOutMessage;\n\n    this._assignBailOutMessage(reactElement, bailOutMessage);\n    this._findReactComponentTrees(propsValue, evaluatedNode, \"NORMAL_FUNCTIONS\", componentType, context, branchStatus);\n    return reactElement;\n  }\n\n  _resolveReactElementHostChildren(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): ObjectValue {\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n    // terminal host component. Start evaluating its children.\n    if (propsValue instanceof ObjectValue && propsValue.properties.has(\"children\")) {\n      let childrenValue = Get(this.realm, propsValue, \"children\");\n\n      if (childrenValue instanceof Value) {\n        let resolvedChildren = this._resolveDeeply(\n          componentType,\n          childrenValue,\n          context,\n          branchStatus,\n          evaluatedNode,\n          false\n        );\n        // we can optimize further and flatten arrays on non-composite components\n        if (resolvedChildren instanceof ArrayValue && !resolvedChildren.intrinsicName) {\n          resolvedChildren = flattenChildren(this.realm, resolvedChildren, true);\n        }\n        if (resolvedChildren !== childrenValue) {\n          let newProps = cloneProps(this.realm, propsValue, resolvedChildren);\n\n          // This is safe to do as we clone a new ReactElement as part of reconcilation\n          // so we will never be mutating an object used by something else. Furthermore,\n          // the ReactElement is \"immutable\" so it can never change and only React controls\n          // this object.\n          hardModifyReactObjectPropertyBinding(this.realm, reactElement, \"props\", newProps);\n        }\n      }\n    }\n    return reactElement;\n  }\n\n  _resolveFragmentComponent(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode\n  ): ObjectValue {\n    this.statistics.componentsEvaluated++;\n    if (this.componentTreeConfig.firstRenderOnly) {\n      let evaluatedChildNode = createReactEvaluatedNode(\"INLINED\", \"React.Fragment\");\n      evaluatedNode.children.push(evaluatedChildNode);\n      this.statistics.inlinedComponents++;\n      let children = this._resolveReactElementHostChildren(\n        componentType,\n        reactElement,\n        context,\n        branchStatus,\n        evaluatedChildNode\n      );\n      return children;\n    } else {\n      let evaluatedChildNode = createReactEvaluatedNode(\"NORMAL\", \"React.Fragment\");\n      evaluatedNode.children.push(evaluatedChildNode);\n      return this._resolveReactElementHostChildren(\n        componentType,\n        reactElement,\n        context,\n        branchStatus,\n        evaluatedChildNode\n      );\n    }\n  }\n\n  _resolveReactElement(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode,\n    needsKey?: boolean\n  ) {\n    // We create a clone of the ReactElement to be safe. This is because the same\n    // ReactElement might be a temporal referenced in other effects and also it allows us to\n    // easily mutate and swap the props of the ReactElement with the optimized version with\n    // resolved/inlined children.\n    // Note: We used to sanitize out props for firstRender here, we now do this during serialization.\n    reactElement = cloneReactElement(this.realm, reactElement, false);\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n    let refValue = getProperty(this.realm, reactElement, \"ref\");\n    let keyValue = getProperty(this.realm, reactElement, \"key\");\n\n    invariant(\n      !(typeValue instanceof AbstractValue && typeValue.kind === \"conditional\"),\n      `the reconciler should never encounter a ReactElement \"type\" that is conditional abstract value`\n    );\n    invariant(\n      !(propsValue instanceof AbstractValue && propsValue.kind === \"conditional\"),\n      `the reconciler should never encounter a ReactElement \"props\" that is conditional abstract value`\n    );\n\n    if (typeValue instanceof StringValue) {\n      return this._resolveReactElementHostChildren(componentType, reactElement, context, branchStatus, evaluatedNode);\n    }\n    if (!(propsValue instanceof ObjectValue || propsValue instanceof AbstractObjectValue)) {\n      this._assignBailOutMessage(\n        reactElement,\n        `props on <Component /> was not not an ObjectValue or an AbstractObjectValue`\n      );\n      return reactElement;\n    }\n\n    let componentResolutionStrategy = this._getComponentResolutionStrategy(typeValue);\n\n    // We do not support \"ref\" on <Component /> ReactElements, unless it's a forwarded ref\n    // or we are firstRenderOnly mode (in which case, we ignore the ref)\n    if (\n      !this.componentTreeConfig.firstRenderOnly &&\n      !(refValue instanceof NullValue) &&\n      componentResolutionStrategy !== \"FORWARD_REF\" &&\n      // If we have an abstract value, it might mean a bad ref, but we will have\n      // already thrown a FatalError in the createElement implementation by this\n      // point, so if we're here, then the FatalError has been recovered explicitly\n      !(refValue instanceof AbstractValue)\n    ) {\n      this._resolveReactElementBadRef(componentType, reactElement, context, branchStatus, evaluatedNode);\n    }\n\n    try {\n      let result;\n\n      switch (componentResolutionStrategy) {\n        case \"NORMAL\": {\n          if (\n            !(\n              typeValue instanceof ECMAScriptSourceFunctionValue ||\n              typeValue instanceof BoundFunctionValue ||\n              valueIsKnownReactAbstraction(this.realm, typeValue)\n            )\n          ) {\n            return this._resolveUnknownComponentType(componentType, reactElement, context, branchStatus, evaluatedNode);\n          }\n          let evaluatedChildNode = createReactEvaluatedNode(\"INLINED\", getComponentName(this.realm, typeValue));\n          let render = this._resolveComponent(\n            typeValue,\n            propsValue,\n            context,\n            branchStatus === \"NEW_BRANCH\" ? \"BRANCH\" : branchStatus,\n            evaluatedChildNode\n          );\n          if (this.logger !== undefined && this.realm.react.verbose && evaluatedChildNode.status === \"INLINED\") {\n            this.logger.logInformation(`    ✔ ${evaluatedChildNode.name} (inlined)`);\n          }\n          evaluatedNode.children.push(evaluatedChildNode);\n          result = render.result;\n          this.statistics.inlinedComponents++;\n          break;\n        }\n        case \"FRAGMENT\": {\n          result = this._resolveFragmentComponent(componentType, reactElement, context, branchStatus, evaluatedNode);\n          break;\n        }\n        case \"RELAY_QUERY_RENDERER\": {\n          invariant(typeValue instanceof AbstractObjectValue);\n          result = this._resolveRelayQueryRendererComponent(\n            componentType,\n            reactElement,\n            context,\n            branchStatus,\n            evaluatedNode\n          );\n          break;\n        }\n        case \"CONTEXT_PROVIDER\": {\n          result = this._resolveContextProviderComponent(\n            componentType,\n            reactElement,\n            context,\n            branchStatus,\n            evaluatedNode\n          );\n          break;\n        }\n        case \"CONTEXT_CONSUMER\": {\n          result = this._resolveContextConsumerComponent(\n            componentType,\n            reactElement,\n            context,\n            branchStatus,\n            evaluatedNode\n          );\n          break;\n        }\n        case \"FORWARD_REF\": {\n          result = this._resolveForwardRefComponent(componentType, reactElement, context, branchStatus, evaluatedNode);\n          break;\n        }\n        default:\n          invariant(false, \"unsupported component resolution strategy\");\n      }\n\n      if (result === undefined) {\n        result = reactElement;\n      }\n\n      if (result instanceof UndefinedValue) {\n        return this._resolveReactElementUndefinedRender(\n          componentType,\n          reactElement,\n          context,\n          branchStatus,\n          evaluatedNode\n        );\n      }\n\n      // If we have a new result and we might have a key value then wrap our inlined result in a\n      // `<React.Fragment key={keyValue}>` so that we may maintain the key.\n      if (!this.componentTreeConfig.firstRenderOnly && needsKey && keyValue.mightNotBeNull()) {\n        result = wrapReactElementWithKeyedFragment(this.realm, keyValue, result);\n      }\n\n      return result;\n    } catch (error) {\n      if (error instanceof AbruptCompletion) throw error;\n      return this._resolveComponentResolutionFailure(\n        componentType,\n        error,\n        reactElement,\n        context,\n        evaluatedNode,\n        branchStatus\n      );\n    }\n  }\n\n  _handleComponentTreeRootFailure(error: Error, evaluatedRootNode: ReactEvaluatedNode): void {\n    if (error.name === \"Invariant Violation\") {\n      throw error;\n    } else if (error instanceof ReconcilerFatalError) {\n      throw new ReconcilerFatalError(error.message, evaluatedRootNode);\n    } else if (error instanceof UnsupportedSideEffect || error instanceof DoNotOptimize) {\n      throw new ReconcilerFatalError(\n        `Failed to render React component root \"${evaluatedRootNode.name}\" due to ${error.message}`,\n        evaluatedRootNode\n      );\n    }\n    let message;\n    if (error instanceof ExpectedBailOut) {\n      message = `Failed to optimize React component tree for \"${evaluatedRootNode.name}\" due to an expected bail-out: ${\n        error.message\n      }`;\n    } else if (error instanceof FatalError) {\n      message = `Failed to optimize React component tree for \"${\n        evaluatedRootNode.name\n      }\" due to a fatal error during evaluation: ${error.message}`;\n    } else {\n      // if we don't know what the error is, then best to rethrow\n      throw error;\n    }\n    throw new ReconcilerFatalError(message, evaluatedRootNode);\n  }\n\n  _resolveComponentResolutionFailure(\n    componentType: Value,\n    error: Error,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    evaluatedNode: ReactEvaluatedNode,\n    branchStatus: BranchStatusEnum\n  ): Value {\n    if (error.name === \"Invariant Violation\") {\n      throw error;\n    } else if (error instanceof ReconcilerFatalError) {\n      throw error;\n    } else if (error instanceof UnsupportedSideEffect) {\n      throw new ReconcilerFatalError(\n        `Failed to render React component \"${evaluatedNode.name}\" due to ${error.message}`,\n        evaluatedNode\n      );\n    } else if (error instanceof DoNotOptimize) {\n      return reactElement;\n    }\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n    // assign a bail out message\n    if (error instanceof NewComponentTreeBranch) {\n      this._findReactComponentTrees(\n        propsValue,\n        evaluatedNode,\n        \"NORMAL_FUNCTIONS\",\n        componentType,\n        context,\n        branchStatus\n      );\n      evaluatedNode.children.push(error.evaluatedNode);\n      // NO-OP (we don't queue a newComponentTree as this was already done)\n    } else {\n      let evaluatedChildNode = createReactEvaluatedNode(\"BAIL-OUT\", getComponentName(this.realm, typeValue));\n      if (this.logger !== undefined && this.realm.react.verbose) {\n        this.logger.logInformation(`    ✖ ${evaluatedChildNode.name} (bail-out)`);\n      }\n      evaluatedNode.children.push(evaluatedChildNode);\n      this._queueNewComponentTree(typeValue, evaluatedChildNode);\n      this._findReactComponentTrees(\n        propsValue,\n        evaluatedNode,\n        \"NORMAL_FUNCTIONS\",\n        componentType,\n        context,\n        branchStatus\n      );\n      if (error instanceof ExpectedBailOut) {\n        evaluatedChildNode.message = error.message;\n        this._assignBailOutMessage(reactElement, error.message);\n      } else if (error instanceof FatalError) {\n        let message = \"evaluation failed\";\n        evaluatedChildNode.message = message;\n        this._assignBailOutMessage(reactElement, message);\n      } else {\n        evaluatedChildNode.message = `unknown error`;\n        throw error;\n      }\n    }\n    // a child component bailed out during component folding, so return the function value and continue\n    return reactElement;\n  }\n\n  _resolveDeeply(\n    componentType: Value,\n    value: Value,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode,\n    needsKey?: boolean\n  ): Value {\n    if (\n      value instanceof StringValue ||\n      value instanceof NumberValue ||\n      value instanceof BooleanValue ||\n      value instanceof NullValue ||\n      value instanceof UndefinedValue\n    ) {\n      // terminal values\n      return value;\n    }\n    invariant(\n      !(value instanceof ObjectValue) || value._isFinal !== undefined,\n      `An object value was detected during React reconcilation without its bindings properly applied`\n    );\n    if (value instanceof AbstractValue) {\n      return this._resolveAbstractValue(componentType, value, context, branchStatus, evaluatedNode);\n    } else if (value instanceof ArrayValue) {\n      // TODO investigate what about other iterables type objects\n      return this._resolveArray(componentType, value, context, branchStatus, evaluatedNode, needsKey);\n    } else if (value instanceof ObjectValue && isReactElement(value)) {\n      return this._resolveReactElement(componentType, value, context, branchStatus, evaluatedNode, needsKey);\n    }\n    // This value is not a valid return value of a render, but given we might be\n    // in a \"&&\"\" condition, it may never result in a runtime error. Still, if it does\n    // result in a runtime error, it would have been the same error before compilation.\n    // See issue #2497 for more context.\n    return value;\n  }\n\n  _assignBailOutMessage(reactElement: ObjectValue, message: string): void {\n    // $BailOutReason is a field on ObjectValue that allows us to specify a message\n    // that gets serialized as a comment node during the ReactElement serialization stage\n    message = `Bail-out: ${message}`;\n    if (reactElement.$BailOutReason !== undefined) {\n      // merge bail out messages if one already exists\n      reactElement.$BailOutReason += `, ${message}`;\n    } else {\n      reactElement.$BailOutReason = message;\n    }\n  }\n\n  _resolveArray(\n    componentType: Value,\n    arrayValue: ArrayValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode,\n    needsKey?: boolean\n  ): ArrayValue {\n    if (ArrayValue.isIntrinsicAndHasWidenedNumericProperty(arrayValue)) {\n      let nestedOptimizedFunctionEffects = arrayValue.nestedOptimizedFunctionEffects;\n\n      if (nestedOptimizedFunctionEffects !== undefined) {\n        for (let [func, effects] of nestedOptimizedFunctionEffects) {\n          let funcCall = () => {\n            let result = effects.result;\n            this.realm.applyEffects(effects);\n            if (result instanceof SimpleNormalCompletion) {\n              result = result.value;\n            } else {\n              invariant(false, \"TODO support other types of completion\");\n            }\n            invariant(result instanceof Value);\n            return this._resolveDeeply(componentType, result, context, branchStatus, evaluatedNode, needsKey);\n          };\n          let pureFuncCall = () =>\n            this.realm.evaluatePure(funcCall, /*bubbles*/ true, (sideEffectType, binding, expressionLocation) =>\n              handleReportedSideEffect(throwUnsupportedSideEffectError, sideEffectType, binding, expressionLocation)\n            );\n\n          let resolvedEffects;\n          resolvedEffects = this.realm.evaluateForEffects(\n            pureFuncCall,\n            /*state*/ null,\n            `react resolve nested optimized closure`\n          );\n          this.statistics.optimizedNestedClosures++;\n          nestedOptimizedFunctionEffects.set(func, resolvedEffects);\n          this.realm.collectedNestedOptimizedFunctionEffects.set(func, resolvedEffects);\n        }\n      }\n      return arrayValue;\n    }\n    if (needsKey !== false) needsKey = true;\n    let children = mapArrayValue(this.realm, arrayValue, elementValue =>\n      this._resolveDeeply(componentType, elementValue, context, \"NEW_BRANCH\", evaluatedNode, needsKey)\n    );\n    children.makeFinal();\n    return children;\n  }\n\n  _findReactComponentTrees(\n    value: Value,\n    evaluatedNode: ReactEvaluatedNode,\n    treatFunctionsAs: \"NORMAL_FUNCTIONS\" | \"NESTED_CLOSURES\" | \"FUNCTIONAL_COMPONENTS\",\n    componentType?: Value,\n    context?: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum\n  ): void {\n    if (value instanceof AbstractValue) {\n      if (value.args.length > 0) {\n        for (let arg of value.args) {\n          this._findReactComponentTrees(arg, evaluatedNode, treatFunctionsAs, componentType, context, branchStatus);\n        }\n      } else {\n        this.componentTreeState.deadEnds++;\n      }\n    } else if (valueIsKnownReactAbstraction(this.realm, value)) {\n      let evaluatedChildNode = createReactEvaluatedNode(\"NEW_TREE\", getComponentName(this.realm, value));\n      evaluatedNode.children.push(evaluatedChildNode);\n      this._queueNewComponentTree(value, evaluatedChildNode);\n    } else if (value instanceof ECMAScriptSourceFunctionValue || value instanceof BoundFunctionValue) {\n      if (valueIsClassComponent(this.realm, value) || treatFunctionsAs === \"FUNCTIONAL_COMPONENTS\") {\n        let evaluatedChildNode = createReactEvaluatedNode(\"NEW_TREE\", getComponentName(this.realm, value));\n        evaluatedNode.children.push(evaluatedChildNode);\n        this._queueNewComponentTree(value, evaluatedChildNode);\n      } else if (treatFunctionsAs === \"NESTED_CLOSURES\") {\n        invariant(componentType && context);\n        let evaluatedChildNode = createReactEvaluatedNode(\"RENDER_PROPS\", getComponentName(this.realm, value));\n        this._evaluateNestedOptimizedFunctionAndStoreEffects(\n          componentType,\n          context,\n          branchStatus,\n          evaluatedChildNode,\n          value\n        );\n      }\n    } else if (value instanceof ObjectValue) {\n      if (isReactElement(value)) {\n        let typeValue = getProperty(this.realm, value, \"type\");\n        let ref = getProperty(this.realm, value, \"ref\");\n        let props = getProperty(this.realm, value, \"props\");\n\n        if (valueIsKnownReactAbstraction(this.realm, typeValue) || typeValue instanceof ECMAScriptSourceFunctionValue) {\n          let evaluatedChildNode = createReactEvaluatedNode(\"NEW_TREE\", getComponentName(this.realm, typeValue));\n          evaluatedNode.children.push(evaluatedChildNode);\n          this._queueNewComponentTree(typeValue, evaluatedChildNode);\n        }\n        this._findReactComponentTrees(ref, evaluatedNode, treatFunctionsAs, componentType, context, branchStatus);\n        this._findReactComponentTrees(props, evaluatedNode, treatFunctionsAs, componentType, context, branchStatus);\n      } else {\n        for (let [propName, binding] of value.properties) {\n          if (binding && binding.descriptor) {\n            invariant(binding.descriptor instanceof PropertyDescriptor);\n            if (binding.descriptor.enumerable) {\n              this._findReactComponentTrees(\n                getProperty(this.realm, value, propName),\n                evaluatedNode,\n                treatFunctionsAs,\n                componentType,\n                context,\n                branchStatus\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  _evaluateNestedOptimizedFunctionAndStoreEffects(\n    componentType: Value,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    evaluatedNode: ReactEvaluatedNode,\n    func: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n    thisValue?: Value = this.realm.intrinsics.undefined\n  ): void {\n    if (!this.realm.react.optimizeNestedFunctions) {\n      return;\n    }\n    let funcToModel = func;\n    if (func instanceof BoundFunctionValue) {\n      funcToModel = func.$BoundTargetFunction;\n      thisValue = func.$BoundThis;\n    }\n    invariant(funcToModel instanceof ECMAScriptSourceFunctionValue);\n    let funcCall = Utils.createModelledFunctionCall(this.realm, funcToModel, undefined, thisValue);\n    // We take the modelled function and wrap it in a pure evaluation so we can check for\n    // side-effects that occur when evaluating the function. If there are side-effects, then\n    // we don't try and optimize the nested function.\n    let pureFuncCall = () =>\n      this.realm.evaluatePure(funcCall, /*bubbles*/ false, () => {\n        throw new NestedOptimizedFunctionSideEffect();\n      });\n    let effects;\n    try {\n      effects = this.realm.evaluateForEffects(\n        () => {\n          let result = pureFuncCall();\n          return this._resolveDeeply(componentType, result, context, branchStatus, evaluatedNode, false);\n        },\n        null,\n        \"React nestedOptimizedFunction\"\n      );\n    } catch (e) {\n      // If the nested optimized function had side-effects, we need to fallback to\n      // the default behaviour and leak the nested functions so any bindings\n      // within the function properly leak and materialize.\n      if (e instanceof NestedOptimizedFunctionSideEffect) {\n        Leak.value(this.realm, func);\n        return;\n      }\n      throw e;\n    }\n    this.statistics.optimizedNestedClosures++;\n    this.realm.collectedNestedOptimizedFunctionEffects.set(funcToModel, effects);\n  }\n}\n"],"file":"reconcilation.js"}