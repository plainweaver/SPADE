{"version":3,"sources":["../../src/react/ReactEquivalenceSet.js"],"names":["temporalAliasSymbol","Symbol","ReactEquivalenceSet","constructor","realm","residualReactElementVisitor","objectRoot","Map","arrayRoot","reactElementRoot","reactPropsRoot","temporalAliasRoot","_createNode","map","value","getKey","key","visitedValues","has","set","get","_getValue","val","StringValue","NumberValue","AbstractValue","residualHeapVisitor","equivalenceSet","add","ArrayValue","_getArrayValue","ObjectValue","FunctionValue","_getObjectValue","object","reactElementEquivalenceSet","currentMap","result","propName","properties","getEquivalentPropertyValue","symbol","symbols","prop","temporalAlias","undefined","getTemporalAliasValue","react","emptyObject","_getTemporalValue","wasTemporalAliasDeclaredInCurrentScope","temporalOperationEntry","getTemporalOperationEntryFromDerivedValue","temporalArgs","args","length","i","arg","equivalenceArg","AbstractObjectValue","values","isTop","kind","childTemporalOperationEntry","Value","array","intrinsicName","lengthValue","emptyArray","isFinal","mightBeFinalObject","equivalentProp","reactPropsEquivalenceSet"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  ArrayValue,\n  FunctionValue,\n  NumberValue,\n  ObjectValue,\n  StringValue,\n  SymbolValue,\n  Value,\n} from \"../values/index.js\";\nimport invariant from \"../invariant.js\";\nimport { hardModifyReactObjectPropertyBinding, isReactElement, isReactPropsObject, getProperty } from \"./utils.js\";\nimport { ResidualReactElementVisitor } from \"../serializer/ResidualReactElementVisitor.js\";\n\nexport type ReactSetValueMapKey = Value | number | string;\nexport type ReactSetValueMap = Map<ReactSetValueMapKey, ReactSetNode>;\n\nexport type ReactSetKeyMapKey = string | number | Symbol | SymbolValue;\nexport type ReactSetKeyMap = Map<ReactSetKeyMapKey, ReactSetValueMap>;\n\nexport type ReactSetNode = {\n  map: ReactSetKeyMap,\n  value: ObjectValue | ArrayValue | null,\n};\n\nexport const temporalAliasSymbol = Symbol(\"temporalAlias\");\n\n// ReactEquivalenceSet keeps records around of the values\n// of ReactElement/JSX nodes so we can return the same immutable values\n// where possible, i.e. <div /> === <div />\n//\n// Rather than uses hashes, this class uses linked Maps to track equality of objects.\n// It does this by recursively iterating through objects, by their properties/symbols and using\n// each property key as a map, and then from that map, each value as a map. The value\n// then links to the subsequent property/symbol in the object. This approach ensures insertion\n// is maintained through all objects.\nexport class ReactEquivalenceSet {\n  constructor(realm: Realm, residualReactElementVisitor: ResidualReactElementVisitor) {\n    this.realm = realm;\n    this.residualReactElementVisitor = residualReactElementVisitor;\n    this.objectRoot = new Map();\n    this.arrayRoot = new Map();\n    this.reactElementRoot = new Map();\n    this.reactPropsRoot = new Map();\n    this.temporalAliasRoot = new Map();\n  }\n  realm: Realm;\n  objectRoot: ReactSetKeyMap;\n  arrayRoot: ReactSetKeyMap;\n  reactElementRoot: ReactSetKeyMap;\n  reactPropsRoot: ReactSetKeyMap;\n  temporalAliasRoot: ReactSetKeyMap;\n  residualReactElementVisitor: ResidualReactElementVisitor;\n\n  _createNode(): ReactSetNode {\n    return {\n      map: new Map(),\n      value: null,\n    };\n  }\n\n  getKey(key: ReactSetKeyMapKey, map: ReactSetKeyMap, visitedValues: Set<Value>): ReactSetValueMap {\n    if (!map.has(key)) {\n      map.set(key, new Map());\n    }\n    return ((map.get(key): any): ReactSetValueMap);\n  }\n\n  _getValue(val: ReactSetValueMapKey, map: ReactSetValueMap, visitedValues: Set<Value>): ReactSetNode {\n    if (val instanceof StringValue || val instanceof NumberValue) {\n      val = val.value;\n    } else if (val instanceof AbstractValue) {\n      val = this.residualReactElementVisitor.residualHeapVisitor.equivalenceSet.add(val);\n    } else if (val instanceof ArrayValue) {\n      val = this._getArrayValue(val, visitedValues);\n    } else if (val instanceof ObjectValue && !(val instanceof FunctionValue)) {\n      val = this._getObjectValue(val, visitedValues);\n    }\n    if (!map.has(val)) {\n      map.set(val, this._createNode());\n    }\n    return ((map.get(val): any): ReactSetNode);\n  }\n\n  // for objects: [key/symbol] -> [key/symbol]... as nodes\n  _getObjectValue(object: ObjectValue, visitedValues: Set<Value>): ObjectValue {\n    if (visitedValues.has(object)) return object;\n    visitedValues.add(object);\n\n    if (isReactElement(object)) {\n      return this.residualReactElementVisitor.reactElementEquivalenceSet.add(object);\n    }\n    let currentMap = this.objectRoot;\n    let result;\n\n    for (let [propName] of object.properties) {\n      currentMap = this.getKey(propName, currentMap, visitedValues);\n      result = this.getEquivalentPropertyValue(object, propName, currentMap, visitedValues);\n      currentMap = result.map;\n    }\n    for (let [symbol] of object.symbols) {\n      currentMap = this.getKey(symbol, currentMap, visitedValues);\n      let prop = getProperty(this.realm, object, symbol);\n      result = this._getValue(prop, currentMap, visitedValues);\n      currentMap = result.map;\n    }\n    let temporalAlias = object.temporalAlias;\n\n    if (temporalAlias !== undefined) {\n      currentMap = this.getKey(temporalAliasSymbol, currentMap, visitedValues);\n      result = this.getTemporalAliasValue(temporalAlias, currentMap, visitedValues);\n    }\n\n    if (result === undefined) {\n      // If we have a temporalAlias, we can never return an empty object\n      if (temporalAlias === undefined && this.realm.react.emptyObject !== undefined) {\n        return this.realm.react.emptyObject;\n      }\n      return object;\n    }\n    if (result.value === null) {\n      result.value = object;\n    }\n    return result.value;\n  }\n\n  _getTemporalValue(temporalAlias: AbstractObjectValue, visitedValues: Set<Value>): AbstractObjectValue {\n    // Check to ensure the temporal alias is definitely declared in the current scope\n    if (!this.residualReactElementVisitor.wasTemporalAliasDeclaredInCurrentScope(temporalAlias)) {\n      return temporalAlias;\n    }\n    let temporalOperationEntry = this.realm.getTemporalOperationEntryFromDerivedValue(temporalAlias);\n\n    if (temporalOperationEntry === undefined) {\n      return temporalAlias;\n    }\n    let temporalArgs = temporalOperationEntry.args;\n    if (temporalArgs.length === 0) {\n      return temporalAlias;\n    }\n    let currentMap = this.temporalAliasRoot;\n    let result;\n\n    for (let i = 0; i < temporalArgs.length; i++) {\n      let arg = temporalArgs[i];\n      let equivalenceArg;\n      if (arg instanceof ObjectValue && arg.temporalAlias === temporalAlias) {\n        continue;\n      }\n      if (arg instanceof ObjectValue && isReactElement(arg)) {\n        equivalenceArg = this.residualReactElementVisitor.reactElementEquivalenceSet.add(arg);\n\n        if (arg !== equivalenceArg) {\n          temporalArgs[i] = equivalenceArg;\n        }\n      } else if (arg instanceof AbstractObjectValue && !arg.values.isTop() && arg.kind !== \"conditional\") {\n        // Might be a temporal, so let's check\n        let childTemporalOperationEntry = this.realm.getTemporalOperationEntryFromDerivedValue(arg);\n\n        if (childTemporalOperationEntry !== undefined) {\n          equivalenceArg = this._getTemporalValue(arg, visitedValues);\n          invariant(equivalenceArg instanceof AbstractObjectValue);\n\n          if (equivalenceArg !== arg) {\n            temporalArgs[i] = equivalenceArg;\n          }\n        }\n      } else if (arg instanceof AbstractValue) {\n        equivalenceArg = this.residualReactElementVisitor.residualHeapVisitor.equivalenceSet.add(arg);\n\n        if (arg !== equivalenceArg) {\n          temporalArgs[i] = equivalenceArg;\n        }\n      }\n      currentMap = this.getKey(i, (currentMap: any), visitedValues);\n      invariant(arg instanceof Value && (equivalenceArg instanceof Value || equivalenceArg === undefined));\n      result = this._getValue(equivalenceArg || arg, currentMap, visitedValues);\n      currentMap = result.map;\n    }\n    invariant(result !== undefined);\n    if (result.value === null) {\n      result.value = temporalAlias;\n    }\n    // Check to ensure the equivalent temporal alias is definitely declared in the current scope\n    if (!this.residualReactElementVisitor.wasTemporalAliasDeclaredInCurrentScope(result.value)) {\n      result.value = temporalAlias;\n      return temporalAlias;\n    }\n    return result.value;\n  }\n\n  getTemporalAliasValue(\n    temporalAlias: AbstractObjectValue,\n    map: ReactSetValueMap,\n    visitedValues: Set<Value>\n  ): ReactSetNode {\n    let result = this._getTemporalValue(temporalAlias, visitedValues);\n\n    invariant(result instanceof AbstractObjectValue);\n    if (!map.has(result)) {\n      map.set(result, this._createNode());\n    }\n    return ((map.get(result): any): ReactSetNode);\n  }\n\n  // for arrays: [length] -> ([length] is numeric) -> [0] -> [1] -> [2]... as nodes\n  _getArrayValue(array: ArrayValue, visitedValues: Set<Value>): ArrayValue {\n    if (visitedValues.has(array)) return array;\n    if (array.intrinsicName) return array;\n    visitedValues.add(array);\n    let currentMap = this.arrayRoot;\n    currentMap = this.getKey(\"length\", currentMap, visitedValues);\n    let result = this.getEquivalentPropertyValue(array, \"length\", currentMap, visitedValues);\n    currentMap = result.map;\n\n    let lengthValue = getProperty(this.realm, array, \"length\");\n    // If we have a numeric lenth that is not abstract, then also check all the array elements\n    if (lengthValue instanceof NumberValue) {\n      invariant(lengthValue instanceof NumberValue);\n      let length = lengthValue.value;\n\n      for (let i = 0; i < length; i++) {\n        currentMap = this.getKey(i, currentMap, visitedValues);\n        result = this.getEquivalentPropertyValue(array, \"\" + i, currentMap, visitedValues);\n        currentMap = result.map;\n      }\n    }\n    if (result === undefined) {\n      if (this.realm.react.emptyArray !== undefined) {\n        return this.realm.react.emptyArray;\n      }\n      return array;\n    }\n    if (result.value === null) {\n      result.value = array;\n    }\n    invariant(result.value instanceof ArrayValue);\n    return result.value;\n  }\n\n  getEquivalentPropertyValue(\n    object: ObjectValue,\n    propName: string,\n    map: ReactSetValueMap,\n    visitedValues: Set<Value>\n  ): ReactSetNode {\n    let prop = getProperty(this.realm, object, propName);\n    let isFinal = object.mightBeFinalObject();\n    let equivalentProp;\n\n    if (prop instanceof ObjectValue && isReactElement(prop)) {\n      equivalentProp = this.residualReactElementVisitor.reactElementEquivalenceSet.add(prop);\n    } else if (prop instanceof ObjectValue && isReactPropsObject(prop)) {\n      equivalentProp = this.residualReactElementVisitor.reactPropsEquivalenceSet.add(prop);\n    } else if (prop instanceof AbstractValue) {\n      equivalentProp = this.residualReactElementVisitor.residualHeapVisitor.equivalenceSet.add(prop);\n    }\n\n    if (equivalentProp !== undefined) {\n      if (prop !== equivalentProp && isFinal) {\n        hardModifyReactObjectPropertyBinding(this.realm, object, propName, equivalentProp);\n      }\n      if (!map.has(equivalentProp)) {\n        map.set(equivalentProp, this._createNode());\n      }\n      return ((map.get(equivalentProp): any): ReactSetNode);\n    } else {\n      return this._getValue(prop, map, visitedValues);\n    }\n  }\n}\n"],"file":"ReactEquivalenceSet.js"}