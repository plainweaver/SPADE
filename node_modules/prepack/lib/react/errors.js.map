{"version":3,"sources":["../../src/react/errors.js"],"names":["ExpectedBailOut","Error","SimpleClassBailOut","UnsupportedSideEffect","NewComponentTreeBranch","constructor","evaluatedNode","DoNotOptimize","ReconcilerFatalError","FatalError","message","status","__isReconcilerFatalError"],"mappings":";;;;;;;AAYA;;AAZA;;;;;;;;;AASA;AAKA;AACA;AACA;AACA;AACA;AACO,MAAMA,eAAN,SAA8BC,KAA9B,CAAoC,E,CAE3C;AACA;AACA;;;;;AACO,MAAMC,kBAAN,SAAiCD,KAAjC,CAAuC,E,CAE9C;AACA;AACA;AACA;;;;;AACO,MAAME,qBAAN,SAAoCF,KAApC,CAA0C,E,CAEjD;AACA;;;;;AACO,MAAMG,sBAAN,SAAqCH,KAArC,CAA2C;AAChDI,EAAAA,WAAW,CAACC,aAAD,EAAoC;AAC7C;AACA,SAAKA,aAAL,GAAqBA,aAArB;AACD;;AAJ+C;;;;AAQ3C,MAAMC,aAAN,SAA4BN,KAA5B,CAAkC,E,CAEzC;AACA;AACA;;;;;AACO,MAAMO,oBAAN,SAAmCC,kBAAnC,CAA8C;AACnDJ,EAAAA,WAAW,CAACK,OAAD,EAAkBJ,aAAlB,EAAqD;AAC9D,UAAMI,OAAN;AACAJ,IAAAA,aAAa,CAACK,MAAd,GAAuB,OAAvB;AACAL,IAAAA,aAAa,CAACI,OAAd,GAAwBA,OAAxB;AACA,SAAKJ,aAAL,GAAqBA,aAArB,CAJ8D,CAK9D;;AACA,SAAKM,wBAAL,GAAgC,IAAhC;AACD;;AARkD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { type ReactEvaluatedNode } from \"../serializer/types.js\";\nimport { FatalError } from \"../errors.js\";\n\n// ExpectedBailOut is like an error, that gets thrown during the reconcilation phase\n// allowing the reconcilation to continue on other branches of the tree, the message\n// given to ExpectedBailOut will be assigned to the value.$BailOutReason property and serialized\n// as a comment in the output source to give the user hints as to what they need to do\n// to fix the bail-out case\nexport class ExpectedBailOut extends Error {}\n\n// SimpleClassBailOuts only occur when a simple class instance is created and used\n// bailing out here will result in a complex class instance being created after\n// and an alternative complex class component route being used\nexport class SimpleClassBailOut extends Error {}\n\n// When the reconciler detectes a side-effect in pure evaluation, it throws one\n// of these errors. This will fall straight through the the wrapping React\n// component render try/catch, which will then throw an appropiate\n// ReconcilerFatalError along with information on the React component stack\nexport class UnsupportedSideEffect extends Error {}\n\n// NewComponentTreeBranch only occur when a complex class is found in a\n// component tree and the reconciler can no longer fold the component of that branch\nexport class NewComponentTreeBranch extends Error {\n  constructor(evaluatedNode: ReactEvaluatedNode) {\n    super();\n    this.evaluatedNode = evaluatedNode;\n  }\n  evaluatedNode: ReactEvaluatedNode;\n}\n\nexport class DoNotOptimize extends Error {}\n\n// Used when an entire React component tree has failed to optimize\n// this means there is a programming bug in the application that is\n// being Prepacked\nexport class ReconcilerFatalError extends FatalError {\n  constructor(message: string, evaluatedNode: ReactEvaluatedNode) {\n    super(message);\n    evaluatedNode.status = \"FATAL\";\n    evaluatedNode.message = message;\n    this.evaluatedNode = evaluatedNode;\n    // used for assertions in tests\n    this.__isReconcilerFatalError = true;\n  }\n  evaluatedNode: ReactEvaluatedNode;\n  __isReconcilerFatalError: boolean;\n}\n"],"file":"errors.js"}