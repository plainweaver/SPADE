{"version":3,"sources":["../src/construct_realm.js"],"names":["opts","debuggerConfigArgs","statistics","undefined","debugReproArgs","r","Realm","RealmStatistics","debugChannel","debuggerIsAttached","debuggerInstance","DebugServer","debugReproManager","DebugReproManager","construct","i","intrinsics","$GlobalObject","ObjectValue","ObjectPrototype","name","evaluators","simplifyAndRefineAbstractValue","bind","simplifyAndRefineAbstractCondition","$GlobalEnv","Environment","NewGlobalEnvironment"],"mappings":";;;;;;;AAWA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAtBA;;;;;;;;;AASA;AAgBe,kBACbA,IAAkB,GAAG,EADR,EAEbC,kBAFa,EAGbC,UAAkC,GAAGC,SAHxB,EAIbC,cAJa,EAKN;AACP;AACA,MAAIC,CAAC,GAAG,IAAIC,YAAJ,CAAUN,IAAV,EAAgBE,UAAU,IAAI,IAAIK,2BAAJ,EAA9B,CAAR,CAFO,CAGP;;AACA,MAAIN,kBAAJ,EAAwB;AACtB,QAAIO,YAAY,GAAGP,kBAAkB,CAACO,YAAtC;;AACA,QAAIA,YAAJ,EAAkB;AAChB,8BAAUA,YAAY,CAACC,kBAAb,EAAV,EAA6C,kDAA7C;AACAJ,MAAAA,CAAC,CAACK,gBAAF,GAAqB,IAAIC,qBAAJ,CAAgBH,YAAhB,EAA8BH,CAA9B,EAAiCJ,kBAAjC,CAArB;AACD;AACF;;AAED,MAAIG,cAAc,KAAKD,SAAvB,EAAkCE,CAAC,CAACO,iBAAF,GAAsBC,8BAAkBC,SAAlB,CAA4BV,cAA5B,CAAtB;AAElC,MAAIW,CAAC,GAAGV,CAAC,CAACW,UAAV;AACA,yBAAqBD,CAArB,EAAwBV,CAAxB,EAfO,CAgBP;AACA;;AACAA,EAAAA,CAAC,CAACY,aAAF,GAAkB,IAAIC,mBAAJ,CAAgBb,CAAhB,EAAmBU,CAAC,CAACI,eAArB,EAAsC,QAAtC,CAAlB;AACA,uBAAiBd,CAAjB;;AACA,OAAK,IAAIe,IAAT,IAAiBC,UAAjB,EAA6BhB,CAAC,CAACgB,UAAF,CAAaD,IAAb,IAAqBC,UAAU,CAACD,IAAD,CAA/B;;AAC7Bf,EAAAA,CAAC,CAACiB,8BAAF,GAAmCA,oBAA+BC,IAA/B,CAAoC,IAApC,EAA0ClB,CAA1C,EAA6C,KAA7C,CAAnC;AACAA,EAAAA,CAAC,CAACmB,kCAAF,GAAuCF,oBAA+BC,IAA/B,CAAoC,IAApC,EAA0ClB,CAA1C,EAA6C,IAA7C,CAAvC;AACAA,EAAAA,CAAC,CAACoB,UAAF,GAAeC,wBAAYC,oBAAZ,CAAiCtB,CAAjC,EAAoCA,CAAC,CAACY,aAAtC,EAAqDZ,CAAC,CAACY,aAAvD,CAAf;AACA,SAAOZ,CAAP;AACD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { Realm } from \"./realm.js\";\nimport initializeSingletons from \"./initialize-singletons.js\";\nimport { initialize as initializeIntrinsics } from \"./intrinsics/index.js\";\nimport initializeGlobal from \"./intrinsics/ecma262/global.js\";\nimport type { RealmOptions } from \"./options.js\";\nimport { RealmStatistics } from \"./statistics.js\";\nimport * as evaluators from \"./evaluators/index.js\";\nimport { Environment, DebugReproManager } from \"./singletons.js\";\nimport { ObjectValue } from \"./values/index.js\";\nimport { DebugServer } from \"./debugger/server/Debugger.js\";\nimport simplifyAndRefineAbstractValue from \"./utils/simplifier.js\";\nimport invariant from \"./invariant.js\";\nimport type { DebuggerConfigArguments, DebugReproArguments } from \"./types\";\n\nexport default function(\n  opts: RealmOptions = {},\n  debuggerConfigArgs: void | DebuggerConfigArguments,\n  statistics: void | RealmStatistics = undefined,\n  debugReproArgs: void | DebugReproArguments\n): Realm {\n  initializeSingletons();\n  let r = new Realm(opts, statistics || new RealmStatistics());\n  // Presence of debugChannel indicates we wish to use debugger.\n  if (debuggerConfigArgs) {\n    let debugChannel = debuggerConfigArgs.debugChannel;\n    if (debugChannel) {\n      invariant(debugChannel.debuggerIsAttached(), \"Debugger intends to be used but is not attached.\");\n      r.debuggerInstance = new DebugServer(debugChannel, r, debuggerConfigArgs);\n    }\n  }\n\n  if (debugReproArgs !== undefined) r.debugReproManager = DebugReproManager.construct(debugReproArgs);\n\n  let i = r.intrinsics;\n  initializeIntrinsics(i, r);\n  // TODO: Find a way to let different environments initialize their own global\n  // object for special magic host objects such as the window object in the DOM.\n  r.$GlobalObject = new ObjectValue(r, i.ObjectPrototype, \"global\");\n  initializeGlobal(r);\n  for (let name in evaluators) r.evaluators[name] = evaluators[name];\n  r.simplifyAndRefineAbstractValue = simplifyAndRefineAbstractValue.bind(null, r, false);\n  r.simplifyAndRefineAbstractCondition = simplifyAndRefineAbstractValue.bind(null, r, true);\n  r.$GlobalEnv = Environment.NewGlobalEnvironment(r, r.$GlobalObject, r.$GlobalObject);\n  return r;\n}\n"],"file":"construct_realm.js"}