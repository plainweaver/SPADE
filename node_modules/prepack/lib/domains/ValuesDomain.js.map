{"version":3,"sources":["../../src/domains/ValuesDomain.js"],"names":["ValuesDomain","constructor","_values","values","ConcreteValue","valueSet","Set","add","_elements","contains","x","elems","xelems","undefined","size","e","has","containsValue","AbstractValue","isBottom","isTop","getElements","binaryOp","realm","op","left","right","bottomVal","leftElements","rightElements","topVal","resultSet","savedHandler","errorHandler","savedIsReadOnly","isReadOnly","FatalError","leftElem","rightElem","result","computeBinary","subResult","AbruptCompletion","lval","rval","lprim","To","ToPrimitiveOrAbstract","rprim","createFromBinaryOp","StringValue","lstr","ToString","rstr","lnum","ToNumber","rnum","r","UndefinedValue","intrinsics","false","BooleanValue","value","true","ToUint32","IntegralValue","createFromNumberValue","ToInt32","base","ToNumberOrAbstract","exponent","baseVal","NumberValue","exponentVal","Math","pow","lnumVal","rnumVal","isNaN","NaN","ObjectValue","ToPropertyKey","logicalOp","computeLogical","lbool","ToBoolean","computeUnary","oldValue","val","typeString","Utils","typeToString","getType","unaryOp","operandValues","operandElements","operandElem","includesValueNotOfType","type","cval","includesValueOfType","mightBeFalse","mightNotBeFalse","joinValues","v1","v2","joinWith","union","y","forEach","v","meetValues","meetWith","intersection","elements","promoteEmptyToUndefined","newSet","EmptyValue","$Realm"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { BabelBinaryOperator, BabelLogicalOperator, BabelUnaryOperator } from \"@babel/types\";\nimport { AbruptCompletion } from \"../completions.js\";\nimport { FatalError } from \"../errors.js\";\nimport invariant from \"../invariant.js\";\nimport {\n  AbstractEqualityComparison,\n  AbstractRelationalComparison,\n  Add,\n  HasProperty,\n  InstanceofOperator,\n  StrictEqualityComparison,\n} from \"../methods/index.js\";\nimport type { Realm } from \"../realm.js\";\nimport { To } from \"../singletons.js\";\nimport {\n  AbstractValue,\n  BooleanValue,\n  ConcreteValue,\n  EmptyValue,\n  NumberValue,\n  IntegralValue,\n  ObjectValue,\n  StringValue,\n  UndefinedValue,\n  Value,\n} from \"../values/index.js\";\nimport { Utils } from \"../singletons.js\";\n\n/* An abstract domain that collects together a set of concrete values\n   that might be the value of a variable at runtime.\n   Initially, every variable has the value undefined.\n   A property that has been weakly deleted will have more than\n   one value, one of which will by the EmptyValue.  */\n\nexport default class ValuesDomain {\n  constructor(_values: void | Set<ConcreteValue> | ConcreteValue) {\n    let values = _values;\n    if (values instanceof ConcreteValue) {\n      let valueSet = new Set();\n      valueSet.add(values);\n      values = valueSet;\n    }\n    this._elements = values;\n  }\n\n  static topVal: ValuesDomain;\n  static bottomVal: ValuesDomain;\n\n  _elements: void | Set<ConcreteValue>;\n\n  contains(x: ValuesDomain): boolean {\n    let elems = this._elements;\n    let xelems = x._elements;\n    if (elems === xelems) return true;\n    if (elems === undefined) return true;\n    if (xelems === undefined) return false;\n    if (elems.size < xelems.size) return false;\n    for (let e of xelems) {\n      if (!elems.has(e)) return false;\n    }\n    return true;\n  }\n\n  containsValue(x: Value): boolean {\n    let elems = this._elements;\n    if (elems === undefined) return true; // Top contains everything\n    if (x instanceof AbstractValue) return this.contains(x.values);\n    invariant(x instanceof ConcreteValue);\n    return elems.has(x);\n  }\n\n  isBottom(): boolean {\n    return this._elements !== undefined && this._elements.size === 0;\n  }\n\n  isTop(): boolean {\n    return this._elements === undefined;\n  }\n\n  getElements(): Set<ConcreteValue> {\n    invariant(this._elements !== undefined);\n    return this._elements;\n  }\n\n  // return a set of values that may be result of performing the given operation on each pair in the\n  // Cartesian product of the value sets of the operands.\n  static binaryOp(realm: Realm, op: BabelBinaryOperator, left: ValuesDomain, right: ValuesDomain): ValuesDomain {\n    if (left.isBottom() || right.isBottom()) return ValuesDomain.bottomVal;\n    let leftElements = left._elements;\n    let rightElements = right._elements;\n    // Return top if left and/or right are top or if the size of the value set would get to be quite large.\n    // Note: the larger the set of values, the less we know and therefore the less we get value from computing\n    // all of these values. TODO #1000: probably the upper bound can be quite a bit smaller.\n    if (!leftElements || !rightElements || leftElements.size > 100 || rightElements.size > 100)\n      return ValuesDomain.topVal;\n    let resultSet: Set<ConcreteValue> = new Set();\n    let savedHandler = realm.errorHandler;\n    let savedIsReadOnly = realm.isReadOnly;\n    realm.isReadOnly = true;\n    try {\n      realm.errorHandler = () => {\n        throw new FatalError();\n      };\n      for (let leftElem of leftElements) {\n        for (let rightElem of rightElements) {\n          let result = ValuesDomain.computeBinary(realm, op, leftElem, rightElem);\n          if (result instanceof ConcreteValue) {\n            resultSet.add(result);\n          } else {\n            invariant(result instanceof AbstractValue);\n            if (result.values.isTop()) {\n              return ValuesDomain.topVal;\n            }\n            for (let subResult of result.values.getElements()) {\n              resultSet.add(subResult);\n            }\n          }\n        }\n      }\n    } catch (e) {\n      if (e instanceof AbruptCompletion) return ValuesDomain.topVal;\n    } finally {\n      realm.errorHandler = savedHandler;\n      realm.isReadOnly = savedIsReadOnly;\n    }\n    return new ValuesDomain(resultSet);\n  }\n\n  // Note that calling this can result in user code running, which can side-effect the heap.\n  // If that is not the desired behavior, mark the realm as read-only for the duration of the call.\n  static computeBinary(realm: Realm, op: BabelBinaryOperator, lval: ConcreteValue, rval: ConcreteValue): Value {\n    if (op === \"+\") {\n      // ECMA262 12.8.3 The Addition Operator\n      let lprim = To.ToPrimitiveOrAbstract(realm, lval);\n      let rprim = To.ToPrimitiveOrAbstract(realm, rval);\n\n      if (lprim instanceof AbstractValue || rprim instanceof AbstractValue) {\n        return AbstractValue.createFromBinaryOp(realm, op, lprim, rprim);\n      }\n\n      if (lprim instanceof StringValue || rprim instanceof StringValue) {\n        let lstr = To.ToString(realm, lprim);\n        let rstr = To.ToString(realm, rprim);\n        return new StringValue(realm, lstr + rstr);\n      }\n\n      let lnum = To.ToNumber(realm, lprim);\n      let rnum = To.ToNumber(realm, rprim);\n      return Add(realm, lnum, rnum);\n    } else if (op === \"<\" || op === \">\" || op === \">=\" || op === \"<=\") {\n      // ECMA262 12.10.3\n      if (op === \"<\") {\n        let r = AbstractRelationalComparison(realm, lval, rval, true, op);\n        if (r instanceof UndefinedValue) {\n          return realm.intrinsics.false;\n        } else {\n          return r;\n        }\n      } else if (op === \"<=\") {\n        let r = AbstractRelationalComparison(realm, rval, lval, false, op);\n        if (r instanceof UndefinedValue || (r instanceof BooleanValue && r.value)) {\n          return realm.intrinsics.false;\n        } else if (r instanceof AbstractValue) {\n          return r;\n        } else {\n          return realm.intrinsics.true;\n        }\n      } else if (op === \">\") {\n        let r = AbstractRelationalComparison(realm, rval, lval, false, op);\n        if (r instanceof UndefinedValue) {\n          return realm.intrinsics.false;\n        } else {\n          return r;\n        }\n      } else if (op === \">=\") {\n        let r = AbstractRelationalComparison(realm, lval, rval, true, op);\n        if (r instanceof UndefinedValue || (r instanceof BooleanValue && r.value)) {\n          return realm.intrinsics.false;\n        } else if (r instanceof AbstractValue) {\n          return r;\n        } else {\n          return realm.intrinsics.true;\n        }\n      }\n    } else if (op === \">>>\") {\n      // ECMA262 12.9.5.1\n      let lnum = To.ToUint32(realm, lval);\n      let rnum = To.ToUint32(realm, rval);\n\n      return IntegralValue.createFromNumberValue(realm, lnum >>> rnum);\n    } else if (op === \"<<\" || op === \">>\") {\n      let lnum = To.ToInt32(realm, lval);\n      let rnum = To.ToUint32(realm, rval);\n\n      if (op === \"<<\") {\n        // ECMA262 12.9.3.1\n        return IntegralValue.createFromNumberValue(realm, lnum << rnum);\n      } else if (op === \">>\") {\n        // ECMA262 12.9.4.1\n        return IntegralValue.createFromNumberValue(realm, lnum >> rnum);\n      }\n    } else if (op === \"**\") {\n      // ECMA262 12.6.3\n\n      // 5. Let base be ? ToNumber(leftValue).\n      let base = To.ToNumberOrAbstract(realm, lval);\n\n      // 6. Let exponent be ? ToNumber(rightValue).\n      let exponent = To.ToNumberOrAbstract(realm, rval);\n\n      if (base instanceof AbstractValue || exponent instanceof AbstractValue) {\n        const baseVal = base instanceof AbstractValue ? base : new NumberValue(realm, base);\n        const exponentVal = exponent instanceof AbstractValue ? exponent : new NumberValue(realm, exponent);\n        return AbstractValue.createFromBinaryOp(realm, op, baseVal, exponentVal);\n      }\n\n      // 7. Return the result of Applying the ** operator with base and exponent as specified in 12.7.3.4.\n      return new NumberValue(realm, Math.pow(base, exponent));\n    } else if (op === \"%\" || op === \"/\" || op === \"*\" || op === \"-\") {\n      // ECMA262 12.7.3\n      let lnum = To.ToNumberOrAbstract(realm, lval);\n      let rnum = To.ToNumberOrAbstract(realm, rval);\n      if (lnum instanceof AbstractValue || rnum instanceof AbstractValue) {\n        const lnumVal = lnum instanceof AbstractValue ? lnum : new NumberValue(realm, lnum);\n        const rnumVal = rnum instanceof AbstractValue ? rnum : new NumberValue(realm, rnum);\n        return AbstractValue.createFromBinaryOp(realm, op, lnumVal, rnumVal);\n      }\n\n      if (isNaN(rnum)) return realm.intrinsics.NaN;\n      if (isNaN(lnum)) return realm.intrinsics.NaN;\n\n      if (op === \"-\") {\n        return Add(realm, lnum, rnum, true);\n      } else if (op === \"%\") {\n        // The sign of the result equals the sign of the dividend.\n        // If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.\n        // If the dividend is finite and the divisor is an infinity, the result equals the dividend.\n        // If the dividend is a zero and the divisor is nonzero and finite, the result is the same as the dividend.\n        return new NumberValue(realm, lnum % rnum);\n      } else if (op === \"/\") {\n        // The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n        // Division of an infinity by an infinity results in NaN.\n        // Division of an infinity by a zero results in an infinity. The sign is determined by the rule already stated above.\n        // Division of an infinity by a nonzero finite value results in a signed infinity. The sign is determined by the rule already stated above.\n        // Division of a finite value by an infinity results in zero. The sign is determined by the rule already stated above.\n        // Division of a zero by a zero results in NaN; division of zero by any other finite value results in zero, with the sign determined by the rule already stated above.\n        // Division of a nonzero finite value by a zero results in a signed infinity. The sign is determined by the rule already stated above.\n        return new NumberValue(realm, lnum / rnum);\n      } else if (op === \"*\") {\n        // The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n        // Multiplication of an infinity by a zero results in NaN.\n        // Multiplication of an infinity by an infinity results in an infinity. The sign is determined by the rule already stated above.\n        // Multiplication of an infinity by a finite nonzero value results in a signed infinity. The sign is determined by the rule already stated above.\n        return new NumberValue(realm, lnum * rnum);\n      }\n    } else if (op === \"!==\") {\n      return new BooleanValue(realm, !StrictEqualityComparison(realm, lval, rval));\n    } else if (op === \"===\") {\n      return new BooleanValue(realm, StrictEqualityComparison(realm, lval, rval));\n    } else if (op === \"!=\" || op === \"==\") {\n      return AbstractEqualityComparison(realm, lval, rval, op);\n    } else if (op === \"&\" || op === \"|\" || op === \"^\") {\n      // ECMA262 12.12.3\n\n      // 5. Let lnum be ? ToInt32(lval).\n      let lnum: number = To.ToInt32(realm, lval);\n\n      // 6. Let rnum be ? ToInt32(rval).\n      let rnum: number = To.ToInt32(realm, rval);\n\n      // 7. Return the result of applying the bitwise operator @ to lnum and rnum. The result is a signed 32 bit integer.\n      if (op === \"&\") {\n        return IntegralValue.createFromNumberValue(realm, lnum & rnum);\n      } else if (op === \"|\") {\n        return IntegralValue.createFromNumberValue(realm, lnum | rnum);\n      } else if (op === \"^\") {\n        return IntegralValue.createFromNumberValue(realm, lnum ^ rnum);\n      }\n    } else if (op === \"in\") {\n      // ECMA262 12.10.3\n\n      // 5. If Type(rval) is not Object, throw a TypeError exception.\n      if (!(rval instanceof ObjectValue)) {\n        throw new FatalError();\n      }\n\n      // 6. Return ? HasProperty(rval, ToPropertyKey(lval)).\n      return new BooleanValue(realm, HasProperty(realm, rval, To.ToPropertyKey(realm, lval)));\n    } else if (op === \"instanceof\") {\n      // ECMA262 12.10.3\n\n      // 5. Return ? InstanceofOperator(lval, rval).;\n      return new BooleanValue(realm, InstanceofOperator(realm, lval, rval));\n    }\n\n    invariant(false, \"unimplemented \" + op);\n  }\n\n  static logicalOp(realm: Realm, op: BabelLogicalOperator, left: ValuesDomain, right: ValuesDomain): ValuesDomain {\n    let leftElements = left._elements;\n    let rightElements = right._elements;\n    // Return top if left and/or right are top or if the size of the value set would get to be quite large.\n    // Note: the larger the set of values, the less we know and therefore the less we get value from computing\n    // all of these values. TODO #1000: probably the upper bound can be quite a bit smaller.\n    if (!leftElements || !rightElements || leftElements.size > 100 || rightElements.size > 100)\n      return ValuesDomain.topVal;\n    let resultSet = new Set();\n    let savedHandler = realm.errorHandler;\n    let savedIsReadOnly = realm.isReadOnly;\n    realm.isReadOnly = true;\n    try {\n      realm.errorHandler = () => {\n        throw new FatalError();\n      };\n      for (let leftElem of leftElements) {\n        for (let rightElem of rightElements) {\n          let result = ValuesDomain.computeLogical(realm, op, leftElem, rightElem);\n          resultSet.add(result);\n        }\n      }\n    } catch (e) {\n      if (e instanceof AbruptCompletion) return ValuesDomain.topVal;\n    } finally {\n      realm.errorHandler = savedHandler;\n      realm.isReadOnly = savedIsReadOnly;\n    }\n    return new ValuesDomain(resultSet);\n  }\n\n  // Note that calling this can result in user code running, which can side-effect the heap.\n  // If that is not the desired behavior, mark the realm as read-only for the duration of the call.\n  static computeLogical(\n    realm: Realm,\n    op: BabelLogicalOperator,\n    lval: ConcreteValue,\n    rval: ConcreteValue\n  ): ConcreteValue {\n    let lbool = To.ToBoolean(realm, lval);\n\n    if (op === \"&&\") {\n      // ECMA262 12.13.3\n      if (lbool === false) return lval;\n    } else if (op === \"||\") {\n      // ECMA262 12.13.3\n      if (lbool === true) return lval;\n    }\n    return rval;\n  }\n\n  // Note that calling this can result in user code running, which can side-effect the heap.\n  // If that is not the desired behavior, mark the realm as read-only for the duration of the call.\n  static computeUnary(realm: Realm, op: BabelUnaryOperator, value: ConcreteValue): Value {\n    if (op === \"+\") {\n      // ECMA262 12.5.6.1\n      // 1. Let expr be the result of evaluating UnaryExpression.\n      // 2. Return ? ToNumber(? GetValue(expr)).\n      return IntegralValue.createFromNumberValue(realm, To.ToNumber(realm, value));\n    } else if (op === \"-\") {\n      // ECMA262 12.5.7.1\n      // 1. Let expr be the result of evaluating UnaryExpression.\n      // 2. Let oldValue be ? ToNumber(? GetValue(expr)).\n      let oldValue = To.ToNumber(realm, value);\n\n      // 3. If oldValue is NaN, return NaN.\n      if (isNaN(oldValue)) {\n        return realm.intrinsics.NaN;\n      }\n\n      // 4. Return the result of negating oldValue; that is, compute a Number with the same magnitude but opposite sign.\n      return IntegralValue.createFromNumberValue(realm, -oldValue);\n    } else if (op === \"~\") {\n      // ECMA262 12.5.8\n      // 1. Let expr be the result of evaluating UnaryExpression.\n      // 2. Let oldValue be ? ToInt32(? GetValue(expr)).\n      let oldValue = To.ToInt32(realm, value);\n\n      // 3. Return the result of applying bitwise complement to oldValue. The result is a signed 32-bit integer.\n      return IntegralValue.createFromNumberValue(realm, ~oldValue);\n    } else if (op === \"!\") {\n      // ECMA262 12.6.9\n      // 1. Let expr be the result of evaluating UnaryExpression.\n      // 2. Let oldValue be ToBoolean(? GetValue(expr)).\n      let oldValue = To.ToBoolean(realm, value);\n\n      // 3. If oldValue is true, return false.\n      if (oldValue === true) return realm.intrinsics.false;\n\n      // 4. Return true.\n      return realm.intrinsics.true;\n    } else if (op === \"void\") {\n      // 1. Let expr be the result of evaluating UnaryExpression.\n      // 2. Perform ? GetValue(expr).\n      // 3. Return undefined.\n      return realm.intrinsics.undefined;\n    } else if (op === \"typeof\") {\n      // ECMA262 12.6.5\n      // 1. Let val be the result of evaluating UnaryExpression.\n      // 2. If Type(val) is Reference, then\n      // 3. Let val be ? GetValue(val).\n      let val = value;\n      // 4. Return a String according to Table 35.\n      let typeString = Utils.typeToString(val.getType());\n      invariant(typeString !== undefined);\n      return new StringValue(realm, typeString);\n    } else {\n      invariant(false, `${op} is a state update, not a pure operation, so we don't support it`);\n    }\n  }\n\n  static unaryOp(realm: Realm, op: BabelUnaryOperator, operandValues: ValuesDomain): ValuesDomain {\n    if (operandValues.isBottom()) return ValuesDomain.bottomVal;\n    let operandElements = operandValues._elements;\n    if (operandElements === undefined) return ValuesDomain.topVal;\n    let resultSet = new Set();\n    let savedHandler = realm.errorHandler;\n    let savedIsReadOnly = realm.isReadOnly;\n    realm.isReadOnly = true;\n    try {\n      realm.errorHandler = () => {\n        throw new FatalError();\n      };\n      for (let operandElem of operandElements) {\n        let result = ValuesDomain.computeUnary(realm, op, operandElem);\n        if (result instanceof ConcreteValue) {\n          resultSet.add(result);\n        } else {\n          invariant(result instanceof AbstractValue);\n          if (result.values.isTop()) {\n            return ValuesDomain.topVal;\n          }\n          for (let subResult of result.values.getElements()) {\n            resultSet.add(subResult);\n          }\n        }\n      }\n    } catch (e) {\n      if (e instanceof AbruptCompletion) return ValuesDomain.topVal;\n    } finally {\n      realm.errorHandler = savedHandler;\n      realm.isReadOnly = savedIsReadOnly;\n    }\n    return new ValuesDomain(resultSet);\n  }\n\n  includesValueNotOfType(type: typeof Value): boolean {\n    invariant(!this.isTop());\n    for (let cval of this.getElements()) {\n      if (!(cval instanceof type)) return true;\n    }\n    return false;\n  }\n\n  includesValueOfType(type: typeof Value): boolean {\n    invariant(!this.isTop());\n    for (let cval of this.getElements()) {\n      if (cval instanceof type) return true;\n    }\n    return false;\n  }\n\n  mightBeFalse(): boolean {\n    invariant(!this.isTop());\n    for (let cval of this.getElements()) {\n      if (cval.mightBeFalse()) return true;\n    }\n    return false;\n  }\n\n  mightNotBeFalse(): boolean {\n    invariant(!this.isTop());\n    for (let cval of this.getElements()) {\n      if (cval.mightNotBeFalse()) return true;\n    }\n    return false;\n  }\n\n  static joinValues(\n    realm: Realm,\n    v1: Value = realm.intrinsics.undefined,\n    v2: Value = realm.intrinsics.undefined\n  ): ValuesDomain {\n    if (v1 instanceof AbstractValue) return v1.values.joinWith(v2);\n    if (v2 instanceof AbstractValue) return v2.values.joinWith(v1);\n    let union = new Set();\n    invariant(v1 instanceof ConcreteValue);\n    union.add(v1);\n    invariant(v2 instanceof ConcreteValue);\n    union.add(v2);\n    return new ValuesDomain(union);\n  }\n\n  joinWith(y: Value): ValuesDomain {\n    if (this.isTop()) return this;\n    let union = new Set(this.getElements());\n    if (y instanceof AbstractValue) {\n      if (y.values.isTop()) return y.values;\n      y.values.getElements().forEach(v => union.add(v));\n    } else {\n      invariant(y instanceof ConcreteValue);\n      union.add(y);\n    }\n    if (union.size === 0) return ValuesDomain.bottomVal;\n    return new ValuesDomain(union);\n  }\n\n  static meetValues(\n    realm: Realm,\n    v1: Value = realm.intrinsics.undefined,\n    v2: Value = realm.intrinsics.undefined\n  ): ValuesDomain {\n    if (v1 instanceof AbstractValue) return v1.values.meetWith(v2);\n    if (v2 instanceof AbstractValue) return v2.values.meetWith(v1);\n    let intersection = new Set();\n    invariant(v1 instanceof ConcreteValue);\n    invariant(v2 instanceof ConcreteValue);\n    if (v1 === v2) intersection.add(v1);\n    if (intersection.size === 0) return ValuesDomain.bottomVal;\n    return new ValuesDomain(intersection);\n  }\n\n  meetWith(y: Value): ValuesDomain {\n    let intersection = new Set();\n    let elements = this._elements;\n    if (y instanceof AbstractValue) {\n      if (y.values.isTop()) return this;\n      y.values.getElements().forEach(v => {\n        if (elements === undefined || elements.has(v)) intersection.add(v);\n      });\n    } else {\n      invariant(y instanceof ConcreteValue);\n      if (elements === undefined || elements.has(y)) intersection.add(y);\n    }\n    if (intersection.size === 0) return ValuesDomain.bottomVal;\n    return new ValuesDomain(intersection);\n  }\n\n  promoteEmptyToUndefined(): ValuesDomain {\n    if (this.isTop() || this.isBottom()) return this;\n    let newSet = new Set();\n    for (let cval of this.getElements()) {\n      if (cval instanceof EmptyValue) newSet.add(cval.$Realm.intrinsics.undefined);\n      else newSet.add(cval);\n    }\n    return new ValuesDomain(newSet);\n  }\n}\n"],"file":"ValuesDomain.js"}