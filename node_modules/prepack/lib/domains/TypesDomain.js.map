{"version":3,"sources":["../../src/domains/TypesDomain.js"],"names":["TypesDomain","constructor","type","ConcreteValue","_type","Value","undefined","isBottom","EmptyValue","isTop","getType","binaryOp","op","left","right","bottomVal","lType","rType","resultType","topVal","isTypeCompatibleWith","StringValue","IntegralValue","NumberValue","BooleanValue","joinValues","v1","v2","UndefinedValue","AbstractValue","types","joinWith","t","FunctionValue","ObjectValue","PrimitiveValue","logicalOp","unaryOp","operand"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport invariant from \"../invariant.js\";\nimport type { BabelBinaryOperator, BabelLogicalOperator, BabelUnaryOperator } from \"@babel/types\";\nimport {\n  AbstractValue,\n  BooleanValue,\n  ConcreteValue,\n  EmptyValue,\n  FunctionValue,\n  NumberValue,\n  IntegralValue,\n  ObjectValue,\n  PrimitiveValue,\n  StringValue,\n  UndefinedValue,\n  Value,\n} from \"../values/index.js\";\n\n/* An abstract domain for the type of value a variable might have.  */\n\nexport default class TypesDomain {\n  constructor(type: void | typeof Value) {\n    invariant(type !== ConcreteValue, \"Concrete values must be specific\");\n    this._type = type === Value ? undefined : type;\n  }\n\n  static topVal: TypesDomain;\n  static bottomVal: TypesDomain;\n\n  _type: void | typeof Value;\n\n  isBottom(): boolean {\n    return this._type instanceof EmptyValue;\n  }\n\n  isTop(): boolean {\n    return this._type === undefined;\n  }\n\n  getType(): typeof Value {\n    return this._type || Value;\n  }\n\n  // return the type of the result in the case where there is no exception\n  static binaryOp(op: BabelBinaryOperator, left: TypesDomain, right: TypesDomain): TypesDomain {\n    if (left.isBottom() || right.isBottom()) return TypesDomain.bottomVal;\n    let lType = left._type;\n    let rType = right._type;\n    let resultType = Value;\n    switch (op) {\n      case \"+\":\n        if (lType === undefined || rType === undefined) return TypesDomain.topVal;\n        if (Value.isTypeCompatibleWith(lType, StringValue) || Value.isTypeCompatibleWith(rType, StringValue)) {\n          resultType = StringValue;\n          break;\n        }\n      // eslint-disable-line no-fallthrough\n      case \"-\":\n        if (lType === undefined || rType === undefined) return TypesDomain.topVal;\n        if (lType === IntegralValue && rType === IntegralValue) resultType = IntegralValue;\n        else if (Value.isTypeCompatibleWith(lType, NumberValue) && Value.isTypeCompatibleWith(rType, NumberValue))\n          resultType = NumberValue;\n        break;\n      case \"<\":\n      case \">\":\n      case \">=\":\n      case \"<=\":\n      case \"!=\":\n      case \"==\":\n      case \"!==\":\n      case \"===\":\n      case \"in\":\n      case \"instanceof\":\n        resultType = BooleanValue;\n        break;\n      case \">>>\":\n      case \"<<\":\n      case \">>\":\n      case \"&\":\n      case \"|\":\n      case \"^\":\n        resultType = IntegralValue;\n        break;\n      case \"**\":\n      case \"%\":\n      case \"/\":\n      case \"*\":\n        resultType = NumberValue;\n        break;\n      default:\n        invariant(false);\n    }\n    return new TypesDomain(resultType);\n  }\n\n  static joinValues(v1: void | Value, v2: void | Value): TypesDomain {\n    if (v1 === undefined && v2 === undefined) return new TypesDomain(UndefinedValue);\n    if (v1 === undefined || v2 === undefined) return TypesDomain.topVal;\n    if (v1 instanceof AbstractValue) return v1.types.joinWith(v2.getType());\n    if (v2 instanceof AbstractValue) return v2.types.joinWith(v1.getType());\n    return new TypesDomain(v1.getType()).joinWith(v2.getType());\n  }\n\n  joinWith(t: typeof Value): TypesDomain {\n    if (this.isBottom()) return t === EmptyValue ? TypesDomain.bottomVal : new TypesDomain(t);\n    let type = this.getType();\n    if (type === t || t instanceof EmptyValue) return this;\n    if (Value.isTypeCompatibleWith(type, NumberValue) && Value.isTypeCompatibleWith(t, NumberValue)) {\n      return new TypesDomain(NumberValue);\n    }\n    if (Value.isTypeCompatibleWith(type, FunctionValue) && Value.isTypeCompatibleWith(t, FunctionValue)) {\n      return new TypesDomain(FunctionValue);\n    }\n    if (Value.isTypeCompatibleWith(type, ObjectValue) && Value.isTypeCompatibleWith(t, ObjectValue)) {\n      return new TypesDomain(ObjectValue);\n    }\n    if (Value.isTypeCompatibleWith(type, PrimitiveValue) && Value.isTypeCompatibleWith(t, PrimitiveValue)) {\n      return new TypesDomain(PrimitiveValue);\n    }\n    return TypesDomain.topVal;\n  }\n\n  static logicalOp(op: BabelLogicalOperator, left: TypesDomain, right: TypesDomain): TypesDomain {\n    return left.joinWith(right.getType());\n  }\n\n  // return the type of the result in the case where there is no exception\n  // note that the type of the operand has no influence on the type of the non exceptional result\n  static unaryOp(op: BabelUnaryOperator, operand: TypesDomain): TypesDomain {\n    if (operand.isBottom()) return TypesDomain.bottomVal;\n    const type = operand._type;\n    let resultType = Value;\n    switch (op) {\n      case \"-\":\n      case \"+\":\n        resultType = type === IntegralValue ? IntegralValue : NumberValue;\n        break;\n      case \"~\":\n        resultType = IntegralValue;\n        break;\n      case \"!\":\n      case \"delete\":\n        resultType = BooleanValue;\n        break;\n      case \"typeof\":\n        resultType = StringValue;\n        break;\n      case \"void\":\n        resultType = UndefinedValue;\n        break;\n      default:\n        invariant(false);\n    }\n    return new TypesDomain(resultType);\n  }\n}\n"],"file":"TypesDomain.js"}