{"version":3,"sources":["../../../src/debugger/adapter/DebugAdapter.js"],"names":["PrepackDebugSession","DebugSession","constructor","setDebuggerLinesStartAt1","setDebuggerColumnsStartAt1","_generateDebugFilePath","direction","time","Date","now","filePath","_registerMessageCallbacks","_ensureAdapterChannelCreated","_adapterChannel","undefined","localCopyAdapterChannel","registerChannelEvent","DebugMessage","STOPPED_RESPONSE","response","result","kind","message","reason","line","column","sendEvent","StoppedEvent","DebuggerConstants","PREPACK_THREAD_ID","STEPINTO_RESPONSE","initializeRequest","args","_clientID","clientID","body","supportsConfigurationDoneRequest","sendResponse","configurationDoneRequest","CLI_CLIENTID","run","DEFAULT_REQUEST_ID","runResponse","launchRequest","inFilePath","outFilePath","adapterChannel","AdapterChannel","launchArgs","sourceFiles","prepackRuntime","prepackArguments","debugInFilePath","debugOutFilePath","outputCallback","data","outputEvent","OutputEvent","toString","exitCallback","TerminatedEvent","process","exit","launch","request_seq","dbgResponse","InitializedEvent","continueRequest","setBreakPointsRequest","source","path","breakpoints","breakpointInfos","breakpoint","breakpointInfo","requestID","push","setBreakpoints","verified","stackTraceRequest","getStackFrames","frameInfos","stackframes","frames","frameInfo","fileName","frame","id","name","functionName","stackFrames","threadsRequest","thread","threads","scopesRequest","getScopes","frameId","scopeInfos","scopes","scopeInfo","scope","variablesReference","expensive","variablesRequest","getVariables","variableInfos","variables","varInfo","variable","value","stepInRequest","stepInto","nextRequest","stepOver","stepOutRequest","stepOut","evaluateRequest","evaluate","expression","evalResult","displayValue","type","callingRequest","DebuggerError"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { DebugSession, InitializedEvent, OutputEvent, TerminatedEvent, StoppedEvent } from \"vscode-debugadapter\";\nimport * as DebugProtocol from \"vscode-debugprotocol\";\nimport { AdapterChannel } from \"./channel/AdapterChannel.js\";\nimport invariant from \"./../common/invariant.js\";\nimport { DebugMessage } from \"./../common/channel/DebugMessage.js\";\nimport type {\n  Breakpoint,\n  DebuggerResponse,\n  LaunchRequestArguments,\n  PrepackLaunchArguments,\n} from \"./../common/types.js\";\nimport { DebuggerConstants } from \"./../common/DebuggerConstants.js\";\nimport { DebuggerError } from \"./../common/DebuggerError.js\";\n\n/* An implementation of an debugger adapter adhering to the VSCode Debug protocol\n * The adapter is responsible for communication between the UI and Prepack\n*/\nclass PrepackDebugSession extends DebugSession {\n  /**\n   * Creates a new debug adapter that is used for one debug session.\n   * We configure the default implementation of a debug adapter here.\n   */\n  constructor() {\n    super();\n    this.setDebuggerLinesStartAt1(true);\n    this.setDebuggerColumnsStartAt1(true);\n  }\n  _clientID: void | string;\n  _adapterChannel: void | AdapterChannel;\n\n  _generateDebugFilePath(direction: \"in\" | \"out\") {\n    let time = Date.now();\n    let filePath = \"/tmp/\";\n    if (direction === \"in\") {\n      filePath += `prepack-debug-engine2adapter-${time}.txt`;\n    } else {\n      filePath += `prepack-debug-adapter2engine-${time}.txt`;\n    }\n    return filePath;\n  }\n\n  _registerMessageCallbacks() {\n    this._ensureAdapterChannelCreated(\"registerMessageCallbacks\");\n    invariant(this._adapterChannel !== undefined, \"Adapter Channel used before it was created, in debugger.\");\n    // Create local copy to ensure external functions don't modify the adapterChannel, satisfy flow.\n    let localCopyAdapterChannel = this._adapterChannel;\n    localCopyAdapterChannel.registerChannelEvent(DebugMessage.STOPPED_RESPONSE, (response: DebuggerResponse) => {\n      let result = response.result;\n      invariant(result.kind === \"stopped\");\n      let message = `${result.reason}: ${result.filePath} ${result.line}:${result.column}`;\n      // Append message if there exists one (for Prepack errors)\n      if (result.message !== undefined) {\n        message += `. ${result.message}`;\n      }\n      this.sendEvent(new StoppedEvent(message, DebuggerConstants.PREPACK_THREAD_ID));\n    });\n    localCopyAdapterChannel.registerChannelEvent(DebugMessage.STEPINTO_RESPONSE, (response: DebuggerResponse) => {\n      let result = response.result;\n      invariant(result.kind === \"stepInto\");\n      this.sendEvent(\n        new StoppedEvent(\n          \"Stepped into \" + `${result.filePath} ${result.line}:${result.column}`,\n          DebuggerConstants.PREPACK_THREAD_ID\n        )\n      );\n    });\n  }\n\n  /**\n   * The 'initialize' request is the first request called by the UI\n   * to interrogate the features the debug adapter provides.\n   */\n  // Override\n  initializeRequest(response: DebugProtocol.InitializeResponse, args: DebugProtocol.InitializeRequestArguments): void {\n    this._clientID = args.clientID;\n    response.body = response.body || {};\n    response.body.supportsConfigurationDoneRequest = true;\n    // Respond back to the UI with the configurations. Will add more configurations gradually as needed.\n    // Adapter can respond immediately here because no message is sent to Prepack\n    this.sendResponse(response);\n  }\n\n  // Override\n  configurationDoneRequest(\n    response: DebugProtocol.ConfigurationDoneResponse,\n    args: DebugProtocol.ConfigurationDoneArguments\n  ): void {\n    // initial handshake with UI is complete\n    if (this._clientID !== DebuggerConstants.CLI_CLIENTID) {\n      this._ensureAdapterChannelCreated(\"configurationDoneRequest\");\n      invariant(this._adapterChannel !== undefined, \"Adapter Channel used before it was created, in debugger.\");\n      // for all ui except the CLI, autosend the first run request\n      this._adapterChannel.run(DebuggerConstants.DEFAULT_REQUEST_ID, (runResponse: DebuggerResponse) => {});\n    }\n    this.sendResponse(response);\n  }\n\n  // Override\n  launchRequest(response: DebugProtocol.LaunchResponse, args: LaunchRequestArguments): void {\n    let inFilePath = this._generateDebugFilePath(\"in\");\n    let outFilePath = this._generateDebugFilePath(\"out\");\n    // Set up the communication channel to the debugger.\n    let adapterChannel = new AdapterChannel(inFilePath, outFilePath);\n    this._adapterChannel = adapterChannel;\n    this._registerMessageCallbacks();\n    let launchArgs: PrepackLaunchArguments = {\n      kind: \"launch\",\n      sourceFiles: args.sourceFiles,\n      prepackRuntime: args.prepackRuntime,\n      prepackArguments: args.prepackArguments,\n      debugInFilePath: inFilePath,\n      debugOutFilePath: outFilePath,\n      outputCallback: (data: Buffer) => {\n        let outputEvent = new OutputEvent(data.toString(), \"stdout\");\n        this.sendEvent(outputEvent);\n      },\n      exitCallback: () => {\n        this.sendEvent(new TerminatedEvent());\n        process.exit();\n      },\n    };\n\n    adapterChannel.launch(response.request_seq, launchArgs, (dbgResponse: DebuggerResponse) => {\n      this.sendResponse(response);\n    });\n\n    // Important: InitializedEvent indicates to the protocol that further requests (e.g. breakpoints, execution control)\n    // are ready to be received. Prepack debugger is not ready to receive these requests until the Adapter Channel\n    // has been created and Prepack has been launched. Thus, the InitializedEvent is sent after Prepack launch and\n    // the creation of the Adapter Channel.\n    this.sendEvent(new InitializedEvent());\n  }\n\n  /**\n   * Request Prepack to continue running when it is stopped\n   */\n  // Override\n  continueRequest(response: DebugProtocol.ContinueResponse, args: DebugProtocol.ContinueArguments): void {\n    // send a Run request to Prepack and try to send the next request\n    this._ensureAdapterChannelCreated(\"continueRequest\");\n    invariant(this._adapterChannel !== undefined, \"Adapter Channel used before it was created, in debugger.\");\n    this._adapterChannel.run(response.request_seq, (dbgResponse: DebuggerResponse) => {\n      this.sendResponse(response);\n    });\n  }\n\n  // Override\n  setBreakPointsRequest(\n    response: DebugProtocol.SetBreakpointsResponse,\n    args: DebugProtocol.SetBreakpointsArguments\n  ): void {\n    if (args.source.path === undefined || args.breakpoints === undefined) return;\n    let filePath = args.source.path;\n    let breakpointInfos = [];\n    for (const breakpoint of args.breakpoints) {\n      let line = breakpoint.line;\n      let column = 0;\n      if (breakpoint.column !== undefined) {\n        column = breakpoint.column;\n      }\n      let breakpointInfo: Breakpoint = {\n        kind: \"breakpoint\",\n        requestID: response.request_seq,\n        filePath: filePath,\n        line: line,\n        column: column,\n      };\n      breakpointInfos.push(breakpointInfo);\n    }\n\n    this._ensureAdapterChannelCreated(\"setBreakPointsRequest\");\n    invariant(this._adapterChannel !== undefined, \"Adapter Channel used before it was created, in debugger.\");\n    this._adapterChannel.setBreakpoints(response.request_seq, breakpointInfos, (dbgResponse: DebuggerResponse) => {\n      let result = dbgResponse.result;\n      invariant(result.kind === \"breakpoint-add\");\n      let breakpoints: Array<DebugProtocol.Breakpoint> = [];\n      for (const breakpointInfo of result.breakpoints) {\n        let source: DebugProtocol.Source = {\n          path: breakpointInfo.filePath,\n        };\n        let breakpoint: DebugProtocol.Breakpoint = {\n          verified: true,\n          source: source,\n          line: breakpointInfo.line,\n          column: breakpointInfo.column,\n        };\n        breakpoints.push(breakpoint);\n      }\n      response.body = {\n        breakpoints: breakpoints,\n      };\n      this.sendResponse(response);\n    });\n  }\n\n  // Override\n  stackTraceRequest(response: DebugProtocol.StackTraceResponse, args: DebugProtocol.StackTraceArguments): void {\n    this._ensureAdapterChannelCreated(\"stackTraceRequest\");\n    invariant(this._adapterChannel !== undefined);\n    this._adapterChannel.getStackFrames(response.request_seq, (dbgResponse: DebuggerResponse) => {\n      let result = dbgResponse.result;\n      invariant(result.kind === \"stackframe\");\n      let frameInfos = result.stackframes;\n      let frames: Array<DebugProtocol.StackFrame> = [];\n      for (const frameInfo of frameInfos) {\n        let source: DebugProtocol.Source = {\n          path: frameInfo.fileName,\n        };\n        let frame: DebugProtocol.StackFrame = {\n          id: frameInfo.id,\n          name: frameInfo.functionName,\n          source: source,\n          line: frameInfo.line,\n          column: frameInfo.column,\n        };\n        frames.push(frame);\n      }\n      response.body = {\n        stackFrames: frames,\n      };\n      this.sendResponse(response);\n    });\n  }\n\n  // Override\n  threadsRequest(response: DebugProtocol.ThreadsResponse): void {\n    // There will only be 1 thread, so respond immediately\n    let thread: DebugProtocol.Thread = {\n      id: DebuggerConstants.PREPACK_THREAD_ID,\n      name: \"main\",\n    };\n    response.body = {\n      threads: [thread],\n    };\n    this.sendResponse(response);\n  }\n\n  // Override\n  scopesRequest(response: DebugProtocol.ScopesResponse, args: DebugProtocol.ScopesArguments): void {\n    this._ensureAdapterChannelCreated(\"scopesRequest\");\n    invariant(this._adapterChannel !== undefined, \"Adapter Channel used before it was created, in debugger.\");\n    this._adapterChannel.getScopes(response.request_seq, args.frameId, (dbgResponse: DebuggerResponse) => {\n      let result = dbgResponse.result;\n      invariant(result.kind === \"scopes\");\n      let scopeInfos = result.scopes;\n      let scopes: Array<DebugProtocol.Scope> = [];\n      for (const scopeInfo of scopeInfos) {\n        let scope: DebugProtocol.Scope = {\n          name: scopeInfo.name,\n          variablesReference: scopeInfo.variablesReference,\n          expensive: scopeInfo.expensive,\n        };\n        scopes.push(scope);\n      }\n      response.body = {\n        scopes: scopes,\n      };\n      this.sendResponse(response);\n    });\n  }\n\n  // Override\n  variablesRequest(response: DebugProtocol.VariablesResponse, args: DebugProtocol.VariablesArguments): void {\n    this._ensureAdapterChannelCreated(\"variablesRequest\");\n    invariant(this._adapterChannel !== undefined, \"Adapter Channel used before it was created, in debugger.\");\n    this._adapterChannel.getVariables(\n      response.request_seq,\n      args.variablesReference,\n      (dbgResponse: DebuggerResponse) => {\n        let result = dbgResponse.result;\n        invariant(result.kind === \"variables\");\n        let variableInfos = result.variables;\n        let variables: Array<DebugProtocol.Variable> = [];\n        for (const varInfo of variableInfos) {\n          let variable: DebugProtocol.Variable = {\n            name: varInfo.name,\n            value: varInfo.value,\n            variablesReference: varInfo.variablesReference,\n          };\n          variables.push(variable);\n        }\n        response.body = {\n          variables: variables,\n        };\n        this.sendResponse(response);\n      }\n    );\n  }\n\n  // Override\n  stepInRequest(response: DebugProtocol.StepInResponse, args: DebugProtocol.StepInArguments): void {\n    this._ensureAdapterChannelCreated(\"stepInRequest\");\n    invariant(this._adapterChannel !== undefined, \"Adapter Channel used before it was created, in debugger.\");\n    this._adapterChannel.stepInto(response.request_seq, (dbgResponse: DebuggerResponse) => {\n      this.sendResponse(response);\n    });\n  }\n\n  // Override\n  nextRequest(response: DebugProtocol.NextResponse, args: DebugProtocol.NextArguments): void {\n    this._ensureAdapterChannelCreated(\"nextRequest\");\n    invariant(this._adapterChannel !== undefined, \"Adapter Channel used before it was created, in debugger.\");\n    this._adapterChannel.stepOver(response.request_seq, (dbgResponse: DebuggerResponse) => {\n      this.sendResponse(response);\n    });\n  }\n\n  // Override\n  stepOutRequest(response: DebugProtocol.StepOutResponse, args: DebugProtocol.StepOutArguments): void {\n    this._ensureAdapterChannelCreated(\"stepOutRequest\");\n    invariant(this._adapterChannel !== undefined, \"Adapter Channel used before it was created, in debugger.\");\n    this._adapterChannel.stepOut(response.request_seq, (dbgResponse: DebuggerResponse) => {\n      this.sendResponse(response);\n    });\n  }\n\n  // Override\n  evaluateRequest(response: DebugProtocol.EvaluateResponse, args: DebugProtocol.EvaluateArguments): void {\n    this._ensureAdapterChannelCreated(\"evaluateRequest\");\n    invariant(this._adapterChannel !== undefined, \"Adapter Channel used before it was created, in debugger.\");\n    this._adapterChannel.evaluate(\n      response.request_seq,\n      args.frameId,\n      args.expression,\n      (dbgResponse: DebuggerResponse) => {\n        let evalResult = dbgResponse.result;\n        invariant(evalResult.kind === \"evaluate\");\n        response.body = {\n          result: evalResult.displayValue,\n          type: evalResult.type,\n          variablesReference: evalResult.variablesReference,\n        };\n        this.sendResponse(response);\n      }\n    );\n  }\n\n  _ensureAdapterChannelCreated(callingRequest: string) {\n    // All responses that involve the Adapter Channel should only be invoked\n    // after the channel has been created. If this ordering is perturbed,\n    // there was likely a change in the protocol implementation by Nuclide.\n    if (this._adapterChannel === undefined) {\n      throw new DebuggerError(\n        \"Startup Error\",\n        `Adapter Channel in Debugger is being used before it has been created. Caused by ${callingRequest}.`\n      );\n    }\n  }\n}\n\nDebugSession.run(PrepackDebugSession);\n"],"file":"DebugAdapter.js"}