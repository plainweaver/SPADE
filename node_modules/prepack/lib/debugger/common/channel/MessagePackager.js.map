{"version":3,"sources":["../../../../src/debugger/common/channel/MessagePackager.js"],"names":["LENGTH_SEPARATOR","MessagePackager","constructor","isAdapter","_isAdapter","package","contents","length","unpackage","separatorIndex","indexOf","messageLength","parseInt","slice","isNaN","startIndex","endIndex","message"],"mappings":";;;;;;;AAWA;;;;AAXA;;;;;;;;;AASA;AAIA,MAAMA,gBAAgB,GAAG,IAAzB,C,CAEA;;AACO,MAAMC,eAAN,CAAsB;AAC3BC,EAAAA,WAAW,CAACC,SAAD,EAAqB;AAC9B,SAAKC,UAAL,GAAkBD,SAAlB;AACD;;AAGD;AACAE,EAAAA,OAAO,CAACC,QAAD,EAA2B;AAChC;AACA,WAAOA,QAAQ,CAACC,MAAT,GAAkBP,gBAAlB,GAAqCM,QAA5C;AACD,GAV0B,CAY3B;AACA;AACA;;;AACAE,EAAAA,SAAS,CAACF,QAAD,EAAkC;AACzC;AACA,QAAIG,cAAc,GAAGH,QAAQ,CAACI,OAAT,CAAiBV,gBAAjB,CAArB,CAFyC,CAGzC;;AACA,QAAIS,cAAc,KAAK,CAAC,CAAxB,EAA2B;AACzB,aAAO,IAAP;AACD;;AACD,QAAIE,aAAa,GAAGC,QAAQ,CAACN,QAAQ,CAACO,KAAT,CAAe,CAAf,EAAkBJ,cAAlB,CAAD,EAAoC,EAApC,CAA5B,CAPyC,CAQzC;AACA;;AACA,4BAAU,CAACK,KAAK,CAACH,aAAD,CAAhB;AACA,QAAII,UAAU,GAAGN,cAAc,GAAGT,gBAAgB,CAACO,MAAnD;AACA,QAAIS,QAAQ,GAAGD,UAAU,GAAGJ,aAA5B,CAZyC,CAazC;;AACA,4BAAUL,QAAQ,CAACC,MAAT,IAAmBQ,UAAU,GAAGJ,aAA1C,EAdyC,CAezC;;AACA,QAAIL,QAAQ,CAACC,MAAT,GAAkBS,QAAtB,EAAgC;AAC9B,aAAO,IAAP;AACD;;AACD,QAAIC,OAAO,GAAGX,QAAQ,CAACO,KAAT,CAAeE,UAAf,EAA2BC,QAA3B,CAAd;AACA,WAAOC,OAAP;AACD;;AApC0B","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict */\n\nimport invariant from \"../invariant.js\";\n\nconst LENGTH_SEPARATOR = \"--\";\n\n// Package a message sent or unpackage a message received\nexport class MessagePackager {\n  constructor(isAdapter: boolean) {\n    this._isAdapter = isAdapter;\n  }\n  _isAdapter: boolean;\n\n  // package a message to be sent\n  package(contents: string): string {\n    // format: <length>--<contents>\n    return contents.length + LENGTH_SEPARATOR + contents;\n  }\n\n  // unpackage a message received, verify it, and return it\n  // returns null if no message or the message is only partially read\n  // errors if the message violates the format\n  unpackage(contents: string): null | string {\n    // format: <length>--<contents>\n    let separatorIndex = contents.indexOf(LENGTH_SEPARATOR);\n    // if the separator is not written in yet --> partial read\n    if (separatorIndex === -1) {\n      return null;\n    }\n    let messageLength = parseInt(contents.slice(0, separatorIndex), 10);\n    // if the part before the separator is not a valid length, it is a\n    // violation of protocol\n    invariant(!isNaN(messageLength));\n    let startIndex = separatorIndex + LENGTH_SEPARATOR.length;\n    let endIndex = startIndex + messageLength;\n    // there should only be one message in the contents at a time\n    invariant(contents.length <= startIndex + messageLength);\n    // if we didn't read the whole message yet --> partial read\n    if (contents.length < endIndex) {\n      return null;\n    }\n    let message = contents.slice(startIndex, endIndex);\n    return message;\n  }\n}\n"],"file":"MessagePackager.js"}