{"version":3,"sources":["../../../../src/debugger/common/channel/MessageMarshaller.js"],"names":["MessageMarshaller","constructor","_lastRunRequestID","marshallBreakpointAcknowledge","requestID","messageType","breakpoints","JSON","stringify","marshallStoppedResponse","reason","filePath","line","column","message","result","kind","DebugMessage","STOPPED_RESPONSE","marshallDebuggerStart","DEBUGGER_ATTACHED","marshallContinueRequest","PREPACK_RUN_COMMAND","marshallSetBreakpointsRequest","BREAKPOINT_ADD_COMMAND","marshallStackFramesRequest","STACKFRAMES_COMMAND","marshallStackFramesResponse","stackframes","STACKFRAMES_RESPONSE","marshallScopesRequest","frameId","SCOPES_COMMAND","marshallScopesResponse","scopes","SCOPES_RESPONSE","marshallVariablesRequest","variablesReference","VARIABLES_COMMAND","marshallVariablesResponse","variables","VARIABLES_RESPONSE","marshallStepIntoRequest","STEPINTO_COMMAND","marshallStepOverRequest","STEPOVER_COMMAND","marshallStepOutRequest","STEPOUT_COMMAND","marshallEvaluateRequest","expression","evalArgs","undefined","EVALUATE_COMMAND","marshallEvaluateResponse","evalResult","EVALUATE_RESPONSE","unmarshallRequest","parts","split","length","parseInt","isNaN","command","args","runArgs","_unmarshallBreakpointsArguments","slice","join","stackFrameArgs","_unmarshallScopesArguments","_unmarshallVariablesArguments","stepIntoArgs","stepOverArgs","stepOutArgs","_unmarshallEvaluateArguments","DebuggerError","id","arguments","responseString","parse","breakpoint","hasOwnProperty","varRef","unmarshallResponse","dbgResult","resultString","PREPACK_READY_RESPONSE","_unmarshallReadyResult","BREAKPOINT_ADD_ACKNOWLEDGE","_unmarshallBreakpointsAddResult","_unmarshallStoppedResult","_unmarshallStackframesResult","_unmarshallScopesResult","_unmarshallVariablesResult","_unmarshallEvaluateResult","dbgResponse","e","frames","Array","isArray","frame","scope","variable"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\nimport { DebugMessage } from \"./DebugMessage.js\";\nimport type {\n  Breakpoint,\n  BreakpointsArguments,\n  ScopesArguments,\n  Stackframe,\n  DebuggerResponse,\n  StackframeResult,\n  BreakpointsAddResult,\n  StoppedResult,\n  ReadyResult,\n  Scope,\n  ScopesResult,\n  Variable,\n  VariablesArguments,\n  VariablesResult,\n  DebuggerRequest,\n  DebuggerRequestArguments,\n  RunArguments,\n  StackframeArguments,\n  StepIntoArguments,\n  StepOverArguments,\n  StepOutArguments,\n  StoppedReason,\n  EvaluateArguments,\n  EvaluateResult,\n} from \"./../types.js\";\nimport invariant from \"./../invariant.js\";\nimport { DebuggerError } from \"./../DebuggerError.js\";\n\nexport class MessageMarshaller {\n  constructor() {\n    this._lastRunRequestID = 0;\n  }\n  _lastRunRequestID: number;\n\n  marshallBreakpointAcknowledge(requestID: number, messageType: string, breakpoints: Array<Breakpoint>): string {\n    return `${requestID} ${messageType} ${JSON.stringify(breakpoints)}`;\n  }\n\n  marshallStoppedResponse(\n    reason: StoppedReason,\n    filePath: string,\n    line: number,\n    column: number,\n    message?: string\n  ): string {\n    let result: StoppedResult = {\n      kind: \"stopped\",\n      reason: reason,\n      filePath: filePath,\n      line: line,\n      column: column,\n      message: message,\n    };\n    return `${this._lastRunRequestID} ${DebugMessage.STOPPED_RESPONSE} ${JSON.stringify(result)}`;\n  }\n\n  marshallDebuggerStart(requestID: number): string {\n    return `${requestID} ${DebugMessage.DEBUGGER_ATTACHED}`;\n  }\n\n  marshallContinueRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.PREPACK_RUN_COMMAND}`;\n  }\n\n  marshallSetBreakpointsRequest(requestID: number, breakpoints: Array<Breakpoint>): string {\n    return `${requestID} ${DebugMessage.BREAKPOINT_ADD_COMMAND} ${JSON.stringify(breakpoints)}`;\n  }\n\n  marshallStackFramesRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STACKFRAMES_COMMAND}`;\n  }\n\n  marshallStackFramesResponse(requestID: number, stackframes: Array<Stackframe>): string {\n    return `${requestID} ${DebugMessage.STACKFRAMES_RESPONSE} ${JSON.stringify(stackframes)}`;\n  }\n\n  marshallScopesRequest(requestID: number, frameId: number): string {\n    return `${requestID} ${DebugMessage.SCOPES_COMMAND} ${frameId}`;\n  }\n\n  marshallScopesResponse(requestID: number, scopes: Array<Scope>): string {\n    return `${requestID} ${DebugMessage.SCOPES_RESPONSE} ${JSON.stringify(scopes)}`;\n  }\n\n  marshallVariablesRequest(requestID: number, variablesReference: number): string {\n    return `${requestID} ${DebugMessage.VARIABLES_COMMAND} ${variablesReference}`;\n  }\n\n  marshallVariablesResponse(requestID: number, variables: Array<Variable>): string {\n    return `${requestID} ${DebugMessage.VARIABLES_RESPONSE} ${JSON.stringify(variables)}`;\n  }\n\n  marshallStepIntoRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STEPINTO_COMMAND}`;\n  }\n\n  marshallStepOverRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STEPOVER_COMMAND}`;\n  }\n\n  marshallStepOutRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STEPOUT_COMMAND}`;\n  }\n\n  marshallEvaluateRequest(requestID: number, frameId: void | number, expression: string): string {\n    let evalArgs: EvaluateArguments = {\n      kind: \"evaluate\",\n      expression: expression,\n    };\n    if (frameId !== undefined) {\n      evalArgs.frameId = frameId;\n    }\n    return `${requestID} ${DebugMessage.EVALUATE_COMMAND} ${JSON.stringify(evalArgs)}`;\n  }\n\n  marshallEvaluateResponse(requestID: number, evalResult: EvaluateResult): string {\n    return `${requestID} ${DebugMessage.EVALUATE_RESPONSE} ${JSON.stringify(evalResult)}`;\n  }\n\n  unmarshallRequest(message: string): DebuggerRequest {\n    let parts = message.split(\" \");\n    // each request must have a length and a command\n    invariant(parts.length >= 2, \"Request is not well formed\");\n    // unique ID for each request\n    let requestID = parseInt(parts[0], 10);\n    invariant(!isNaN(requestID), \"Request ID must be a number\");\n    let command = parts[1];\n    let args: DebuggerRequestArguments;\n    switch (command) {\n      case DebugMessage.PREPACK_RUN_COMMAND:\n        this._lastRunRequestID = requestID;\n        let runArgs: RunArguments = {\n          kind: \"run\",\n        };\n        args = runArgs;\n        break;\n      case DebugMessage.BREAKPOINT_ADD_COMMAND:\n        args = this._unmarshallBreakpointsArguments(requestID, parts.slice(2).join(\" \"));\n        break;\n      case DebugMessage.STACKFRAMES_COMMAND:\n        let stackFrameArgs: StackframeArguments = {\n          kind: \"stackframe\",\n        };\n        args = stackFrameArgs;\n        break;\n      case DebugMessage.SCOPES_COMMAND:\n        args = this._unmarshallScopesArguments(requestID, parts[2]);\n        break;\n      case DebugMessage.VARIABLES_COMMAND:\n        args = this._unmarshallVariablesArguments(requestID, parts[2]);\n        break;\n      case DebugMessage.STEPINTO_COMMAND:\n        this._lastRunRequestID = requestID;\n        let stepIntoArgs: StepIntoArguments = {\n          kind: \"stepInto\",\n        };\n        args = stepIntoArgs;\n        break;\n      case DebugMessage.STEPOVER_COMMAND:\n        this._lastRunRequestID = requestID;\n        let stepOverArgs: StepOverArguments = {\n          kind: \"stepOver\",\n        };\n        args = stepOverArgs;\n        break;\n      case DebugMessage.STEPOUT_COMMAND:\n        this._lastRunRequestID = requestID;\n        let stepOutArgs: StepOutArguments = {\n          kind: \"stepOut\",\n        };\n        args = stepOutArgs;\n        break;\n      case DebugMessage.EVALUATE_COMMAND:\n        args = this._unmarshallEvaluateArguments(requestID, parts.slice(2).join(\" \"));\n        break;\n      default:\n        throw new DebuggerError(\"Invalid command\", \"Invalid command from adapter: \" + command);\n    }\n    invariant(args !== undefined);\n    let result: DebuggerRequest = {\n      id: requestID,\n      command: command,\n      arguments: args,\n    };\n    return result;\n  }\n\n  _unmarshallBreakpointsArguments(requestID: number, responseString: string): BreakpointsArguments {\n    let breakpoints = JSON.parse(responseString);\n    for (const breakpoint of breakpoints) {\n      invariant(breakpoint.hasOwnProperty(\"filePath\"), \"breakpoint missing filePath property\");\n      invariant(breakpoint.hasOwnProperty(\"line\"), \"breakpoint missing line property\");\n      invariant(breakpoint.hasOwnProperty(\"column\"), \"breakpoint missing column property\");\n      invariant(!isNaN(breakpoint.line));\n      invariant(!isNaN(breakpoint.column));\n    }\n    let result: BreakpointsArguments = {\n      kind: \"breakpoint\",\n      breakpoints: breakpoints,\n    };\n    return result;\n  }\n\n  _unmarshallScopesArguments(requestID: number, responseString: string): ScopesArguments {\n    let frameId = parseInt(responseString, 10);\n    invariant(!isNaN(frameId));\n    let result: ScopesArguments = {\n      kind: \"scopes\",\n      frameId: frameId,\n    };\n    return result;\n  }\n\n  _unmarshallVariablesArguments(requestID: number, responseString: string): VariablesArguments {\n    let varRef = parseInt(responseString, 10);\n    invariant(!isNaN(varRef));\n    let result: VariablesArguments = {\n      kind: \"variables\",\n      variablesReference: varRef,\n    };\n    return result;\n  }\n\n  _unmarshallEvaluateArguments(requestID: number, responseString: string): EvaluateArguments {\n    let evalArgs = JSON.parse(responseString);\n    invariant(evalArgs.hasOwnProperty(\"kind\"), \"Evaluate arguments missing kind field\");\n    invariant(evalArgs.hasOwnProperty(\"expression\"), \"Evaluate arguments missing expression field\");\n    if (evalArgs.hasOwnProperty(\"frameId\")) invariant(!isNaN(evalArgs.frameId));\n    return evalArgs;\n  }\n\n  unmarshallResponse(message: string): DebuggerResponse {\n    try {\n      let parts = message.split(\" \");\n      let requestID = parseInt(parts[0], 10);\n      invariant(!isNaN(requestID));\n      let messageType = parts[1];\n      let dbgResult;\n      let resultString = parts.slice(2).join(\" \");\n      if (messageType === DebugMessage.PREPACK_READY_RESPONSE) {\n        dbgResult = this._unmarshallReadyResult();\n      } else if (messageType === DebugMessage.BREAKPOINT_ADD_ACKNOWLEDGE) {\n        dbgResult = this._unmarshallBreakpointsAddResult(resultString);\n      } else if (messageType === DebugMessage.STOPPED_RESPONSE) {\n        dbgResult = this._unmarshallStoppedResult(resultString);\n      } else if (messageType === DebugMessage.STACKFRAMES_RESPONSE) {\n        dbgResult = this._unmarshallStackframesResult(resultString);\n      } else if (messageType === DebugMessage.SCOPES_RESPONSE) {\n        dbgResult = this._unmarshallScopesResult(resultString);\n      } else if (messageType === DebugMessage.VARIABLES_RESPONSE) {\n        dbgResult = this._unmarshallVariablesResult(resultString);\n      } else if (messageType === DebugMessage.EVALUATE_RESPONSE) {\n        dbgResult = this._unmarshallEvaluateResult(resultString);\n      } else {\n        invariant(false, \"Unexpected response type\");\n      }\n\n      let dbgResponse: DebuggerResponse = {\n        id: requestID,\n        result: dbgResult,\n      };\n      return dbgResponse;\n    } catch (e) {\n      throw new DebuggerError(\"Invalid command\", e.message);\n    }\n  }\n\n  _unmarshallStackframesResult(resultString: string): StackframeResult {\n    let frames = JSON.parse(resultString);\n    invariant(Array.isArray(frames), \"Stack frames is not an array\");\n    for (const frame of frames) {\n      invariant(frame.hasOwnProperty(\"id\"), \"Stack frame is missing id\");\n      invariant(frame.hasOwnProperty(\"fileName\"), \"Stack frame is missing filename\");\n      invariant(frame.hasOwnProperty(\"line\"), \"Stack frame is missing line number\");\n      invariant(frame.hasOwnProperty(\"column\"), \"Stack frame is missing column number\");\n      invariant(frame.hasOwnProperty(\"functionName\"), \"Stack frame is missing function name\");\n    }\n    let result: StackframeResult = {\n      kind: \"stackframe\",\n      stackframes: frames,\n    };\n    return result;\n  }\n\n  _unmarshallScopesResult(resultString: string): ScopesResult {\n    let scopes = JSON.parse(resultString);\n    invariant(Array.isArray(scopes), \"Scopes is not an array\");\n    for (const scope of scopes) {\n      invariant(scope.hasOwnProperty(\"name\"), \"Scope is missing name\");\n      invariant(scope.hasOwnProperty(\"variablesReference\"), \"Scope is missing variablesReference\");\n      invariant(scope.hasOwnProperty(\"expensive\"), \"Scope is missing expensive\");\n    }\n    let result: ScopesResult = {\n      kind: \"scopes\",\n      scopes: scopes,\n    };\n    return result;\n  }\n\n  _unmarshallVariablesResult(resultString: string): VariablesResult {\n    let variables = JSON.parse(resultString);\n    invariant(Array.isArray(variables), \"Variables is not an array\");\n    for (const variable of variables) {\n      invariant(variable.hasOwnProperty(\"name\"));\n      invariant(variable.hasOwnProperty(\"value\"));\n      invariant(variable.hasOwnProperty(\"variablesReference\"));\n    }\n    let result: VariablesResult = {\n      kind: \"variables\",\n      variables: variables,\n    };\n    return result;\n  }\n\n  _unmarshallEvaluateResult(resultString: string): EvaluateResult {\n    let evalResult = JSON.parse(resultString);\n    invariant(evalResult.hasOwnProperty(\"kind\"), \"eval result missing kind property\");\n    invariant(evalResult.kind === \"evaluate\", \"eval result is the wrong kind\");\n    invariant(evalResult.hasOwnProperty(\"displayValue\", \"eval result missing display value property\"));\n    invariant(evalResult.hasOwnProperty(\"type\", \"eval result missing type property\"));\n    invariant(evalResult.hasOwnProperty(\"variablesReference\", \"eval result missing variablesReference property\"));\n    return evalResult;\n  }\n\n  _unmarshallBreakpointsAddResult(resultString: string): BreakpointsAddResult {\n    let breakpoints = JSON.parse(resultString);\n    invariant(Array.isArray(breakpoints));\n    for (const breakpoint of breakpoints) {\n      invariant(breakpoint.hasOwnProperty(\"filePath\"), \"breakpoint missing filePath property\");\n      invariant(breakpoint.hasOwnProperty(\"line\"), \"breakpoint missing line property\");\n      invariant(breakpoint.hasOwnProperty(\"column\"), \"breakpoint missing column property\");\n      invariant(!isNaN(breakpoint.line));\n      invariant(!isNaN(breakpoint.column));\n    }\n\n    let result: BreakpointsAddResult = {\n      kind: \"breakpoint-add\",\n      breakpoints: breakpoints,\n    };\n    return result;\n  }\n\n  _unmarshallStoppedResult(resultString: string): StoppedResult {\n    let result = JSON.parse(resultString);\n    invariant(result.kind === \"stopped\");\n    invariant(result.hasOwnProperty(\"reason\"));\n    invariant(result.hasOwnProperty(\"filePath\"));\n    invariant(result.hasOwnProperty(\"line\"));\n    invariant(!isNaN(result.line));\n    invariant(result.hasOwnProperty(\"column\"));\n    invariant(!isNaN(result.column));\n    return result;\n  }\n\n  _unmarshallReadyResult(): ReadyResult {\n    let result: ReadyResult = {\n      kind: \"ready\",\n    };\n    return result;\n  }\n}\n"],"file":"MessageMarshaller.js"}