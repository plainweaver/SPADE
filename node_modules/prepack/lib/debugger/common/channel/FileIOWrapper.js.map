{"version":3,"sources":["../../../../src/debugger/common/channel/FileIOWrapper.js"],"names":["FileIOWrapper","constructor","isAdapter","inFilePath","outFilePath","_inFilePath","_outFilePath","fs","existsSync","openSync","_packager","MessagePackager","_isAdapter","readIn","errorHandler","messageProcessor","readFile","encoding","err","contents","message","unpackage","writeFileSync","readInSync","readFileSync","readInSyncOnce","writeOutSync","package","clearInFile","clearOutFile"],"mappings":";;;;;;;AAWA;;AACA;;AACA;;;;AAbA;;;;;;;;;AASA;AAMO,MAAMA,aAAN,CAAoB;AACzBC,EAAAA,WAAW,CAACC,SAAD,EAAqBC,UAArB,EAAyCC,WAAzC,EAA8D;AACvE,SAAKC,WAAL,GAAmBF,UAAnB;AACA,SAAKG,YAAL,GAAoBF,WAApB;AACA,QAAI,CAACG,YAAGC,UAAH,CAAc,KAAKH,WAAnB,CAAL,EAAsCE,YAAGE,QAAH,CAAY,KAAKJ,WAAjB,EAA8B,GAA9B;AACtC,QAAI,CAACE,YAAGC,UAAH,CAAc,KAAKF,YAAnB,CAAL,EAAuCC,YAAGE,QAAH,CAAY,KAAKH,YAAjB,EAA+B,GAA/B;AACvC,SAAKI,SAAL,GAAiB,IAAIC,gCAAJ,CAAoBT,SAApB,CAAjB;AACA,SAAKU,UAAL,GAAkBV,SAAlB;AACD;;AAMD;AACAW,EAAAA,MAAM,CAACC,YAAD,EAA2CC,gBAA3C,EAA8F;AAClGR,gBAAGS,QAAH,CAAY,KAAKX,WAAjB,EAA8B;AAAEY,MAAAA,QAAQ,EAAE;AAAZ,KAA9B,EAAoD,CAACC,GAAD,EAAmBC,QAAnB,KAAwC;AAC1F,UAAID,GAAJ,EAAS;AACPJ,QAAAA,YAAY,CAACI,GAAD,CAAZ;AACA;AACD;;AACD,UAAIE,OAAO,GAAG,KAAKV,SAAL,CAAeW,SAAf,CAAyBF,QAAzB,CAAd;;AACA,UAAIC,OAAO,KAAK,IAAhB,EAAsB;AACpB,aAAKP,MAAL,CAAYC,YAAZ,EAA0BC,gBAA1B;AACA;AACD,OATyF,CAU1F;;;AACAR,kBAAGe,aAAH,CAAiB,KAAKjB,WAAtB,EAAmC,EAAnC,EAX0F,CAY1F;;;AACAU,MAAAA,gBAAgB,CAACK,OAAD,CAAhB;AACD,KAdD;AAeD,GA/BwB,CAiCzB;;;AACAG,EAAAA,UAAU,GAAW;AACnB,QAAIH,OAAsB,GAAG,IAA7B;;AACA,WAAO,IAAP,EAAa;AACX,UAAID,QAAQ,GAAGZ,YAAGiB,YAAH,CAAgB,KAAKnB,WAArB,EAAkC,MAAlC,CAAf;;AACAe,MAAAA,OAAO,GAAG,KAAKV,SAAL,CAAeW,SAAf,CAAyBF,QAAzB,CAAV;AACA,UAAIC,OAAO,KAAK,IAAhB,EAAsB;AACtB;AACD,KAPkB,CAQnB;;;AACA,4BAAUA,OAAO,KAAK,IAAtB,EATmB,CAUnB;;AACAb,gBAAGe,aAAH,CAAiB,KAAKjB,WAAtB,EAAmC,EAAnC;;AACA,WAAOe,OAAP;AACD,GA/CwB,CAiDzB;;;AACAK,EAAAA,cAAc,GAAkB;AAC9B,QAAIN,QAAQ,GAAGZ,YAAGiB,YAAH,CAAgB,KAAKnB,WAArB,EAAkC,MAAlC,CAAf;;AACA,QAAIe,OAAO,GAAG,KAAKV,SAAL,CAAeW,SAAf,CAAyBF,QAAzB,CAAd;;AACA,WAAOC,OAAP;AACD,GAtDwB,CAwDzB;;;AACAM,EAAAA,YAAY,CAACP,QAAD,EAAyB;AACnCZ,gBAAGe,aAAH,CAAiB,KAAKhB,YAAtB,EAAoC,KAAKI,SAAL,CAAeiB,OAAf,CAAuBR,QAAvB,CAApC;AACD;;AAEDS,EAAAA,WAAW,GAAS;AAClBrB,gBAAGe,aAAH,CAAiB,KAAKjB,WAAtB,EAAmC,EAAnC;AACD;;AAEDwB,EAAAA,YAAY,GAAS;AACnBtB,gBAAGe,aAAH,CAAiB,KAAKhB,YAAtB,EAAoC,EAApC;AACD;;AAnEwB","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict */\n\nimport fs from \"fs\";\nimport { MessagePackager } from \"./MessagePackager.js\";\nimport invariant from \"../invariant.js\";\n\nexport class FileIOWrapper {\n  constructor(isAdapter: boolean, inFilePath: string, outFilePath: string) {\n    this._inFilePath = inFilePath;\n    this._outFilePath = outFilePath;\n    if (!fs.existsSync(this._inFilePath)) fs.openSync(this._inFilePath, \"w\");\n    if (!fs.existsSync(this._outFilePath)) fs.openSync(this._outFilePath, \"w\");\n    this._packager = new MessagePackager(isAdapter);\n    this._isAdapter = isAdapter;\n  }\n  _inFilePath: string;\n  _outFilePath: string;\n  _packager: MessagePackager;\n  _isAdapter: boolean;\n\n  // Read in a message from the input asynchronously\n  readIn(errorHandler: (err: ?ErrnoError) => void, messageProcessor: (message: string) => void): void {\n    fs.readFile(this._inFilePath, { encoding: \"utf8\" }, (err: ?ErrnoError, contents: string) => {\n      if (err) {\n        errorHandler(err);\n        return;\n      }\n      let message = this._packager.unpackage(contents);\n      if (message === null) {\n        this.readIn(errorHandler, messageProcessor);\n        return;\n      }\n      //clear the file\n      fs.writeFileSync(this._inFilePath, \"\");\n      //process the message\n      messageProcessor(message);\n    });\n  }\n\n  // Read in a message from the input synchronously\n  readInSync(): string {\n    let message: null | string = null;\n    while (true) {\n      let contents = fs.readFileSync(this._inFilePath, \"utf8\");\n      message = this._packager.unpackage(contents);\n      if (message === null) continue;\n      break;\n    }\n    // loop should not break when message is still null\n    invariant(message !== null);\n    //clear the file\n    fs.writeFileSync(this._inFilePath, \"\");\n    return message;\n  }\n\n  // Read in a message from the input synchronously only once\n  readInSyncOnce(): null | string {\n    let contents = fs.readFileSync(this._inFilePath, \"utf8\");\n    let message = this._packager.unpackage(contents);\n    return message;\n  }\n\n  // Write out a message to the output synchronously\n  writeOutSync(contents: string): void {\n    fs.writeFileSync(this._outFilePath, this._packager.package(contents));\n  }\n\n  clearInFile(): void {\n    fs.writeFileSync(this._inFilePath, \"\");\n  }\n\n  clearOutFile(): void {\n    fs.writeFileSync(this._outFilePath, \"\");\n  }\n}\n"],"file":"FileIOWrapper.js"}