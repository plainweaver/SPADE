{"version":3,"sources":["../../../src/debugger/mock-ui/UISession.js"],"names":["TWO_CRLF","UISession","constructor","proc","args","_proc","_adapterPath","adapterPath","_prepackRuntime","prepackRuntime","_sourceFiles","sourceFiles","_prepackArguments","prepackArguments","_sequenceNum","_invalidCount","_dataHandler","DataHandler","_prepackWaiting","_prepackLaunched","_startAdapter","adapterArgs","_adapterProcess","child_process","spawn","on","shutdown","stdout","data","handleData","_processMessage","bind","stderr","console","error","toString","message","msg","JSON","parse","type","_processEvent","_processResponse","e","slice","_reader","question","input","_dispatch","event","configDoneArgs","_sendConfigDoneRequest","_uiOutput","body","output","reason","response","command","_processInitializeResponse","_processLaunchResponse","_processThreadsResponse","_processStackTraceResponse","_processScopesResponse","_processVariablesResponse","_processEvaluateResponse","scopes","scope","name","variablesReference","launchArgs","_sendLaunchRequest","frames","stackFrames","frame","source","path","id","line","column","thread","threads","variable","variables","value","evalInfo","result","_executeCommand","parts","split","length","continueArgs","threadId","DebuggerConstants","PREPACK_THREAD_ID","_sendContinueRequest","filePath","parseInt","isNaN","_sendBreakpointRequest","stackFrameArgs","_sendStackFramesRequest","_sendThreadsRequest","frameId","scopesArgs","_sendScopesRequest","varRef","variableArgs","_sendVariablesRequest","stepIntoArgs","_sendStepIntoRequest","stepOverArgs","_sendStepOverRequest","stepOutArgs","_sendStepOutRequest","evalFrameId","expression","join","evaluateArgs","_sendEvaluateRequest","success","_sendInitializeRequest","seq","arguments","json","stringify","_packageAndSend","breakpoint","breakpoints","stdin","write","Buffer","byteLength","log","serve","initArgs","clientID","CLI_CLIENTID","adapterID","supportsVariableType","supportsVariablePaging","supportsRunInTerminalRequest","pathFormat","readline","createInterface","close","kill","exit"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport readline from \"readline\";\nimport child_process from \"child_process\";\nimport * as DebugProtocol from \"vscode-debugprotocol\";\nimport { DataHandler } from \"./DataHandler.js\";\nimport { DebuggerConstants } from \"./../common/DebuggerConstants\";\nimport type { LaunchRequestArguments } from \"./../common/types.js\";\n\nexport type DebuggerCLIArguments = {\n  adapterPath: string,\n  prepackRuntime: string,\n  sourceFiles: Array<string>,\n  prepackArguments: Array<string>,\n};\n\n//separator for messages according to the protocol\nconst TWO_CRLF = \"\\r\\n\\r\\n\";\n\n/* Represents one debugging session in the CLI.\n * Read in user input from the command line, parses the input into commands,\n * sends the commands to the adapter and process any responses\n*/\nexport class UISession {\n  constructor(proc: Process, args: DebuggerCLIArguments) {\n    this._proc = proc;\n    this._adapterPath = args.adapterPath;\n    this._prepackRuntime = args.prepackRuntime;\n    this._sourceFiles = args.sourceFiles;\n    this._prepackArguments = args.prepackArguments;\n    this._sequenceNum = 1;\n    this._invalidCount = 0;\n    this._dataHandler = new DataHandler();\n    this._prepackWaiting = false;\n    this._prepackLaunched = false;\n  }\n  // the parent (i.e. ui) process\n  _proc: Process;\n  //path to the debug adapter\n  _adapterPath: string;\n  // the child (i.e. adapter) process\n  _adapterProcess: child_process.ChildProcess;\n  // id number for each message sent\n  _sequenceNum: number;\n  // interface to read in input from the CLI client\n  _reader: readline.Interface;\n  // number of invalid commands\n  _invalidCount: number;\n  // Prepack runtime command (e.g. lib/prepack-cli.js)\n  _prepackRuntime: string;\n  // Array of input source files to Prepack\n  _sourceFiles: Array<string>;\n  // arguments to start Prepack with\n  _prepackArguments: Array<string>;\n  // handler for any received messages\n  _dataHandler: DataHandler;\n  // flag whether Prepack is waiting for a command\n  _prepackWaiting: boolean;\n  // flag whether Prepack has been launched\n  _prepackLaunched: boolean;\n\n  _startAdapter() {\n    let adapterArgs = [this._adapterPath];\n    this._adapterProcess = child_process.spawn(\"node\", adapterArgs);\n    this._proc.on(\"exit\", () => {\n      this.shutdown();\n    });\n    this._proc.on(\"SIGINT\", () => {\n      this.shutdown();\n    });\n    this._adapterProcess.stdout.on(\"data\", (data: Buffer) => {\n      //handle the received data\n      this._dataHandler.handleData(data, this._processMessage.bind(this));\n    });\n    this._adapterProcess.stderr.on(\"data\", (data: Buffer) => {\n      console.error(data.toString());\n      this.shutdown();\n    });\n  }\n\n  // called from data handler to process a received message\n  _processMessage(message: string): void {\n    try {\n      let msg = JSON.parse(message);\n      if (msg.type === \"event\") {\n        this._processEvent(msg);\n      } else if (msg.type === \"response\") {\n        this._processResponse(msg);\n      }\n    } catch (e) {\n      console.error(e);\n      console.error(\"Invalid message: \" + message.slice(0, 1000));\n    }\n    //ask the user for the next command\n    if (this._prepackLaunched && this._prepackWaiting) {\n      this._reader.question(\"(dbg) \", (input: string) => {\n        this._dispatch(input);\n      });\n    }\n  }\n\n  _processEvent(event: DebugProtocol.Event) {\n    if (event.event === \"initialized\") {\n      // the adapter is ready to accept any persisted debug information\n      // (e.g. persisted breakpoints from previous sessions). the CLI\n      // does not have any persisted info, so we can send configDone immediately\n      let configDoneArgs: DebugProtocol.ConfigurationDoneArguments = {};\n      this._sendConfigDoneRequest(configDoneArgs);\n    } else if (event.event === \"output\") {\n      this._uiOutput(\"Prepack output:\\n\" + event.body.output);\n    } else if (event.event === \"terminated\") {\n      this._uiOutput(\"Prepack exited! Shutting down...\");\n      this.shutdown();\n    } else if (event.event === \"stopped\") {\n      this._prepackWaiting = true;\n      if (event.body) {\n        this._uiOutput(event.body.reason);\n      }\n    }\n  }\n\n  _processResponse(response: DebugProtocol.Response) {\n    if (response.command === \"initialize\") {\n      this._processInitializeResponse(((response: any): DebugProtocol.InitializeResponse));\n    } else if (response.command === \"launch\") {\n      this._processLaunchResponse(((response: any): DebugProtocol.LaunchResponse));\n    } else if (response.command === \"threads\") {\n      this._processThreadsResponse(((response: any): DebugProtocol.ThreadsResponse));\n    } else if (response.command === \"stackTrace\") {\n      //flow doesn't have type refinement for interfaces, so must do a cast here\n      this._processStackTraceResponse(((response: any): DebugProtocol.StackTraceResponse));\n    } else if (response.command === \"scopes\") {\n      this._processScopesResponse(((response: any): DebugProtocol.ScopesResponse));\n    } else if (response.command === \"variables\") {\n      this._processVariablesResponse(((response: any): DebugProtocol.VariablesResponse));\n    } else if (response.command === \"evaluate\") {\n      this._processEvaluateResponse(((response: any): DebugProtocol.EvaluateResponse));\n    }\n  }\n\n  _processScopesResponse(response: DebugProtocol.ScopesResponse) {\n    let scopes = response.body.scopes;\n    for (const scope of scopes) {\n      this._uiOutput(`${scope.name} ${scope.variablesReference}`);\n    }\n  }\n\n  _processInitializeResponse(response: DebugProtocol.InitializeResponse) {\n    let launchArgs: LaunchRequestArguments = {\n      prepackRuntime: this._prepackRuntime,\n      sourceFiles: this._sourceFiles,\n      prepackArguments: this._prepackArguments,\n    };\n    this._sendLaunchRequest(launchArgs);\n  }\n\n  _processLaunchResponse(response: DebugProtocol.LaunchResponse) {\n    this._uiOutput(\"Prepack is ready\");\n    this._prepackLaunched = true;\n    this._prepackWaiting = true;\n    // start reading requests from the user\n    this._reader.question(\"(dbg) \", (input: string) => {\n      this._dispatch(input);\n    });\n  }\n\n  _processStackTraceResponse(response: DebugProtocol.StackTraceResponse) {\n    let frames = response.body.stackFrames;\n    for (const frame of frames) {\n      if (frame.source && frame.source.path) {\n        this._uiOutput(`${frame.id}: ${frame.name} ${frame.source.path} ${frame.line}:${frame.column}`);\n      } else {\n        this._uiOutput(`${frame.id}: ${frame.name} unknown source`);\n      }\n    }\n  }\n\n  _processThreadsResponse(response: DebugProtocol.ThreadsResponse) {\n    for (const thread of response.body.threads) {\n      this._uiOutput(`${thread.id}: ${thread.name}`);\n    }\n  }\n\n  _processVariablesResponse(response: DebugProtocol.VariablesResponse) {\n    for (const variable of response.body.variables) {\n      if (variable.variablesReference === 0) {\n        // 0 means there are not more nested variables to return\n        this._uiOutput(`${variable.name}: ${variable.value}`);\n      } else {\n        this._uiOutput(`${variable.name}: ${variable.value} ${variable.variablesReference}`);\n      }\n    }\n  }\n\n  _processEvaluateResponse(response: DebugProtocol.EvaluateResponse) {\n    let evalInfo = response.body;\n    this._uiOutput(\"Type: \" + (evalInfo.type || \"unknown\"));\n    this._uiOutput(evalInfo.result);\n    this._uiOutput(\"Variables Reference: \" + evalInfo.variablesReference);\n  }\n\n  // execute a command if it is valid\n  // returns whether the command was valid\n  _executeCommand(input: string): boolean {\n    let parts = input.split(\" \");\n    let command = parts[0];\n\n    // for testing purposes, init and configDone are made into user commands\n    // they can be done from the adapter without user input\n\n    switch (command) {\n      case \"run\":\n        // format: run\n        if (parts.length !== 1) return false;\n        let continueArgs: DebugProtocol.ContinueArguments = {\n          // Prepack will only have 1 thread, this argument will be ignored\n          threadId: DebuggerConstants.PREPACK_THREAD_ID,\n        };\n        this._sendContinueRequest(continueArgs);\n        break;\n      case \"breakpoint\":\n        // format: breakpoint add <filePath> <line> ?<column>\n        if (parts.length !== 4 && parts.length !== 5) return false;\n        if (parts[1] === \"add\") {\n          let filePath = parts[2];\n          let line = parseInt(parts[3], 10);\n          if (isNaN(line)) return false;\n          let column = 0;\n          if (parts.length === 5) {\n            column = parseInt(parts[4], 10);\n            if (isNaN(column)) return false;\n          }\n          this._sendBreakpointRequest(filePath, line, column);\n        }\n        break;\n      case \"stackframes\":\n        // format: stackFrames\n        let stackFrameArgs: DebugProtocol.StackTraceArguments = {\n          // Prepack will only have 1 thread, this argument will be ignored\n          threadId: DebuggerConstants.PREPACK_THREAD_ID,\n        };\n        this._sendStackFramesRequest(stackFrameArgs);\n        break;\n      case \"threads\":\n        if (parts.length !== 1) return false;\n        this._sendThreadsRequest();\n        break;\n      case \"scopes\":\n        if (parts.length !== 2) return false;\n        let frameId = parseInt(parts[1], 10);\n        if (isNaN(frameId)) return false;\n        let scopesArgs: DebugProtocol.ScopesArguments = {\n          frameId: frameId,\n        };\n        this._sendScopesRequest(scopesArgs);\n        break;\n      case \"variables\":\n        if (parts.length !== 2) return false;\n        let varRef = parseInt(parts[1], 10);\n        if (isNaN(varRef)) return false;\n        let variableArgs: DebugProtocol.VariablesArguments = {\n          variablesReference: varRef,\n        };\n        this._sendVariablesRequest(variableArgs);\n        break;\n      case \"stepInto\":\n        if (parts.length !== 1) return false;\n        let stepIntoArgs: DebugProtocol.StepInArguments = {\n          threadId: DebuggerConstants.PREPACK_THREAD_ID,\n        };\n        this._sendStepIntoRequest(stepIntoArgs);\n        break;\n      case \"stepOver\":\n        if (parts.length !== 1) return false;\n        let stepOverArgs: DebugProtocol.NextArguments = {\n          threadId: DebuggerConstants.PREPACK_THREAD_ID,\n        };\n        this._sendStepOverRequest(stepOverArgs);\n        break;\n      case \"stepOut\":\n        if (parts.length !== 1) return false;\n        let stepOutArgs: DebugProtocol.StepOutArguments = {\n          threadId: DebuggerConstants.PREPACK_THREAD_ID,\n        };\n        this._sendStepOutRequest(stepOutArgs);\n        break;\n      case \"eval\":\n        if (parts.length < 2) return false;\n        let evalFrameId = parseInt(parts[1], 10);\n        if (isNaN(evalFrameId)) {\n          let expression = parts.slice(1).join(\" \");\n          let evaluateArgs: DebugProtocol.EvaluateArguments = {\n            expression: expression,\n          };\n          this._sendEvaluateRequest(evaluateArgs);\n        } else {\n          let expression = parts.slice(2).join(\" \");\n          let evaluateArgs: DebugProtocol.EvaluateArguments = {\n            expression: expression,\n            frameId: evalFrameId,\n          };\n          this._sendEvaluateRequest(evaluateArgs);\n        }\n        break;\n      default:\n        // invalid command\n        return false;\n    }\n    return true;\n  }\n\n  // parses the user input into a command and executes it\n  _dispatch(input: string) {\n    if (input === \"exit\") {\n      this.shutdown();\n    }\n    let success = this._executeCommand(input);\n    if (!success) {\n      // input was invalid\n      this._invalidCount++;\n      //prevent stack overflow from recursion\n      if (this._invalidCount >= 10) {\n        console.error(\"Too many invalid commands, shutting down...\");\n        this.shutdown();\n      }\n      console.error(\"Invalid command: \" + input);\n      this._reader.question(\"(dbg) \", (line: string) => {\n        this._dispatch(line);\n      });\n    }\n    //reset the invalid command counter\n    this._invalidCount = 0;\n  }\n\n  // tell the adapter about some configuration details\n  _sendInitializeRequest(args: DebugProtocol.InitializeRequestArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"initialize\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // tell the adapter to start Prepack\n  _sendLaunchRequest(args: DebugProtocol.LaunchRequestArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"launch\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // tell the adapter that configuration is done so it can expect other commands\n  _sendConfigDoneRequest(args: DebugProtocol.ConfigurationDoneArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"configurationDone\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // tell the adapter to continue running Prepack\n  _sendContinueRequest(args: DebugProtocol.ContinueArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"continue\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n    this._prepackWaiting = false;\n  }\n\n  _sendBreakpointRequest(filePath: string, line: number, column: number = 0) {\n    let source: DebugProtocol.Source = {\n      path: filePath,\n    };\n    let breakpoint: DebugProtocol.SourceBreakpoint = {\n      line: line,\n      column: column,\n    };\n    let args: DebugProtocol.SetBreakpointsArguments = {\n      source: source,\n      breakpoints: [breakpoint],\n    };\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"setBreakpoints\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendStackFramesRequest(args: DebugProtocol.StackTraceArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"stackTrace\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendThreadsRequest() {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"threads\",\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendScopesRequest(args: DebugProtocol.ScopesArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"scopes\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendVariablesRequest(args: DebugProtocol.VariablesArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"variables\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendStepIntoRequest(args: DebugProtocol.StepInArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"stepIn\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendStepOverRequest(args: DebugProtocol.NextArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"next\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendStepOutRequest(args: DebugProtocol.StepOutArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"stepOut\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendEvaluateRequest(args: DebugProtocol.EvaluateArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"evaluate\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // write out a message to the adapter on stdout\n  _packageAndSend(message: string) {\n    // format: Content-Length: <length> separator <message>\n    this._adapterProcess.stdin.write(\n      \"Content-Length: \" + Buffer.byteLength(message, \"utf8\") + TWO_CRLF + message,\n      \"utf8\"\n    );\n    this._sequenceNum++;\n  }\n\n  _uiOutput(message: string) {\n    console.log(message);\n  }\n\n  serve() {\n    this._uiOutput(\"Debugger is starting up Prepack...\");\n    // Set up the adapter connection\n    this._startAdapter();\n\n    // send an initialize request to the adapter to fetch some configuration details\n    let initArgs: DebugProtocol.InitializeRequestArguments = {\n      // a unique name for each UI (e.g Nuclide, VSCode, CLI)\n      clientID: DebuggerConstants.CLI_CLIENTID,\n      // a unique name for each adapter\n      adapterID: \"Prepack-Debugger-Adapter\",\n      supportsVariableType: true,\n      supportsVariablePaging: false,\n      supportsRunInTerminalRequest: false,\n      pathFormat: \"path\",\n    };\n    this._sendInitializeRequest(initArgs);\n\n    this._reader = readline.createInterface({ input: this._proc.stdin, output: this._proc.stdout });\n  }\n\n  shutdown() {\n    this._reader.close();\n    this._adapterProcess.kill();\n    this._proc.exit(0);\n  }\n}\n"],"file":"UISession.js"}