{"version":3,"sources":["../../../src/debugger/server/PerFileBreakpointMap.js"],"names":["PerFileBreakpointMap","constructor","filePath","_filePath","_breakpoints","Map","addBreakpoint","line","column","temporary","enabled","breakpoint","Breakpoint","key","_getKey","set","getBreakpoint","has","get","undefined","removeBreakpoint","delete","enableBreakpoint","disableBreakpoint"],"mappings":";;;;;;;AAWA;;AAXA;;;;;;;;;AASA;AAIA;AACA;AACO,MAAMA,oBAAN,CAA2B;AAChCC,EAAAA,WAAW,CAACC,QAAD,EAAmB;AAC5B,SAAKC,SAAL,GAAiBD,QAAjB;AACA,SAAKE,YAAL,GAAoB,IAAIC,GAAJ,EAApB;AACD;;AAMDC,EAAAA,aAAa,CAACC,IAAD,EAAeC,MAAc,GAAG,CAAhC,EAAmCC,SAAnC,EAAwDC,OAAxD,EAAiF;AAC5F,QAAIC,UAAU,GAAG,IAAIC,sBAAJ,CAAe,KAAKT,SAApB,EAA+BI,IAA/B,EAAqCC,MAArC,EAA6CC,SAA7C,EAAwDC,OAAxD,CAAjB;;AACA,QAAIG,GAAG,GAAG,KAAKC,OAAL,CAAaP,IAAb,EAAmBC,MAAnB,CAAV;;AACA,SAAKJ,YAAL,CAAkBW,GAAlB,CAAsBF,GAAtB,EAA2BF,UAA3B;AACD;;AAEDK,EAAAA,aAAa,CAACT,IAAD,EAAeC,MAAc,GAAG,CAAhC,EAAsD;AACjE;AACA,QAAIA,MAAM,KAAK,CAAf,EAAkB;AAChB,UAAIK,GAAG,GAAG,KAAKC,OAAL,CAAaP,IAAb,EAAmBC,MAAnB,CAAV;;AACA,UAAI,KAAKJ,YAAL,CAAkBa,GAAlB,CAAsBJ,GAAtB,CAAJ,EAAgC;AAC9B,eAAO,KAAKT,YAAL,CAAkBc,GAAlB,CAAsBL,GAAtB,CAAP;AACD,OAFD,MAEO;AACLA,QAAAA,GAAG,GAAG,KAAKC,OAAL,CAAaP,IAAb,EAAmB,CAAnB,CAAN;;AACA,YAAI,KAAKH,YAAL,CAAkBa,GAAlB,CAAsBJ,GAAtB,CAAJ,EAAgC;AAC9B,iBAAO,KAAKT,YAAL,CAAkBc,GAAlB,CAAsBL,GAAtB,CAAP;AACD;AACF;AACF,KAVD,MAUO;AACL,UAAIA,GAAG,GAAG,KAAKC,OAAL,CAAaP,IAAb,EAAmB,CAAnB,CAAV;;AACA,UAAI,KAAKH,YAAL,CAAkBa,GAAlB,CAAsBJ,GAAtB,CAAJ,EAAgC;AAC9B,eAAO,KAAKT,YAAL,CAAkBc,GAAlB,CAAsBL,GAAtB,CAAP;AACD;AACF;;AAED,WAAOM,SAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACb,IAAD,EAAeC,MAAc,GAAG,CAAhC,EAAyC;AACvD,QAAIK,GAAG,GAAG,KAAKC,OAAL,CAAaP,IAAb,EAAmBC,MAAnB,CAAV;;AACA,QAAI,KAAKJ,YAAL,CAAkBa,GAAlB,CAAsBJ,GAAtB,CAAJ,EAAgC;AAC9B,WAAKT,YAAL,CAAkBiB,MAAlB,CAAyBR,GAAzB;AACD;AACF;;AAEDS,EAAAA,gBAAgB,CAACf,IAAD,EAAeC,MAAc,GAAG,CAAhC,EAAyC;AACvD,QAAIK,GAAG,GAAG,KAAKC,OAAL,CAAaP,IAAb,EAAmBC,MAAnB,CAAV;;AACA,QAAIG,UAAU,GAAG,KAAKP,YAAL,CAAkBc,GAAlB,CAAsBL,GAAtB,CAAjB;;AACA,QAAIF,UAAJ,EAAgBA,UAAU,CAACD,OAAX,GAAqB,IAArB;AACjB;;AAEDa,EAAAA,iBAAiB,CAAChB,IAAD,EAAeC,MAAc,GAAG,CAAhC,EAAyC;AACxD,QAAIK,GAAG,GAAG,KAAKC,OAAL,CAAaP,IAAb,EAAmBC,MAAnB,CAAV;;AACA,QAAIG,UAAU,GAAG,KAAKP,YAAL,CAAkBc,GAAlB,CAAsBL,GAAtB,CAAjB;;AACA,QAAIF,UAAJ,EAAgBA,UAAU,CAACD,OAAX,GAAqB,KAArB;AACjB;;AAEDI,EAAAA,OAAO,CAACP,IAAD,EAAeC,MAAf,EAAuC;AAC5C,WAAQ,GAAED,IAAK,IAAGC,MAAO,EAAzB;AACD;;AA3D+B","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict */\n\nimport { Breakpoint } from \"./Breakpoint.js\";\n\n// Storage for all the breakpoints in one source file\n// Each source file will be associated with one PerFileBreakpointMap\nexport class PerFileBreakpointMap {\n  constructor(filePath: string) {\n    this._filePath = filePath;\n    this._breakpoints = new Map();\n  }\n  _filePath: string;\n\n  //map of line:column to Breakpoint objects\n  _breakpoints: Map<string, Breakpoint>;\n\n  addBreakpoint(line: number, column: number = 0, temporary?: boolean, enabled?: boolean): void {\n    let breakpoint = new Breakpoint(this._filePath, line, column, temporary, enabled);\n    let key = this._getKey(line, column);\n    this._breakpoints.set(key, breakpoint);\n  }\n\n  getBreakpoint(line: number, column: number = 0): void | Breakpoint {\n    //check for a column breakpoint first, then line breakpoint\n    if (column !== 0) {\n      let key = this._getKey(line, column);\n      if (this._breakpoints.has(key)) {\n        return this._breakpoints.get(key);\n      } else {\n        key = this._getKey(line, 0);\n        if (this._breakpoints.has(key)) {\n          return this._breakpoints.get(key);\n        }\n      }\n    } else {\n      let key = this._getKey(line, 0);\n      if (this._breakpoints.has(key)) {\n        return this._breakpoints.get(key);\n      }\n    }\n\n    return undefined;\n  }\n\n  removeBreakpoint(line: number, column: number = 0): void {\n    let key = this._getKey(line, column);\n    if (this._breakpoints.has(key)) {\n      this._breakpoints.delete(key);\n    }\n  }\n\n  enableBreakpoint(line: number, column: number = 0): void {\n    let key = this._getKey(line, column);\n    let breakpoint = this._breakpoints.get(key);\n    if (breakpoint) breakpoint.enabled = true;\n  }\n\n  disableBreakpoint(line: number, column: number = 0): void {\n    let key = this._getKey(line, column);\n    let breakpoint = this._breakpoints.get(key);\n    if (breakpoint) breakpoint.enabled = false;\n  }\n\n  _getKey(line: number, column: number): string {\n    return `${line}:${column}`;\n  }\n}\n"],"file":"PerFileBreakpointMap.js"}