{"version":3,"sources":["../../../src/debugger/server/BreakpointManager.js"],"names":["BreakpointManager","constructor","_breakpointMaps","Map","getStoppableBreakpoint","ast","loc","source","location","filePath","lineNum","start","line","colNum","column","breakpoint","_findStoppableBreakpoint","getBreakpoint","enabled","addBreakpointMulti","breakpoints","_doBreakpointsAction","_addBreakpoint","bind","bp","breakpointMap","get","PerFileBreakpointMap","set","addBreakpoint","columnNum","undefined","removeBreakpointMulti","_removeBreakpoint","removeBreakpoint","enableBreakpointMulti","_enableBreakpoint","enableBreakpoint","disableBreakpointMulti","_disableBreakpoint","disableBreakpoint","action"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { PerFileBreakpointMap } from \"./PerFileBreakpointMap.js\";\nimport { Breakpoint } from \"./Breakpoint.js\";\nimport type { Breakpoint as BreakpointType } from \"./../common/types.js\";\nimport { BabelNode } from \"@babel/types\";\n\n// Storing BreakpointStores for all source files\nexport class BreakpointManager {\n  constructor() {\n    this._breakpointMaps = new Map();\n  }\n  _breakpointMaps: Map<string, PerFileBreakpointMap>;\n\n  getStoppableBreakpoint(ast: BabelNode): void | Breakpoint {\n    if (ast.loc && ast.loc.source !== null) {\n      let location = ast.loc;\n      let filePath = location.source;\n      if (filePath === null) return;\n      let lineNum = location.start.line;\n      let colNum = location.start.column;\n      // Check whether there is a breakpoint we need to stop on here\n      let breakpoint = this._findStoppableBreakpoint(filePath, lineNum, colNum);\n      if (breakpoint === null) return;\n      return breakpoint;\n    }\n  }\n\n  // Try to find a breakpoint at the given location and check if we should stop on it\n  _findStoppableBreakpoint(filePath: string, lineNum: number, colNum: number): null | Breakpoint {\n    let breakpoint = this.getBreakpoint(filePath, lineNum, colNum);\n    if (breakpoint && breakpoint.enabled) {\n      return breakpoint;\n    }\n    return null;\n  }\n\n  addBreakpointMulti(breakpoints: Array<BreakpointType>): void {\n    this._doBreakpointsAction(breakpoints, this._addBreakpoint.bind(this));\n  }\n\n  _addBreakpoint(bp: BreakpointType): void {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (!breakpointMap) {\n      breakpointMap = new PerFileBreakpointMap(bp.filePath);\n      this._breakpointMaps.set(bp.filePath, breakpointMap);\n    }\n    // Nuclide doesn't support column debugging, so set every breakpoint\n    // to column 0 for consistency.\n    breakpointMap.addBreakpoint(bp.line, 0);\n  }\n\n  getBreakpoint(filePath: string, lineNum: number, columnNum: number = 0): void | Breakpoint {\n    let breakpointMap = this._breakpointMaps.get(filePath);\n    if (breakpointMap) return breakpointMap.getBreakpoint(lineNum, columnNum);\n    return undefined;\n  }\n\n  removeBreakpointMulti(breakpoints: Array<BreakpointType>): void {\n    this._doBreakpointsAction(breakpoints, this._removeBreakpoint.bind(this));\n  }\n\n  _removeBreakpoint(bp: BreakpointType): void {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (breakpointMap) breakpointMap.removeBreakpoint(bp.line, bp.column);\n  }\n\n  enableBreakpointMulti(breakpoints: Array<BreakpointType>): void {\n    this._doBreakpointsAction(breakpoints, this._enableBreakpoint.bind(this));\n  }\n\n  _enableBreakpoint(bp: BreakpointType): void {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (breakpointMap) breakpointMap.enableBreakpoint(bp.line, bp.column);\n  }\n\n  disableBreakpointMulti(breakpoints: Array<BreakpointType>): void {\n    this._doBreakpointsAction(breakpoints, this._disableBreakpoint.bind(this));\n  }\n\n  _disableBreakpoint(bp: BreakpointType): void {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (breakpointMap) breakpointMap.disableBreakpoint(bp.line, bp.column);\n  }\n\n  _doBreakpointsAction(breakpoints: Array<BreakpointType>, action: BreakpointType => void): void {\n    for (let bp of breakpoints) {\n      action(bp);\n    }\n  }\n}\n"],"file":"BreakpointManager.js"}