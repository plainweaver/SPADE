{"version":3,"sources":["../../../src/debugger/server/Debugger.js"],"names":["DebugServer","constructor","channel","realm","configArgs","_channel","_realm","_breakpointManager","BreakpointManager","_variableManager","VariableManager","_stepManager","SteppingManager","_stopEventManager","StopEventManager","_diagnosticSeverity","diagnosticSeverity","_sourceMapManager","SourceMapManager","buckRoot","sourcemaps","waitForRun","undefined","loc","keepRunning","request","readIn","processDebuggerCommand","checkForActions","ast","_checkAndUpdateLastExecuted","stoppables","getAndDeleteCompletedSteppers","breakpoint","getStoppableBreakpoint","push","reason","getDebuggeeStopReason","location","source","absolutePath","relativeToAbsolute","sendStoppedResponse","start","line","column","requestID","id","command","args","arguments","kind","bp","breakpoints","filePath","absoluteToRelative","DebugMessage","BREAKPOINT_ADD_COMMAND","addBreakpointMulti","sendBreakpointsAcknowledge","BREAKPOINT_ADD_ACKNOWLEDGE","BREAKPOINT_REMOVE_COMMAND","removeBreakpointMulti","BREAKPOINT_REMOVE_ACKNOWLEDGE","BREAKPOINT_ENABLE_COMMAND","enableBreakpointMulti","BREAKPOINT_ENABLE_ACKNOWLEDGE","BREAKPOINT_DISABLE_COMMAND","disableBreakpointMulti","BREAKPOINT_DISABLE_ACKNOWLEDGE","PREPACK_RUN_COMMAND","_onDebuggeeResume","STACKFRAMES_COMMAND","processStackframesCommand","SCOPES_COMMAND","processScopesCommand","VARIABLES_COMMAND","processVariablesCommand","STEPINTO_COMMAND","processStepCommand","STEPOVER_COMMAND","STEPOUT_COMMAND","EVALUATE_COMMAND","processEvaluateCommand","DebuggerError","astLoc","frameInfos","_getFrameLocation","fileName","i","contextStack","length","frame","functionName","function","__originalName","frameInfo","sendStackframeResponse","frameId","stackIndex","context","ExecutionContext","scopes","lexicalEnv","lexicalEnvironment","scope","name","_getScopeName","environmentRecord","variablesReference","getReferenceForValue","expensive","parent","sendScopesResponse","envRec","GlobalEnvironmentRecord","DeclarativeEnvironmentRecord","FunctionEnvironmentRecord","$FunctionObject","ObjectEnvironmentRecord","variables","getVariablesByReference","sendVariablesResponse","evalResult","evaluate","expression","sendEvaluateResponse","clean","stackSize","_lastExecuted","handlePrepackError","diagnostic","absoluteSource","message","severity","errorCode","console","log","shouldStopForSeverity","shutdown"],"mappings":";;;;;;;AAWA;;AACA;;AAEA;;AAEA;;AACA;;AAYA;;AACA;;AACA;;AAEA;;AACA;;AAOA;;AAEA;;;;AA3CA;;;;;;;;;AASA;AAqCO,MAAMA,WAAN,CAAkB;AACvBC,EAAAA,WAAW,CAACC,OAAD,EAAwBC,KAAxB,EAAsCC,UAAtC,EAA2E;AACpF,SAAKC,QAAL,GAAgBH,OAAhB;AACA,SAAKI,MAAL,GAAcH,KAAd;AACA,SAAKI,kBAAL,GAA0B,IAAIC,oCAAJ,EAA1B;AACA,SAAKC,gBAAL,GAAwB,IAAIC,gCAAJ,CAAoBP,KAApB,CAAxB;AACA,SAAKQ,YAAL,GAAoB,IAAIC,gCAAJ,CAAoB,KAAKN,MAAzB;AAAiC;AAAmC,SAApE,CAApB;AACA,SAAKO,iBAAL,GAAyB,IAAIC,kCAAJ,EAAzB;AACA,SAAKC,mBAAL,GAA2BX,UAAU,CAACY,kBAAX,IAAiC,YAA5D;AACA,SAAKC,iBAAL,GAAyB,IAAIC,kCAAJ,CAAqBd,UAAU,CAACe,QAAhC,EAA0Cf,UAAU,CAACgB,UAArD,CAAzB;AACA,SAAKC,UAAL,CAAgBC,SAAhB;AACD,GAXsB,CAYvB;;;AAaA;;;;AAIAD,EAAAA,UAAU,CAACE,GAAD,EAA4C;AACpD,QAAIC,WAAW,GAAG,KAAlB;AACA,QAAIC,OAAJ;;AACA,WAAO,CAACD,WAAR,EAAqB;AACnBC,MAAAA,OAAO,GAAG,KAAKpB,QAAL,CAAcqB,MAAd,EAAV;AACAF,MAAAA,WAAW,GAAG,KAAKG,sBAAL,CAA4BF,OAA5B,EAAqCF,GAArC,CAAd;AACD;AACF,GApCsB,CAsCvB;;;AACAK,EAAAA,eAAe,CAACC,GAAD,EAAuB;AACpC,QAAI,KAAKC,2BAAL,CAAiCD,GAAjC,CAAJ,EAA2C;AACzC,UAAIE,UAAkC,GAAG,KAAKpB,YAAL,CAAkBqB,6BAAlB,CAAgDH,GAAhD,CAAzC;;AACA,UAAII,UAAU,GAAG,KAAK1B,kBAAL,CAAwB2B,sBAAxB,CAA+CL,GAA/C,CAAjB;;AACA,UAAII,UAAJ,EAAgBF,UAAU,CAACI,IAAX,CAAgBF,UAAhB;;AAChB,UAAIG,MAAM,GAAG,KAAKvB,iBAAL,CAAuBwB,qBAAvB,CAA6CR,GAA7C,EAAkDE,UAAlD,CAAb;;AACA,UAAIK,MAAJ,EAAY;AACV,YAAIE,QAAQ,GAAGT,GAAG,CAACN,GAAnB;AACA,gCAAUe,QAAQ,IAAIA,QAAQ,CAACC,MAAT,KAAoB,IAA1C;;AACA,YAAIC,YAAY,GAAG,KAAKvB,iBAAL,CAAuBwB,kBAAvB,CAA0CH,QAAQ,CAACC,MAAnD,CAAnB;;AACA,aAAKlC,QAAL,CAAcqC,mBAAd,CAAkCN,MAAlC,EAA0CI,YAA1C,EAAwDF,QAAQ,CAACK,KAAT,CAAeC,IAAvE,EAA6EN,QAAQ,CAACK,KAAT,CAAeE,MAA5F;;AACA,aAAKxB,UAAL,CAAgBiB,QAAhB;AACD;AACF;AACF,GArDsB,CAuDvB;AACA;;;AACAX,EAAAA,sBAAsB,CAACF,OAAD,EAA2BF,GAA3B,EAAyE;AAC7F,QAAIuB,SAAS,GAAGrB,OAAO,CAACsB,EAAxB;AACA,QAAIC,OAAO,GAAGvB,OAAO,CAACuB,OAAtB;AACA,QAAIC,IAAI,GAAGxB,OAAO,CAACyB,SAAnB,CAH6F,CAI7F;;AACA,QAAID,IAAI,CAACE,IAAL,KAAc,YAAlB,EAAgC;AAC9B,WAAK,IAAIC,EAAT,IAAeH,IAAI,CAACI,WAApB,EAAiC;AAC/BD,QAAAA,EAAE,CAACE,QAAH,GAAc,KAAKrC,iBAAL,CAAuBsC,kBAAvB,CAA0CH,EAAE,CAACE,QAA7C,CAAd;AACD;AACF;;AAED,YAAQN,OAAR;AACE,WAAKQ,2BAAaC,sBAAlB;AACE,gCAAUR,IAAI,CAACE,IAAL,KAAc,YAAxB;;AACA,aAAK5C,kBAAL,CAAwBmD,kBAAxB,CAA2CT,IAAI,CAACI,WAAhD;;AACA,aAAKhD,QAAL,CAAcsD,0BAAd,CAAyCH,2BAAaI,0BAAtD,EAAkFd,SAAlF,EAA6FG,IAA7F;;AACA;;AACF,WAAKO,2BAAaK,yBAAlB;AACE,gCAAUZ,IAAI,CAACE,IAAL,KAAc,YAAxB;;AACA,aAAK5C,kBAAL,CAAwBuD,qBAAxB,CAA8Cb,IAAI,CAACI,WAAnD;;AACA,aAAKhD,QAAL,CAAcsD,0BAAd,CAAyCH,2BAAaO,6BAAtD,EAAqFjB,SAArF,EAAgGG,IAAhG;;AACA;;AACF,WAAKO,2BAAaQ,yBAAlB;AACE,gCAAUf,IAAI,CAACE,IAAL,KAAc,YAAxB;;AACA,aAAK5C,kBAAL,CAAwB0D,qBAAxB,CAA8ChB,IAAI,CAACI,WAAnD;;AACA,aAAKhD,QAAL,CAAcsD,0BAAd,CAAyCH,2BAAaU,6BAAtD,EAAqFpB,SAArF,EAAgGG,IAAhG;;AACA;;AACF,WAAKO,2BAAaW,0BAAlB;AACE,gCAAUlB,IAAI,CAACE,IAAL,KAAc,YAAxB;;AACA,aAAK5C,kBAAL,CAAwB6D,sBAAxB,CAA+CnB,IAAI,CAACI,WAApD;;AACA,aAAKhD,QAAL,CAAcsD,0BAAd,CAAyCH,2BAAaa,8BAAtD,EAAsFvB,SAAtF,EAAiGG,IAAjG;;AACA;;AACF,WAAKO,2BAAac,mBAAlB;AACE,gCAAUrB,IAAI,CAACE,IAAL,KAAc,KAAxB;;AACA,aAAKoB,iBAAL;;AACA,eAAO,IAAP;;AACF,WAAKf,2BAAagB,mBAAlB;AACE,gCAAUvB,IAAI,CAACE,IAAL,KAAc,YAAxB;AACA,aAAKsB,yBAAL,CAA+B3B,SAA/B,EAA0CG,IAA1C,EAAgD1B,GAAhD;AACA;;AACF,WAAKiC,2BAAakB,cAAlB;AACE,gCAAUzB,IAAI,CAACE,IAAL,KAAc,QAAxB;AACA,aAAKwB,oBAAL,CAA0B7B,SAA1B,EAAqCG,IAArC;AACA;;AACF,WAAKO,2BAAaoB,iBAAlB;AACE,gCAAU3B,IAAI,CAACE,IAAL,KAAc,WAAxB;AACA,aAAK0B,uBAAL,CAA6B/B,SAA7B,EAAwCG,IAAxC;AACA;;AACF,WAAKO,2BAAasB,gBAAlB;AACE,gCAAUvD,GAAG,KAAKD,SAAlB;;AACA,aAAKX,YAAL,CAAkBoE,kBAAlB,CAAqC,IAArC,EAA2CxD,GAA3C;;AACA,aAAKgD,iBAAL;;AACA,eAAO,IAAP;;AACF,WAAKf,2BAAawB,gBAAlB;AACE,gCAAUzD,GAAG,KAAKD,SAAlB;;AACA,aAAKX,YAAL,CAAkBoE,kBAAlB,CAAqC,MAArC,EAA6CxD,GAA7C;;AACA,aAAKgD,iBAAL;;AACA,eAAO,IAAP;;AACF,WAAKf,2BAAayB,eAAlB;AACE,gCAAU1D,GAAG,KAAKD,SAAlB;;AACA,aAAKX,YAAL,CAAkBoE,kBAAlB,CAAqC,KAArC,EAA4CxD,GAA5C;;AACA,aAAKgD,iBAAL;;AACA,eAAO,IAAP;;AACF,WAAKf,2BAAa0B,gBAAlB;AACE,gCAAUjC,IAAI,CAACE,IAAL,KAAc,UAAxB;AACA,aAAKgC,sBAAL,CAA4BrC,SAA5B,EAAuCG,IAAvC;AACA;;AACF;AACE,cAAM,IAAImC,4BAAJ,CAAkB,iBAAlB,EAAqC,mCAAmCpC,OAAxE,CAAN;AAzDJ;;AA2DA,WAAO,KAAP;AACD;;AAEDyB,EAAAA,yBAAyB,CACvB3B,SADuB,EAEvBG,IAFuB,EAGvBoC,MAHuB,EAIjB;AACN,QAAIC,UAA6B,GAAG,EAApC;;AACA,QAAI/D,GAAG,GAAG,KAAKgE,iBAAL,CAAuBF,MAAM,GAAGA,MAAH,GAAY,IAAzC,CAAV;;AACA,QAAIG,QAAQ,GAAGjE,GAAG,CAACiE,QAAnB;AACA,QAAI5C,IAAI,GAAGrB,GAAG,CAACqB,IAAf;AACA,QAAIC,MAAM,GAAGtB,GAAG,CAACsB,MAAjB,CALM,CAON;AACA;;AACA,SAAK,IAAI4C,CAAC,GAAG,KAAKnF,MAAL,CAAYoF,YAAZ,CAAyBC,MAAzB,GAAkC,CAA/C,EAAkDF,CAAC,IAAI,CAAvD,EAA0DA,CAAC,EAA3D,EAA+D;AAC7D,UAAIG,KAAK,GAAG,KAAKtF,MAAL,CAAYoF,YAAZ,CAAyBD,CAAzB,CAAZ;AACA,UAAII,YAAY,GAAG,sBAAnB;;AACA,UAAID,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeC,cAAf,KAAkCzE,SAAxD,EAAmE;AACjEuE,QAAAA,YAAY,GAAGD,KAAK,CAACE,QAAN,CAAeC,cAA9B;AACD;;AAED,UAAIC,SAAqB,GAAG;AAC1BjD,QAAAA,EAAE,EAAE,KAAKzC,MAAL,CAAYoF,YAAZ,CAAyBC,MAAzB,GAAkC,CAAlC,GAAsCF,CADhB;AAE1BI,QAAAA,YAAY,EAAEA,YAFY;AAG1BL,QAAAA,QAAQ,EAAE,KAAKvE,iBAAL,CAAuBwB,kBAAvB,CAA0C+C,QAA1C,CAHgB;AAGqC;AAC/D5C,QAAAA,IAAI,EAAEA,IAJoB;AAK1BC,QAAAA,MAAM,EAAEA;AALkB,OAA5B;AAOAyC,MAAAA,UAAU,CAACnD,IAAX,CAAgB6D,SAAhB;AACAzE,MAAAA,GAAG,GAAG,KAAKgE,iBAAL,CAAuBK,KAAK,CAACrE,GAA7B,CAAN;AACAiE,MAAAA,QAAQ,GAAGjE,GAAG,CAACiE,QAAf;AACA5C,MAAAA,IAAI,GAAGrB,GAAG,CAACqB,IAAX;AACAC,MAAAA,MAAM,GAAGtB,GAAG,CAACsB,MAAb;AACD;;AACD,SAAKxC,QAAL,CAAc4F,sBAAd,CAAqCnD,SAArC,EAAgDwC,UAAhD;AACD;;AAEDC,EAAAA,iBAAiB,CAAChE,GAAD,EAAiG;AAChH,QAAIiE,QAAQ,GAAG,SAAf;AACA,QAAI5C,IAAI,GAAG,CAAX;AACA,QAAIC,MAAM,GAAG,CAAb;;AACA,QAAItB,GAAG,IAAIA,GAAG,CAACgB,MAAJ,KAAe,IAA1B,EAAgC;AAC9BiD,MAAAA,QAAQ,GAAGjE,GAAG,CAACgB,MAAf;AACAK,MAAAA,IAAI,GAAGrB,GAAG,CAACoB,KAAJ,CAAUC,IAAjB;AACAC,MAAAA,MAAM,GAAGtB,GAAG,CAACoB,KAAJ,CAAUE,MAAnB;AACD;;AACD,WAAO;AACL2C,MAAAA,QAAQ,EAAEA,QADL;AAEL5C,MAAAA,IAAI,EAAEA,IAFD;AAGLC,MAAAA,MAAM,EAAEA;AAHH,KAAP;AAKD;;AAED8B,EAAAA,oBAAoB,CAAC7B,SAAD,EAAoBG,IAApB,EAAiD;AACnE;AACA,QAAIA,IAAI,CAACiD,OAAL,GAAe,CAAf,IAAoBjD,IAAI,CAACiD,OAAL,IAAgB,KAAK5F,MAAL,CAAYoF,YAAZ,CAAyBC,MAAjE,EAAyE;AACvE,YAAM,IAAIP,4BAAJ,CAAkB,iBAAlB,EAAqC,0CAA0CnC,IAAI,CAACiD,OAApF,CAAN;AACD,KAJkE,CAKnE;AACA;;;AACA,QAAIC,UAAU,GAAG,KAAK7F,MAAL,CAAYoF,YAAZ,CAAyBC,MAAzB,GAAkC,CAAlC,GAAsC1C,IAAI,CAACiD,OAA5D;AACA,QAAIE,OAAO,GAAG,KAAK9F,MAAL,CAAYoF,YAAZ,CAAyBS,UAAzB,CAAd;AACA,4BAAUC,OAAO,YAAYC,uBAA7B;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,UAAU,GAAGH,OAAO,CAACI,kBAAzB;;AACA,WAAOD,UAAP,EAAmB;AACjB,UAAIE,KAAY,GAAG;AACjBC,QAAAA,IAAI,EAAE,KAAKC,aAAL,CAAmBJ,UAAU,CAACK,iBAA9B,CADW;AAEjB;AACAC,QAAAA,kBAAkB,EAAE,KAAKpG,gBAAL,CAAsBqG,oBAAtB,CAA2CP,UAA3C,CAHH;AAIjB;AACAQ,QAAAA,SAAS,EAAE;AALM,OAAnB;AAOAT,MAAAA,MAAM,CAACnE,IAAP,CAAYsE,KAAZ;AACAF,MAAAA,UAAU,GAAGA,UAAU,CAACS,MAAxB;AACD;;AACD,SAAK3G,QAAL,CAAc4G,kBAAd,CAAiCnE,SAAjC,EAA4CwD,MAA5C;AACD;;AAEDK,EAAAA,aAAa,CAACO,MAAD,EAAoC;AAC/C,QAAIA,MAAM,YAAYC,oCAAtB,EAA+C;AAC7C,aAAO,QAAP;AACD,KAFD,MAEO,IAAID,MAAM,YAAYE,yCAAtB,EAAoD;AACzD,UAAIF,MAAM,YAAYG,sCAAtB,EAAiD;AAC/C,YAAIX,IAAI,GAAGQ,MAAM,CAACI,eAAP,CAAuBvB,cAAlC;AACA,YAAIW,IAAI,KAAKpF,SAAb,EAAwBoF,IAAI,GAAG,oBAAP;AACxB,eAAO,YAAYA,IAAnB;AACD,OAJD,MAIO;AACL,eAAO,OAAP;AACD;AACF,KARM,MAQA,IAAIQ,MAAM,YAAYK,oCAAtB,EAA+C;AACpD,aAAO,MAAP;AACD,KAFM,MAEA;AACL,8BAAU,KAAV,EAAiB,oCAAjB;AACD;AACF;;AAED1C,EAAAA,uBAAuB,CAAC/B,SAAD,EAAoBG,IAApB,EAAoD;AACzE,QAAIuE,SAAS,GAAG,KAAK/G,gBAAL,CAAsBgH,uBAAtB,CAA8CxE,IAAI,CAAC4D,kBAAnD,CAAhB;;AACA,SAAKxG,QAAL,CAAcqH,qBAAd,CAAoC5E,SAApC,EAA+C0E,SAA/C;AACD;;AAEDrC,EAAAA,sBAAsB,CAACrC,SAAD,EAAoBG,IAApB,EAAmD;AACvE,QAAI0E,UAAU,GAAG,KAAKlH,gBAAL,CAAsBmH,QAAtB,CAA+B3E,IAAI,CAACiD,OAApC,EAA6CjD,IAAI,CAAC4E,UAAlD,CAAjB;;AACA,SAAKxH,QAAL,CAAcyH,oBAAd,CAAmChF,SAAnC,EAA8C6E,UAA9C;AACD,GA1OsB,CA4OvB;;;AACApD,EAAAA,iBAAiB,GAAS;AACxB;AACA,SAAK9D,gBAAL,CAAsBsH,KAAtB;AACD;AAED;;;;;AAGAjG,EAAAA,2BAA2B,CAACD,GAAD,EAA0B;AACnD,QAAIA,GAAG,CAACN,GAAJ,IAAWM,GAAG,CAACN,GAAJ,CAAQgB,MAAR,KAAmB,IAAlC,EAAwC;AACtC,UAAIe,QAAQ,GAAGzB,GAAG,CAACN,GAAJ,CAAQgB,MAAvB;AACA,UAAIK,IAAI,GAAGf,GAAG,CAACN,GAAJ,CAAQoB,KAAR,CAAcC,IAAzB;AACA,UAAIC,MAAM,GAAGhB,GAAG,CAACN,GAAJ,CAAQoB,KAAR,CAAcE,MAA3B;AACA,UAAImF,SAAS,GAAG,KAAK1H,MAAL,CAAYoF,YAAZ,CAAyBC,MAAzC,CAJsC,CAKtC;AACA;AACA;AACA;AACA;AACA;;AACA,UACE,KAAKsC,aAAL,IACA3E,QAAQ,KAAK,KAAK2E,aAAL,CAAmB3E,QADhC,IAEAV,IAAI,KAAK,KAAKqF,aAAL,CAAmBrF,IAF5B,IAGAoF,SAAS,KAAK,KAAKC,aAAL,CAAmBD,SAJnC,EAKE;AACA,eAAO,KAAP;AACD;;AACD,WAAKC,aAAL,GAAqB;AACnB3E,QAAAA,QAAQ,EAAEA,QADS;AAEnBV,QAAAA,IAAI,EAAEA,IAFa;AAGnBC,QAAAA,MAAM,EAAEA,MAHW;AAInBmF,QAAAA,SAAS,EAAE,KAAK1H,MAAL,CAAYoF,YAAZ,CAAyBC;AAJjB,OAArB;AAMA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAlRsB,CAoRvB;;;AACAuC,EAAAA,kBAAkB,CAACC,UAAD,EAAuC;AACvD,4BAAUA,UAAU,CAAC7F,QAAX,IAAuB6F,UAAU,CAAC7F,QAAX,CAAoBC,MAApB,KAA+B,IAAhE,EADuD,CAEvD;;AACA,QAAID,QAAQ,GAAG6F,UAAU,CAAC7F,QAA1B;AACA,QAAI8F,cAAc,GAAG,EAArB;AACA,QAAI9F,QAAQ,CAACC,MAAT,KAAoB,IAAxB,EAA8B6F,cAAc,GAAG,KAAKnH,iBAAL,CAAuBwB,kBAAvB,CAA0CH,QAAQ,CAACC,MAAnD,CAAjB;AAC9B,QAAI8F,OAAO,GAAI,GAAEF,UAAU,CAACG,QAAS,IAAGH,UAAU,CAACI,SAAU,KAAIJ,UAAU,CAACE,OAAQ,EAApF;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;;AACA,SAAKhI,QAAL,CAAcqC,mBAAd,CACE,YADF,EAEE0F,cAFF,EAGE9F,QAAQ,CAACK,KAAT,CAAeC,IAHjB,EAIEN,QAAQ,CAACK,KAAT,CAAeE,MAJjB,EAKEwF,OALF,EARuD,CAgBvD;;;AACA,SAAKhH,UAAL,CAAgBiB,QAAhB;AACD,GAvSsB,CAwSvB;;;AACAoG,EAAAA,qBAAqB,CAACJ,QAAD,EAA8B;AACjD,YAAQ,KAAKvH,mBAAb;AACE,WAAK,aAAL;AACE,eAAO,IAAP;;AACF,WAAK,SAAL;AACE,eAAOuH,QAAQ,KAAK,aAApB;;AACF,WAAK,kBAAL;AACE,eAAOA,QAAQ,KAAK,kBAAb,IAAmCA,QAAQ,KAAK,YAAvD;;AACF,WAAK,YAAL;AACE,eAAOA,QAAQ,KAAK,YAApB;;AACF;AACE,gCAAU,KAAV,EAAiB,0BAAjB;AAVJ;AAYD;;AAEDK,EAAAA,QAAQ,GAAS;AACf;AACA,SAAKtI,QAAL,CAAcsI,QAAd;AACD;;AA3TsB","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { BreakpointManager } from \"./BreakpointManager.js\";\nimport { BabelNode } from \"@babel/types\";\nimport type { BabelNodeSourceLocation } from \"@babel/types\";\nimport invariant from \"../common/invariant.js\";\nimport type { DebugChannel } from \"./channel/DebugChannel.js\";\nimport { DebugMessage } from \"./../common/channel/DebugMessage.js\";\nimport { DebuggerError } from \"./../common/DebuggerError.js\";\nimport type {\n  DebuggerRequest,\n  StackframeArguments,\n  ScopesArguments,\n  Stackframe,\n  Scope,\n  VariablesArguments,\n  EvaluateArguments,\n  SourceData,\n} from \"./../common/types.js\";\nimport type { Realm } from \"./../../realm.js\";\nimport { ExecutionContext } from \"./../../realm.js\";\nimport { VariableManager } from \"./VariableManager.js\";\nimport { SteppingManager } from \"./SteppingManager.js\";\nimport type { StoppableObject } from \"./StopEventManager.js\";\nimport { StopEventManager } from \"./StopEventManager.js\";\nimport {\n  EnvironmentRecord,\n  GlobalEnvironmentRecord,\n  FunctionEnvironmentRecord,\n  DeclarativeEnvironmentRecord,\n  ObjectEnvironmentRecord,\n} from \"./../../environment.js\";\nimport { CompilerDiagnostic } from \"../../errors.js\";\nimport type { Severity } from \"../../errors.js\";\nimport { SourceMapManager } from \"../../utils/SourceMapManager.js\";\nimport type { DebuggerConfigArguments } from \"../../types\";\n\nexport class DebugServer {\n  constructor(channel: DebugChannel, realm: Realm, configArgs: DebuggerConfigArguments) {\n    this._channel = channel;\n    this._realm = realm;\n    this._breakpointManager = new BreakpointManager();\n    this._variableManager = new VariableManager(realm);\n    this._stepManager = new SteppingManager(this._realm, /* default discard old steppers */ false);\n    this._stopEventManager = new StopEventManager();\n    this._diagnosticSeverity = configArgs.diagnosticSeverity || \"FatalError\";\n    this._sourceMapManager = new SourceMapManager(configArgs.buckRoot, configArgs.sourcemaps);\n    this.waitForRun(undefined);\n  }\n  // the collection of breakpoints\n  _breakpointManager: BreakpointManager;\n  // the channel to communicate with the adapter\n  _channel: DebugChannel;\n  _realm: Realm;\n  _variableManager: VariableManager;\n  _stepManager: SteppingManager;\n  _stopEventManager: StopEventManager;\n  _lastExecuted: SourceData;\n  // Severity at which debugger will break when CompilerDiagnostics are generated. Default is Fatal.\n  _diagnosticSeverity: Severity;\n  _sourceMapManager: SourceMapManager;\n\n  /* Block until adapter says to run\n  /* ast: the current ast node we are stopped on\n  /* reason: the reason the debuggee is stopping\n  */\n  waitForRun(loc: void | BabelNodeSourceLocation): void {\n    let keepRunning = false;\n    let request;\n    while (!keepRunning) {\n      request = this._channel.readIn();\n      keepRunning = this.processDebuggerCommand(request, loc);\n    }\n  }\n\n  // Checking if the debugger needs to take any action on reaching this ast node\n  checkForActions(ast: BabelNode): void {\n    if (this._checkAndUpdateLastExecuted(ast)) {\n      let stoppables: Array<StoppableObject> = this._stepManager.getAndDeleteCompletedSteppers(ast);\n      let breakpoint = this._breakpointManager.getStoppableBreakpoint(ast);\n      if (breakpoint) stoppables.push(breakpoint);\n      let reason = this._stopEventManager.getDebuggeeStopReason(ast, stoppables);\n      if (reason) {\n        let location = ast.loc;\n        invariant(location && location.source !== null);\n        let absolutePath = this._sourceMapManager.relativeToAbsolute(location.source);\n        this._channel.sendStoppedResponse(reason, absolutePath, location.start.line, location.start.column);\n        this.waitForRun(location);\n      }\n    }\n  }\n\n  // Process a command from a debugger. Returns whether Prepack should unblock\n  // if it is blocked\n  processDebuggerCommand(request: DebuggerRequest, loc: void | BabelNodeSourceLocation): boolean {\n    let requestID = request.id;\n    let command = request.command;\n    let args = request.arguments;\n    // Convert incoming location sources to relative paths in order to match internal representation of filenames.\n    if (args.kind === \"breakpoint\") {\n      for (let bp of args.breakpoints) {\n        bp.filePath = this._sourceMapManager.absoluteToRelative(bp.filePath);\n      }\n    }\n\n    switch (command) {\n      case DebugMessage.BREAKPOINT_ADD_COMMAND:\n        invariant(args.kind === \"breakpoint\");\n        this._breakpointManager.addBreakpointMulti(args.breakpoints);\n        this._channel.sendBreakpointsAcknowledge(DebugMessage.BREAKPOINT_ADD_ACKNOWLEDGE, requestID, args);\n        break;\n      case DebugMessage.BREAKPOINT_REMOVE_COMMAND:\n        invariant(args.kind === \"breakpoint\");\n        this._breakpointManager.removeBreakpointMulti(args.breakpoints);\n        this._channel.sendBreakpointsAcknowledge(DebugMessage.BREAKPOINT_REMOVE_ACKNOWLEDGE, requestID, args);\n        break;\n      case DebugMessage.BREAKPOINT_ENABLE_COMMAND:\n        invariant(args.kind === \"breakpoint\");\n        this._breakpointManager.enableBreakpointMulti(args.breakpoints);\n        this._channel.sendBreakpointsAcknowledge(DebugMessage.BREAKPOINT_ENABLE_ACKNOWLEDGE, requestID, args);\n        break;\n      case DebugMessage.BREAKPOINT_DISABLE_COMMAND:\n        invariant(args.kind === \"breakpoint\");\n        this._breakpointManager.disableBreakpointMulti(args.breakpoints);\n        this._channel.sendBreakpointsAcknowledge(DebugMessage.BREAKPOINT_DISABLE_ACKNOWLEDGE, requestID, args);\n        break;\n      case DebugMessage.PREPACK_RUN_COMMAND:\n        invariant(args.kind === \"run\");\n        this._onDebuggeeResume();\n        return true;\n      case DebugMessage.STACKFRAMES_COMMAND:\n        invariant(args.kind === \"stackframe\");\n        this.processStackframesCommand(requestID, args, loc);\n        break;\n      case DebugMessage.SCOPES_COMMAND:\n        invariant(args.kind === \"scopes\");\n        this.processScopesCommand(requestID, args);\n        break;\n      case DebugMessage.VARIABLES_COMMAND:\n        invariant(args.kind === \"variables\");\n        this.processVariablesCommand(requestID, args);\n        break;\n      case DebugMessage.STEPINTO_COMMAND:\n        invariant(loc !== undefined);\n        this._stepManager.processStepCommand(\"in\", loc);\n        this._onDebuggeeResume();\n        return true;\n      case DebugMessage.STEPOVER_COMMAND:\n        invariant(loc !== undefined);\n        this._stepManager.processStepCommand(\"over\", loc);\n        this._onDebuggeeResume();\n        return true;\n      case DebugMessage.STEPOUT_COMMAND:\n        invariant(loc !== undefined);\n        this._stepManager.processStepCommand(\"out\", loc);\n        this._onDebuggeeResume();\n        return true;\n      case DebugMessage.EVALUATE_COMMAND:\n        invariant(args.kind === \"evaluate\");\n        this.processEvaluateCommand(requestID, args);\n        break;\n      default:\n        throw new DebuggerError(\"Invalid command\", \"Invalid command from adapter: \" + command);\n    }\n    return false;\n  }\n\n  processStackframesCommand(\n    requestID: number,\n    args: StackframeArguments,\n    astLoc: void | BabelNodeSourceLocation\n  ): void {\n    let frameInfos: Array<Stackframe> = [];\n    let loc = this._getFrameLocation(astLoc ? astLoc : null);\n    let fileName = loc.fileName;\n    let line = loc.line;\n    let column = loc.column;\n\n    // the UI displays the current frame as index 0, so we iterate backwards\n    // from the current frame\n    for (let i = this._realm.contextStack.length - 1; i >= 0; i--) {\n      let frame = this._realm.contextStack[i];\n      let functionName = \"(anonymous function)\";\n      if (frame.function && frame.function.__originalName !== undefined) {\n        functionName = frame.function.__originalName;\n      }\n\n      let frameInfo: Stackframe = {\n        id: this._realm.contextStack.length - 1 - i,\n        functionName: functionName,\n        fileName: this._sourceMapManager.relativeToAbsolute(fileName), // Outward facing paths must be absolute.\n        line: line,\n        column: column,\n      };\n      frameInfos.push(frameInfo);\n      loc = this._getFrameLocation(frame.loc);\n      fileName = loc.fileName;\n      line = loc.line;\n      column = loc.column;\n    }\n    this._channel.sendStackframeResponse(requestID, frameInfos);\n  }\n\n  _getFrameLocation(loc: void | null | BabelNodeSourceLocation): { fileName: string, line: number, column: number } {\n    let fileName = \"unknown\";\n    let line = 0;\n    let column = 0;\n    if (loc && loc.source !== null) {\n      fileName = loc.source;\n      line = loc.start.line;\n      column = loc.start.column;\n    }\n    return {\n      fileName: fileName,\n      line: line,\n      column: column,\n    };\n  }\n\n  processScopesCommand(requestID: number, args: ScopesArguments): void {\n    // first check that frameId is in the valid range\n    if (args.frameId < 0 || args.frameId >= this._realm.contextStack.length) {\n      throw new DebuggerError(\"Invalid command\", \"Invalid frame id for scopes request: \" + args.frameId);\n    }\n    // here the frameId is in reverse order of the contextStack, ie frameId 0\n    // refers to last element of contextStack\n    let stackIndex = this._realm.contextStack.length - 1 - args.frameId;\n    let context = this._realm.contextStack[stackIndex];\n    invariant(context instanceof ExecutionContext);\n    let scopes = [];\n    let lexicalEnv = context.lexicalEnvironment;\n    while (lexicalEnv) {\n      let scope: Scope = {\n        name: this._getScopeName(lexicalEnv.environmentRecord),\n        // key used by UI to retrieve variables in this scope\n        variablesReference: this._variableManager.getReferenceForValue(lexicalEnv),\n        // the variables are easy to retrieve\n        expensive: false,\n      };\n      scopes.push(scope);\n      lexicalEnv = lexicalEnv.parent;\n    }\n    this._channel.sendScopesResponse(requestID, scopes);\n  }\n\n  _getScopeName(envRec: EnvironmentRecord): string {\n    if (envRec instanceof GlobalEnvironmentRecord) {\n      return \"Global\";\n    } else if (envRec instanceof DeclarativeEnvironmentRecord) {\n      if (envRec instanceof FunctionEnvironmentRecord) {\n        let name = envRec.$FunctionObject.__originalName;\n        if (name === undefined) name = \"anonymous function\";\n        return \"Local: \" + name;\n      } else {\n        return \"Block\";\n      }\n    } else if (envRec instanceof ObjectEnvironmentRecord) {\n      return \"With\";\n    } else {\n      invariant(false, \"Invalid type of environment record\");\n    }\n  }\n\n  processVariablesCommand(requestID: number, args: VariablesArguments): void {\n    let variables = this._variableManager.getVariablesByReference(args.variablesReference);\n    this._channel.sendVariablesResponse(requestID, variables);\n  }\n\n  processEvaluateCommand(requestID: number, args: EvaluateArguments): void {\n    let evalResult = this._variableManager.evaluate(args.frameId, args.expression);\n    this._channel.sendEvaluateResponse(requestID, evalResult);\n  }\n\n  // actions that need to happen before Prepack can resume\n  _onDebuggeeResume(): void {\n    // resets the variable manager\n    this._variableManager.clean();\n  }\n\n  /*\n    Returns whether there are more nodes in the ast.\n  */\n  _checkAndUpdateLastExecuted(ast: BabelNode): boolean {\n    if (ast.loc && ast.loc.source !== null) {\n      let filePath = ast.loc.source;\n      let line = ast.loc.start.line;\n      let column = ast.loc.start.column;\n      let stackSize = this._realm.contextStack.length;\n      // Check if the current location is same as the last one.\n      // Does not check columns since column debugging is not supported.\n      // Column support is unnecessary because these nodes will have been sourcemap-translated.\n      // Ignoring columns prevents:\n      //     - Lines with multiple AST nodes from triggering the same breakpoint more than once.\n      //     - Step-out from completing in the same line that it was set in.\n      if (\n        this._lastExecuted &&\n        filePath === this._lastExecuted.filePath &&\n        line === this._lastExecuted.line &&\n        stackSize === this._lastExecuted.stackSize\n      ) {\n        return false;\n      }\n      this._lastExecuted = {\n        filePath: filePath,\n        line: line,\n        column: column,\n        stackSize: this._realm.contextStack.length,\n      };\n      return true;\n    }\n    return false;\n  }\n\n  //  Displays Prepack error message, then waits for user to run the program to continue (similar to a breakpoint).\n  handlePrepackError(diagnostic: CompilerDiagnostic): void {\n    invariant(diagnostic.location && diagnostic.location.source !== null);\n    // The following constructs the message and stop-instruction that is sent to the UI to actually stop the execution.\n    let location = diagnostic.location;\n    let absoluteSource = \"\";\n    if (location.source !== null) absoluteSource = this._sourceMapManager.relativeToAbsolute(location.source);\n    let message = `${diagnostic.severity} ${diagnostic.errorCode}: ${diagnostic.message}`;\n    console.log(message);\n    this._channel.sendStoppedResponse(\n      \"Diagnostic\",\n      absoluteSource,\n      location.start.line,\n      location.start.column,\n      message\n    );\n\n    // The AST Node's location is needed to satisfy the subsequent stackTrace request.\n    this.waitForRun(location);\n  }\n  // Return whether the debugger should stop on a CompilerDiagnostic of a given severity.\n  shouldStopForSeverity(severity: Severity): boolean {\n    switch (this._diagnosticSeverity) {\n      case \"Information\":\n        return true;\n      case \"Warning\":\n        return severity !== \"Information\";\n      case \"RecoverableError\":\n        return severity === \"RecoverableError\" || severity === \"FatalError\";\n      case \"FatalError\":\n        return severity === \"FatalError\";\n      default:\n        invariant(false, \"Unexpected severity type\");\n    }\n  }\n\n  shutdown(): void {\n    // clean the channel pipes\n    this._channel.shutdown();\n  }\n}\n"],"file":"Debugger.js"}