{"version":3,"sources":["../src/prepack-standalone.js"],"names":["prepackSources","sourceFileCollection","options","defaultOptions","statistics","undefined","Array","isArray","SourceFileCollection","realmOptions","errorHandler","realm","debuggerConfigArgs","SerializerStatistics","debugReproArgs","additionalGlobals","check","generator","Generator","pathConditions","logger","Logger","internalDebug","modules","Modules","logModules","result","$GlobalEnv","executeSources","toArray","AbruptCompletion","checkResidualFunctions","code","map","serializer","Serializer","serialized","init","sourceMaps","onParse","onExecute","debuggerInstance","shutdown","FatalError","debugReproManager","localManager","sourcePaths","sourceFiles","getSourceFilePaths","getSourceMapPaths","sourceFilePaths","startFunc","totalToAnalyze","env","$GlobalObject","makeSimple","diag","suppressDiagnostics","handleError","severity","resolveInitializedModules","residualHeapVisitor","ResidualHeapVisitor","Map","visitRoots","hasErrors","totalFunctions","nonFatalFunctions","fi","functionInstances","values","fv","functionValue","console","log","thisValue","intrinsics","null","n","getLength","args","i","name","ob","AbstractValue","createFromType","ObjectValue","intrinsicName","evaluateForEffectsInGlobalEnv","e","prepackVersion","version"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* APIs for running Prepack for code where a model of the environment is supplied as part of the code. */\n\nimport Serializer from \"./serializer/index.js\";\nimport construct_realm from \"./construct_realm.js\";\nimport initializeGlobals from \"./globals.js\";\nimport { EvaluateDirectCallWithArgList } from \"./methods/index.js\";\nimport { getRealmOptions, getSerializerOptions } from \"./prepack-options\";\nimport { FatalError } from \"./errors.js\";\nimport { SourceFileCollection, type SourceFile } from \"./types.js\";\nimport { AbruptCompletion } from \"./completions.js\";\nimport type { PrepackOptions } from \"./prepack-options\";\nimport { defaultOptions } from \"./options\";\nimport invariant from \"./invariant.js\";\nimport { version } from \"../package.json\";\nimport { type SerializedResult } from \"./serializer/types.js\";\nimport { SerializerStatistics } from \"./serializer/statistics.js\";\nimport { ResidualHeapVisitor } from \"./serializer/ResidualHeapVisitor.js\";\nimport { Modules } from \"./utils/modules.js\";\nimport { Logger } from \"./utils/logger.js\";\nimport { Generator } from \"./utils/generator.js\";\nimport { AbstractObjectValue, AbstractValue, ObjectValue } from \"./values/index.js\";\n\nexport function prepackSources(\n  sourceFileCollection: SourceFileCollection | Array<SourceFile>,\n  options: PrepackOptions = defaultOptions,\n  statistics: SerializerStatistics | void = undefined\n): SerializedResult {\n  if (Array.isArray(sourceFileCollection)) sourceFileCollection = new SourceFileCollection(sourceFileCollection);\n\n  let realmOptions = getRealmOptions(options);\n  realmOptions.errorHandler = options.errorHandler;\n  let realm = construct_realm(\n    realmOptions,\n    options.debuggerConfigArgs,\n    statistics || new SerializerStatistics(),\n    options.debugReproArgs\n  );\n  initializeGlobals(realm);\n  if (typeof options.additionalGlobals === \"function\") {\n    options.additionalGlobals(realm);\n  }\n\n  if (options.check) {\n    realm.generator = new Generator(realm, \"main\", realm.pathConditions);\n    let logger = new Logger(realm, !!options.internalDebug);\n    let modules = new Modules(realm, logger, !!options.logModules);\n    let [result] = realm.$GlobalEnv.executeSources(sourceFileCollection.toArray());\n    if (result instanceof AbruptCompletion) throw result;\n    invariant(options.check);\n    checkResidualFunctions(modules, options.check[0], options.check[1]);\n    return { code: \"\", map: undefined };\n  } else {\n    let serializer = new Serializer(realm, getSerializerOptions(options));\n    let serialized = serializer.init(sourceFileCollection, options.sourceMaps, options.onParse, options.onExecute);\n\n    //Turn off the debugger if there is one\n    if (realm.debuggerInstance) {\n      realm.debuggerInstance.shutdown();\n    }\n\n    if (!serialized) {\n      throw new FatalError(\"serializer failed\");\n    }\n\n    if (realm.debugReproManager) {\n      let localManager = realm.debugReproManager;\n      let sourcePaths = {\n        sourceFiles: localManager.getSourceFilePaths(),\n        sourceMaps: localManager.getSourceMapPaths(),\n      };\n      serialized.sourceFilePaths = sourcePaths;\n    }\n\n    return serialized;\n  }\n}\n\nfunction checkResidualFunctions(modules: Modules, startFunc: number, totalToAnalyze: number) {\n  let realm = modules.realm;\n  let env = realm.$GlobalEnv;\n  realm.$GlobalObject.makeSimple();\n  let errorHandler = realm.errorHandler;\n  if (!errorHandler) errorHandler = (diag, suppressDiagnostics) => realm.handleError(diag);\n  realm.errorHandler = (diag, suppressDiagnostics) => {\n    invariant(errorHandler);\n    if (diag.severity === \"FatalError\") return errorHandler(diag, realm.suppressDiagnostics);\n    else return \"Recover\";\n  };\n  modules.resolveInitializedModules();\n  let residualHeapVisitor = new ResidualHeapVisitor(realm, modules.logger, modules, new Map());\n  residualHeapVisitor.visitRoots();\n  if (modules.logger.hasErrors()) return;\n  let totalFunctions = 0;\n  let nonFatalFunctions = 0;\n  for (let fi of residualHeapVisitor.functionInstances.values()) {\n    totalFunctions++;\n    if (totalFunctions <= startFunc) continue;\n    let fv = fi.functionValue;\n    console.log(\"analyzing: \" + totalFunctions);\n    let thisValue = realm.intrinsics.null;\n    let n = fv.getLength() || 0;\n    let args = [];\n    for (let i = 0; i < n; i++) {\n      let name = \"dummy parameter\";\n      let ob: AbstractObjectValue = (AbstractValue.createFromType(realm, ObjectValue, name): any);\n      ob.makeSimple(\"transitive\");\n      ob.intrinsicName = name;\n      args[i] = ob;\n    }\n    // todo: eventually join these effects, apply them to the global state and iterate to a fixed point\n    try {\n      realm.evaluateForEffectsInGlobalEnv(() =>\n        EvaluateDirectCallWithArgList(modules.realm, true, env, fv, fv, thisValue, args)\n      );\n      nonFatalFunctions++;\n    } catch (e) {}\n    if (totalFunctions >= startFunc + totalToAnalyze) break;\n  }\n  console.log(\n    `Analyzed ${totalToAnalyze} functions starting at ${startFunc} of which ${nonFatalFunctions} did not have fatal errors.`\n  );\n}\n\nexport const prepackVersion = version;\n"],"file":"prepack-standalone.js"}