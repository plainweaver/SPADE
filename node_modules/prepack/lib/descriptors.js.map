{"version":3,"sources":["../src/descriptors.js"],"names":["Descriptor","constructor","throwIfNotConcrete","realm","error","CompilerDiagnostic","currentLocation","handleError","FatalError","mightHaveBeenDeleted","PropertyDescriptor","desc","writable","enumerable","configurable","value","get","set","undefined","InternalSlotDescriptor","Array","isArray","slice","AbstractJoinedDescriptor","joinCondition","descriptor1","descriptor2","cloneDescriptor","d","equalDescriptors","d1","d2"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport invariant from \"./invariant.js\";\nimport type { AbstractValue, UndefinedValue, Value } from \"./values/index.js\";\nimport { CompilerDiagnostic, FatalError } from \"./errors.js\";\nimport type { CallableObjectValue } from \"./types.js\";\nimport type { Realm } from \"./realm.js\";\n\nexport class Descriptor {\n  constructor() {\n    invariant(this.constructor !== Descriptor, \"Descriptor is an abstract base class\");\n  }\n  throwIfNotConcrete(realm: Realm): PropertyDescriptor {\n    let error = new CompilerDiagnostic(\n      \"only known descriptors supported\",\n      realm.currentLocation,\n      \"PP0042\",\n      \"FatalError\"\n    );\n    realm.handleError(error);\n    throw new FatalError();\n  }\n  mightHaveBeenDeleted(): boolean {\n    invariant(false, \"should have been overridden by subclass\");\n  }\n}\n\nexport type DescriptorInitializer = {|\n  writable?: boolean,\n  enumerable?: boolean,\n  configurable?: boolean,\n\n  value?: Value,\n\n  get?: UndefinedValue | CallableObjectValue | AbstractValue,\n  set?: UndefinedValue | CallableObjectValue | AbstractValue,\n|};\n\n// Normal descriptors are returned just like spec descriptors\nexport class PropertyDescriptor extends Descriptor {\n  writable: void | boolean;\n  enumerable: void | boolean;\n  configurable: void | boolean;\n\n  // If value instanceof EmptyValue, then this descriptor indicates that the\n  // corresponding property has been deleted.\n  value: void | Value;\n\n  get: void | UndefinedValue | CallableObjectValue | AbstractValue;\n  set: void | UndefinedValue | CallableObjectValue | AbstractValue;\n\n  constructor(desc: DescriptorInitializer | PropertyDescriptor) {\n    super();\n    this.writable = desc.writable;\n    this.enumerable = desc.enumerable;\n    this.configurable = desc.configurable;\n    this.value = desc.value;\n    this.get = desc.get;\n    this.set = desc.set;\n  }\n\n  throwIfNotConcrete(realm: Realm): PropertyDescriptor {\n    return this;\n  }\n  mightHaveBeenDeleted(): boolean {\n    if (this.value === undefined) return false;\n    return this.value.mightHaveBeenDeleted();\n  }\n}\n\n// Only internal properties (those starting with $ / where internalSlot of owning property binding is true) will ever have array values.\nexport class InternalSlotDescriptor extends Descriptor {\n  value: void | Value | Array<any>;\n\n  constructor(value?: void | Value | Array<any>) {\n    super();\n    this.value = Array.isArray(value) ? value.slice(0) : value;\n  }\n\n  mightHaveBeenDeleted(): boolean {\n    return false;\n  }\n}\n\n// Only used if the result of a join of two descriptors is not a data descriptor with identical attribute values.\n// When present, any update to the property must produce effects that are the join of updating both descriptors,\n// using joinCondition as the condition of the join.\nexport class AbstractJoinedDescriptor extends Descriptor {\n  joinCondition: AbstractValue;\n  // An undefined descriptor means it might be empty in this branch.\n  descriptor1: void | Descriptor;\n  descriptor2: void | Descriptor;\n\n  constructor(joinCondition: AbstractValue, descriptor1?: Descriptor, descriptor2?: Descriptor) {\n    super();\n    this.joinCondition = joinCondition;\n    this.descriptor1 = descriptor1;\n    this.descriptor2 = descriptor2;\n  }\n  mightHaveBeenDeleted(): boolean {\n    if (!this.descriptor1 || this.descriptor1.mightHaveBeenDeleted()) {\n      return true;\n    }\n    if (!this.descriptor2 || this.descriptor2.mightHaveBeenDeleted()) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport function cloneDescriptor(d: void | PropertyDescriptor): void | PropertyDescriptor {\n  if (d === undefined) return undefined;\n  return new PropertyDescriptor(d);\n}\n\n// does not check if the contents of value properties are the same\nexport function equalDescriptors(d1: PropertyDescriptor, d2: PropertyDescriptor): boolean {\n  if (d1.writable !== d2.writable) return false;\n  if (d1.enumerable !== d2.enumerable) return false;\n  if (d1.configurable !== d2.configurable) return false;\n  if (d1.value !== undefined) {\n    if (d2.value === undefined) return false;\n  }\n  if (d1.get !== d2.get) return false;\n  if (d1.set !== d2.set) return false;\n  return true;\n}\n"],"file":"descriptors.js"}