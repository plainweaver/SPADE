{"version":3,"sources":["../../src/evaluators/Program.js"],"names":["GlobalDeclarationInstantiation","realm","ast","env","strictCode","getRunningContext","isStrict","envRec","environmentRecord","GlobalEnvironmentRecord","lexNames","varNames","node","type","kind","concat","Environment","BoundNames","name","HasVarDeclaration","createErrorThrowCompletion","intrinsics","SyntaxError","HasLexicalDeclaration","hasRestrictedGlobal","HasRestrictedGlobalProperty","varDeclarations","Functions","FindVarScopedDeclarations","functionsToInitialize","declaredFunctionNames","d","reverse","fn","indexOf","fnDefinable","CanDeclareGlobalFunction","TypeError","push","unshift","declaredVarNames","vn","vnDefinable","CanDeclareGlobalVar","lexDeclarations","s","body","dn","CreateImmutableBinding","CreateMutableBinding","f","fo","evaluate","Value","CreateGlobalFunctionBinding","CreateGlobalVarBinding","empty","val","res","evaluateCompletionDeref","AbruptCompletion","useAbstractInterpretation","incorporateSavedCompletion","Completion","emitThrowStatementsIfNeeded","ThrowCompletion","value","EmptyValue","directives","length","directive","undefined","completion","generator","selector","c","__bottomValue","emitThrow","JoinedAbruptCompletions","JoinedNormalAndAbruptCompletions","containsSelectedCompletion","emitConditionalThrow","Join","joinValuesOfSelectedCompletions"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport {\n  AbruptCompletion,\n  Completion,\n  JoinedAbruptCompletions,\n  JoinedNormalAndAbruptCompletions,\n  ThrowCompletion,\n} from \"../completions.js\";\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { Value, EmptyValue } from \"../values/index.js\";\nimport { GlobalEnvironmentRecord } from \"../environment.js\";\nimport { Environment, Functions, Join } from \"../singletons.js\";\nimport IsStrict from \"../utils/strict.js\";\nimport invariant from \"../invariant.js\";\nimport traverseFast from \"../utils/traverse-fast.js\";\nimport type { BabelNodeProgram, BabelNodeVariableDeclaration } from \"@babel/types\";\n\n// ECMA262 15.1.11\nexport function GlobalDeclarationInstantiation(\n  realm: Realm,\n  ast: BabelNodeProgram,\n  env: LexicalEnvironment,\n  strictCode: boolean\n): EmptyValue {\n  realm.getRunningContext().isStrict = realm.isStrict = strictCode;\n\n  // 1. Let envRec be env's EnvironmentRecord.\n  let envRec = env.environmentRecord;\n\n  // 2. Assert: envRec is a global Environment Record.\n  invariant(envRec instanceof GlobalEnvironmentRecord, \"expected global environment record\");\n\n  // 3. Let lexNames be the LexicallyDeclaredNames of script.\n  let lexNames = [];\n\n  // 4. Let varNames be the VarDeclaredNames of script.\n  let varNames = [];\n\n  traverseFast(ast, node => {\n    if (node.type === \"VariableDeclaration\") {\n      if (((node: any): BabelNodeVariableDeclaration).kind === \"var\") {\n        varNames = varNames.concat(Environment.BoundNames(realm, node));\n      } else {\n        lexNames = lexNames.concat(Environment.BoundNames(realm, node));\n      }\n    } else if (node.type === \"FunctionExpression\" || node.type === \"FunctionDeclaration\") {\n      return true;\n    }\n    return false;\n  });\n\n  // 5. For each name in lexNames, do\n  for (let name of lexNames) {\n    // a. If envRec.HasVarDeclaration(name) is true, throw a SyntaxError exception.\n    if (envRec.HasVarDeclaration(name)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.SyntaxError, name + \" already declared with var\");\n    }\n\n    // b. If envRec.HasLexicalDeclaration(name) is true, throw a SyntaxError exception.\n    if (envRec.HasLexicalDeclaration(name)) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.SyntaxError,\n        name + \" already declared with let or const\"\n      );\n    }\n\n    // c. Let hasRestrictedGlobal be ? envRec.HasRestrictedGlobalProperty(name).\n    let hasRestrictedGlobal = envRec.HasRestrictedGlobalProperty(name);\n\n    // d. If hasRestrictedGlobal is true, throw a SyntaxError exception.\n    if (hasRestrictedGlobal) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.SyntaxError, name + \" global object is restricted\");\n    }\n  }\n\n  // 6. For each name in varNames, do\n  for (let name of varNames) {\n    // a. If envRec.HasLexicalDeclaration(name) is true, throw a SyntaxError exception.\n    if (envRec.HasLexicalDeclaration(name)) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.SyntaxError,\n        name + \" already declared with let or const\"\n      );\n    }\n  }\n\n  // 7. Let varDeclarations be the VarScopedDeclarations of script.\n  let varDeclarations = Functions.FindVarScopedDeclarations(ast);\n\n  // 8. Let functionsToInitialize be a new empty List.\n  let functionsToInitialize = [];\n\n  // 9. Let declaredFunctionNames be a new empty List.\n  let declaredFunctionNames = [];\n\n  // 10. For each d in varDeclarations, in reverse list order do\n  for (let d of varDeclarations.reverse()) {\n    // a. If d is neither a VariableDeclaration or a ForBinding, then\n    if (d.type !== \"VariableDeclaration\") {\n      // i. Assert: d is either a FunctionDeclaration or a GeneratorDeclaration.\n      invariant(d.type === \"FunctionDeclaration\", \"expected function\");\n\n      // ii. NOTE If there are multiple FunctionDeclarations for the same name, the last declaration is used.\n\n      // iii. Let fn be the sole element of the BoundNames of d.\n      let fn = Environment.BoundNames(realm, d)[0];\n\n      // iv. If fn is not an element of declaredFunctionNames, then\n      if (declaredFunctionNames.indexOf(fn) < 0) {\n        // 1. Let fnDefinable be ? envRec.CanDeclareGlobalFunction(fn).\n        let fnDefinable = envRec.CanDeclareGlobalFunction(fn);\n\n        // 2. If fnDefinable is false, throw a TypeError exception.\n        if (!fnDefinable) {\n          throw realm.createErrorThrowCompletion(\n            realm.intrinsics.TypeError,\n            fn + \": global function declarations are not allowed\"\n          );\n        }\n\n        // 3. Append fn to declaredFunctionNames.\n        declaredFunctionNames.push(fn);\n\n        // 4. Insert d as the first element of functionsToInitialize.\n        functionsToInitialize.unshift(d);\n      }\n    }\n  }\n\n  // 11. Let declaredVarNames be a new empty List.\n  let declaredVarNames = [];\n\n  // 12. For each d in varDeclarations, do\n  for (let d of varDeclarations) {\n    // a. If d is a VariableDeclaration or a ForBinding, then\n    if (d.type === \"VariableDeclaration\") {\n      // i. For each String vn in the BoundNames of d, do\n      for (let vn of Environment.BoundNames(realm, d)) {\n        // ii. If vn is not an element of declaredFunctionNames, then\n        if (declaredFunctionNames.indexOf(vn) < 0) {\n          // 1. Let vnDefinable be ? envRec.CanDeclareGlobalVar(vn).\n          let vnDefinable = envRec.CanDeclareGlobalVar(vn);\n\n          // 2. If vnDefinable is false, throw a TypeError exception.\n          if (!vnDefinable) {\n            throw realm.createErrorThrowCompletion(\n              realm.intrinsics.TypeError,\n              vn + \": global variable declarations are not allowed\"\n            );\n          }\n\n          // 3. If vn is not an element of declaredVarNames, then\n          if (declaredVarNames.indexOf(vn) < 0) {\n            // a. Append vn to declaredVarNames.\n            declaredVarNames.push(vn);\n          }\n        }\n      }\n    }\n  }\n\n  // 13. NOTE: No abnormal terminations occur after this algorithm step if the global object is an ordinary object. However, if the global object is a Proxy exotic object it may exhibit behaviours that cause abnormal terminations in some of the following steps.\n\n  // 14. NOTE: Annex B.3.3.2 adds additional steps at this point.\n\n  // 15. Let lexDeclarations be the LexicallyScopedDeclarations of script.\n  let lexDeclarations = [];\n  for (let s of ast.body) {\n    if (s.type === \"VariableDeclaration\" && s.kind !== \"var\") {\n      lexDeclarations.push(s);\n    }\n  }\n\n  // 16. For each element d in lexDeclarations do\n  for (let d of lexDeclarations) {\n    // a. NOTE Lexically declared names are only instantiated here but not initialized.\n\n    // b. For each element dn of the BoundNames of d do\n    for (let dn of Environment.BoundNames(realm, d)) {\n      // i. If IsConstantDeclaration of d is true, then\n      if (d.kind === \"const\") {\n        // 1. Perform ? envRec.CreateImmutableBinding(dn, true).\n        envRec.CreateImmutableBinding(dn, true);\n      } else {\n        // ii. Else,\n        // 1. Perform ? envRec.CreateMutableBinding(dn, false).\n        envRec.CreateMutableBinding(dn, false);\n      }\n    }\n  }\n\n  // 17. For each production f in functionsToInitialize, do\n  for (let f of functionsToInitialize) {\n    // a. Let fn be the sole element of the BoundNames of f.\n    let fn = Environment.BoundNames(realm, f)[0];\n\n    // b. Let fo be the result of performing InstantiateFunctionObject for f with argument env.\n    let fo = env.evaluate(f, strictCode);\n    invariant(fo instanceof Value);\n\n    // c. Perform ? envRec.CreateGlobalFunctionBinding(fn, fo, false).\n    envRec.CreateGlobalFunctionBinding(fn, fo, false);\n  }\n\n  // 18. For each String vn in declaredVarNames, in list order do\n  for (let vn of declaredVarNames) {\n    // a. Perform ? envRec.CreateGlobalVarBinding(vn, false).\n    envRec.CreateGlobalVarBinding(vn, false);\n  }\n\n  // 19. Return NormalCompletion(empty).\n  return realm.intrinsics.empty;\n}\n\nexport default function(ast: BabelNodeProgram, strictCode: boolean, env: LexicalEnvironment, realm: Realm): Value {\n  strictCode = IsStrict(ast);\n\n  GlobalDeclarationInstantiation(realm, ast, env, strictCode);\n\n  let val, res;\n\n  for (let node of ast.body) {\n    if (node.type !== \"FunctionDeclaration\") {\n      res = env.evaluateCompletionDeref(node, strictCode);\n      if (res instanceof AbruptCompletion && !realm.useAbstractInterpretation) throw res;\n      res = Functions.incorporateSavedCompletion(realm, res);\n      if (res instanceof Completion) {\n        emitThrowStatementsIfNeeded(res);\n        if (res instanceof ThrowCompletion) return res.value; // Program ends here at runtime, so don't carry on\n        res = res.value;\n      }\n      if (!(res instanceof EmptyValue)) {\n        val = res;\n      }\n    }\n  }\n  let directives = ast.directives;\n  if (!val && directives && directives.length) {\n    let directive = directives[directives.length - 1];\n    val = env.evaluate(directive, strictCode);\n    invariant(val instanceof Value);\n  }\n\n  // We are about to leave this program and this presents a join point where all control flows\n  // converge into a single flow and the joined effects become the final state.\n  invariant(val === undefined || val instanceof Value);\n  if (val instanceof Value) {\n    res = Functions.incorporateSavedCompletion(realm, val);\n    if (res instanceof Completion) emitThrowStatementsIfNeeded(res);\n  }\n\n  return val || realm.intrinsics.empty;\n\n  function emitThrowStatementsIfNeeded(completion: Completion): void {\n    let generator = realm.generator;\n    invariant(generator !== undefined);\n    let selector = c =>\n      c instanceof ThrowCompletion && c.value !== realm.intrinsics.__bottomValue && !(c.value instanceof EmptyValue);\n    if (res instanceof ThrowCompletion && selector(res)) {\n      generator.emitThrow(res.value);\n    } else if (\n      (res instanceof JoinedAbruptCompletions || res instanceof JoinedNormalAndAbruptCompletions) &&\n      res.containsSelectedCompletion(selector)\n    ) {\n      generator.emitConditionalThrow(Join.joinValuesOfSelectedCompletions(selector, res, true));\n      res = realm.intrinsics.undefined;\n    } else {\n      // might get here for completions where all throws have already been handled.\n    }\n  }\n}\n"],"file":"Program.js"}