{"version":3,"sources":["../../src/evaluators/ConditionalExpression.js"],"names":["ast","strictCode","env","realm","exprRef","evaluate","test","exprValue","Environment","GetConditionValue","ConcreteValue","To","ToBoolean","consequent","alternate","AbstractValue","mightNotBeTrue","mightNotBeFalse","evaluateWithAbstractConditional","evaluateNodeForEffects"],"mappings":";;;;;;;AAYA;;AAEA;;AACA;;AAEA;;;;AAjBA;;;;;;;;;AASA;AAWe,kBACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKM;AACnB,MAAIC,OAAO,GAAGF,GAAG,CAACG,QAAJ,CAAaL,GAAG,CAACM,IAAjB,EAAuBL,UAAvB,CAAd;;AACA,MAAIM,SAAS,GAAGC,wBAAYC,iBAAZ,CAA8BN,KAA9B,EAAqCC,OAArC,CAAhB;;AAEA,MAAIG,SAAS,YAAYG,oBAAzB,EAAwC;AACtC,QAAIC,eAAGC,SAAH,CAAaT,KAAb,EAAoBI,SAApB,CAAJ,EAAoC;AAClC,aAAOL,GAAG,CAACG,QAAJ,CAAaL,GAAG,CAACa,UAAjB,EAA6BZ,UAA7B,CAAP;AACD,KAFD,MAEO;AACL,aAAOC,GAAG,CAACG,QAAJ,CAAaL,GAAG,CAACc,SAAjB,EAA4Bb,UAA5B,CAAP;AACD;AACF;;AACD,0BAAUM,SAAS,YAAYQ,oBAA/B;AAEA,QAAMF,UAAU,GAAGb,GAAG,CAACa,UAAvB;AACA,QAAMC,SAAS,GAAGd,GAAG,CAACc,SAAtB;AACA,MAAI,CAACP,SAAS,CAACS,cAAV,EAAL,EAAiC,OAAOd,GAAG,CAACG,QAAJ,CAAaQ,UAAb,EAAyBZ,UAAzB,CAAP;AACjC,MAAI,CAACM,SAAS,CAACU,eAAV,EAAL,EAAkC,OAAOf,GAAG,CAACG,QAAJ,CAAaS,SAAb,EAAwBb,UAAxB,CAAP;AAClC,SAAOE,KAAK,CAACe,+BAAN,CACLX,SADK,EAEL,MAAMJ,KAAK,CAACgB,sBAAN,CAA6BN,UAA7B,EAAyCZ,UAAzC,EAAqDC,GAArD,CAFD,EAGL,MAAOY,SAAS,GAAGX,KAAK,CAACgB,sBAAN,CAA6BL,SAA7B,EAAwCb,UAAxC,EAAoDC,GAApD,CAAH,GAA8D,oCAAwBC,KAAxB,CAHzE,CAAP;AAKD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { AbstractValue, ConcreteValue, Value } from \"../values/index.js\";\nimport type { Reference } from \"../environment.js\";\nimport { construct_empty_effects } from \"../realm.js\";\nimport { Environment, To } from \"../singletons.js\";\nimport type { BabelNodeConditionalExpression } from \"@babel/types\";\nimport invariant from \"../invariant.js\";\nimport type { Realm } from \"../realm.js\";\n\nexport default function(\n  ast: BabelNodeConditionalExpression,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value | Reference {\n  let exprRef = env.evaluate(ast.test, strictCode);\n  let exprValue = Environment.GetConditionValue(realm, exprRef);\n\n  if (exprValue instanceof ConcreteValue) {\n    if (To.ToBoolean(realm, exprValue)) {\n      return env.evaluate(ast.consequent, strictCode);\n    } else {\n      return env.evaluate(ast.alternate, strictCode);\n    }\n  }\n  invariant(exprValue instanceof AbstractValue);\n\n  const consequent = ast.consequent;\n  const alternate = ast.alternate;\n  if (!exprValue.mightNotBeTrue()) return env.evaluate(consequent, strictCode);\n  if (!exprValue.mightNotBeFalse()) return env.evaluate(alternate, strictCode);\n  return realm.evaluateWithAbstractConditional(\n    exprValue,\n    () => realm.evaluateNodeForEffects(consequent, strictCode, env),\n    () => (alternate ? realm.evaluateNodeForEffects(alternate, strictCode, env) : construct_empty_effects(realm))\n  );\n}\n"],"file":"ConditionalExpression.js"}