{"version":3,"sources":["../../src/evaluators/SuperProperty.js"],"names":["MakeSuperPropertyReference","realm","propertyKey","strict","env","Environment","GetThisEnvironment","FunctionEnvironmentRecord","HasSuperBinding","createErrorThrowCompletion","intrinsics","ReferenceError","actualThis","GetThisBinding","baseValue","GetSuperBase","bv","Reference","SuperProperty","ast","strictCode","computed","propertyNameReference","evaluate","property","propertyNameValue","GetValue","To","ToPropertyKeyPartial","StringValue","name"],"mappings":";;;;;;;AAaA;;AAEA;;AACA;;AACA;;AAEA;;;;AAnBA;;;;;;;;;AASA;AAYA,SAASA,0BAAT,CAAoCC,KAApC,EAAkDC,WAAlD,EAA+DC,MAA/D,EAA2F;AACzF;AACA,MAAIC,GAAG,GAAGC,wBAAYC,kBAAZ,CAA+BL,KAA/B,CAAV;;AACA,0BAAUG,GAAG,YAAYG,sCAAzB,EAHyF,CAKzF;;AACA,MAAI,CAACH,GAAG,CAACI,eAAJ,EAAL,EAA4B;AAC1B,UAAMP,KAAK,CAACQ,0BAAN,CAAiCR,KAAK,CAACS,UAAN,CAAiBC,cAAlD,EAAkE,iCAAlE,CAAN;AACD,GARwF,CAUzF;;;AACA,MAAIC,UAAU,GAAGR,GAAG,CAACS,cAAJ,EAAjB,CAXyF,CAazF;AAEA;;AACA,MAAIC,SAAS,GAAGV,GAAG,CAACW,YAAJ,EAAhB,CAhByF,CAkBzF;;AACA,MAAIC,EAAE,GAAG,oCAAuBf,KAAvB,EAA8Ba,SAA9B,CAAT,CAnByF,CAqBzF;AAEA;;AACA,SAAO,IAAIG,sBAAJ,CAAcD,EAAd,EAAkBd,WAAlB,EAA+BC,MAA/B,EAAuCS,UAAvC,CAAP;AACD,C,CAED;;;AACe,SAASM,aAAT,CACbC,GADa,EAEbC,UAFa,EAGbhB,GAHa,EAIbH,KAJa,EAKF;AACX;AACA,MAAIkB,GAAG,CAACE,QAAJ,KAAiB,IAArB,EAA2B;AACzB;AACA,QAAIC,qBAAqB,GAAGlB,GAAG,CAACmB,QAAJ,CAAaJ,GAAG,CAACK,QAAjB,EAA2BJ,UAA3B,CAA5B,CAFyB,CAIzB;;AACA,QAAIK,iBAAiB,GAAGpB,wBAAYqB,QAAZ,CAAqBzB,KAArB,EAA4BqB,qBAA5B,CAAxB,CALyB,CAOzB;;;AACA,QAAIpB,WAAW,GAAGyB,eAAGC,oBAAH,CAAwB3B,KAAxB,EAA+BwB,iBAA/B,CAAlB,CARyB,CAUzB;AAEA;;;AACA,QAAItB,MAAM,GAAGiB,UAAb,CAbyB,CAezB;;AACA,WAAOpB,0BAA0B,CAACC,KAAD,EAAQC,WAAR,EAAqBC,MAArB,CAAjC;AACD,GAjBD,MAiBO;AACL;AACA;AACA,QAAID,WAAW,GAAG,IAAI2B,kBAAJ,CAAgB5B,KAAhB,EAAuBkB,GAAG,CAACK,QAAJ,CAAaM,IAApC,CAAlB,CAHK,CAKL;;AACA,QAAI3B,MAAM,GAAGiB,UAAb,CANK,CAQL;;AACA,WAAOpB,0BAA0B,CAACC,KAAD,EAAQC,WAAR,EAAqBC,MAArB,CAAjC;AACD;AACF","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { FunctionEnvironmentRecord } from \"../environment.js\";\nimport { Reference } from \"../environment.js\";\nimport { StringValue } from \"../values/index.js\";\nimport { RequireObjectCoercible } from \"../methods/index.js\";\nimport { Environment, To } from \"../singletons.js\";\nimport type { BabelNodeMemberExpression } from \"@babel/types\";\nimport invariant from \"../invariant.js\";\n\nfunction MakeSuperPropertyReference(realm: Realm, propertyKey, strict: boolean): Reference {\n  // 1. Let env be GetThisEnvironment( ).\n  let env = Environment.GetThisEnvironment(realm);\n  invariant(env instanceof FunctionEnvironmentRecord);\n\n  // 2. If env.HasSuperBinding() is false, throw a ReferenceError exception.\n  if (!env.HasSuperBinding()) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.ReferenceError, \"env does not have super binding\");\n  }\n\n  // 3. Let actualThis be env.GetThisBinding().\n  let actualThis = env.GetThisBinding();\n\n  // 4. ReturnIfAbrupt(actualThis).\n\n  // 5. Let baseValue be env.GetSuperBase().\n  let baseValue = env.GetSuperBase();\n\n  // 6. Let bv be RequireObjectCoercible(baseValue).\n  let bv = RequireObjectCoercible(realm, baseValue);\n\n  // 7. ReturnIfAbrupt(bv).\n\n  // 8. Return a value of type Reference that is a Super Reference whose base value is bv, whose referenced name is propertyKey, whose thisValue is actualThis, and whose strict reference flag is strict.\n  return new Reference(bv, propertyKey, strict, actualThis);\n}\n\n// ECMA262 12.3.5.1\nexport default function SuperProperty(\n  ast: BabelNodeMemberExpression,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Reference {\n  // SuperProperty : super [ Expression ]\n  if (ast.computed === true) {\n    // 1. Let propertyNameReference be the result of evaluating Expression.\n    let propertyNameReference = env.evaluate(ast.property, strictCode);\n\n    // 2. Let propertyNameValue be GetValue(propertyNameReference).\n    let propertyNameValue = Environment.GetValue(realm, propertyNameReference);\n\n    // 3. Let propertyKey be ToPropertyKey(propertyNameValue).\n    let propertyKey = To.ToPropertyKeyPartial(realm, propertyNameValue);\n\n    // 4. ReturnIfAbrupt(propertyKey).\n\n    // 5. If the code matched by the syntactic production that is being evaluated is strict mode code, let strict be true, else let strict be false.\n    let strict = strictCode;\n\n    // 6. Return MakeSuperPropertyReference(propertyKey, strict).\n    return MakeSuperPropertyReference(realm, propertyKey, strict);\n  } else {\n    // SuperProperty : super . IdentifierName\n    // 1. Let propertyKey be StringValue of IdentifierName.\n    let propertyKey = new StringValue(realm, ast.property.name);\n\n    // 2. If the code matched by the syntactic production that is being evaluated is strict mode code, let strict be true, else let strict be false.\n    let strict = strictCode;\n\n    // 3. Return MakeSuperPropertyReference(propertyKey, strict).\n    return MakeSuperPropertyReference(realm, propertyKey, strict);\n  }\n}\n"],"file":"SuperProperty.js"}