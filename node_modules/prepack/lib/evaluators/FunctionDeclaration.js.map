{"version":3,"sources":["../../src/evaluators/FunctionDeclaration.js"],"names":["ast","strictCode","env","realm","generator","strict","body","name","id","StringValue","F","Functions","GeneratorFunctionCreate","params","prototype","Create","ObjectCreate","intrinsics","GeneratorPrototype","Properties","DefinePropertyOrThrow","PropertyDescriptor","value","writable","configurable","SetFunctionName","FunctionCreate","__originalName"],"mappings":";;;;;;;AAcA;;AACA;;AACA;;AACA;;AACA;;;;AAlBA;;;;;;;;;AASA;AAYA;AACe,kBACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKN;AACP,MAAIH,GAAG,CAACI,SAAR,EAAmB;AACjB;AACA,QAAIC,MAAM,GAAGJ,UAAU,IAAI,qBAASD,GAAG,CAACM,IAAb,CAA3B,CAFiB,CAIjB;;AACA,QAAIC,IAAJ;;AACA,QAAIP,GAAG,CAACQ,EAAR,EAAY;AACVD,MAAAA,IAAI,GAAG,IAAIE,kBAAJ,CAAgBN,KAAhB,EAAuBH,GAAG,CAACQ,EAAJ,CAAOD,IAA9B,CAAP;AACD,KAFD,MAEO;AACLA,MAAAA,IAAI,GAAG,IAAIE,kBAAJ,CAAgBN,KAAhB,EAAuB,SAAvB,CAAP;AACD,KAVgB,CAYjB;;;AACA,QAAIO,CAAC,GAAGC,sBAAUC,uBAAV,CAAkCT,KAAlC,EAAyC,QAAzC,EAAmDH,GAAG,CAACa,MAAvD,EAA+Db,GAAG,CAACM,IAAnE,EAAyEJ,GAAzE,EAA8EG,MAA9E,CAAR,CAbiB,CAejB;;;AACA,QAAIS,SAAS,GAAGC,mBAAOC,YAAP,CAAoBb,KAApB,EAA2BA,KAAK,CAACc,UAAN,CAAiBC,kBAA5C,CAAhB,CAhBiB,CAkBjB;;;AACAC,2BAAWC,qBAAX,CACEjB,KADF,EAEEO,CAFF,EAGE,WAHF,EAIE,IAAIW,+BAAJ,CAAuB;AACrBC,MAAAA,KAAK,EAAER,SADc;AAErBS,MAAAA,QAAQ,EAAE,IAFW;AAGrBC,MAAAA,YAAY,EAAE;AAHO,KAAvB,CAJF,EAnBiB,CA8BjB;;;AACAb,0BAAUc,eAAV,CAA0BtB,KAA1B,EAAiCO,CAAjC,EAAoCH,IAApC,EA/BiB,CAiCjB;;;AACA,WAAOG,CAAP;AACD,GAnCD,MAmCO;AACL;AACA,QAAIL,MAAM,GAAGJ,UAAU,IAAI,qBAASD,GAAG,CAACM,IAAb,CAA3B,CAFK,CAIL;;AACA,QAAIC,IAAJ;;AACA,QAAIP,GAAG,CAACQ,EAAR,EAAY;AACVD,MAAAA,IAAI,GAAG,IAAIE,kBAAJ,CAAgBN,KAAhB,EAAuBH,GAAG,CAACQ,EAAJ,CAAOD,IAA9B,CAAP;AACD,KAFD,MAEO;AACLA,MAAAA,IAAI,GAAG,IAAIE,kBAAJ,CAAgBN,KAAhB,EAAuB,SAAvB,CAAP;AACD,KAVI,CAYL;;;AACA,QAAIO,CAAC,GAAGC,sBAAUe,cAAV,CAAyBvB,KAAzB,EAAgC,QAAhC,EAA0CH,GAAG,CAACa,MAA9C,EAAsDb,GAAG,CAACM,IAA1D,EAAgEJ,GAAhE,EAAqEG,MAArE,CAAR;;AACA,QAAIL,GAAG,CAACQ,EAAJ,IAAUR,GAAG,CAACQ,EAAJ,CAAOD,IAArB,EAA2BG,CAAC,CAACiB,cAAF,GAAmB3B,GAAG,CAACQ,EAAJ,CAAOD,IAA1B,CAdtB,CAgBL;;AACA,oCAAgBJ,KAAhB,EAAuBO,CAAvB,EAjBK,CAmBL;;AACAC,0BAAUc,eAAV,CAA0BtB,KAA1B,EAAiCO,CAAjC,EAAoCH,IAApC,EApBK,CAsBL;;;AACA,WAAOG,CAAP;AACD;AACF","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport type { Value } from \"../values/index.js\";\nimport { MakeConstructor } from \"../methods/construct.js\";\nimport { Create, Functions, Properties } from \"../singletons.js\";\nimport { StringValue } from \"../values/index.js\";\nimport IsStrict from \"../utils/strict.js\";\nimport { PropertyDescriptor } from \"../descriptors.js\";\nimport type { BabelNodeFunctionDeclaration } from \"@babel/types\";\n\n// ECMA262 14.1.20\nexport default function(\n  ast: BabelNodeFunctionDeclaration,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  if (ast.generator) {\n    // 1. If the function code for GeneratorDeclaration is strict mode code, let strict be true. Otherwise let strict be false.\n    let strict = strictCode || IsStrict(ast.body);\n\n    // 2. Let name be StringValue of BindingIdentifier.\n    let name;\n    if (ast.id) {\n      name = new StringValue(realm, ast.id.name);\n    } else {\n      name = new StringValue(realm, \"default\");\n    }\n\n    // 3. Let F be GeneratorFunctionCreate(Normal, FormalParameters, GeneratorBody, scope, strict).\n    let F = Functions.GeneratorFunctionCreate(realm, \"normal\", ast.params, ast.body, env, strict);\n\n    // 4. Let prototype be ObjectCreate(%GeneratorPrototype%).\n    let prototype = Create.ObjectCreate(realm, realm.intrinsics.GeneratorPrototype);\n\n    // 5. Perform DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor{[[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false}).\n    Properties.DefinePropertyOrThrow(\n      realm,\n      F,\n      \"prototype\",\n      new PropertyDescriptor({\n        value: prototype,\n        writable: true,\n        configurable: false,\n      })\n    );\n\n    // 6. Perform SetFunctionName(F, name).\n    Functions.SetFunctionName(realm, F, name);\n\n    // 7 .Return F.\n    return F;\n  } else {\n    // 1. If the function code for FunctionDeclaration is strict mode code, let strict be true. Otherwise let strict be false.\n    let strict = strictCode || IsStrict(ast.body);\n\n    // 2. Let name be StringValue of BindingIdentifier.\n    let name;\n    if (ast.id) {\n      name = new StringValue(realm, ast.id.name);\n    } else {\n      name = new StringValue(realm, \"default\");\n    }\n\n    // 3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody, scope, strict).\n    let F = Functions.FunctionCreate(realm, \"normal\", ast.params, ast.body, env, strict);\n    if (ast.id && ast.id.name) F.__originalName = ast.id.name;\n\n    // 4. Perform MakeConstructor(F).\n    MakeConstructor(realm, F);\n\n    // 5. Perform SetFunctionName(F, name).\n    Functions.SetFunctionName(realm, F, name);\n\n    // 6. Return F.\n    return F;\n  }\n}\n"],"file":"FunctionDeclaration.js"}