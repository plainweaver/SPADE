{"version":3,"sources":["../../src/evaluators/VariableDeclaration.js"],"names":["letAndConst","ast","strictCode","env","realm","declar","declarations","Initializer","init","id","type","kind","bindingId","name","lhs","Environment","ResolveBinding","InitializeReferencedBinding","intrinsics","undefined","rhs","evaluate","value","GetValue","ObjectValue","hasNameProperty","Functions","SetFunctionName","StringValue","rval","BindingInitialization","empty","__originalName","Properties","PutValue"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport type { Value } from \"../values/index.js\";\nimport { ObjectValue, StringValue } from \"../values/index.js\";\nimport { IsAnonymousFunctionDefinition, HasOwnProperty } from \"../methods/index.js\";\nimport { Environment, Functions, Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport type { BabelNodeVariableDeclaration } from \"@babel/types\";\n\n// ECMA262 13.3.1.4\nfunction letAndConst(\n  ast: BabelNodeVariableDeclaration,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  for (let declar of ast.declarations) {\n    let Initializer = declar.init;\n    if (declar.id.type === \"Identifier\" && !Initializer) {\n      invariant(ast.kind !== \"const\", \"const without an initializer\");\n\n      // 1. Let lhs be ResolveBinding(StringValue of BindingIdentifier).\n      let bindingId = declar.id.name;\n      let lhs = Environment.ResolveBinding(realm, bindingId, strictCode);\n\n      // 2. Return InitializeReferencedBinding(lhs, undefined).\n      Environment.InitializeReferencedBinding(realm, lhs, realm.intrinsics.undefined);\n      continue;\n    } else if (declar.id.type === \"Identifier\" && Initializer) {\n      // 1. Let bindingId be StringValue of BindingIdentifier.\n      let bindingId = declar.id.name;\n\n      // 2. Let lhs be ResolveBinding(bindingId).\n      let lhs = Environment.ResolveBinding(realm, bindingId, strictCode);\n\n      // 3. Let rhs be the result of evaluating Initializer.\n      let rhs = env.evaluate(Initializer, strictCode);\n\n      // 4. Let value be ? GetValue(rhs).\n      let value = Environment.GetValue(realm, rhs);\n\n      // 5. If IsAnonymousFunctionDefinition(Initializer) is true, then\n      if (IsAnonymousFunctionDefinition(realm, Initializer)) {\n        invariant(value instanceof ObjectValue);\n\n        // a. Let hasNameProperty be ? HasOwnProperty(value, \"name\").\n        let hasNameProperty = HasOwnProperty(realm, value, \"name\");\n\n        // b. If hasNameProperty is false, perform SetFunctionName(value, bindingId).\n        if (!hasNameProperty) Functions.SetFunctionName(realm, value, new StringValue(realm, bindingId));\n      }\n\n      // 6. Return InitializeReferencedBinding(lhs, value).\n      Environment.InitializeReferencedBinding(realm, lhs, value);\n    } else if ((declar.id.type === \"ObjectPattern\" || declar.id.type === \"ArrayPattern\") && Initializer) {\n      // 1. Let rhs be the result of evaluating Initializer.\n      let rhs = env.evaluate(Initializer, strictCode);\n\n      // 2. Let rval be ? GetValue(rhs).\n      let rval = Environment.GetValue(realm, rhs);\n\n      // 3. Let env be the running execution contextâ€™s LexicalEnvironment.\n\n      // 4. Return the result of performing BindingInitialization for BindingPattern using value and env as the arguments.\n      Environment.BindingInitialization(realm, declar.id, rval, strictCode, env);\n    } else {\n      invariant(false, \"unrecognized declaration\");\n    }\n  }\n\n  return realm.intrinsics.empty;\n}\n\n// ECMA262 13.3.2.4\nexport default function(\n  ast: BabelNodeVariableDeclaration,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  if (ast.kind === \"let\" || ast.kind === \"const\") {\n    return letAndConst(ast, strictCode, env, realm);\n  }\n\n  for (let declar of ast.declarations) {\n    let Initializer = declar.init;\n\n    if (declar.id.type === \"Identifier\" && !Initializer) {\n      // VariableDeclaration : BindingIdentifier\n\n      // 1. Return NormalCompletion(empty).\n      continue;\n    } else if (declar.id.type === \"Identifier\" && Initializer) {\n      // VariableDeclaration : BindingIdentifier Initializer\n\n      // 1. Let bindingId be StringValue of BindingIdentifier.\n      let bindingId = declar.id.name;\n\n      // 2. Let lhs be ? ResolveBinding(bindingId).\n      let lhs = Environment.ResolveBinding(realm, bindingId, strictCode);\n\n      // 3. Let rhs be the result of evaluating Initializer.\n      let rhs = env.evaluate(Initializer, strictCode);\n\n      // 4. Let value be ? GetValue(rhs).\n      let value = Environment.GetValue(realm, rhs);\n      if (declar.id && declar.id.name !== undefined) value.__originalName = bindingId;\n\n      // 5. If IsAnonymousFunctionDefinition(Initializer) is true, then\n      if (IsAnonymousFunctionDefinition(realm, Initializer)) {\n        invariant(value instanceof ObjectValue);\n\n        // a. Let hasNameProperty be ? HasOwnProperty(value, \"name\").\n        let hasNameProperty = HasOwnProperty(realm, value, \"name\");\n\n        // b. If hasNameProperty is false, perform SetFunctionName(value, bindingId).\n        if (!hasNameProperty) Functions.SetFunctionName(realm, value, new StringValue(realm, bindingId));\n      }\n\n      // 6. Return ? PutValue(lhs, value).\n      Properties.PutValue(realm, lhs, value);\n    } else if ((declar.id.type === \"ObjectPattern\" || declar.id.type === \"ArrayPattern\") && Initializer) {\n      // 1. Let rhs be the result of evaluating Initializer.\n      let rhs = env.evaluate(Initializer, strictCode);\n\n      // 2. Let rval be ? GetValue(rhs).\n      let rval = Environment.GetValue(realm, rhs);\n\n      // 3. Return the result of performing BindingInitialization for BindingPattern passing rval and undefined as arguments.\n      Environment.BindingInitialization(realm, declar.id, rval, strictCode, undefined);\n    } else {\n      invariant(false, \"unrecognized declaration\");\n    }\n  }\n\n  return realm.intrinsics.empty;\n}\n"],"file":"VariableDeclaration.js"}