{"version":3,"sources":["../../src/evaluators/TemplateLiteral.js"],"names":["ast","strictCode","env","realm","str","i","quasis","length","elem","value","cooked","expr","expressions","To","ToStringPartial","Environment","GetValue","evaluate","StringValue"],"mappings":";;;;;;;AAcA;;AACA;;AAfA;;;;;;;;;AASA;AASA;AACe,kBACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKN;AACP,MAAIC,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACM,MAAJ,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AAC1C;AACA,QAAIG,IAAI,GAAGR,GAAG,CAACM,MAAJ,CAAWD,CAAX,CAAX;AACAD,IAAAA,GAAG,IAAII,IAAI,CAACC,KAAL,CAAWC,MAAlB,CAH0C,CAK1C;;AACA,QAAIC,IAAI,GAAGX,GAAG,CAACY,WAAJ,CAAgBP,CAAhB,CAAX;;AACA,QAAIM,IAAJ,EAAU;AACRP,MAAAA,GAAG,IAAIS,eAAGC,eAAH,CAAmBX,KAAnB,EAA0BY,wBAAYC,QAAZ,CAAqBb,KAArB,EAA4BD,GAAG,CAACe,QAAJ,CAAaN,IAAb,EAAmBV,UAAnB,CAA5B,CAA1B,CAAP;AACD;AACF;;AAED,SAAO,IAAIiB,kBAAJ,CAAgBf,KAAhB,EAAuBC,GAAvB,CAAP;AACD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport type { Value } from \"../values/index.js\";\nimport { StringValue } from \"../values/index.js\";\nimport { Environment, To } from \"../singletons.js\";\nimport type { BabelNodeTemplateLiteral } from \"@babel/types\";\n\n// ECMA262 12.2.9\nexport default function(\n  ast: BabelNodeTemplateLiteral,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  let str = \"\";\n\n  for (let i = 0; i < ast.quasis.length; i++) {\n    // add quasi\n    let elem = ast.quasis[i];\n    str += elem.value.cooked;\n\n    // add expression\n    let expr = ast.expressions[i];\n    if (expr) {\n      str += To.ToStringPartial(realm, Environment.GetValue(realm, env.evaluate(expr, strictCode)));\n    }\n  }\n\n  return new StringValue(realm, str);\n}\n"],"file":"TemplateLiteral.js"}