{"version":3,"sources":["../../src/evaluators/TryStatement.js"],"names":["ast","strictCode","env","realm","useAbstractInterpretation","joinTryBlockWithHandlers","blockRes","evaluateCompletionDeref","block","result","ThrowCompletion","handler","finalizer","composeResults","returnOrThrowCompletion","intrinsics","undefined","r1","r2","AbruptCompletion","Join","composeCompletions","savedIsInPureTryStatement","isInPureTryStatement","isInPureScope","Functions","incorporateSavedCompletion","selector","c","Completion","containsSelectedCompletion","JoinedAbruptCompletions","JoinedNormalAndAbruptCompletions","joinCondition","AbstractValue","createJoinConditionForSelectedCompletions","mightNotBeFalse","handlerEffects","Path","withCondition","joinedThrow","joinValuesOfSelectedCompletions","handlerEval","evaluateForEffects","makeSelectedCompletionsInfeasible","emptyEffects","joinEffects","applyEffects","e","InfeasiblePathError","res"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport { type LexicalEnvironment } from \"../environment.js\";\nimport {\n  AbruptCompletion,\n  Completion,\n  JoinedAbruptCompletions,\n  JoinedNormalAndAbruptCompletions,\n  ThrowCompletion,\n} from \"../completions.js\";\nimport { UpdateEmpty } from \"../methods/index.js\";\nimport { InfeasiblePathError } from \"../errors.js\";\nimport { construct_empty_effects } from \"../realm.js\";\nimport { Functions, Join, Path } from \"../singletons.js\";\nimport { AbstractValue, Value } from \"../values/index.js\";\nimport type { BabelNodeTryStatement } from \"@babel/types\";\nimport invariant from \"../invariant.js\";\n\nexport default function(ast: BabelNodeTryStatement, strictCode: boolean, env: LexicalEnvironment, realm: Realm): Value {\n  if (realm.useAbstractInterpretation) return joinTryBlockWithHandlers(ast, strictCode, env, realm);\n\n  let blockRes = env.evaluateCompletionDeref(ast.block, strictCode);\n  let result = blockRes;\n\n  if (blockRes instanceof ThrowCompletion && ast.handler) {\n    result = env.evaluateCompletionDeref(ast.handler, strictCode, blockRes);\n  }\n\n  if (ast.finalizer) {\n    result = composeResults(result, env.evaluateCompletionDeref(ast.finalizer, strictCode));\n  }\n\n  return realm.returnOrThrowCompletion(UpdateEmpty(realm, result, realm.intrinsics.undefined));\n}\n\nfunction composeResults(r1: Completion | Value, r2: Completion | Value): Completion | Value {\n  if (r2 instanceof AbruptCompletion) return r2;\n  return Join.composeCompletions(r2, r1);\n}\n\nfunction joinTryBlockWithHandlers(\n  ast: BabelNodeTryStatement,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  let savedIsInPureTryStatement = realm.isInPureTryStatement;\n  if (realm.isInPureScope()) {\n    // TODO(1264): This is used to issue a warning if we have abstract function calls in here.\n    // We might not need it once we have full support for handling potential errors. Even\n    // then we might need it to know whether we should bother tracking error handling.\n    realm.isInPureTryStatement = true;\n  }\n  let blockRes = env.evaluateCompletionDeref(ast.block, strictCode);\n  // this is a join point for break and continue completions\n  blockRes = Functions.incorporateSavedCompletion(realm, blockRes);\n  invariant(blockRes !== undefined);\n  realm.isInPureTryStatement = savedIsInPureTryStatement;\n\n  let result = blockRes;\n  let handler = ast.handler;\n  let selector = c => c instanceof ThrowCompletion;\n  if (handler && blockRes instanceof Completion && blockRes.containsSelectedCompletion(selector)) {\n    if (blockRes instanceof ThrowCompletion) {\n      result = env.evaluateCompletionDeref(handler, strictCode, blockRes);\n    } else {\n      invariant(blockRes instanceof JoinedAbruptCompletions || blockRes instanceof JoinedNormalAndAbruptCompletions);\n      // put the handler under a guard that excludes normal paths from entering it.\n      let joinCondition = AbstractValue.createJoinConditionForSelectedCompletions(selector, blockRes);\n      if (joinCondition.mightNotBeFalse()) {\n        try {\n          let handlerEffects = Path.withCondition(joinCondition, () => {\n            invariant(blockRes instanceof Completion);\n            let joinedThrow = new ThrowCompletion(Join.joinValuesOfSelectedCompletions(selector, blockRes));\n            let handlerEval = () => env.evaluateCompletionDeref(handler, strictCode, joinedThrow);\n            return realm.evaluateForEffects(handlerEval, undefined, \"joinTryBlockWithHandlers\");\n          });\n          Completion.makeSelectedCompletionsInfeasible(selector, blockRes);\n          let emptyEffects = construct_empty_effects(realm, blockRes);\n          handlerEffects = Join.joinEffects(joinCondition, handlerEffects, emptyEffects);\n          realm.applyEffects(handlerEffects);\n          result = handlerEffects.result;\n        } catch (e) {\n          if (!(e instanceof InfeasiblePathError)) throw e;\n          // It turns out that the handler is not reachable after all so just do nothing and carry on\n        }\n      }\n    }\n  }\n\n  if (ast.finalizer) {\n    let res = env.evaluateCompletionDeref(ast.finalizer, strictCode);\n    result = composeResults(result, res);\n  }\n  return realm.returnOrThrowCompletion(UpdateEmpty(realm, result, realm.intrinsics.undefined));\n}\n"],"file":"TryStatement.js"}