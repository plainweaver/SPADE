{"version":3,"sources":["../../src/evaluators/ArrayExpression.js"],"names":["ast","strictCode","env","realm","array","Create","ArrayCreate","elements","len","length","nextIndex","i","elem","type","spreadRef","evaluate","argument","spreadObj","Environment","GetValue","iterator","next","nextValue","status","CreateDataProperty","StringValue","initResult","initValue","created","Properties","Set","NumberValue"],"mappings":";;;;;;;AAaA;;AACA;;AACA;;AACA;;AACA;;;;AAjBA;;;;;;;;;AASA;AAWA;AACe,kBACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKN;AACP;AACA,MAAIC,KAAK,GAAGC,mBAAOC,WAAP,CAAmBH,KAAnB,EAA0B,CAA1B,CAAZ,CAFO,CAIP;;;AACA,MAAII,QAAQ,GAAGP,GAAG,CAACO,QAAJ,IAAgB,EAA/B;AACA,MAAIC,GAAG,GAAGD,QAAQ,CAACE,MAAnB;AACA,MAAIC,SAAS,GAAG,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5B,QAAIC,IAAI,GAAGL,QAAQ,CAACI,CAAD,CAAnB;;AACA,QAAI,CAACC,IAAL,EAAW;AACTF,MAAAA,SAAS;AACT;AACD,KAL2B,CAO5B;;;AACA,QAAIE,IAAI,CAACC,IAAL,KAAc,eAAlB,EAAmC;AACjC;AACA,UAAIC,SAAS,GAAGZ,GAAG,CAACa,QAAJ,CAAaH,IAAI,CAACI,QAAlB,EAA4Bf,UAA5B,CAAhB,CAFiC,CAIjC;;AACA,UAAIgB,SAAS,GAAGC,wBAAYC,QAAZ,CAAqBhB,KAArB,EAA4BW,SAA5B,CAAhB,CALiC,CAOjC;;;AACA,UAAIM,QAAQ,GAAG,yBAAYjB,KAAZ,EAAmBc,SAAnB,CAAf,CARiC,CAUjC;;AACA,aAAO,IAAP,EAAa;AACX;AACA,YAAII,IAAI,GAAG,4BAAalB,KAAb,EAAoBiB,QAApB,CAAX,CAFW,CAIX;;AACA,YAAIC,IAAI,KAAK,KAAb,EAAoB,MALT,CAOX;;AACA,YAAIC,SAAS,GAAG,6BAAcnB,KAAd,EAAqBkB,IAArB,CAAhB,CARW,CAUX;;AACA,YAAIE,MAAM,GAAGlB,mBAAOmB,kBAAP,CAA0BrB,KAA1B,EAAiCC,KAAjC,EAAwC,IAAIqB,kBAAJ,CAAgBtB,KAAhB,EAAuBO,SAAS,KAAK,EAArC,CAAxC,EAAkFY,SAAlF,CAAb,CAXW,CAaX;;;AACA,gCAAUC,MAAM,KAAK,IAArB,EAdW,CAgBX;AACD;AACF,KA7BD,MA6BO;AACL;AACA;AACA;AACA;AAEA;AACA,UAAIG,UAAU,GAAGxB,GAAG,CAACa,QAAJ,CAAaH,IAAb,EAAmBX,UAAnB,CAAjB,CAPK,CASL;;AACA,UAAI0B,SAAS,GAAGT,wBAAYC,QAAZ,CAAqBhB,KAArB,EAA4BuB,UAA5B,CAAhB,CAVK,CAYL;;;AACA,UAAIE,OAAO,GAAGvB,mBAAOmB,kBAAP,CAA0BrB,KAA1B,EAAiCC,KAAjC,EAAwC,IAAIqB,kBAAJ,CAAgBtB,KAAhB,EAAuBO,SAAS,KAAK,EAArC,CAAxC,EAAkFiB,SAAlF,CAAd,CAbK,CAeL;;;AACA,8BAAUC,OAAO,KAAK,IAAtB,EAA4B,iCAA5B;AACD;AACF,GA/DM,CAiEP;AACA;AAEA;;;AACAC,yBAAWC,GAAX,CAAe3B,KAAf,EAAsBC,KAAtB,EAA6B,QAA7B,EAAuC,IAAI2B,kBAAJ,CAAgB5B,KAAhB,EAAuBO,SAAvB,CAAvC,EAA0E,KAA1E,EArEO,CAuEP;AAEA;;;AACA,SAAON,KAAP;AACD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { StringValue, NumberValue, Value } from \"../values/index.js\";\nimport { GetIterator } from \"../methods/index.js\";\nimport invariant from \"../invariant.js\";\nimport { IteratorStep, IteratorValue } from \"../methods/iterator.js\";\nimport { Create, Environment, Properties } from \"../singletons.js\";\nimport type { BabelNodeArrayExpression } from \"@babel/types\";\n\n// ECMA262 2.2.5.3\nexport default function(\n  ast: BabelNodeArrayExpression,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  // 1. Let array be ArrayCreate(0).\n  let array = Create.ArrayCreate(realm, 0);\n\n  // 2. Let len be the result of performing ArrayAccumulation for ElementList with arguments array and 0.\n  let elements = ast.elements || [];\n  let len = elements.length;\n  let nextIndex = 0;\n  for (let i = 0; i < len; i++) {\n    let elem = elements[i];\n    if (!elem) {\n      nextIndex++;\n      continue;\n    }\n\n    // ECMA262 12.2.5.2\n    if (elem.type === \"SpreadElement\") {\n      // 1. Let spreadRef be the result of evaluating AssignmentExpression.\n      let spreadRef = env.evaluate(elem.argument, strictCode);\n\n      // 2. Let spreadObj be ? GetValue(spreadRef).\n      let spreadObj = Environment.GetValue(realm, spreadRef);\n\n      // 3. Let iterator be ? GetIterator(spreadObj).\n      let iterator = GetIterator(realm, spreadObj);\n\n      // 4. Repeat\n      while (true) {\n        // a. Let next be ? IteratorStep(iterator).\n        let next = IteratorStep(realm, iterator);\n\n        // b. If next is false, return nextIndex.\n        if (next === false) break;\n\n        // c. Let nextValue be ? IteratorValue(next).\n        let nextValue = IteratorValue(realm, next);\n\n        // d. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)), nextValue).\n        let status = Create.CreateDataProperty(realm, array, new StringValue(realm, nextIndex++ + \"\"), nextValue);\n\n        // e. Assert: status is true.\n        invariant(status === true);\n\n        // f. Let nextIndex be nextIndex + 1.\n      }\n    } else {\n      // Redundant steps.\n      // 1. Let postIndex be the result of performing ArrayAccumulation for ElementList with arguments array and nextIndex.\n      // 2. ReturnIfAbrupt(postIndex).\n      // 3. Let padding be the ElisionWidth of Elision; if Elision is not present, use the numeric value zero.\n\n      // 4. Let initResult be the result of evaluating AssignmentExpression.\n      let initResult = env.evaluate(elem, strictCode);\n\n      // 5. Let initValue be ? GetValue(initResult).\n      let initValue = Environment.GetValue(realm, initResult);\n\n      // 6. Let created be CreateDataProperty(array, ToString(ToUint32(postIndex+padding)), initValue).\n      let created = Create.CreateDataProperty(realm, array, new StringValue(realm, nextIndex++ + \"\"), initValue);\n\n      // 7. Assert: created is true.\n      invariant(created === true, \"expected data property creation\");\n    }\n  }\n\n  // Not necessary since we propagate completions with exceptions.\n  // 3. ReturnIfAbrupt(len).\n\n  // 4. Perform Set(array, \"length\", ToUint32(len), false).\n  Properties.Set(realm, array, \"length\", new NumberValue(realm, nextIndex), false);\n\n  // 5. NOTE: The above Set cannot fail because of the nature of the object returned by ArrayCreate.\n\n  // 6. Return array.\n  return array;\n}\n"],"file":"ArrayExpression.js"}