{"version":3,"sources":["../../src/evaluators/JSXElement.js"],"names":["cleanJSXElementLiteralChild","child","lines","split","lastNonEmptyLine","i","length","match","str","line","isFirstLine","isLastLine","isLastNonEmptyLine","trimmedLine","replace","evaluateJSXMemberExpression","ast","strictCode","env","realm","type","Environment","GetValue","ResolveBinding","name","evaluate","evaluateJSXIdentifier","isTagName","StringValue","evaluateJSXValue","value","expression","test","evaluateJSXChildren","children","undefined","singleChild","text","array","Create","ArrayCreate","dynamicChildrenLength","dynamicIterator","lastChildValue","intrinsics","CreateDataPropertyOrThrow","Properties","Set","NumberValue","makeFinal","isObjectEmpty","object","propertyCount","binding","properties","descriptor","throwIfNotConcrete","enumerable","evaluateJSXAttributes","astAttributes","config","ObjectCreate","ObjectPrototype","abstractPropsArgs","abstractSpreadCount","safeAbstractSpreadCount","spreadValue","setConfigProperty","ObjectValue","astAttribute","argument","isPartialObject","spreadPropKey","AbstractValue","AbstractObjectValue","To","ToObject","push","react","enabled","openingElement","attributes","Value"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport type {\n  BabelNode,\n  BabelNodeStringLiteral,\n  BabelNodeJSXText,\n  BabelNodeJSXElement,\n  BabelNodeJSXIdentifier,\n  BabelNodeJSXMemberExpression,\n  BabelNodeJSXAttribute,\n  BabelNodeJSXSpreadAttribute,\n  BabelNodeJSXExpressionContainer,\n} from \"@babel/types\";\nimport {\n  AbstractObjectValue,\n  ArrayValue,\n  StringValue,\n  Value,\n  NumberValue,\n  ObjectValue,\n  AbstractValue,\n} from \"../values/index.js\";\nimport { convertJSXExpressionToIdentifier } from \"../react/jsx.js\";\nimport { Get } from \"../methods/index.js\";\nimport { Create, Environment, Properties, To } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport { createReactElement } from \"../react/elements.js\";\nimport {\n  applyObjectAssignConfigsForReactElement,\n  flagPropsWithNoPartialKeyOrRef,\n  hasNoPartialKeyOrRef,\n} from \"../react/utils.js\";\n\n// taken from Babel\nfunction cleanJSXElementLiteralChild(child: string): null | string {\n  let lines = child.split(/\\r\\n|\\n|\\r/);\n\n  let lastNonEmptyLine = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].match(/[^ \\t]/)) {\n      lastNonEmptyLine = i;\n    }\n  }\n\n  let str = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n\n    let isFirstLine = i === 0;\n    let isLastLine = i === lines.length - 1;\n    let isLastNonEmptyLine = i === lastNonEmptyLine;\n\n    // replace rendered whitespace tabs with spaces\n    let trimmedLine = line.replace(/\\t/g, \" \");\n\n    // trim whitespace touching a newline\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^[ ]+/, \"\");\n    }\n\n    // trim whitespace touching an endline\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/[ ]+$/, \"\");\n    }\n\n    if (trimmedLine) {\n      if (!isLastNonEmptyLine) {\n        trimmedLine += \" \";\n      }\n\n      str += trimmedLine;\n    }\n  }\n\n  if (str) {\n    return str;\n  }\n  return null;\n}\n\nfunction evaluateJSXMemberExpression(\n  ast: BabelNode,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  switch (ast.type) {\n    case \"JSXIdentifier\":\n      return Environment.GetValue(\n        realm,\n        Environment.ResolveBinding(realm, ((ast: any): BabelNodeJSXIdentifier).name, strictCode, env)\n      );\n    case \"JSXMemberExpression\":\n      return Environment.GetValue(\n        realm,\n        env.evaluate(convertJSXExpressionToIdentifier(((ast: any): BabelNodeJSXMemberExpression)), strictCode)\n      );\n    default:\n      invariant(false, \"Unknown JSX Identifier\");\n  }\n}\n\nfunction evaluateJSXIdentifier(ast, strictCode, env, realm): Value {\n  if (isTagName(ast)) {\n    // special cased lower-case and custom elements\n    return new StringValue(realm, ((ast: any): BabelNodeJSXIdentifier).name);\n  }\n  return evaluateJSXMemberExpression(ast, strictCode, env, realm);\n}\n\nfunction evaluateJSXValue(value: BabelNode, strictCode: boolean, env: LexicalEnvironment, realm: Realm): Value {\n  if (value != null) {\n    switch (value.type) {\n      case \"JSXText\":\n        return new StringValue(realm, ((value: any): BabelNodeJSXText).value);\n      case \"StringLiteral\":\n        return new StringValue(realm, ((value: any): BabelNodeStringLiteral).value);\n      case \"JSXExpressionContainer\":\n        return Environment.GetValue(\n          realm,\n          env.evaluate(((value: any): BabelNodeJSXExpressionContainer).expression, strictCode)\n        );\n      case \"JSXElement\":\n        return Environment.GetValue(realm, env.evaluate(value, strictCode));\n      default:\n        invariant(false, `Unknown JSX value type: ${value.type}`);\n    }\n  }\n  invariant(false, `Null or undefined value passed when trying to evaluate JSX node value`);\n}\n\nfunction isTagName(ast: BabelNode): boolean {\n  return ast.type === \"JSXIdentifier\" && /^[a-z]|\\-/.test(((ast: any): BabelNodeJSXIdentifier).name);\n}\n\nfunction evaluateJSXChildren(\n  children: Array<BabelNode>,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): ArrayValue | Value | void {\n  if (children.length === 0) {\n    return undefined;\n  }\n  if (children.length === 1) {\n    let singleChild = evaluateJSXValue(children[0], strictCode, env, realm);\n\n    if (singleChild instanceof StringValue) {\n      let text = cleanJSXElementLiteralChild(singleChild.value);\n      if (text !== null) {\n        singleChild.value = text;\n      }\n    }\n    return singleChild;\n  }\n  let array = Create.ArrayCreate(realm, 0);\n  let dynamicChildrenLength = children.length;\n  let dynamicIterator = 0;\n  let lastChildValue = realm.intrinsics.undefined;\n  for (let i = 0; i < children.length; i++) {\n    let value = evaluateJSXValue(children[i], strictCode, env, realm);\n    if (value instanceof StringValue) {\n      let text = cleanJSXElementLiteralChild(value.value);\n      if (text === null) {\n        dynamicChildrenLength--;\n        // this is a space full of whitespace, so let's proceed\n        continue;\n      } else {\n        value.value = text;\n      }\n    }\n    lastChildValue = value;\n    Create.CreateDataPropertyOrThrow(realm, array, \"\" + dynamicIterator, value);\n    dynamicIterator++;\n  }\n  if (dynamicChildrenLength === 1) {\n    return lastChildValue;\n  }\n\n  Properties.Set(realm, array, \"length\", new NumberValue(realm, dynamicChildrenLength), false);\n  array.makeFinal();\n  return array;\n}\n\nfunction isObjectEmpty(realm: Realm, object: ObjectValue) {\n  let propertyCount = 0;\n  for (let [, binding] of object.properties) {\n    if (binding && binding.descriptor && binding.descriptor.throwIfNotConcrete(realm).enumerable) {\n      propertyCount++;\n    }\n  }\n  return propertyCount === 0;\n}\n\nfunction evaluateJSXAttributes(\n  astAttributes: Array<BabelNodeJSXAttribute | BabelNodeJSXSpreadAttribute>,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): ObjectValue | AbstractObjectValue {\n  let config = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  let abstractPropsArgs = [];\n  let abstractSpreadCount = 0;\n  let safeAbstractSpreadCount = 0;\n  let spreadValue;\n\n  const setConfigProperty = (name: string, value: Value): void => {\n    invariant(config instanceof ObjectValue);\n    Properties.Set(realm, config, name, value, true);\n  };\n\n  for (let astAttribute of astAttributes) {\n    switch (astAttribute.type) {\n      case \"JSXAttribute\":\n        let { name, value } = astAttribute;\n\n        invariant(name.type === \"JSXIdentifier\", `JSX attribute name type not supported: ${astAttribute.type}`);\n        setConfigProperty(name.name, evaluateJSXValue(((value: any): BabelNodeJSXIdentifier), strictCode, env, realm));\n        break;\n      case \"JSXSpreadAttribute\":\n        spreadValue = Environment.GetValue(realm, env.evaluate(astAttribute.argument, strictCode));\n\n        if (spreadValue instanceof ObjectValue && !spreadValue.isPartialObject()) {\n          for (let [spreadPropKey, binding] of spreadValue.properties) {\n            if (binding && binding.descriptor && binding.descriptor.throwIfNotConcrete(realm).enumerable) {\n              setConfigProperty(spreadPropKey, Get(realm, spreadValue, spreadPropKey));\n            }\n          }\n        } else {\n          abstractSpreadCount++;\n          if (spreadValue instanceof AbstractValue && !(spreadValue instanceof AbstractObjectValue)) {\n            spreadValue = To.ToObject(realm, spreadValue);\n          }\n          invariant(spreadValue instanceof AbstractObjectValue || spreadValue instanceof ObjectValue);\n\n          if (hasNoPartialKeyOrRef(realm, spreadValue)) {\n            safeAbstractSpreadCount++;\n          }\n          if (!isObjectEmpty(realm, config)) {\n            abstractPropsArgs.push(config);\n          }\n          abstractPropsArgs.push(spreadValue);\n          config = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n        }\n        break;\n      default:\n        invariant(false, `Unknown JSX attribute type: ${astAttribute.type}`);\n    }\n  }\n\n  if (abstractSpreadCount > 0) {\n    // if we only have a single spread config, then use that,\n    // i.e. <div {...something} />  -->  React.createElement(\"div\", something)\n    if (\n      abstractSpreadCount === 1 &&\n      astAttributes.length === 1 &&\n      (spreadValue instanceof ObjectValue || spreadValue instanceof AbstractObjectValue)\n    ) {\n      return spreadValue;\n    }\n    // we create an abstract Object.assign() to deal with the fact that we don't what\n    // the props are because they contain abstract spread attributes that we can't\n    // evaluate ahead of time\n    // push the current config\n    abstractPropsArgs.push(config);\n\n    // create a new config object that will be the target of the Object.assign\n    config = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n\n    applyObjectAssignConfigsForReactElement(realm, config, abstractPropsArgs);\n    if (safeAbstractSpreadCount === abstractSpreadCount) {\n      flagPropsWithNoPartialKeyOrRef(realm, config);\n    }\n  }\n  invariant(config instanceof ObjectValue || config instanceof AbstractObjectValue);\n  return config;\n}\n\nexport default function(ast: BabelNodeJSXElement, strictCode: boolean, env: LexicalEnvironment, realm: Realm): Value {\n  invariant(realm.react.enabled, \"JSXElements can only be evaluated with the reactEnabled option\");\n  let openingElement = ast.openingElement;\n  let type = evaluateJSXIdentifier(openingElement.name, strictCode, env, realm);\n  let children = evaluateJSXChildren(ast.children, strictCode, env, realm);\n  let config = evaluateJSXAttributes(openingElement.attributes, strictCode, env, realm);\n  invariant(type instanceof Value);\n  return createReactElement(realm, type, config, children);\n}\n"],"file":"JSXElement.js"}