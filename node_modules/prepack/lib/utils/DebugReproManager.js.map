{"version":3,"sources":["../../src/utils/DebugReproManager.js"],"names":["DebugReproManagerImplementation","construct","configArgs","_sourceMapManager","SourceMapManager","buckRoot","sourcemaps","_sourceMapNames","forEach","m","sourceMapFilename","undefined","push","_usedSourceFiles","Set","addSourceFile","fileName","includes","add","relativeToAbsolute","getSourceFilePaths","Array","from","map","absolutePath","absolute","relative","absoluteToRelative","getSourceMapPaths"],"mappings":";;;;;;;AAWA;;AAXA;;;;;;;;;AASA;;AAKA;;;;;AAKO,MAAMA,+BAAN,CAAsC;AAC3CC,EAAAA,SAAS,CAACC,UAAD,EAAmE;AAC1E,SAAKC,iBAAL,GAAyB,IAAIC,kCAAJ,CAAqBF,UAAU,CAACG,QAAhC,EAA0CH,UAAU,CAACI,UAArD,CAAzB;;AACA,QAAIJ,UAAU,CAACI,UAAf,EAA2B;AACzB,WAAKC,eAAL,GAAuB,EAAvB;AACAL,MAAAA,UAAU,CAACI,UAAX,CAAsBE,OAAtB,CAA8BC,CAAC,IAAI;AACjC,YAAIA,CAAC,CAACC,iBAAF,KAAwBC,SAA5B,EAAuC,KAAKJ,eAAL,CAAqBK,IAArB,CAA0BH,CAAC,CAACC,iBAA5B;AACxC,OAFD;AAGD;;AACD,SAAKG,gBAAL,GAAwB,IAAIC,GAAJ,EAAxB;AAEA,WAAO,IAAP;AACD,GAZ0C,CAc3C;;;AAOAC,EAAAA,aAAa,CAACC,QAAD,EAAmB;AAC9B,QAAI,CAACA,QAAQ,CAACC,QAAT,CAAkB,cAAlB,CAAL,EACE,KAAKJ,gBAAL,CAAsBK,GAAtB,CAA0B,KAAKf,iBAAL,CAAuBgB,kBAAvB,CAA0CH,QAA1C,CAA1B;AACH;;AAEDI,EAAAA,kBAAkB,GAAkD;AAClE,WAAOC,KAAK,CAACC,IAAN,CAAW,KAAKT,gBAAhB,EAAkCU,GAAlC,CAAsCC,YAAY,IAAI;AAC3D,aAAO;AACLC,QAAAA,QAAQ,EAAED,YADL;AAELE,QAAAA,QAAQ,EAAE,KAAKvB,iBAAL,CAAuBwB,kBAAvB,CAA0CH,YAA1C;AAFL,OAAP;AAID,KALM,CAAP;AAMD;;AAEDI,EAAAA,iBAAiB,GAAkB;AACjC,WAAO,KAAKrB,eAAZ;AACD;;AArC0C","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { SourceMapManager } from \"./SourceMapManager.js\";\nimport type { DebugReproArguments } from \"../types.js\";\n\n/**\n * Manager that captures name of all original sourcefiles touched by Prepack.\n * When Prepack exits (regardless of success or failure), the list of all\n * relevant sourcefiles is passed back to the CLI to be included in the reproBundle.\n */\nexport class DebugReproManagerImplementation {\n  construct(configArgs: DebugReproArguments): DebugReproManagerImplementation {\n    this._sourceMapManager = new SourceMapManager(configArgs.buckRoot, configArgs.sourcemaps);\n    if (configArgs.sourcemaps) {\n      this._sourceMapNames = [];\n      configArgs.sourcemaps.forEach(m => {\n        if (m.sourceMapFilename !== undefined) this._sourceMapNames.push(m.sourceMapFilename);\n      });\n    }\n    this._usedSourceFiles = new Set();\n\n    return this;\n  }\n\n  // Manager to translate between relative/absolute paths used by sourceMaps/Filesystem.\n  _sourceMapManager: SourceMapManager;\n  // Set of source files (to handle repeat additions) that Prepack encounters.\n  _usedSourceFiles: Set<string>;\n  // The actual sourcemaps associated with the input.\n  _sourceMapNames: Array<string>;\n\n  addSourceFile(fileName: string) {\n    if (!fileName.includes(\"node_modules\"))\n      this._usedSourceFiles.add(this._sourceMapManager.relativeToAbsolute(fileName));\n  }\n\n  getSourceFilePaths(): Array<{ absolute: string, relative: string }> {\n    return Array.from(this._usedSourceFiles).map(absolutePath => {\n      return {\n        absolute: absolutePath,\n        relative: this._sourceMapManager.absoluteToRelative(absolutePath),\n      };\n    });\n  }\n\n  getSourceMapPaths(): Array<string> {\n    return this._sourceMapNames;\n  }\n}\n"],"file":"DebugReproManager.js"}