{"version":3,"sources":["../../src/utils/logger.js"],"names":["Logger","constructor","realm","internalDebug","_hasErrors","tryQuery","f","defaultValue","context","ExecutionContext","isStrict","env","$GlobalEnv","lexicalEnvironment","variableEnvironment","pushContext","oldErrorHandler","errorHandler","d","severity","result","effects","evaluateForEffects","e","Completion","FatalError","intrinsics","undefined","value","popContext","logCompletion","res","console","error","name","ObjectValue","Error","object","err","To","ToStringPartial","stack","message","ThrowCompletion","nativeStack","properties","get","descriptor","PropertyDescriptor","StringValue","$ErrorData","contextStack","logError","_log","logWarning","logInformation","loc","expressionLocation","intrinsicName","diagnostic","CompilerDiagnostic","handleError","hasErrors"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, ExecutionContext } from \"../realm.js\";\nimport { CompilerDiagnostic, FatalError, type Severity } from \"../errors.js\";\nimport { Get, InstanceofOperator } from \"../methods/index.js\";\nimport { Completion, ThrowCompletion } from \"../completions.js\";\nimport { ObjectValue, StringValue, Value } from \"../values/index.js\";\nimport { To } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport { PropertyDescriptor } from \"../descriptors.js\";\n\nexport class Logger {\n  constructor(realm: Realm, internalDebug: boolean) {\n    this.realm = realm;\n    this._hasErrors = false;\n    this.internalDebug = internalDebug;\n  }\n\n  realm: Realm;\n  _hasErrors: boolean;\n  internalDebug: boolean;\n\n  // Wraps a query that might potentially execute user code.\n  tryQuery<T>(f: () => T, defaultValue: T): T {\n    let realm = this.realm;\n    let context = new ExecutionContext();\n    context.isStrict = realm.isStrict;\n    let env = realm.$GlobalEnv;\n    context.lexicalEnvironment = env;\n    context.variableEnvironment = env;\n    context.realm = realm;\n    realm.pushContext(context);\n    // We use partial evaluation so that we can throw away any state mutations\n    let oldErrorHandler = realm.errorHandler;\n    realm.errorHandler = d => {\n      if (d.severity === \"Information\" || d.severity === \"Warning\") return \"Recover\";\n      return \"Fail\";\n    };\n    try {\n      let result;\n      let effects = realm.evaluateForEffects(\n        () => {\n          try {\n            result = f();\n          } catch (e) {\n            if (e instanceof Completion) {\n              result = defaultValue;\n            } else if (e instanceof FatalError) {\n              result = defaultValue;\n            } else {\n              throw e;\n            }\n          }\n          return realm.intrinsics.undefined;\n        },\n        undefined,\n        \"tryQuery\"\n      );\n      invariant(effects.result.value === realm.intrinsics.undefined);\n      return ((result: any): T);\n    } finally {\n      realm.errorHandler = oldErrorHandler;\n      realm.popContext(context);\n    }\n  }\n\n  logCompletion(res: Completion): void {\n    let realm = this.realm;\n    let value = res.value;\n    if (this.internalDebug) console.error(`=== ${res.constructor.name} ===`);\n    if (\n      this.tryQuery(\n        () => value instanceof ObjectValue && InstanceofOperator(realm, value, realm.intrinsics.Error),\n        false\n      )\n    ) {\n      let object = ((value: any): ObjectValue);\n      try {\n        let err = new FatalError(\n          this.tryQuery(() => To.ToStringPartial(realm, Get(realm, object, \"message\")), \"(unknown message)\")\n        );\n        err.stack = this.tryQuery(() => To.ToStringPartial(realm, Get(realm, object, \"stack\")), \"(unknown stack)\");\n        console.error(err.message);\n        console.error(err.stack);\n        if (this.internalDebug && res instanceof ThrowCompletion) console.error(res.nativeStack);\n      } catch (err) {\n        let message = object.properties.get(\"message\");\n        console.error(\n          message &&\n          message.descriptor &&\n          message.descriptor instanceof PropertyDescriptor &&\n          message.descriptor.value instanceof StringValue\n            ? message.descriptor.value.value\n            : \"(no message available)\"\n        );\n        console.error(err.stack);\n        if (object.$ErrorData) {\n          console.error(object.$ErrorData.contextStack);\n        }\n      }\n    } else {\n      try {\n        value = To.ToStringPartial(realm, value);\n      } catch (err) {\n        value = err.message;\n      }\n      console.error(value);\n      if (this.internalDebug && res instanceof ThrowCompletion) console.error(res.nativeStack);\n    }\n    this._hasErrors = true;\n  }\n\n  logError(value: Value, message: string): void {\n    this._log(value, message, \"RecoverableError\");\n    this._hasErrors = true;\n  }\n\n  logWarning(value: Value, message: string): void {\n    this._log(value, message, \"Warning\");\n  }\n\n  logInformation(message: string): void {\n    this._log(this.realm.intrinsics.undefined, message, \"Information\");\n  }\n\n  _log(value: Value, message: string, severity: Severity): void {\n    let loc = value.expressionLocation;\n    if (value.intrinsicName) {\n      message = `${message}\\nintrinsic name: ${value.intrinsicName}`;\n    }\n    let diagnostic = new CompilerDiagnostic(message, loc, \"PP9000\", severity);\n    if (this.realm.handleError(diagnostic) === \"Fail\") throw new FatalError();\n  }\n\n  hasErrors(): boolean {\n    return this._hasErrors;\n  }\n}\n"],"file":"logger.js"}