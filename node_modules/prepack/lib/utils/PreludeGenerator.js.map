{"version":3,"sources":["../../src/utils/PreludeGenerator.js"],"names":["Placeholders","split","placeholderDefaultWhiteList","Set","placeholderWhitelist","DisablePlaceholderSuffix","PreludeGenerator","constructor","debugNames","uniqueSuffix","prelude","memoizedRefs","Map","nameGenerator","NameGenerator","usesThis","declaredGlobals","nextInvariantId","_expressionTemplates","createNameGenerator","prefix","forbiddenNames","convertStringToMember","str","map","name","memoizeReference","t","thisExpression","identifier","reduce","obj","prop","memberExpression","globalReference","key","globalScope","isValidIdentifier","ref","get","init","includes","i","lastIndexOf","substr","generate","push","variableDeclaration","variableDeclarator","set","buildExpression","code","templateArguments","disablePlaceholders","template","undefined","endsWith","substring","length","placeholderPattern","Object","assign","global","result","expression"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport * as t from \"@babel/types\";\nimport { memberExpressionHelper } from \"./babelhelpers.js\";\nimport type {\n  BabelNodeIdentifier,\n  BabelNodeThisExpression,\n  BabelNodeStatement,\n  BabelNodeMemberExpression,\n  BabelNodeExpression,\n} from \"@babel/types\";\nimport { NameGenerator } from \"./NameGenerator.js\";\nimport buildTemplate from \"@babel/template\";\nimport invariant from \"../invariant.js\";\n\nexport const Placeholders = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\nconst placeholderDefaultWhiteList = new Set([\"global\"]);\nconst placeholderWhitelist = new Set([...placeholderDefaultWhiteList, ...Placeholders]);\nexport const DisablePlaceholderSuffix = \"// disable placeholders\";\n\nexport class PreludeGenerator {\n  constructor(debugNames: ?boolean, uniqueSuffix: ?string) {\n    this.prelude = [];\n    this.memoizedRefs = new Map();\n    this.nameGenerator = new NameGenerator(new Set(), !!debugNames, uniqueSuffix || \"\", \"_$\");\n    this.usesThis = false;\n    this.declaredGlobals = new Set();\n    this.nextInvariantId = 0;\n    this._expressionTemplates = new Map();\n  }\n\n  prelude: Array<BabelNodeStatement>;\n  memoizedRefs: Map<string, BabelNodeIdentifier>;\n  nameGenerator: NameGenerator;\n  usesThis: boolean;\n  declaredGlobals: Set<string>;\n  nextInvariantId: number;\n  _expressionTemplates: Map<string, ({}) => BabelNodeExpression>;\n\n  createNameGenerator(prefix: string): NameGenerator {\n    return new NameGenerator(\n      this.nameGenerator.forbiddenNames,\n      this.nameGenerator.debugNames,\n      this.nameGenerator.uniqueSuffix,\n      prefix\n    );\n  }\n\n  convertStringToMember(str: string): BabelNodeIdentifier | BabelNodeThisExpression | BabelNodeMemberExpression {\n    return str\n      .split(\".\")\n      .map(name => {\n        if (name === \"global\") {\n          return this.memoizeReference(name);\n        } else if (name === \"this\") {\n          return t.thisExpression();\n        } else {\n          return t.identifier(name);\n        }\n      })\n      .reduce((obj, prop) => t.memberExpression(obj, prop));\n  }\n\n  globalReference(key: string, globalScope: boolean = false): BabelNodeIdentifier | BabelNodeMemberExpression {\n    if (globalScope && t.isValidIdentifier(key)) return t.identifier(key);\n    return memberExpressionHelper(this.memoizeReference(\"global\"), key);\n  }\n\n  memoizeReference(key: string): BabelNodeIdentifier {\n    let ref = this.memoizedRefs.get(key);\n    if (ref) return ref;\n\n    let init;\n    if (key.includes(\"(\") || key.includes(\"[\")) {\n      // Horrible but effective hack:\n      // Some internal object have intrinsic names such as\n      //    ([][Symbol.iterator]().__proto__.__proto__)\n      // and\n      //    RegExp.prototype[Symbol.match]\n      // which get turned into a babel node here.\n      // TODO: We should properly parse such a string, and memoize all references in it separately.\n      // Instead, we just turn it into a funky identifier, which Babel seems to accept.\n      init = t.identifier(key);\n    } else if (key === \"global\") {\n      this.usesThis = true;\n      init = t.thisExpression();\n    } else {\n      let i = key.lastIndexOf(\".\");\n      if (i === -1) {\n        init = t.memberExpression(this.memoizeReference(\"global\"), t.identifier(key));\n      } else {\n        init = t.memberExpression(this.memoizeReference(key.substr(0, i)), t.identifier(key.substr(i + 1)));\n      }\n    }\n    ref = t.identifier(this.nameGenerator.generate(key));\n    this.prelude.push(t.variableDeclaration(\"var\", [t.variableDeclarator(ref, init)]));\n    this.memoizedRefs.set(key, ref);\n    return ref;\n  }\n\n  buildExpression(code: string, templateArguments: {}): BabelNodeExpression {\n    let disablePlaceholders = false;\n    const key = code;\n    let template = this._expressionTemplates.get(key);\n    if (template === undefined) {\n      if (code.endsWith(DisablePlaceholderSuffix)) {\n        code = code.substring(0, code.length - DisablePlaceholderSuffix.length);\n        disablePlaceholders = true;\n      }\n\n      template = buildTemplate(code, {\n        placeholderPattern: false,\n        placeholderWhitelist: disablePlaceholders ? placeholderDefaultWhiteList : placeholderWhitelist,\n      });\n\n      this._expressionTemplates.set(key, template);\n    }\n\n    if (code.includes(\"global\"))\n      templateArguments = Object.assign(\n        {\n          global: this.memoizeReference(\"global\"),\n        },\n        templateArguments\n      );\n\n    let result = (template(templateArguments): any).expression;\n    invariant(result !== undefined, \"Code does not represent an expression: \" + code);\n    return result;\n  }\n}\n"],"file":"PreludeGenerator.js"}