{"version":3,"sources":["../../src/utils/HeapInspector.js"],"names":["hasAnyConfigurable","desc","PropertyDescriptor","configurable","AbstractJoinedDescriptor","descriptor1","descriptor2","hasAnyWritable","value","undefined","writable","HeapInspector","constructor","realm","logger","ignoredProperties","Map","_targetIntegrityCommands","getTargetIntegrityCommand","val","command","get","ProxyValue","extensible","$Extensible","BooleanValue","logError","anyWritable","anyConfigurable","propertyBinding","properties","values","descriptor","set","getTargetIntegrityDescriptor","_integrityDescriptors","isLeaf","SymbolValue","AbstractValue","hasIdentifier","$Realm","instantRender","enabled","intrinsicName","startsWith","isIntrinsic","PrimitiveValue","canIgnoreProperty","key","_getIgnoredProperties","has","Set","_canIgnoreProperty","add","targetDescriptor","enumerable","FunctionValue","hasDefaultLength","isCompatibleWith","MOBILE_JSC_VERSION","ConcreteValue","__originalName","To","ToString","ECMAScriptSourceFunctionValue","$Strict","UndefinedValue","$FunctionKind","ObjectValue","originalConstructor","kind","getKind","v","NumberValue","getPropertyValue","name","prototypeBinding","prototypeDesc","Value","isDefaultPrototype","prototype","symbols","size","$Prototype","intrinsics","ObjectPrototype","mightNotBeTrue","foundConstructor","keys","preventExtensions","seal","freeze"],"mappings":";;;;;;;AAWA;;AAEA;;AACA;;AAcA;;AACA;;AACA;;AACA;;;;;;AAIA,SAASA,kBAAT,CAA4BC,IAA5B,EAA8D;AAC5D,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,KAAP;AACD;;AACD,MAAIA,IAAI,YAAYC,+BAApB,EAAwC;AACtC,WAAO,CAAC,CAACD,IAAI,CAACE,YAAd;AACD;;AACD,MAAIF,IAAI,YAAYG,qCAApB,EAA8C;AAC5C,WAAOJ,kBAAkB,CAACC,IAAI,CAACI,WAAN,CAAlB,IAAwCL,kBAAkB,CAACC,IAAI,CAACK,WAAN,CAAjE;AACD;;AACD,0BAAU,KAAV,EAAiB,oCAAjB;AACD;;AAED,SAASC,cAAT,CAAwBN,IAAxB,EAA0D;AACxD,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,KAAP;AACD;;AACD,MAAIA,IAAI,YAAYC,+BAApB,EAAwC;AACtC,WAAOD,IAAI,CAACO,KAAL,KAAeC,SAAf,IAA4B,CAAC,CAACR,IAAI,CAACS,QAA1C;AACD;;AACD,MAAIT,IAAI,YAAYG,qCAApB,EAA8C;AAC5C,WAAOG,cAAc,CAACN,IAAI,CAACI,WAAN,CAAd,IAAoCE,cAAc,CAACN,IAAI,CAACK,WAAN,CAAzD;AACD;;AACD,0BAAU,KAAV,EAAiB,oCAAjB;AACD;;AAEM,MAAMK,aAAN,CAAoB;AACzBC,EAAAA,WAAW,CAACC,KAAD,EAAeC,MAAf,EAA+B;AACxC,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;AACA,SAAKC,wBAAL,GAAgC,IAAID,GAAJ,EAAhC;AACD;;AAODE,EAAAA,yBAAyB,CAACC,GAAD,EAA2C;AAClE,QAAIC,OAAO,GAAG,KAAKH,wBAAL,CAA8BI,GAA9B,CAAkCF,GAAlC,CAAd;;AACA,QAAIC,OAAO,KAAKX,SAAhB,EAA2B;AACzBW,MAAAA,OAAO,GAAG,EAAV;;AACA,UAAID,GAAG,YAAYG,kBAAnB,EAA+B,CAC7B;AACA;AACD,OAHD,MAGO;AACL,YAAIC,UAAU,GAAGJ,GAAG,CAACK,WAArB;;AACA,YAAI,EAAED,UAAU,YAAYE,oBAAxB,CAAJ,EAA2C;AACzC,eAAKX,MAAL,CAAYY,QAAZ,CACEP,GADF,EAEE,wFAFF;AAID,SALD,MAKO,IAAI,CAACI,UAAU,CAACf,KAAhB,EAAuB;AAC5B,cAAImB,WAAW,GAAG,KAAlB;AAAA,cACEC,eAAe,GAAG,KADpB;;AAEA,eAAK,IAAIC,eAAT,IAA4BV,GAAG,CAACW,UAAJ,CAAeC,MAAf,EAA5B,EAAqD;AACnD,gBAAI9B,IAAI,GAAG4B,eAAe,CAACG,UAA3B;AACA,gBAAI/B,IAAI,KAAKQ,SAAb,EAAwB,SAF2B,CAEjB;;AAClC,gBAAIT,kBAAkB,CAACC,IAAD,CAAtB,EAA8B2B,eAAe,GAAG,IAAlB,CAA9B,KACK,IAAIrB,cAAc,CAACN,IAAD,CAAlB,EAA0B0B,WAAW,GAAG,IAAd;AAChC;;AACDP,UAAAA,OAAO,GAAGQ,eAAe,GAAG,mBAAH,GAAyBD,WAAW,GAAG,MAAH,GAAY,QAAzE;AACD;AACF;;AACD,WAAKV,wBAAL,CAA8BgB,GAA9B,CAAkCd,GAAlC,EAAuCC,OAAvC;AACD;;AACD,WAAOA,OAAP;AACD;;AASDc,EAAAA,4BAA4B,CAACf,GAAD,EAAiE;AAC3F,WAAOR,aAAa,CAACwB,qBAAd,CAAoC,KAAKjB,yBAAL,CAA+BC,GAA/B,CAApC,CAAP;AACD;;AAED,SAAOiB,MAAP,CAAcjB,GAAd,EAAmC;AACjC,QAAIA,GAAG,YAAYkB,mBAAnB,EAAgC;AAC9B,aAAO,KAAP;AACD;;AAED,QAAIlB,GAAG,YAAYmB,qBAAnB,EAAkC;AAChC,UAAInB,GAAG,CAACoB,aAAJ,EAAJ,EAAyB;AACvB,eAAO,IAAP;AACD;;AAED,UACEpB,GAAG,CAACqB,MAAJ,CAAWC,aAAX,CAAyBC,OAAzB,IACAvB,GAAG,CAACwB,aAAJ,KAAsBlC,SADtB,IAEAU,GAAG,CAACwB,aAAJ,CAAkBC,UAAlB,CAA6B,UAA7B,CAHF,EAIE;AACA;AACA,eAAO,IAAP;AACD;AACF;;AAED,QAAIzB,GAAG,CAAC0B,WAAJ,EAAJ,EAAuB;AACrB,aAAO,KAAP;AACD;;AAED,WAAO1B,GAAG,YAAY2B,sBAAtB;AACD,GAhFwB,CAkFzB;;;AACAC,EAAAA,iBAAiB,CAAC5B,GAAD,EAAmB6B,GAAnB,EAAyC;AACxD,QAAIf,GAAG,GAAG,KAAKlB,iBAAL,CAAuBM,GAAvB,CAA2BF,GAA3B,CAAV;;AACA,QAAI,CAACc,GAAL,EAAU;AACR,WAAKlB,iBAAL,CAAuBkB,GAAvB,CAA2Bd,GAA3B,EAAiCc,GAAG,GAAG,KAAKgB,qBAAL,CAA2B9B,GAA3B,CAAvC;AACD;;AACD,WAAOc,GAAG,CAACiB,GAAJ,CAAQF,GAAR,CAAP;AACD;;AAEDC,EAAAA,qBAAqB,CAAC9B,GAAD,EAAgC;AACnD,QAAIc,GAAgB,GAAG,IAAIkB,GAAJ,EAAvB;;AACA,SAAK,IAAI,CAACH,GAAD,EAAMnB,eAAN,CAAT,IAAmCV,GAAG,CAACW,UAAvC,EAAmD;AACjD,8BAAUD,eAAV;AACA,UAAI5B,IAAI,GAAG4B,eAAe,CAACG,UAA3B;AACA,UAAI/B,IAAI,KAAKQ,SAAb,EAAwB,SAHyB,CAGf;;AAClC,UAAI,KAAK2C,kBAAL,CAAwBjC,GAAxB,EAA6B6B,GAA7B,EAAkC/C,IAAlC,CAAJ,EAA6CgC,GAAG,CAACoB,GAAJ,CAAQL,GAAR;AAC9C;;AACD,WAAOf,GAAP;AACD;;AAEDmB,EAAAA,kBAAkB,CAACjC,GAAD,EAAmB6B,GAAnB,EAAgC/C,IAAhC,EAA2D;AAC3E,QAAI,EAAEA,IAAI,YAAYC,+BAAlB,CAAJ,EAA2C;AACzC;AACA;AACA,aAAO,KAAP;AACD;;AAED,QAAIoD,gBAAgB,GAAG,KAAKpB,4BAAL,CAAkCf,GAAlC,CAAvB;;AAEA,QAAI,oBAAQ,KAAKN,KAAb,EAAoBM,GAApB,CAAJ,EAA8B;AAC5B,UACE6B,GAAG,KAAK,QAAR,IACA/C,IAAI,CAACS,QAAL,KAAkB4C,gBAAgB,CAAC5C,QADnC,IAEAT,IAAI,CAACsD,UAAL,KAAoB,IAFpB,IAGAtD,IAAI,CAACE,YAAL,KAAsB,IAJxB,EAKE;AACA;AACA,eAAO,IAAP;AACD;AACF,KAVD,MAUO,IAAIgB,GAAG,YAAYqC,qBAAnB,EAAkC;AACvC,UAAIR,GAAG,KAAK,QAAZ,EAAsB;AACpB,YAAI/C,IAAI,CAACO,KAAL,KAAeC,SAAnB,EAA8B;AAC5B,eAAKK,MAAL,CAAYY,QAAZ,CAAqBP,GAArB,EAA0B,+EAA1B,EAD4B,CAE5B;AACD,SAJmB,CAKpB;;;AACA,eACElB,IAAI,CAACS,QAAL,KAAkB,IAAlB,IACAT,IAAI,CAACsD,UAAL,KAAoB,IADpB,IAEAtD,IAAI,CAACE,YAAL,KAAsBmD,gBAAgB,CAACnD,YAFvC,IAGAgB,GAAG,CAACsC,gBAAJ,EAJF;AAMD;;AAED,UAAIT,GAAG,KAAK,MAAZ,EAAoB;AAClB;AACA;AACA;AACA;AACA;AACA,YACE/C,IAAI,CAACO,KAAL,KAAeC,SAAf,IACA,CAAC,KAAKI,KAAL,CAAW6C,gBAAX,CAA4B,KAAK7C,KAAL,CAAW8C,kBAAvC,CADD,IAEA,CAAC,KAAK9C,KAAL,CAAW6C,gBAAX,CAA4B,QAA5B,CAFD,KAGCzD,IAAI,CAACO,KAAL,YAAsB8B,qBAAtB,IACErC,IAAI,CAACO,KAAL,YAAsBoD,qBAAtB,IACCzC,GAAG,CAAC0C,cAAJ,KAAuBpD,SADxB,IAECU,GAAG,CAAC0C,cAAJ,KAAuB,EAFxB,IAGCC,eAAGC,QAAH,CAAY,KAAKlD,KAAjB,EAAwBZ,IAAI,CAACO,KAA7B,MAAwCW,GAAG,CAAC0C,cAPhD,CADF,EAUE,OAAO,KAAP;AACF,eAAO,IAAP;AACD,OAjCsC,CAmCvC;AACA;;;AACA,UAAIb,GAAG,KAAK,WAAR,IAAuBA,GAAG,KAAK,QAAnC,EAA6C;AAC3C,gCAAU7B,GAAG,YAAY6C,qCAAzB;AACA,YACE,CAAC7C,GAAG,CAAC8C,OAAL,IACAhE,IAAI,CAACS,QAAL,MAAmB,CAACS,GAAG,CAAC8C,OAAL,IAAgBX,gBAAgB,CAAC5C,QAApD,CADA,IAEAT,IAAI,CAACsD,UAAL,KAAoB,IAFpB,IAGAtD,IAAI,CAACE,YAAL,KAAsBmD,gBAAgB,CAACnD,YAHvC,IAIAF,IAAI,CAACO,KAAL,YAAsB0D,sBAJtB,IAKA/C,GAAG,CAACgD,aAAJ,KAAsB,QANxB,EAQE,OAAO,IAAP;AACH,OAhDsC,CAkDvC;;;AACA,UAAInB,GAAG,KAAK,WAAZ,EAAyB;AACvB,YACE/C,IAAI,CAACE,YAAL,KAAsB,IAAtB,IACAF,IAAI,CAACsD,UAAL,KAAoB,IADpB,IAEAtD,IAAI,CAACS,QAAL,KAAkB4C,gBAAgB,CAAC5C,QAFnC,IAGAT,IAAI,CAACO,KAAL,YAAsB4D,mBAHtB,IAIAnE,IAAI,CAACO,KAAL,CAAW6D,mBAAX,KAAmClD,GALrC,EAME;AACA,iBAAO,IAAP;AACD;AACF;AACF,KA9DM,MA8DA;AACL,UAAImD,IAAI,GAAGnD,GAAG,CAACoD,OAAJ,EAAX;;AACA,cAAQD,IAAR;AACE,aAAK,QAAL;AACE,cACEtB,GAAG,KAAK,WAAR,IACA/C,IAAI,CAACS,QAAL,KAAkB4C,gBAAgB,CAAC5C,QADnC,IAEAT,IAAI,CAACsD,UAAL,KAAoB,IAFpB,IAGAtD,IAAI,CAACE,YAAL,KAAsB,IAJxB,EAKE;AACA;AACA,gBAAIqE,CAAC,GAAGvE,IAAI,CAACO,KAAb;AACA,mBAAOgE,CAAC,YAAYC,mBAAb,IAA4BD,CAAC,CAAChE,KAAF,KAAY,CAA/C;AACD;;AACD;;AACF;AACE;AAdJ;AAgBD;;AAED,QAAIwC,GAAG,KAAK,aAAZ,EAA2B;AACzB,UACE/C,IAAI,CAACE,YAAL,KAAsBmD,gBAAgB,CAACnD,YAAvC,IACAF,IAAI,CAACsD,UAAL,KAAoB,IADpB,IAEAtD,IAAI,CAACS,QAAL,KAAkB4C,gBAAgB,CAAC5C,QAFnC,IAGAT,IAAI,CAACO,KAAL,KAAeW,GAAG,CAACkD,mBAJrB,EAME,OAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACD;;AAED,SAAOK,gBAAP,CAAwBvD,GAAxB,EAA0CwD,IAA1C,EAAsE;AACpE,QAAIC,gBAAgB,GAAGzD,GAAG,CAACW,UAAJ,CAAeT,GAAf,CAAmBsD,IAAnB,CAAvB;AACA,QAAIC,gBAAgB,KAAKnE,SAAzB,EAAoC,OAAOA,SAAP;AACpC,QAAIoE,aAAa,GAAGD,gBAAgB,CAAC5C,UAArC;AACA,QAAI6C,aAAa,KAAKpE,SAAtB,EAAiC,OAAOA,SAAP;AACjC,4BAAUoE,aAAa,YAAY3E,+BAAnC;AACA,4BAAU2E,aAAa,CAACrE,KAAd,KAAwBC,SAAxB,IAAqCoE,aAAa,CAACrE,KAAd,YAA+BsE,aAA9E;AACA,WAAOD,aAAa,CAACrE,KAArB;AACD;;AAEDuE,EAAAA,kBAAkB,CAACC,SAAD,EAAkC;AAClD,QACEA,SAAS,CAACC,OAAV,CAAkBC,IAAlB,KAA2B,CAA3B,IACAF,SAAS,CAACG,UAAV,KAAyB,KAAKtE,KAAL,CAAWuE,UAAX,CAAsBC,eAD/C,IAEAL,SAAS,CAACxD,WAAV,CAAsB8D,cAAtB,EAHF,EAIE;AACA,aAAO,KAAP;AACD;;AACD,QAAIC,gBAAgB,GAAG,KAAvB;;AACA,SAAK,IAAIZ,IAAT,IAAiBK,SAAS,CAAClD,UAAV,CAAqB0D,IAArB,EAAjB,EACE,IAAIb,IAAI,KAAK,aAAT,IAA0BhE,aAAa,CAAC+D,gBAAd,CAA+BM,SAA/B,EAA0CL,IAA1C,MAAoDK,SAAS,CAACX,mBAA5F,EACEkB,gBAAgB,GAAG,IAAnB,CADF,KAEK,OAAO,KAAP;;AACP,WAAOA,gBAAP;AACD;;AAhPwB;;;;gBAAd5E,a,2BA4CoB;AAC7B,MAAI;AAAED,IAAAA,QAAQ,EAAE,IAAZ;AAAkBP,IAAAA,YAAY,EAAE;AAAhC,GADyB;AAE7BsF,EAAAA,iBAAiB,EAAE;AAAE/E,IAAAA,QAAQ,EAAE,IAAZ;AAAkBP,IAAAA,YAAY,EAAE;AAAhC,GAFU;AAG7BuF,EAAAA,IAAI,EAAE;AAAEhF,IAAAA,QAAQ,EAAE,IAAZ;AAAkBP,IAAAA,YAAY,EAAE;AAAhC,GAHuB;AAI7BwF,EAAAA,MAAM,EAAE;AAAEjF,IAAAA,QAAQ,EAAE,KAAZ;AAAmBP,IAAAA,YAAY,EAAE;AAAjC;AAJqB,C","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { Realm } from \"../realm.js\";\nimport type { Descriptor } from \"../types.js\";\nimport { IsArray } from \"../methods/index.js\";\nimport {\n  AbstractValue,\n  BooleanValue,\n  ConcreteValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  NumberValue,\n  ObjectValue,\n  PrimitiveValue,\n  ProxyValue,\n  SymbolValue,\n  UndefinedValue,\n  Value,\n} from \"../values/index.js\";\nimport { To } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport { Logger } from \"./logger.js\";\nimport { PropertyDescriptor, AbstractJoinedDescriptor } from \"../descriptors.js\";\n\ntype TargetIntegrityCommand = \"freeze\" | \"seal\" | \"preventExtensions\" | \"\";\n\nfunction hasAnyConfigurable(desc: void | Descriptor): boolean {\n  if (!desc) {\n    return false;\n  }\n  if (desc instanceof PropertyDescriptor) {\n    return !!desc.configurable;\n  }\n  if (desc instanceof AbstractJoinedDescriptor) {\n    return hasAnyConfigurable(desc.descriptor1) || hasAnyConfigurable(desc.descriptor2);\n  }\n  invariant(false, \"internal slots aren't covered here\");\n}\n\nfunction hasAnyWritable(desc: void | Descriptor): boolean {\n  if (!desc) {\n    return false;\n  }\n  if (desc instanceof PropertyDescriptor) {\n    return desc.value !== undefined && !!desc.writable;\n  }\n  if (desc instanceof AbstractJoinedDescriptor) {\n    return hasAnyWritable(desc.descriptor1) || hasAnyWritable(desc.descriptor2);\n  }\n  invariant(false, \"internal slots aren't covered here\");\n}\n\nexport class HeapInspector {\n  constructor(realm: Realm, logger: Logger) {\n    this.realm = realm;\n    this.logger = logger;\n    this.ignoredProperties = new Map();\n    this._targetIntegrityCommands = new Map();\n  }\n\n  realm: Realm;\n  logger: Logger;\n  ignoredProperties: Map<ObjectValue, Set<string>>;\n  _targetIntegrityCommands: Map<ObjectValue, TargetIntegrityCommand>;\n\n  getTargetIntegrityCommand(val: ObjectValue): TargetIntegrityCommand {\n    let command = this._targetIntegrityCommands.get(val);\n    if (command === undefined) {\n      command = \"\";\n      if (val instanceof ProxyValue) {\n        // proxies don't participate in regular object freezing/sealing,\n        // only their underlying proxied objects do\n      } else {\n        let extensible = val.$Extensible;\n        if (!(extensible instanceof BooleanValue)) {\n          this.logger.logError(\n            val,\n            \"Object that might or might not be sealed or frozen are not supported in residual heap.\"\n          );\n        } else if (!extensible.value) {\n          let anyWritable = false,\n            anyConfigurable = false;\n          for (let propertyBinding of val.properties.values()) {\n            let desc = propertyBinding.descriptor;\n            if (desc === undefined) continue; //deleted\n            if (hasAnyConfigurable(desc)) anyConfigurable = true;\n            else if (hasAnyWritable(desc)) anyWritable = true;\n          }\n          command = anyConfigurable ? \"preventExtensions\" : anyWritable ? \"seal\" : \"freeze\";\n        }\n      }\n      this._targetIntegrityCommands.set(val, command);\n    }\n    return command;\n  }\n\n  static _integrityDescriptors = {\n    \"\": { writable: true, configurable: true },\n    preventExtensions: { writable: true, configurable: true },\n    seal: { writable: true, configurable: false },\n    freeze: { writable: false, configurable: false },\n  };\n\n  getTargetIntegrityDescriptor(val: ObjectValue): { writable: boolean, configurable: boolean } {\n    return HeapInspector._integrityDescriptors[this.getTargetIntegrityCommand(val)];\n  }\n\n  static isLeaf(val: Value): boolean {\n    if (val instanceof SymbolValue) {\n      return false;\n    }\n\n    if (val instanceof AbstractValue) {\n      if (val.hasIdentifier()) {\n        return true;\n      }\n\n      if (\n        val.$Realm.instantRender.enabled &&\n        val.intrinsicName !== undefined &&\n        val.intrinsicName.startsWith(\"__native\")\n      ) {\n        // Never factor out multiple occurrences of InstantRender's __native... abstract functions.\n        return true;\n      }\n    }\n\n    if (val.isIntrinsic()) {\n      return false;\n    }\n\n    return val instanceof PrimitiveValue;\n  }\n\n  // Object properties which have the default value can be ignored by the serializer.\n  canIgnoreProperty(val: ObjectValue, key: string): boolean {\n    let set = this.ignoredProperties.get(val);\n    if (!set) {\n      this.ignoredProperties.set(val, (set = this._getIgnoredProperties(val)));\n    }\n    return set.has(key);\n  }\n\n  _getIgnoredProperties(val: ObjectValue): Set<string> {\n    let set: Set<string> = new Set();\n    for (let [key, propertyBinding] of val.properties) {\n      invariant(propertyBinding);\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; //deleted\n      if (this._canIgnoreProperty(val, key, desc)) set.add(key);\n    }\n    return set;\n  }\n\n  _canIgnoreProperty(val: ObjectValue, key: string, desc: Descriptor): boolean {\n    if (!(desc instanceof PropertyDescriptor)) {\n      // If we have a joined descriptor, there is at least one variant that isn't the same as\n      // the target descriptor. Since the two descriptors won't be equal.\n      return false;\n    }\n\n    let targetDescriptor = this.getTargetIntegrityDescriptor(val);\n\n    if (IsArray(this.realm, val)) {\n      if (\n        key === \"length\" &&\n        desc.writable === targetDescriptor.writable &&\n        desc.enumerable !== true &&\n        desc.configurable !== true\n      ) {\n        // length property has the correct descriptor values\n        return true;\n      }\n    } else if (val instanceof FunctionValue) {\n      if (key === \"length\") {\n        if (desc.value === undefined) {\n          this.logger.logError(val, \"Functions with length accessor properties are not supported in residual heap.\");\n          // Rationale: .bind() would call the accessor, which might throw, mutate state, or do whatever...\n        }\n        // length property will be inferred already by the amount of parameters\n        return (\n          desc.writable !== true &&\n          desc.enumerable !== true &&\n          desc.configurable === targetDescriptor.configurable &&\n          val.hasDefaultLength()\n        );\n      }\n\n      if (key === \"name\") {\n        // TODO #474: Make sure that we retain original function names. Or set name property.\n        // Or ensure that nothing references the name property.\n        // NOTE: with some old runtimes notably JSC, function names are not configurable\n        // For now don't ignore the property if it is different from the function name.\n        // I.e. if it was set explicitly in the code, retain it.\n        if (\n          desc.value !== undefined &&\n          !this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION) &&\n          !this.realm.isCompatibleWith(\"mobile\") &&\n          (desc.value instanceof AbstractValue ||\n            (desc.value instanceof ConcreteValue &&\n              val.__originalName !== undefined &&\n              val.__originalName !== \"\" &&\n              To.ToString(this.realm, desc.value) !== val.__originalName))\n        )\n          return false;\n        return true;\n      }\n\n      // Properties `caller` and `arguments` are added to normal functions in non-strict mode to prevent TypeErrors.\n      // Because they are autogenerated, they should be ignored.\n      if (key === \"arguments\" || key === \"caller\") {\n        invariant(val instanceof ECMAScriptSourceFunctionValue);\n        if (\n          !val.$Strict &&\n          desc.writable === (!val.$Strict && targetDescriptor.writable) &&\n          desc.enumerable !== true &&\n          desc.configurable === targetDescriptor.configurable &&\n          desc.value instanceof UndefinedValue &&\n          val.$FunctionKind === \"normal\"\n        )\n          return true;\n      }\n\n      // ignore the `prototype` property when it's the right one\n      if (key === \"prototype\") {\n        if (\n          desc.configurable !== true &&\n          desc.enumerable !== true &&\n          desc.writable === targetDescriptor.writable &&\n          desc.value instanceof ObjectValue &&\n          desc.value.originalConstructor === val\n        ) {\n          return true;\n        }\n      }\n    } else {\n      let kind = val.getKind();\n      switch (kind) {\n        case \"RegExp\":\n          if (\n            key === \"lastIndex\" &&\n            desc.writable === targetDescriptor.writable &&\n            desc.enumerable !== true &&\n            desc.configurable !== true\n          ) {\n            // length property has the correct descriptor values\n            let v = desc.value;\n            return v instanceof NumberValue && v.value === 0;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (key === \"constructor\") {\n      if (\n        desc.configurable === targetDescriptor.configurable &&\n        desc.enumerable !== true &&\n        desc.writable === targetDescriptor.writable &&\n        desc.value === val.originalConstructor\n      )\n        return true;\n    }\n\n    return false;\n  }\n\n  static getPropertyValue(val: ObjectValue, name: string): void | Value {\n    let prototypeBinding = val.properties.get(name);\n    if (prototypeBinding === undefined) return undefined;\n    let prototypeDesc = prototypeBinding.descriptor;\n    if (prototypeDesc === undefined) return undefined;\n    invariant(prototypeDesc instanceof PropertyDescriptor);\n    invariant(prototypeDesc.value === undefined || prototypeDesc.value instanceof Value);\n    return prototypeDesc.value;\n  }\n\n  isDefaultPrototype(prototype: ObjectValue): boolean {\n    if (\n      prototype.symbols.size !== 0 ||\n      prototype.$Prototype !== this.realm.intrinsics.ObjectPrototype ||\n      prototype.$Extensible.mightNotBeTrue()\n    ) {\n      return false;\n    }\n    let foundConstructor = false;\n    for (let name of prototype.properties.keys())\n      if (name === \"constructor\" && HeapInspector.getPropertyValue(prototype, name) === prototype.originalConstructor)\n        foundConstructor = true;\n      else return false;\n    return foundConstructor;\n  }\n}\n"],"file":"HeapInspector.js"}