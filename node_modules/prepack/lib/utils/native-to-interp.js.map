{"version":3,"sources":["../../src/utils/native-to-interp.js"],"names":["convert","realm","val","NumberValue","StringValue","intrinsics","null","undefined","true","false","Array","isArray","Create","CreateArrayFromList","map","item","obj","ObjectValue","ObjectPrototype","key","$DefineOwnProperty","PropertyDescriptor","enumerable","writable","configurable","value","FatalError"],"mappings":";;;;;;;AAYA;;AACA;;AACA;;AACA;;AAfA;;;;;;;;AAiBe,SAASA,OAAT,CAAiBC,KAAjB,EAA+BC,GAA/B,EAAgD;AAC7D,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAO,IAAIC,kBAAJ,CAAgBF,KAAhB,EAAuBC,GAAvB,CAAP;AACD,GAFD,MAEO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClC,WAAO,IAAIE,kBAAJ,CAAgBH,KAAhB,EAAuBC,GAAvB,CAAP;AACD,GAFM,MAEA,IAAIA,GAAG,KAAK,IAAZ,EAAkB;AACvB,WAAOD,KAAK,CAACI,UAAN,CAAiBC,IAAxB;AACD,GAFM,MAEA,IAAIJ,GAAG,KAAKK,SAAZ,EAAuB;AAC5B,WAAON,KAAK,CAACI,UAAN,CAAiBE,SAAxB;AACD,GAFM,MAEA,IAAIL,GAAG,KAAK,IAAZ,EAAkB;AACvB,WAAOD,KAAK,CAACI,UAAN,CAAiBG,IAAxB;AACD,GAFM,MAEA,IAAIN,GAAG,KAAK,KAAZ,EAAmB;AACxB,WAAOD,KAAK,CAACI,UAAN,CAAiBI,KAAxB;AACD,GAFM,MAEA,IAAIC,KAAK,CAACC,OAAN,CAAcT,GAAd,CAAJ,EAAwB;AAC7B,WAAOU,mBAAOC,mBAAP,CAA2BZ,KAA3B,EAAkCC,GAAG,CAACY,GAAJ,CAAQC,IAAI,IAAIf,OAAO,CAACC,KAAD,EAAQc,IAAR,CAAvB,CAAlC,CAAP;AACD,GAFM,MAEA,IAAI,OAAOb,GAAP,KAAe,QAAnB,EAA6B;AAClC,QAAIc,GAAG,GAAG,IAAIC,kBAAJ,CAAgBhB,KAAhB,EAAuBA,KAAK,CAACI,UAAN,CAAiBa,eAAxC,CAAV;;AAEA,SAAK,IAAIC,GAAT,IAAgBjB,GAAhB,EAAqB;AACnBc,MAAAA,GAAG,CAACI,kBAAJ,CACED,GADF,EAEE,IAAIE,+BAAJ,CAAuB;AACrBC,QAAAA,UAAU,EAAE,IADS;AAErBC,QAAAA,QAAQ,EAAE,IAFW;AAGrBC,QAAAA,YAAY,EAAE,IAHO;AAIrBC,QAAAA,KAAK,EAAEzB,OAAO,CAACC,KAAD,EAAQC,GAAG,CAACiB,GAAD,CAAX;AAJO,OAAvB,CAFF;AASD;;AAED,WAAOH,GAAP;AACD,GAhBM,MAgBA;AACL,UAAM,IAAIU,kBAAJ,CAAe,mCAAmC,OAAOxB,GAAzD,CAAN;AACD;AACF","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport { FatalError } from \"../errors.js\";\nimport { Value, StringValue, NumberValue, ObjectValue } from \"../values/index.js\";\nimport { Create } from \"../singletons.js\";\nimport { PropertyDescriptor } from \"../descriptors.js\";\n\nexport default function convert(realm: Realm, val: any): Value {\n  if (typeof val === \"number\") {\n    return new NumberValue(realm, val);\n  } else if (typeof val === \"string\") {\n    return new StringValue(realm, val);\n  } else if (val === null) {\n    return realm.intrinsics.null;\n  } else if (val === undefined) {\n    return realm.intrinsics.undefined;\n  } else if (val === true) {\n    return realm.intrinsics.true;\n  } else if (val === false) {\n    return realm.intrinsics.false;\n  } else if (Array.isArray(val)) {\n    return Create.CreateArrayFromList(realm, val.map(item => convert(realm, item)));\n  } else if (typeof val === \"object\") {\n    let obj = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n\n    for (let key in val) {\n      obj.$DefineOwnProperty(\n        key,\n        new PropertyDescriptor({\n          enumerable: true,\n          writable: true,\n          configurable: true,\n          value: convert(realm, val[key]),\n        })\n      );\n    }\n\n    return obj;\n  } else {\n    throw new FatalError(\"need to convert value of type \" + typeof val);\n  }\n}\n"],"file":"native-to-interp.js"}