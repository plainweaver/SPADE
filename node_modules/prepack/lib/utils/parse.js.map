{"version":3,"sources":["../../src/utils/parse.js"],"names":["realm","code","filename","sourceType","startLine","plugins","react","enabled","push","stripFlow","ast","node","loc","source","e","SyntaxError","referenceErrors","error","some","msg","message","indexOf","intrinsics","ReferenceError","StringValue","throwIfNotConcreteObject","$ErrorData","locationData","sourceCode","stackDecorated","ThrowCompletion"],"mappings":";;;;;;;AAWA;;AAGA;;AACA;;AACA;;AACA;;AACA;;;;AAlBA;;;;;;;;;AASA;AAYe,kBACbA,KADa,EAEbC,IAFa,EAGbC,QAHa,EAIbC,UAAsB,GAAG,QAJZ,EAKbC,SAAiB,GAAG,CALP,EAME;AACf,MAAI;AACF,QAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;;AACA,QAAIL,KAAK,CAACM,KAAN,CAAYC,OAAhB,EAAyB;AACvBF,MAAAA,OAAO,CAACG,IAAR,CAAa,KAAb;AACD;;AACD,QAAIR,KAAK,CAACS,SAAV,EAAqB;AACnBJ,MAAAA,OAAO,CAACG,IAAR,CAAa,MAAb;AACD;;AACD,QAAIE,GAAG,GAAG,mBAAMT,IAAN,EAAY;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,UAAZ;AAAwBC,MAAAA,SAAxB;AAAmCC,MAAAA;AAAnC,KAAZ,CAAV;AACA,+BAAaK,GAAb,EAAkBC,IAAI,IAAI;AACxB,8BAAUA,IAAI,CAACC,GAAf;AACAD,MAAAA,IAAI,CAACC,GAAL,CAASC,MAAT,GAAkBX,QAAlB;AACA,aAAO,KAAP;AACD,KAJD;AAKA,WAAOQ,GAAP;AACD,GAfD,CAeE,OAAOI,CAAP,EAAU;AACV,QAAIA,CAAC,YAAYC,WAAjB,EAA8B;AAC5B;AACA;AACA,UAAIC,eAAe,GAAG,CACpB,6CADoB,EAEpB,4CAFoB,EAGpB,iDAHoB,CAAtB;AAMA,UAAIC,KAAJ;;AACA,UAAID,eAAe,CAACE,IAAhB,CAAqBC,GAAG,IAAIL,CAAC,CAACM,OAAF,CAAUC,OAAV,CAAkBF,GAAlB,KAA0B,CAAtD,CAAJ,EAA8D;AAC5DF,QAAAA,KAAK,GAAG,0BAAUjB,KAAV,EAAiBA,KAAK,CAACsB,UAAN,CAAiBC,cAAlC,EAAkD,CAAC,IAAIC,kBAAJ,CAAgBxB,KAAhB,EAAuBc,CAAC,CAACM,OAAzB,CAAD,CAAlD,CAAR;AACD,OAFD,MAEO;AACLH,QAAAA,KAAK,GAAG,0BAAUjB,KAAV,EAAiBA,KAAK,CAACsB,UAAN,CAAiBP,WAAlC,EAA+C,CAAC,IAAIS,kBAAJ,CAAgBxB,KAAhB,EAAuBc,CAAC,CAACM,OAAzB,CAAD,CAA/C,CAAR;AACD;;AACDH,MAAAA,KAAK,GAAGA,KAAK,CAACQ,wBAAN,EAAR,CAf4B,CAgB5B;AACA;AACA;;AACA,8BAAUR,KAAK,CAACS,UAAhB;AACAT,MAAAA,KAAK,CAACS,UAAN,CAAiBC,YAAjB,GAAgC;AAC9BzB,QAAAA,QAAQ,EAAEA,QADoB;AAE9B0B,QAAAA,UAAU,EAAE3B,IAFkB;AAG9BW,QAAAA,GAAG,EAAEE,CAAC,CAACF,GAHuB;AAI9BiB,QAAAA,cAAc,EAAE;AAJc,OAAhC;AAMA,YAAM,IAAIC,4BAAJ,CAAoBb,KAApB,EAA2BH,CAAC,CAACF,GAA7B,CAAN;AACD,KA3BD,MA2BO;AACL,YAAME,CAAN;AACD;AACF;AACF","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport invariant from \"../invariant.js\";\nimport type { SourceType } from \"../types.js\";\nimport type { Realm } from \"../realm.js\";\nimport { ThrowCompletion } from \"../completions.js\";\nimport { StringValue } from \"../values/index.js\";\nimport { Construct } from \"../methods/construct.js\";\nimport traverseFast from \"./traverse-fast.js\";\nimport { parse } from \"@babel/parser\";\nimport type { BabelNodeFile } from \"@babel/types\";\n\nexport default function(\n  realm: Realm,\n  code: string,\n  filename: string,\n  sourceType: SourceType = \"script\",\n  startLine: number = 1\n): BabelNodeFile {\n  try {\n    let plugins = [\"objectRestSpread\"];\n    if (realm.react.enabled) {\n      plugins.push(\"jsx\");\n    }\n    if (realm.stripFlow) {\n      plugins.push(\"flow\");\n    }\n    let ast = parse(code, { filename, sourceType, startLine, plugins });\n    traverseFast(ast, node => {\n      invariant(node.loc);\n      node.loc.source = filename;\n      return false;\n    });\n    return ast;\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      // Babel reports all errors as syntax errors, even if a ReferenceError should be thrown.\n      // What we do here is a totally robust way to address that issue.\n      let referenceErrors = [\n        \"Invalid left-hand side in postfix operation\",\n        \"Invalid left-hand side in prefix operation\",\n        \"Invalid left-hand side in assignment expression\",\n      ];\n\n      let error;\n      if (referenceErrors.some(msg => e.message.indexOf(msg) >= 0)) {\n        error = Construct(realm, realm.intrinsics.ReferenceError, [new StringValue(realm, e.message)]);\n      } else {\n        error = Construct(realm, realm.intrinsics.SyntaxError, [new StringValue(realm, e.message)]);\n      }\n      error = error.throwIfNotConcreteObject();\n      // These constructors are currently guaranteed to produce an object with\n      // built-in error data. Append location information about the syntax error\n      // and the source code to it so that we can use it to print nicer errors.\n      invariant(error.$ErrorData);\n      error.$ErrorData.locationData = {\n        filename: filename,\n        sourceCode: code,\n        loc: e.loc,\n        stackDecorated: false,\n      };\n      throw new ThrowCompletion(error, e.loc);\n    } else {\n      throw e;\n    }\n  }\n}\n"],"file":"parse.js"}