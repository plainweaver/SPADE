{"version":3,"sources":["../../src/utils/DebugReproPackager.js"],"names":["DebugReproPackager","constructor","_reproZip","_generateZip","reproArguments","reproFileNames","reproFilePath","runtimeDir","reproScriptArguments","map","a","join","reproScriptSourceFiles","f","path","basename","file","data","generate","base64","compression","fs","writeFileSync","console","log","generateDebugRepro","shouldExitWithError","sourceFiles","sourceMaps","externalPrepackPath","undefined","process","exit","content","readFileSync","err","error","includes","relative","absolute","yarnRuntime","yarnCommand","resolve","cwd","child_process","spawnSync","__dirname","unzipRuntime","unzipCommand","buffer","prepackContent"],"mappings":";;;;;;;AAaA;;AACA;;AACA;;AACA;;AACA;;;;AAjBA;;;;;;;;;AASA;;AAEA;AAQO,MAAMA,kBAAN,CAAyB;AAC9BC,EAAAA,WAAW,GAAG;AACZ,SAAKC,SAAL,GAAiB,uBAAjB;AACA;AACD;;AAIDC,EAAAA,YAAY,CACVC,cADU,EAEVC,cAFU,EAGVC,aAHU,EAIVC,UAJU,EAKJ;AACN;AACA,QAAIC,oBAAoB,GAAI,oBAAmBJ,cAAc,CAACK,GAAf,CAAmBC,CAAC,IAAK,GAAEA,CAAE,EAA7B,EAAgCC,IAAhC,CAAqC,oBAArC,CAA2D,EAA1G;AACA,QAAIC,sBAAsB,GAAI,sBAAqBP,cAAc,CAC9DI,GADgD,CAC5CI,CAAC,IAAK,GAAEC,cAAKC,QAAL,CAAcF,CAAd,CAAiB,EADmB,EAEhDF,IAFgD,CAE3C,sBAF2C,CAEnB,EAFhC,CAHM,CAON;AACA;AACA;AACA;;AACA,SAAKT,SAAL,CAAec,IAAf,CACE,UADF,EAEG;;;+CAGwCT,UAAW;2BAC/BC,oBAAqB;6BACnBI,sBAAuB;;OAPhD;;AAWA,UAAMK,IAAI,GAAG,KAAKf,SAAL,CAAegB,QAAf,CAAwB;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,WAAW,EAAE;AAA9B,KAAxB,CAAb;;AACA,QAAId,aAAJ,EAAmB;AACjBe,kBAAGC,aAAH,CAAiBhB,aAAjB,EAAgCW,IAAhC,EAAsC,QAAtC;;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAa,0BAAyBlB,aAAc,EAApD;AACD;AACF,GAxC6B,CA0C9B;;;AACAmB,EAAAA,kBAAkB,CAChBC,mBADgB,EAEhBC,WAFgB,EAGhBC,UAHgB,EAIhBtB,aAJgB,EAKhBD,cALgB,EAMhBD,cANgB,EAOhByB,mBAPgB,EAQV;AACN,QAAIvB,aAAa,KAAKwB,SAAtB,EAAiCC,OAAO,CAACC,IAAR,CAAa,CAAb,EAD3B,CAGN;;AACA,SAAK,IAAIhB,IAAT,IAAiBX,cAAjB,EAAiC;AAC/B,UAAI;AACF,YAAI4B,OAAO,GAAGZ,YAAGa,YAAH,CAAgBlB,IAAhB,EAAsB,MAAtB,CAAd;;AACA,aAAKd,SAAL,CAAec,IAAf,CAAoBF,cAAKC,QAAL,CAAcC,IAAd,CAApB,EAAyCiB,OAAzC;AACD,OAHD,CAGE,OAAOE,GAAP,EAAY;AACZZ,QAAAA,OAAO,CAACa,KAAR,CAAe,4BAA2BD,GAAI,EAA9C;AACAJ,QAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;AACF,KAZK,CAcN;;;AACA,SAAK,IAAIvB,GAAT,IAAgBmB,UAAhB,EAA4B;AAC1B,UAAI;AACF,YAAIK,OAAO,GAAGZ,YAAGa,YAAH,CAAgBzB,GAAhB,EAAqB,MAArB,CAAd;;AACA,aAAKP,SAAL,CAAec,IAAf,CAAoBF,cAAKC,QAAL,CAAcN,GAAd,CAApB,EAAwCwB,OAAxC;AACD,OAHD,CAGE,OAAOE,GAAP,EAAY;AACZZ,QAAAA,OAAO,CAACa,KAAR,CAAe,4BAA2BD,GAAI,EAA9C;AACAJ,QAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;AACF,KAvBK,CAyBN;;;AACA,SAAK,IAAIhB,IAAT,IAAiBW,WAAjB,EAA8B;AAC5B,UAAI;AACF;AACA,YAAI,CAACtB,cAAc,CAACgC,QAAf,CAAwBrB,IAAI,CAACsB,QAA7B,CAAL,EAA6C;AAC3C,cAAIL,OAAO,GAAGZ,YAAGa,YAAH,CAAgBlB,IAAI,CAACuB,QAArB,EAA+B,MAA/B,CAAd;;AACA,eAAKrC,SAAL,CAAec,IAAf,CAAoBA,IAAI,CAACsB,QAAzB,EAAmCL,OAAnC;AACD;AACF,OAND,CAME,OAAOE,GAAP,EAAY;AACZZ,QAAAA,OAAO,CAACa,KAAR,CAAe,8BAA6BD,GAAI,iBAAhD;AACD;AACF,KApCK,CAsCN;;;AACA,QAAIN,mBAAmB,KAAKC,SAA5B,EAAuC;AACrC;AACA;AACA;AACA,UAAIU,WAAW,GAAG,MAAlB;AACA,UAAIC,WAAW,GAAG,CAAC,MAAD,EAAS,YAAT,EAAuB3B,cAAK4B,OAAL,CAAaX,OAAO,CAACY,GAAR,EAAb,EAA4B,qBAA5B,CAAvB,CAAlB;;AACAC,6BAAcC,SAAd,CAAwBL,WAAxB,EAAqCC,WAArC,EAAkD;AAAEE,QAAAA,GAAG,EAAEG;AAAP,OAAlD,EANqC,CAOrC;AACA;;;AACA,UAAIC,YAAY,GAAG,KAAnB;AACA,UAAIC,YAAY,GAAG,CAAC,MAAD,EAASlC,cAAK4B,OAAL,CAAc,GAAd,EAAkB,qBAAlB,CAAT,CAAnB;;AACAE,6BAAcC,SAAd,CAAwBE,YAAxB,EAAsCC,YAAtC,EAXqC,CAYrC;AACA;;;AACA,2BAAOlC,cAAK4B,OAAL,CAAa,GAAb,EAAkB,SAAlB,CAAP,EAAqC,CAACP,GAAD,EAAMc,MAAN,KAAiB;AACpD,YAAId,GAAJ,EAAS;AACPZ,UAAAA,OAAO,CAACa,KAAR,CAAe,yBAAwBD,GAAI,EAA3C;AACAJ,UAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AAED,aAAK9B,SAAL,CAAec,IAAf,CAAoB,4BAApB,EAAkDiC,MAAlD;;AACA,aAAK9C,YAAL,CAAkBC,cAAlB,EAAkCC,cAAlC,EAAkDC,aAAlD,EAAiE,KAAjE;;AAEA,YAAIoB,mBAAJ,EAAyBK,OAAO,CAACC,IAAR,CAAa,CAAb;AAC1B,OAVD;AAWD,KAzBD,MAyBO;AACL,UAAI;AACF,YAAIkB,cAAc,GAAG7B,YAAGa,YAAH,CAAgBL,mBAAhB,CAArB;;AACA,aAAK3B,SAAL,CAAec,IAAf,CAAoB,4BAApB,EAAkDkC,cAAlD;;AACA,aAAK/C,YAAL,CAAkBC,cAAlB,EAAkCC,cAAlC,EAAkDC,aAAlD,EAAiE,KAAjE;AACD,OAJD,CAIE,OAAO6B,GAAP,EAAY;AACZZ,QAAAA,OAAO,CAACa,KAAR,CAAe,0CAAyCD,GAAI,EAA5D;AACAJ,QAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AACD,UAAIN,mBAAJ,EAAyBK,OAAO,CAACC,IAAR,CAAa,CAAb;AAC1B;AACF;;AA9H6B","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow-strict */\n\n/* eslint-disable no-shadow */\n\nimport zipFactory from \"node-zip\";\nimport zipdir from \"zip-dir\";\nimport path from \"path\";\nimport child_process from \"child_process\";\nimport fs from \"fs\";\n\nexport class DebugReproPackager {\n  constructor() {\n    this._reproZip = zipFactory();\n    return;\n  }\n\n  _reproZip: zipFactory;\n\n  _generateZip(\n    reproArguments: Array<string>,\n    reproFileNames: Array<string>,\n    reproFilePath: string,\n    runtimeDir: string\n  ): void {\n    // Programatically assemble parameters to debugger.\n    let reproScriptArguments = `prepackArguments=${reproArguments.map(a => `${a}`).join(\"&prepackArguments=\")}`;\n    let reproScriptSourceFiles = `sourceFiles=$(pwd)/${reproFileNames\n      .map(f => `${path.basename(f)}`)\n      .join(\"&sourceFiles=$(pwd)/\")}`;\n\n    // Generating script that `yarn install`s prepack dependencies.\n    // Then assembles a Nuclide deeplink that reflects the copy of Prepack in the package,\n    // the prepack arguments that this run was started with, and the input files being prepacked.\n    // The link is then called to open the Nuclide debugger.\n    this._reproZip.file(\n      \"repro.sh\",\n      `#!/bin/bash\n      unzip prepack-runtime-bundle.zip\n      yarn install\n      PREPACK_RUNTIME=\"prepackRuntime=$(pwd)/${runtimeDir}/prepack-cli.js\"\n      PREPACK_ARGUMENTS=\"${reproScriptArguments}\"\n      PREPACK_SOURCEFILES=\"${reproScriptSourceFiles}\"\n      atom \\\"atom://nuclide/prepack-debugger?$PREPACK_SOURCEFILES&$PREPACK_RUNTIME&$PREPACK_ARGUMENTS\\\"\n      `\n    );\n    const data = this._reproZip.generate({ base64: false, compression: \"DEFLATE\" });\n    if (reproFilePath) {\n      fs.writeFileSync(reproFilePath, data, \"binary\");\n      console.log(`ReproBundle written to ${reproFilePath}`);\n    }\n  }\n\n  // Returns true on success, false on failure\n  generateDebugRepro(\n    shouldExitWithError: boolean,\n    sourceFiles: Array<{ absolute: string, relative: string }>,\n    sourceMaps: Array<string>,\n    reproFilePath: string,\n    reproFileNames: Array<string>,\n    reproArguments: Array<string>,\n    externalPrepackPath?: string\n  ): void {\n    if (reproFilePath === undefined) process.exit(1);\n\n    // Copy all input files.\n    for (let file of reproFileNames) {\n      try {\n        let content = fs.readFileSync(file, \"utf8\");\n        this._reproZip.file(path.basename(file), content);\n      } catch (err) {\n        console.error(`Could not zip input file ${err}`);\n        process.exit(1);\n      }\n    }\n\n    // Copy all sourcemaps (discovered while prepacking).\n    for (let map of sourceMaps) {\n      try {\n        let content = fs.readFileSync(map, \"utf8\");\n        this._reproZip.file(path.basename(map), content);\n      } catch (err) {\n        console.error(`Could not zip sourcemap: ${err}`);\n        process.exit(1);\n      }\n    }\n\n    // Copy all original sourcefiles used while Prepacking.\n    for (let file of sourceFiles) {\n      try {\n        // To avoid copying the \"/User/name/...\" version of the bundle/map/model included in originalSourceFiles\n        if (!reproFileNames.includes(file.relative)) {\n          let content = fs.readFileSync(file.absolute, \"utf8\");\n          this._reproZip.file(file.relative, content);\n        }\n      } catch (err) {\n        console.error(`Could not zip source file: ${err}. Proceeding...`);\n      }\n    }\n\n    // If not told where to copy prepack from, try to yarn pack it up.\n    if (externalPrepackPath === undefined) {\n      // Copy Prepack lib and package.json to install dependencies.\n      // The `yarn pack` command finds all necessary files automatically.\n      // The following steps need to be sequential, hence the series of `.on(\"exit\")` callbacks.\n      let yarnRuntime = \"yarn\";\n      let yarnCommand = [\"pack\", \"--filename\", path.resolve(process.cwd(), \"prepack-bundled.tgz\")];\n      child_process.spawnSync(yarnRuntime, yarnCommand, { cwd: __dirname });\n      // Because zipping the .tgz causes corruption issues when unzipping, we will\n      // unpack the .tgz, then zip those contents.\n      let unzipRuntime = \"tar\";\n      let unzipCommand = [\"-xzf\", path.resolve(`.`, \"prepack-bundled.tgz\")];\n      child_process.spawnSync(unzipRuntime, unzipCommand);\n      // Note that this process is asynchronous. A process.exit() elsewhere in this cli code\n      // might cause the whole process (including an ongoing zip) to prematurely terminate.\n      zipdir(path.resolve(\".\", \"package\"), (err, buffer) => {\n        if (err) {\n          console.error(`Could not zip Prepack ${err}`);\n          process.exit(1);\n        }\n\n        this._reproZip.file(\"prepack-runtime-bundle.zip\", buffer);\n        this._generateZip(reproArguments, reproFileNames, reproFilePath, \"lib\");\n\n        if (shouldExitWithError) process.exit(1);\n      });\n    } else {\n      try {\n        let prepackContent = fs.readFileSync(externalPrepackPath);\n        this._reproZip.file(\"prepack-runtime-bundle.zip\", prepackContent);\n        this._generateZip(reproArguments, reproFileNames, reproFilePath, \"src\");\n      } catch (err) {\n        console.error(`Could not zip prepack from given path: ${err}`);\n        process.exit(1);\n      }\n      if (shouldExitWithError) process.exit(1);\n    }\n  }\n}\n"],"file":"DebugReproPackager.js"}