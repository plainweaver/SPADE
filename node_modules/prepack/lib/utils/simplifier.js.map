{"version":3,"sources":["../../src/utils/simplifier.js"],"names":["simplifyAndRefineAbstractValue","realm","isCondition","value","intrinsicName","undefined","savedHandler","errorHandler","savedIsReadOnly","isReadOnly","isRootSimplification","statistics","simplificationAttempts","inSimplificationPath","diagnostic","errorCode","FatalError","message","result","simplify","simplifications","e","name","includes","abstractValueImpliesCounter","depth","ConcreteValue","AbstractValue","getType","BooleanValue","Path","implies","intrinsics","true","impliesNot","false","loc","expressionLocation","op","kind","x0","args","x00","xx","negate","y0","x","y","equals","mightNotBeTrue","mightNotBeFalse","yx","yy","yxs","yys","ys","createFromLogicalOp","instantRender","enabled","xa","xb","ya","yb","nullOrUndefined","rewrite","z","mightNotBeNull","mightNotBeUndefined","createFromBuildFunction","distributeConditional","createFromBinaryOp","simplifyEquality","c0","c","mightBeFalse","mightBeTrue","withCondition","InfeasiblePathError","withInverseCondition","cIsFalse","cIsTrue","notc","createFromUnaryOp","mightBeNumber","cs","xc","createFromConditionalOp","yc","pathConditions","isEmpty","abstractValue","concreteValues","dischargeValuesFromUnion","remainingConcreteValues","concreteValue","push","length","createAbstractConcreteUnion","create","condition","arg","leftArgs","slice","rightArgs","i","simplifyNullCheck","mightBeNull","mightBeUndefined","cond","sx","sy","makeBoolean","null","simplifyUndefinedCheck","equality","EmptyValue","xType","yType","Value","PrimitiveValue","isTypeCompatibleWith","NumberValue","ObjectValue","xy","xIsNullOrUndefined","NullValue","UndefinedValue","yIsNullOrUndefined","To","ToBoolean","v","unsimplifiedNegation","ValuesDomain","computeUnary","invertedComparison","left","right","invertedLogicalOp"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { BabelNodeSourceLocation } from \"@babel/types\";\nimport { FatalError, InfeasiblePathError } from \"../errors.js\";\nimport { ValuesDomain } from \"../domains/index.js\";\nimport invariant from \"../invariant.js\";\nimport { Realm } from \"../realm.js\";\nimport { AbstractValue, BooleanValue, ConcreteValue, Value } from \"../values/index.js\";\nimport { Path, To } from \"../singletons.js\";\nimport EmptyValue from \"../values/EmptyValue.js\";\nimport { createOperationDescriptor } from \"./generator.js\";\nimport { NullValue, NumberValue, ObjectValue, PrimitiveValue, UndefinedValue } from \"../values/index.js\";\n\nexport default function simplifyAndRefineAbstractValue(\n  realm: Realm,\n  isCondition: boolean, // The value is only used after converting it to a Boolean\n  value: AbstractValue\n): Value {\n  if (value.intrinsicName !== undefined) return value;\n  let savedHandler = realm.errorHandler;\n  let savedIsReadOnly = realm.isReadOnly;\n  realm.isReadOnly = true;\n  let isRootSimplification = false;\n  realm.statistics.simplificationAttempts++;\n\n  if (!realm.inSimplificationPath) {\n    realm.inSimplificationPath = isRootSimplification = true;\n  }\n  try {\n    realm.errorHandler = diagnostic => {\n      if (diagnostic.errorCode === \"PP0029\") {\n        throw new FatalError(`${diagnostic.errorCode}: ${diagnostic.message}`);\n      }\n      throw new FatalError();\n    };\n    let result = simplify(realm, value, isCondition, 0);\n    if (result !== value) realm.statistics.simplifications++;\n    return result;\n  } catch (e) {\n    if (e.name === \"Invariant Violation\") throw e;\n    if (e instanceof FatalError && typeof e.message === \"string\" && e.message.includes(\"PP0029\")) {\n      if (isRootSimplification) {\n        return value;\n      }\n      throw e;\n    }\n    return value;\n  } finally {\n    if (isRootSimplification) {\n      realm.abstractValueImpliesCounter = 0;\n      realm.inSimplificationPath = false;\n    }\n    realm.errorHandler = savedHandler;\n    realm.isReadOnly = savedIsReadOnly;\n  }\n}\n\nfunction simplify(realm, value: Value, isCondition: boolean = false, depth: number): Value {\n  if (value instanceof ConcreteValue || depth > 5) return value;\n  invariant(value instanceof AbstractValue);\n  if (isCondition || value.getType() === BooleanValue) {\n    if (Path.implies(value, depth + 1)) return realm.intrinsics.true;\n    if (Path.impliesNot(value, depth + 1)) return realm.intrinsics.false;\n  }\n  let loc = value.expressionLocation;\n  let op = value.kind;\n  switch (op) {\n    case \"!\": {\n      let [x0] = value.args;\n      invariant(x0 instanceof AbstractValue);\n      if (x0.kind === \"!\") {\n        invariant(x0 instanceof AbstractValue);\n        let [x00] = x0.args;\n        let xx = simplify(realm, x00, true, depth + 1);\n        if (isCondition || xx.getType() === BooleanValue) return xx;\n      }\n      return negate(realm, x0, depth + 1, loc, value, isCondition);\n    }\n    case \"||\":\n    case \"&&\": {\n      let [x0, y0] = value.args;\n      let x = simplify(realm, x0, isCondition, depth + 1);\n      let y = simplify(realm, y0, isCondition, depth + 1);\n      if (x instanceof AbstractValue && x.equals(y)) return x;\n      // true && y <=> y\n      // true || y <=> true\n      if (!x.mightNotBeTrue()) return op === \"&&\" ? y : x;\n      // (x == false) && y <=> x\n      // false || y <=> y\n      if (!x.mightNotBeFalse()) return op === \"||\" ? y : x;\n      if (isCondition || (x.getType() === BooleanValue && y.getType() === BooleanValue)) {\n        // (x: boolean) && true <=> x\n        // x || true <=> true\n        if (!y.mightNotBeTrue()) return op === \"&&\" ? x : realm.intrinsics.true;\n        // (x: boolean) && false <=> false\n        // (x: boolean) || false <=> x\n        if (!y.mightNotBeFalse()) return op === \"||\" ? x : realm.intrinsics.false;\n      }\n      if (op === \"||\") {\n        if (y instanceof AbstractValue && y.kind === \"||\") {\n          // x || x || y <=> x || y\n          if (x.equals(y.args[0])) return y;\n          if (x instanceof AbstractValue && x.kind === \"!\") {\n            // !x0 || y0 || x0 <=> true, if isCondition\n            if (isCondition && x.args[0].equals(y.args[1])) return realm.intrinsics.true;\n          }\n        }\n      }\n      if (op === \"&&\") {\n        if (x instanceof AbstractValue) {\n          if (x.kind === \"&&\") {\n            // (x && y) && x <=> x && y, if isCondition\n            if (isCondition && x.args[0].equals(y)) return x;\n            // (x && y) && y <=> x && y\n            if (x.args[1].equals(y)) return x;\n          } else if (x.kind === \"!\") {\n            // !x && x <=> false, if isCondition\n            if (isCondition && x.args[0].equals(y)) return realm.intrinsics.false;\n          }\n        }\n        if (y instanceof AbstractValue && y.kind === \"&&\") {\n          // x && (x && y) <=> x && y\n          // y && (x && y) <=> x && y\n          if (x.equals(y.args[0]) || x.equals(y.args[1])) return y;\n        }\n        // x && (x && y || x && z) <=> x && (y || z)\n        if (y instanceof AbstractValue && y.kind === \"||\") {\n          let [yx, yy] = y.args;\n          let yxs, yys;\n          if (yx instanceof AbstractValue && yx.kind === \"&&\") {\n            if (x.equals(yx.args[0])) yxs = yx.args[1];\n            else if (x.equals(yx.args[1])) yxs = yx.args[0];\n          }\n          if (yy instanceof AbstractValue && yy.kind === \"&&\") {\n            if (x.equals(yy.args[0])) yys = yy.args[1];\n            else if (x.equals(yy.args[1])) yys = yy.args[0];\n          }\n          if (yxs !== undefined || yys !== undefined) {\n            let ys = AbstractValue.createFromLogicalOp(realm, \"||\", yxs || yx, yys || yy, undefined, isCondition);\n            return AbstractValue.createFromLogicalOp(realm, \"&&\", x, ys, undefined, isCondition);\n          }\n        }\n      }\n      if (realm.instantRender.enabled) {\n        if (op === \"||\" && x0 instanceof AbstractValue && y0 instanceof AbstractValue) {\n          if (x0.kind === \"===\" && y0.kind === \"===\") {\n            let [xa, xb] = x0.args;\n            let [ya, yb] = y0.args;\n            if (xa.equals(ya) && !xb.equals(yb) && nullOrUndefined(xb) && nullOrUndefined(yb)) return rewrite(xa);\n            else if (xb.equals(yb) && !xa.equals(ya) && nullOrUndefined(xa) && nullOrUndefined(ya)) return rewrite(xb);\n            else if (xa.equals(yb) && !xb.equals(ya) && nullOrUndefined(xb) && nullOrUndefined(ya)) return rewrite(xa);\n            else if (xb.equals(ya) && !xa.equals(yb) && nullOrUndefined(xa) && nullOrUndefined(yb)) return rewrite(xb);\n            function nullOrUndefined(z: Value) {\n              return !z.mightNotBeNull() || !z.mightNotBeUndefined();\n            }\n            function rewrite(z: Value) {\n              return AbstractValue.createFromBuildFunction(\n                realm,\n                BooleanValue,\n                [xa],\n                createOperationDescriptor(\"CANNOT_BECOME_OBJECT\"),\n                { kind: \"global.__cannotBecomeObject(A)\" }\n              );\n            }\n          }\n        }\n      }\n      if (x.equals(x0) && y.equals(y0)) return value;\n      return AbstractValue.createFromLogicalOp(realm, (value.kind: any), x, y, loc, isCondition, true);\n    }\n    case \"<\":\n    case \"<=\":\n    case \">\":\n    case \">=\":\n      return distributeConditional(realm, value, isCondition, args =>\n        AbstractValue.createFromBinaryOp(realm, op, args[0], args[1], loc, undefined, isCondition, true)\n      );\n    case \"==\":\n    case \"!=\":\n    case \"===\":\n    case \"!==\":\n      return simplifyEquality(realm, value, depth + 1);\n    case \"conditional\": {\n      let [c0, x0, y0] = value.args;\n      let c = simplify(realm, c0, true, depth + 1);\n      let x, y;\n      if (c0 instanceof AbstractValue && c.mightBeFalse() && c.mightBeTrue()) {\n        try {\n          x = Path.withCondition(c0, () => simplify(realm, x0, isCondition, depth + 1));\n        } catch (e) {\n          if (e instanceof InfeasiblePathError) {\n            // We now know that c0 cannot be be true on this path\n            return simplify(realm, y0, isCondition, depth + 1);\n          }\n          throw e;\n        }\n        try {\n          y = Path.withInverseCondition(c0, () => simplify(realm, y0, isCondition, depth + 1));\n        } catch (e) {\n          if (e instanceof InfeasiblePathError) {\n            // We now know that c0 cannot be be false on this path\n            return x;\n          }\n          throw e;\n        }\n      }\n      let cIsFalse = !c.mightNotBeFalse();\n      let cIsTrue = !c.mightNotBeTrue();\n      if (x === undefined && !cIsFalse) x = simplify(realm, x0, isCondition, depth + 1);\n      if (cIsTrue) {\n        invariant(x !== undefined); // cIsTrue ==> !cIsFalse\n        return x;\n      }\n      if (y === undefined) y = simplify(realm, y0, isCondition, depth + 1);\n      if (cIsFalse) return y;\n      invariant(x !== undefined); // because !csIsFalse\n      invariant(c instanceof AbstractValue);\n      if (Path.implies(c, depth + 1)) return x;\n      let notc = AbstractValue.createFromUnaryOp(realm, \"!\", c, true, loc, isCondition, true);\n      if (!notc.mightNotBeTrue()) return y;\n      if (!notc.mightNotBeFalse()) return x;\n      invariant(notc instanceof AbstractValue);\n      if (Path.implies(notc, depth + 1)) return y;\n      if (!isCondition) {\n        if (Path.implies(AbstractValue.createFromBinaryOp(realm, \"===\", value, x), depth + 1)) return x;\n        if (!x.mightBeNumber() && Path.implies(AbstractValue.createFromBinaryOp(realm, \"!==\", value, x), depth + 1))\n          return y;\n        if (!y.mightBeNumber() && Path.implies(AbstractValue.createFromBinaryOp(realm, \"!==\", value, y), depth + 1))\n          return x;\n        if (Path.implies(AbstractValue.createFromBinaryOp(realm, \"===\", value, y), depth + 1)) return y;\n      }\n      // c ? x : x <=> x\n      if (x.equals(y)) return x;\n      // x ? x : y <=> x || y\n      let cs = isCondition ? c : simplify(realm, c0, false, depth + 1);\n      if (cs.equals(x)) return AbstractValue.createFromLogicalOp(realm, \"||\", x, y, loc, isCondition, true);\n      // y ? x : y <=> y && x\n      if (cs.equals(y)) return AbstractValue.createFromLogicalOp(realm, \"&&\", y, x, loc, isCondition, true);\n      // c ? (c ? xx : xy) : y <=> c ? xx : y\n      if (x instanceof AbstractValue && x.kind === \"conditional\") {\n        let [xc, xx] = x.args;\n        if (c.equals(xc))\n          return AbstractValue.createFromConditionalOp(realm, c, xx, y, value.expressionLocation, isCondition, true);\n      }\n      // c ? x : (c ? y : z) : z <=> c ? x : z\n      if (y instanceof AbstractValue && y.kind === \"conditional\") {\n        let [yc, , z] = y.args;\n        if (c.equals(yc))\n          return AbstractValue.createFromConditionalOp(realm, c, x, z, value.expressionLocation, isCondition, true);\n      }\n      if (isCondition || (x.getType() === BooleanValue && y.getType() === BooleanValue)) {\n        // c ? true : false <=> c\n        if (!x.mightNotBeTrue() && !y.mightNotBeFalse()) return c;\n        // c ? false : true <=> !c\n        if (!x.mightNotBeFalse() && !y.mightNotBeTrue())\n          return AbstractValue.createFromUnaryOp(realm, \"!\", c, true, loc, true);\n      }\n      if (c.equals(c0) && x.equals(x0) && y.equals(y0)) return value;\n      return AbstractValue.createFromConditionalOp(realm, c, x, y, value.expressionLocation, isCondition, true);\n    }\n    case \"abstractConcreteUnion\": {\n      // The union of an abstract value with one or more concrete values.\n      if (realm.pathConditions.isEmpty()) return value;\n      let [abstractValue, concreteValues] = AbstractValue.dischargeValuesFromUnion(realm, value);\n      invariant(abstractValue instanceof AbstractValue);\n      let remainingConcreteValues = [];\n      for (let concreteValue of concreteValues) {\n        if (Path.implies(AbstractValue.createFromBinaryOp(realm, \"!==\", value, concreteValue), depth + 1)) continue;\n        if (Path.implies(AbstractValue.createFromBinaryOp(realm, \"===\", value, concreteValue), depth + 1))\n          return concreteValue;\n        remainingConcreteValues.push(concreteValue);\n      }\n      if (remainingConcreteValues.length === 0) return abstractValue;\n      if (remainingConcreteValues.length === concreteValues.length) return value;\n      return AbstractValue.createAbstractConcreteUnion(realm, abstractValue, remainingConcreteValues);\n    }\n    default:\n      return value;\n  }\n}\n\nfunction distributeConditional(\n  realm: Realm,\n  value: AbstractValue,\n  isCondition: boolean,\n  create: (Array<Value>) => Value\n): Value {\n  // Find a conditional argument\n  let condition;\n  let args = value.args;\n  for (let arg of args)\n    if (arg instanceof AbstractValue && arg.kind === \"conditional\") {\n      if (condition === undefined) condition = arg.args[0];\n      else if (condition !== arg.args[0]) return value; // giving up, multiple conditions involved\n    }\n\n  if (condition === undefined) return value; // no conditional found, nothing to do\n\n  // We have at least one conditional argument; if there are more than one, they all share the same condition\n  let leftArgs = args.slice(0);\n  let rightArgs = args.slice(0);\n  for (let i = 0; i < args.length; i++) {\n    let arg = args[i];\n    if (arg instanceof AbstractValue && arg.kind === \"conditional\") {\n      leftArgs[i] = arg.args[1];\n      rightArgs[i] = arg.args[2];\n    }\n  }\n\n  return AbstractValue.createFromConditionalOp(\n    realm,\n    condition,\n    create(leftArgs),\n    create(rightArgs),\n    condition.expressionLocation,\n    isCondition,\n    true\n  );\n}\n\nfunction simplifyNullCheck(\n  realm: Realm,\n  op: \"===\" | \"==\" | \"!==\" | \"!=\",\n  value: Value,\n  depth: number,\n  loc: ?BabelNodeSourceLocation\n): void | Value {\n  if (op === \"==\" || op === \"!=\") {\n    if (!value.mightNotBeNull() || !value.mightNotBeUndefined())\n      return op === \"==\" ? realm.intrinsics.true : realm.intrinsics.false;\n    if (!value.mightBeNull() && !value.mightBeUndefined())\n      return op === \"==\" ? realm.intrinsics.false : realm.intrinsics.true;\n  } else {\n    if (!value.mightNotBeNull()) return op === \"===\" ? realm.intrinsics.true : realm.intrinsics.false;\n    if (!value.mightBeNull()) return op === \"===\" ? realm.intrinsics.false : realm.intrinsics.true;\n  }\n  invariant(value instanceof AbstractValue); // concrete values will either be null or not null\n  // try to simplify \"(cond ? x : y) op null\" to just \"cond\" or \"!cond\"\n  // failing that, use \"cond ? x op null : y op null\" if either of the subexpressions simplify\n  if (value.kind === \"conditional\" && depth < 10) {\n    let [cond, x, y] = value.args;\n    let sx = simplifyNullCheck(realm, op, x, depth + 1, loc);\n    let sy = simplifyNullCheck(realm, op, y, depth + 1, loc);\n    if (sx !== undefined && sy !== undefined) {\n      if (!sx.mightNotBeTrue() && !sy.mightNotBeFalse()) return makeBoolean(realm, cond, loc);\n      if (!sx.mightNotBeFalse() && !sy.mightNotBeTrue()) return negate(realm, cond, depth + 1, loc);\n    }\n    if (sx !== undefined || sy !== undefined) {\n      if (sx === undefined)\n        sx = AbstractValue.createFromBinaryOp(\n          realm,\n          op,\n          x,\n          realm.intrinsics.null,\n          x.expressionLocation,\n          undefined,\n          false,\n          true\n        );\n      if (sy === undefined)\n        sy = AbstractValue.createFromBinaryOp(\n          realm,\n          op,\n          y,\n          realm.intrinsics.null,\n          y.expressionLocation,\n          undefined,\n          false,\n          true\n        );\n      return AbstractValue.createFromConditionalOp(realm, cond, sx, sy, loc, true, true);\n    }\n  }\n}\n\nfunction simplifyUndefinedCheck(\n  realm: Realm,\n  op: \"===\" | \"==\" | \"!==\" | \"!=\",\n  value: Value,\n  depth: number,\n  loc: ?BabelNodeSourceLocation\n): void | Value {\n  if (op === \"==\" || op === \"!=\") {\n    if (!value.mightNotBeNull() || !value.mightNotBeUndefined())\n      return op === \"==\" ? realm.intrinsics.true : realm.intrinsics.false;\n    if (!value.mightBeNull() && !value.mightBeUndefined())\n      return op === \"==\" ? realm.intrinsics.false : realm.intrinsics.true;\n  } else {\n    if (!value.mightNotBeUndefined()) return op === \"===\" ? realm.intrinsics.true : realm.intrinsics.false;\n    if (!value.mightBeUndefined()) return op === \"===\" ? realm.intrinsics.false : realm.intrinsics.true;\n  }\n  invariant(value instanceof AbstractValue); // concrete values will either be undefined or not undefined\n  // try to simplify \"(cond ? x : y) op undefined\" to just \"cond\" or \"!cond\"\n  // failing that, use \"cond ? x op undefined : y op undefined\" if either of the subexpressions simplify\n  if (value.kind === \"conditional\" && depth < 10) {\n    let [cond, x, y] = value.args;\n    let sx = simplifyUndefinedCheck(realm, op, x, depth + 1, loc);\n    let sy = simplifyUndefinedCheck(realm, op, y, depth + 1, loc);\n    if (sx !== undefined && sy !== undefined) {\n      if (!sx.mightNotBeTrue() && !sy.mightNotBeFalse()) return makeBoolean(realm, cond, loc);\n      if (!sx.mightNotBeFalse() && !sy.mightNotBeTrue()) return negate(realm, cond, depth + 1, loc);\n    }\n    if (sx !== undefined || sy !== undefined) {\n      if (sx === undefined)\n        sx = AbstractValue.createFromBinaryOp(\n          realm,\n          op,\n          x,\n          realm.intrinsics.undefined,\n          x.expressionLocation,\n          undefined,\n          false,\n          true\n        );\n      if (sy === undefined)\n        sy = AbstractValue.createFromBinaryOp(\n          realm,\n          op,\n          y,\n          realm.intrinsics.undefined,\n          y.expressionLocation,\n          undefined,\n          false,\n          true\n        );\n      return AbstractValue.createFromConditionalOp(realm, cond, sx, sy, loc, true, true);\n    }\n  }\n}\n\nfunction simplifyEquality(realm: Realm, equality: AbstractValue, depth: number): Value {\n  let loc = equality.expressionLocation;\n  let op = equality.kind;\n  let [x, y] = equality.args;\n  if (y instanceof EmptyValue) return equality;\n  if (x instanceof ConcreteValue) [x, y] = [y, x];\n  if (op === \"===\" || op === \"==\" || op === \"!==\" || op === \"==\") {\n    if (!x.mightNotBeNull()) {\n      let sy = simplifyNullCheck(realm, op, y, depth + 1);\n      if (sy !== undefined) return sy;\n    }\n    if (!y.mightNotBeNull()) {\n      let sx = simplifyNullCheck(realm, op, x, depth + 1);\n      if (sx !== undefined) return sx;\n    }\n    if (!x.mightNotBeUndefined()) {\n      let sy = simplifyUndefinedCheck(realm, op, y, depth + 1);\n      if (sy !== undefined) return sy;\n    }\n    if (!y.mightNotBeUndefined()) {\n      let sx = simplifyUndefinedCheck(realm, op, x, depth + 1);\n      if (sx !== undefined) return sx;\n    }\n  }\n  if (op === \"===\") {\n    let xType = x.getType();\n    let yType = y.getType();\n    if (xType !== yType) {\n      if (xType === Value || xType === PrimitiveValue || yType === Value || yType === PrimitiveValue) return equality;\n      if (\n        (Value.isTypeCompatibleWith(xType, NumberValue) && Value.isTypeCompatibleWith(yType, NumberValue)) ||\n        (Value.isTypeCompatibleWith(xType, ObjectValue) && Value.isTypeCompatibleWith(yType, ObjectValue))\n      )\n        return equality;\n      return realm.intrinsics.false;\n    } else if (x instanceof AbstractValue && x.kind === \"conditional\") {\n      let [cond, xx, xy] = x.args;\n      // ((cond ? xx : xy) === y) && xx === y && xy !== y <=> cond\n      if (xx.equals(y) && !xy.equals(y)) return cond;\n      // ((!cond ? xx : xy) === y) && xx !== y && xy === y <=> !cond\n      if (!xx.equals(y) && xy.equals(y)) return negate(realm, cond, depth + 1, loc);\n    } else if (y instanceof AbstractValue && y.kind === \"conditional\") {\n      let [cond, yx, yy] = y.args;\n      // (x === (cond ? yx : yy) === y) && x === yx && x !== yy <=> cond\n      if (yx.equals(x) && !yy.equals(x)) return cond;\n      // (x === (!cond ? yx : yy) === y) && x !== yx && x === yy <=> !cond\n      if (!x.equals(yx) && x.equals(yy)) return negate(realm, cond, depth + 1, loc);\n    }\n  } else if (op === \"==\") {\n    let xType = x.getType();\n    let xIsNullOrUndefined = xType === NullValue || xType === UndefinedValue;\n    let yType = y.getType();\n    let yIsNullOrUndefined = yType === NullValue || yType === UndefinedValue;\n    // If x and y are both known to be null/undefined we should never get here because both should be concrete values.\n    invariant(!xIsNullOrUndefined || !yIsNullOrUndefined);\n    if (xIsNullOrUndefined) {\n      return yType === Value || yType === PrimitiveValue ? equality : realm.intrinsics.false;\n    }\n    if (yIsNullOrUndefined) {\n      return xType === Value || xType === PrimitiveValue ? equality : realm.intrinsics.false;\n    }\n  }\n  return equality;\n}\n\nfunction makeBoolean(realm: Realm, value: Value, loc: ?BabelNodeSourceLocation = undefined): Value {\n  if (value.getType() === BooleanValue) return value;\n  if (value instanceof ConcreteValue) return new BooleanValue(realm, To.ToBoolean(realm, value));\n  invariant(value instanceof AbstractValue);\n  let v = AbstractValue.createFromUnaryOp(realm, \"!\", value, true, value.expressionLocation);\n  if (v instanceof ConcreteValue) return new BooleanValue(realm, !To.ToBoolean(realm, v));\n  invariant(v instanceof AbstractValue);\n  return AbstractValue.createFromUnaryOp(realm, \"!\", v, true, loc || value.expressionLocation);\n}\n\nfunction negate(\n  realm: Realm,\n  value: Value,\n  depth: number = 0,\n  loc: ?BabelNodeSourceLocation = undefined,\n  unsimplifiedNegation: void | Value = undefined,\n  isCondition?: boolean\n): Value {\n  if (value instanceof ConcreteValue) return ValuesDomain.computeUnary(realm, \"!\", value);\n  invariant(value instanceof AbstractValue);\n  value = simplify(realm, value, true, depth + 1);\n  if (!value.mightNotBeTrue()) return realm.intrinsics.false;\n  if (!value.mightNotBeFalse()) return realm.intrinsics.true;\n  invariant(value instanceof AbstractValue);\n  if (value.kind === \"!\") {\n    let [x] = value.args;\n    if (isCondition || x.getType() === BooleanValue) return simplify(realm, x, true, depth + 1);\n    if (unsimplifiedNegation !== undefined) return unsimplifiedNegation;\n    return makeBoolean(realm, x, loc);\n  }\n  // If NaN is not an issue, invert binary ops\n  if (value.args.length === 2 && !value.args[0].mightBeNumber() && !value.args[1].mightBeNumber()) {\n    let invertedComparison;\n    switch (value.kind) {\n      case \"===\":\n        invertedComparison = \"!==\";\n        break;\n      case \"==\":\n        invertedComparison = \"!=\";\n        break;\n      case \"!==\":\n        invertedComparison = \"===\";\n        break;\n      case \"!=\":\n        invertedComparison = \"==\";\n        break;\n      case \"<\":\n        invertedComparison = \">=\";\n        break;\n      case \"<=\":\n        invertedComparison = \">\";\n        break;\n      case \">\":\n        invertedComparison = \"<=\";\n        break;\n      case \">=\":\n        invertedComparison = \"<\";\n        break;\n      default:\n        break;\n    }\n    if (invertedComparison !== undefined) {\n      let left = simplify(realm, value.args[0], false, depth + 1);\n      let right = simplify(realm, value.args[1], false, depth + 1);\n      return AbstractValue.createFromBinaryOp(realm, invertedComparison, left, right, loc || value.expressionLocation);\n    }\n    let invertedLogicalOp;\n    switch (value.kind) {\n      case \"&&\":\n        invertedLogicalOp = \"||\";\n        break;\n      case \"||\":\n        invertedLogicalOp = \"&&\";\n        break;\n      default:\n        break;\n    }\n    if (invertedLogicalOp !== undefined) {\n      let left = negate(realm, value.args[0], depth + 1);\n      let right = negate(realm, value.args[1], depth + 1);\n      return AbstractValue.createFromLogicalOp(\n        realm,\n        invertedLogicalOp,\n        left,\n        right,\n        loc || value.expressionLocation,\n        true\n      );\n    }\n  }\n  if (unsimplifiedNegation !== undefined) return unsimplifiedNegation;\n  return AbstractValue.createFromUnaryOp(realm, \"!\", value, true, loc || value.expressionLocation, true);\n}\n"],"file":"simplifier.js"}