{"version":3,"sources":["../src/prepack-cli.js"],"names":["run","Object","Array","console","JSON","process","prepackStdin","prepackFileSync","FatalError","CompatibilityValues","fs","HELP_STR","map","v","join","args","from","argv","splice","inputFilenames","outputFilename","check","compatibility","mathRandomSeed","inputSourceMapFilenames","outputSourceMap","statsFileName","maxStackDepth","timeout","debugIdentifiers","lazyObjectsRuntime","heapGraphFilePath","dumpIRFilePath","debugInFilePath","debugOutFilePath","reactOutput","reproFilePath","cpuprofilePath","invariantMode","invariantLevel","reproMode","debugReproPackager","externalPrepackPath","diagnosticAsError","noDiagnostic","warnAsError","modulesToInitialize","flags","trace","debugNames","emitConcreteModel","inlineExpressions","logStatistics","logModules","delayInitializations","internalDebug","debugScopes","profile","instantRender","reactEnabled","reproArguments","reproFileNames","debuggerConfigArgs","debugReproArgs","length","arg","shift","startsWith","inputs","trim","split","input","push","includes","slice","modulesString","Set","error","exit","inputSourceMap","value","isNaN","parseInt","toString","seconds","debugIdentifiersString","diagnosticAsErrorString","noDiagnosticString","range","unshift","pair","Number","MAX_SAFE_INTEGER","start","isInteger","count","ReactOutputValues","DebugReproPackager","sourcemaps","buckRoot","InvariantModeValues","invariantLevelString","DiagnosticSeverityValues","diagnosticSeverity","options","flag","keys","log","option","version","resolvedOptions","assign","errorHandler","sourceMaps","serialize","undefined","heapGraphFormat","onExecute","realm","optimizedFunctions","text","TextPrinter","line","print","writeFileSync","compilerDiagnostics","Map","compilerDiagnosticsList","compilerDiagnostic","has","errorCode","severity","CompilerDiagnostic","message","location","sourceFilePaths","set","printDiagnostics","caughtFatalError","caughtUnexpectedError","size","informations","warnings","recoverableErrors","fatalErrors","printCompilerDiagnostic","locString","callStack","eolPos","indexOf","substring","loc","sourceMessage","source","column","plural","word","success","filter","s","profiler","debugReproSourceFiles","debugReproSourceMaps","require","e","setSamplingInterval","startProfiling","processSerializedCode","serialized","sourceFiles","err","stack","largestLength","allDiagnostics","values","concat","forEach","diagnostic","data","stopProfiling","Date","now","stream","createWriteStream","getNextToken","write","token","once","end","code","statistics","stats","RealmStatistics","getRealmStatistics","SerializerStatistics","getSerializerStatistics","TimingStatistics","projectPerformanceTrackers","pt","time","HeapStatistics","memory","MemoryStatistics","v8","getHeapStatistics","stringify","heapGraph","generateDebugRepro","__residual"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* eslint-disable no-shadow */\n\nimport { CompilerDiagnostic, type ErrorHandlerResult, FatalError } from \"./errors.js\";\nimport {\n  type Compatibility,\n  CompatibilityValues,\n  type ReactOutputTypes,\n  ReactOutputValues,\n  type InvariantModeTypes,\n  InvariantModeValues,\n  DiagnosticSeverityValues,\n} from \"./options.js\";\nimport { type SerializedResult } from \"./serializer/types.js\";\nimport { TextPrinter } from \"./utils/TextPrinter.js\";\nimport { prepackStdin, prepackFileSync } from \"./prepack-node.js\";\nimport type { BabelNodeSourceLocation } from \"@babel/types\";\nimport fs from \"fs\";\nimport v8 from \"v8\";\nimport { version } from \"../package.json\";\nimport invariant from \"./invariant\";\nimport JSONTokenizer from \"./utils/JSONTokenizer.js\";\nimport type { DebuggerConfigArguments, DebugReproArguments } from \"./types\";\nimport { DebugReproPackager } from \"./utils/DebugReproPackager.js\";\n\n// Prepack helper\ndeclare var __residual: any;\n\nfunction run(\n  Object,\n  Array,\n  console,\n  JSON,\n  process,\n  prepackStdin,\n  prepackFileSync,\n  FatalError,\n  CompatibilityValues,\n  fs\n) {\n  let HELP_STR = `\n    input                    The name of the file to run Prepack over (for web please provide the single js bundle file)\n    --out                    The name of the output file\n    --compatibility          The target environment for Prepack [${CompatibilityValues.map(v => `\"${v}\"`).join(\", \")}]\n    --mathRandomSeed         If you want Prepack to evaluate Math.random() calls, please provide a seed.\n    --srcmapIn               The input sourcemap filename. If present, Prepack will output a sourcemap that maps from\n                             the original file (pre-input sourcemap) to Prepack's output\n    --srcmapOut              The output sourcemap filename.\n    --maxStackDepth          Specify the maximum call stack depth.\n    --timeout                The amount of time in seconds until Prepack should time out.\n    --lazyObjectsRuntime     Enable lazy objects feature and specify the JS runtime that support this feature.\n    --debugNames             Changes the output of Prepack so that for named functions and variables that get emitted into\n                             Prepack's output, the original name is appended as a suffix to Prepack's generated identifier.\n    --modulesToInitialize [ALL | comma separated list]\n                             Enable speculative initialization of modules (for the module system Prepack has builtin\n                             knowledge about). Prepack will try to execute the factory functions of the modules you specify.\n    --trace                  Traces the order of module initialization.\n    --check [start[, count]] Check residual functions for diagnostic messages. Do not generate code.\n    --profile                Collect statistics about time and memory usage of the different internal passes\n    --logStatistics          Log statistics to console\n    --statsFile              The name of the output file where statistics will be written to.\n    --heapGraphFilePath      The name of the output file where heap graph will be written to.\n    --dumpIRFilePath         The name of the output file where the intermediate representation will be written to.\n    --inlineExpressions      When generating code, tells prepack to avoid naming expressions when they are only used once,\n                             and instead inline them where they are used.\n    --invariantLevel         0: no invariants (default); 1: checks for abstract values; 2: checks for accessed built-ins; 3: internal consistency\n    --invariantMode          Whether to throw an exception or call a console function to log an invariant violation; default = throw.\n    --emitConcreteModel      Synthesize concrete model values for abstract models(defined by __assumeDataProperty).\n    --version                Output the version number.\n    --reproOnFatalError      Create a zip file with all information needed to reproduce a Prepack run if Prepacking fails with a FatalError.\n    --reproUnconditionally   Create a zip file with all information needed to reproduce a Prepack run, regardless of success of Prepack.\n    --cpuprofile             Create a CPU profile file for the run that can be loaded into the Chrome JavaScript CPU Profile viewer.\n    --debugDiagnosticSeverity  FatalError | RecoverableError | Warning | Information (default = FatalError). Diagnostic level at which debugger will stop.\n    --debugBuckRoot          Root directory that buck assumes when creating sourcemap paths.\n    --warnAsError            Turns all warnings into errors.\n    --diagnosticAsError      A comma-separated list of non-fatal-error PPxxxx diagnostic codes that should get turned into (recoverable) errors.\n    --noDiagnostic           A comma-separated list of non-fatal-error PPxxxx diagnostic codes that should get suppressed.\n  `;\n  let args = Array.from(process.argv);\n  args.splice(0, 2);\n  let inputFilenames = [];\n  let outputFilename;\n  let check: void | Array<number>;\n  let compatibility: Compatibility;\n  let mathRandomSeed;\n  let inputSourceMapFilenames = [];\n  let outputSourceMap;\n  let statsFileName;\n  let maxStackDepth: number;\n  let timeout: number;\n  let debugIdentifiers: void | Array<string>;\n  let lazyObjectsRuntime: string;\n  let heapGraphFilePath: void | string;\n  let dumpIRFilePath: void | string;\n  let debugInFilePath: string;\n  let debugOutFilePath: string;\n  let reactOutput: ReactOutputTypes = \"create-element\";\n  let reproFilePath: void | string;\n  let cpuprofilePath: void | string;\n  let invariantMode: void | InvariantModeTypes;\n  let invariantLevel: void | number;\n  let reproMode: void | \"reproUnconditionally\" | \"reproOnFatalError\";\n  let debugReproPackager: void | DebugReproPackager;\n  // Indicates where to find a zip with prepack runtime. Used in environments where\n  // the `yarn pack` strategy doesn't work.\n  let externalPrepackPath: void | string;\n  let diagnosticAsError: void | Set<string>;\n  let noDiagnostic: void | Set<string>;\n  let warnAsError: void | true;\n  let modulesToInitialize: void | Set<string> | \"ALL\";\n  let flags = {\n    trace: false,\n    debugNames: false,\n    emitConcreteModel: false,\n    inlineExpressions: false,\n    logStatistics: false,\n    logModules: false,\n    delayInitializations: false,\n    internalDebug: false,\n    debugScopes: false,\n    profile: false,\n    instantRender: false,\n    reactEnabled: false,\n  };\n  let reproArguments = [];\n  let reproFileNames = [];\n  let debuggerConfigArgs: DebuggerConfigArguments = {};\n  let debugReproArgs: void | DebugReproArguments;\n  while (args.length) {\n    let arg = args.shift();\n    if (!arg.startsWith(\"--\")) {\n      let inputs = arg.trim().split(/\\s+/g); // Split on all whitespace\n      for (let input of inputs) {\n        inputFilenames.push(input);\n        if (!input.includes(\".map\")) reproFileNames.push(input);\n        // Don't include sourcemaps in reproFiles because they will be captured later on in prepack-node\n      }\n    } else {\n      arg = arg.slice(2);\n      switch (arg) {\n        case \"modulesToInitialize\":\n          let modulesString = args.shift().trim();\n          modulesToInitialize = modulesString === \"ALL\" ? modulesString : new Set(modulesString.split(\",\"));\n          break;\n        case \"out\":\n          arg = args.shift();\n          outputFilename = arg;\n          // do not include this in reproArguments needed by --repro[OnFatalError/Unconditionally], as path is likely not portable between environments\n          break;\n        case \"compatibility\":\n          arg = args.shift();\n          if (!CompatibilityValues.includes(arg)) {\n            console.error(`Unsupported compatibility: ${arg}`);\n            process.exit(1);\n          }\n          compatibility = (arg: any);\n          reproArguments.push(\"--compatibility\", compatibility);\n          break;\n        case \"mathRandomSeed\":\n          mathRandomSeed = args.shift();\n          reproArguments.push(\"--mathRandomSeed\", mathRandomSeed);\n          break;\n        case \"srcmapIn\":\n          let inputSourceMap = args.shift();\n          inputSourceMapFilenames.push(inputSourceMap);\n          // do not include this in reproArguments needed by --repro[OnFatalError/Unconditionally], as path is likely not portable between environments\n          // Furthermore, this is covered when sourcemaps are discovered in prepack-node\n          break;\n        case \"srcmapOut\":\n          outputSourceMap = args.shift();\n          // do not include this in reproArguments needed by --repro[OnFatalError/Unconditionally], as path is likely not portable between environments\n          break;\n        case \"statsFile\":\n          statsFileName = args.shift();\n          // do not include this in reproArguments needed by --repro[OnFatalError/Unconditionally], as path is likely not portable between environments\n          break;\n        case \"maxStackDepth\":\n          let value = args.shift();\n          if (isNaN(value)) {\n            console.error(\"Stack depth value must be a number\");\n            process.exit(1);\n          }\n          maxStackDepth = parseInt(value, 10);\n          reproArguments.push(\"--maxStackDepth\", maxStackDepth.toString());\n          break;\n        case \"timeout\":\n          let seconds = args.shift();\n          if (isNaN(seconds)) {\n            console.error(\"Timeout must be a number\");\n            process.exit(1);\n          }\n          timeout = parseInt(seconds, 10) * 1000;\n          reproArguments.push(\"--timeout\", timeout.toString());\n          break;\n        case \"debugIdentifiers\":\n          let debugIdentifiersString = args.shift();\n          debugIdentifiers = debugIdentifiersString.split(\",\");\n          reproArguments.push(\"--debugIdentifiers\", debugIdentifiersString);\n          break;\n        case \"diagnosticAsError\":\n          let diagnosticAsErrorString = args.shift();\n          diagnosticAsError = new Set(diagnosticAsErrorString.split(\",\"));\n          reproArguments.push(\"--diagnosticAsError\", diagnosticAsErrorString);\n          break;\n        case \"noDiagnostic\":\n          let noDiagnosticString = args.shift();\n          noDiagnostic = new Set(noDiagnosticString.split(\",\"));\n          reproArguments.push(\"--noDiagnostic\", noDiagnosticString);\n          break;\n        case \"warnAsError\":\n          warnAsError = true;\n          reproArguments.push(\"--warnAsError\");\n          break;\n        case \"check\":\n          let range = args.shift();\n          if (range.startsWith(\"--\")) {\n            args.unshift(range);\n            range = \"0\";\n          }\n          let pair: Array<any> = range.split(\",\");\n          if (pair.length === 1) pair.push(Number.MAX_SAFE_INTEGER);\n          let start = +pair[0];\n          if (start < 0 || !Number.isInteger(start)) {\n            console.error(\"check start offset must be a number\");\n            process.exit(1);\n          }\n          let count = +pair[1];\n          if (count < 0 || !Number.isInteger(count)) {\n            console.error(\"check count must be a number\");\n            process.exit(1);\n          }\n          check = [start, count];\n          reproArguments.push(\"--check\", range);\n          break;\n        case \"debugInFilePath\":\n          debugInFilePath = args.shift();\n          // do not include this in reproArguments needed by --repro[OnFatalError/Unconditionally] as the field is not visable to the user\n          break;\n        case \"debugOutFilePath\":\n          debugOutFilePath = args.shift();\n          // do not include this in reproArguments needed by --repro[OnFatalError/Unconditionally] as the field is not visable to the user\n          break;\n        case \"lazyObjectsRuntime\":\n          lazyObjectsRuntime = args.shift();\n          reproArguments.push(\"--lazyObjectsRuntime\", lazyObjectsRuntime);\n          break;\n        case \"heapGraphFilePath\":\n          heapGraphFilePath = args.shift();\n          // do not include this in reproArguments needed by --repro[OnFatalError/Unconditionally], as path is likely not portable between environments\n          break;\n        case \"dumpIRFilePath\":\n          dumpIRFilePath = args.shift();\n          // do not include this in reproArguments needed by --repro[OnFatalError/Unconditionally], as path is likely not portable between environments\n          break;\n        case \"reactOutput\":\n          arg = args.shift();\n          if (!ReactOutputValues.includes(arg)) {\n            console.error(`Unsupported reactOutput: ${arg}`);\n            process.exit(1);\n          }\n          reactOutput = (arg: any);\n          reproArguments.push(\"--reactOutput\", reactOutput);\n          break;\n        case \"reproOnFatalError\":\n        case \"reproUnconditionally\":\n          debugReproPackager = new DebugReproPackager();\n          reproMode = arg;\n          reproFilePath = args.shift();\n          debugReproArgs = {};\n          debugReproArgs.sourcemaps = [];\n          if (debuggerConfigArgs.buckRoot) debugReproArgs.buckRoot = debuggerConfigArgs.buckRoot;\n          // do not include this in reproArguments needed by --repro[OnFatalError/Unconditionally], as we don't need to create a repro from the repro...\n          break;\n        case \"cpuprofile\":\n          cpuprofilePath = args.shift();\n          // do not include this in reproArguments needed by --repro[OnFatalError/Unconditionally], as path is likely not portable between environments\n          break;\n        case \"invariantMode\":\n          arg = args.shift();\n          if (!InvariantModeValues.includes(arg)) {\n            console.error(`Unsupported invariantMode: ${arg}`);\n            process.exit(1);\n          }\n          invariantMode = (arg: any);\n          reproArguments.push(\"--invariantMode\", invariantMode);\n          break;\n        case \"invariantLevel\":\n          let invariantLevelString = args.shift();\n          if (isNaN(invariantLevelString)) {\n            console.error(\"invariantLevel must be a number\");\n            process.exit(1);\n          }\n          invariantLevel = parseInt(invariantLevelString, 10);\n          reproArguments.push(\"--invariantLevel\", invariantLevel.toString());\n          break;\n        case \"debugDiagnosticSeverity\":\n          arg = args.shift();\n          if (!DiagnosticSeverityValues.includes(arg)) {\n            console.error(`Unsupported debugDiagnosticSeverity: ${arg}`);\n            process.exit(1);\n          }\n          invariant(\n            arg === \"FatalError\" || arg === \"RecoverableError\" || arg === \"Warning\" || arg === \"Information\",\n            `Invalid debugger diagnostic severity: ${arg}`\n          );\n          debuggerConfigArgs.diagnosticSeverity = arg;\n          reproArguments.push(\"--debugDiagnosticSeverity\", arg);\n          break;\n        case \"debugBuckRoot\":\n          let buckRoot = args.shift();\n          debuggerConfigArgs.buckRoot = buckRoot;\n          if (debugReproArgs) debugReproArgs.buckRoot = buckRoot;\n          // Use $(pwd)  instead of argument so repro script can be run from\n          // any computer, not just the one it was generated on.\n          // All sourcefiles are placed directly in the repro, so the repro folder is the buckRoot.\n          reproArguments.push(\"--debugBuckRoot\", \"$(pwd)\");\n          break;\n        case \"externalPrepackPath\":\n          externalPrepackPath = args.shift();\n          break;\n        case \"help\":\n          const options = [\n            \"-- | input.js\",\n            \"--out output.js\",\n            \"--compatibility jsc\",\n            \"--mathRandomSeed seedvalue\",\n            \"--srcmapIn inputMap\",\n            \"--srcmapOut outputMap\",\n            \"--maxStackDepth depthValue\",\n            \"--timeout seconds\",\n            \"--debugIdentifiers id1,id2,...\",\n            \"--check [start[, number]]\",\n            \"--lazyObjectsRuntime lazyObjectsRuntimeName\",\n            \"--heapGraphFilePath heapGraphFilePath\",\n            \"--dumpIRFilePath dumpIRFilePath\",\n            \"--reactOutput \" + ReactOutputValues.join(\" | \"),\n            \"--repro reprofile.zip\",\n            \"--cpuprofile name.cpuprofile\",\n            \"--invariantMode \" + InvariantModeValues.join(\" | \"),\n            \"--warnAsError\",\n            \"--diagnosticAsError PPxxxx,PPyyyy,...\",\n            \"--noDiagnostic PPxxxx,PPyyyy,...\",\n          ];\n          for (let flag of Object.keys(flags)) options.push(`--${flag}`);\n\n          console.log(\"Usage: prepack.js \" + options.map(option => `[ ${option} ]`).join(\" \") + \"\\n\" + HELP_STR);\n          return;\n        case \"version\":\n          console.log(version);\n          return;\n        default:\n          if (arg in flags) {\n            flags[arg] = true;\n            reproArguments.push(\"--\" + arg);\n          } else {\n            console.error(`Unknown option: ${arg}`);\n            process.exit(1);\n          }\n      }\n    }\n  }\n\n  let resolvedOptions = Object.assign(\n    {},\n    {\n      compatibility,\n      mathRandomSeed,\n      inputSourceMapFilenames,\n      errorHandler,\n      sourceMaps: !!outputSourceMap,\n      maxStackDepth,\n      timeout,\n      debugIdentifiers,\n      check,\n      serialize: !check,\n      lazyObjectsRuntime,\n      debugInFilePath,\n      debugOutFilePath,\n      reactOutput,\n      invariantMode,\n      invariantLevel,\n      debuggerConfigArgs,\n      debugReproArgs,\n      modulesToInitialize,\n    },\n    flags\n  );\n  if (heapGraphFilePath !== undefined) resolvedOptions.heapGraphFormat = \"DotLanguage\";\n  if (dumpIRFilePath !== undefined) {\n    resolvedOptions.onExecute = (realm, optimizedFunctions) => {\n      let text = \"\";\n      new TextPrinter(line => {\n        text += line + \"\\n\";\n      }).print(realm, optimizedFunctions);\n      invariant(dumpIRFilePath !== undefined);\n      fs.writeFileSync(dumpIRFilePath, text);\n    };\n  }\n  if (lazyObjectsRuntime !== undefined && (resolvedOptions.delayInitializations || resolvedOptions.inlineExpressions)) {\n    console.error(\"lazy objects feature is incompatible with delayInitializations and inlineExpressions options\");\n    process.exit(1);\n  }\n\n  let compilerDiagnostics: Map<BabelNodeSourceLocation, CompilerDiagnostic> = new Map();\n  let compilerDiagnosticsList: Array<CompilerDiagnostic> = [];\n  function errorHandler(compilerDiagnostic: CompilerDiagnostic): ErrorHandlerResult {\n    if (noDiagnostic !== undefined && noDiagnostic.has(compilerDiagnostic.errorCode)) return \"Recover\";\n    if (\n      (warnAsError && compilerDiagnostic.severity === \"Warning\") ||\n      (diagnosticAsError !== undefined &&\n        diagnosticAsError.has(compilerDiagnostic.errorCode) &&\n        compilerDiagnostic.severity !== \"FatalError\")\n    ) {\n      compilerDiagnostic = new CompilerDiagnostic(\n        compilerDiagnostic.message,\n        compilerDiagnostic.location,\n        compilerDiagnostic.errorCode,\n        \"RecoverableError\",\n        compilerDiagnostic.sourceFilePaths\n      );\n    }\n    if (compilerDiagnostic.location) compilerDiagnostics.set(compilerDiagnostic.location, compilerDiagnostic);\n    else compilerDiagnosticsList.push(compilerDiagnostic);\n    return compilerDiagnostic.severity === \"FatalError\" ? \"Fail\" : \"Recover\";\n  }\n\n  function printDiagnostics(caughtFatalError: boolean, caughtUnexpectedError: boolean = false): boolean {\n    if (compilerDiagnostics.size === 0 && compilerDiagnosticsList.length === 0) {\n      // FatalErrors must have generated at least one CompilerDiagnostic.\n      invariant(!caughtFatalError, \"FatalError must generate at least one CompilerDiagnostic\");\n      return !caughtUnexpectedError;\n    }\n\n    let informations = 0;\n    let warnings = 0;\n    let recoverableErrors = 0;\n    let fatalErrors = 0;\n    let printCompilerDiagnostic = (\n      compilerDiagnostic: CompilerDiagnostic,\n      locString?: string = \"At an unknown location\"\n    ) => {\n      switch (compilerDiagnostic.severity) {\n        case \"Information\":\n          informations++;\n          break;\n        case \"Warning\":\n          warnings++;\n          break;\n        case \"RecoverableError\":\n          recoverableErrors++;\n          break;\n        default:\n          invariant(compilerDiagnostic.severity === \"FatalError\");\n          fatalErrors++;\n          break;\n      }\n      console.error(\n        `${locString} ${compilerDiagnostic.severity} ${compilerDiagnostic.errorCode}: ${compilerDiagnostic.message}` +\n          ` (https://github.com/facebook/prepack/wiki/${compilerDiagnostic.errorCode})`\n      );\n      let callStack = compilerDiagnostic.callStack;\n      if (callStack !== undefined) {\n        let eolPos = callStack.indexOf(\"\\n\");\n        if (eolPos > 0) console.error(callStack.substring(eolPos + 1));\n      }\n    };\n    for (let [loc, compilerDiagnostic] of compilerDiagnostics) {\n      let sourceMessage = \"\";\n      switch (loc.source) {\n        case null:\n        case \"\":\n          sourceMessage = \"In an unknown source file\";\n          break;\n        case \"no-filename-specified\":\n          sourceMessage = \"In stdin\";\n          break;\n        default:\n          invariant(loc !== null && loc.source !== null);\n          sourceMessage = `In input file ${loc.source}`;\n          break;\n      }\n\n      let locString = `${sourceMessage}(${loc.start.line}:${loc.start.column + 1})`;\n      printCompilerDiagnostic(compilerDiagnostic, locString);\n    }\n    for (let compilerDiagnostic of compilerDiagnosticsList) printCompilerDiagnostic(compilerDiagnostic);\n    invariant(informations + warnings + recoverableErrors + fatalErrors > 0);\n    let plural = (count, word) => (count === 1 ? word : `${word}s`);\n    const success = fatalErrors === 0 && recoverableErrors === 0 && !caughtUnexpectedError;\n    console.error(\n      `Prepack ${success ? \"succeeded\" : \"failed\"}, reporting ${[\n        fatalErrors > 0 ? `${fatalErrors} ${plural(fatalErrors, \"fatal error\")}` : undefined,\n        recoverableErrors > 0 ? `${recoverableErrors} ${plural(recoverableErrors, \"recoverable error\")}` : undefined,\n        warnings > 0 ? `${warnings} ${plural(warnings, \"warning\")}` : undefined,\n        informations > 0 ? `${informations} ${plural(informations, \"informational message\")}` : undefined,\n      ]\n        .filter(s => s !== undefined)\n        .join(\", \")}.`\n    );\n\n    return success;\n  }\n\n  let profiler;\n  let success;\n  let debugReproSourceFiles = [];\n  let debugReproSourceMaps = [];\n\n  try {\n    if (cpuprofilePath !== undefined) {\n      try {\n        profiler = require(\"v8-profiler-node8\");\n      } catch (e) {\n        // Profiler optional dependency failed\n        console.error(\"v8-profiler-node8 doesn't work correctly on Windows, see issue #1695\");\n        throw e;\n      }\n      profiler.setSamplingInterval(100); // default is 1000us\n      profiler.startProfiling(\"\");\n    }\n\n    try {\n      if (inputFilenames.length === 0) {\n        prepackStdin(resolvedOptions, processSerializedCode, printDiagnostics);\n        return;\n      }\n      let serialized = prepackFileSync(inputFilenames, resolvedOptions);\n      if (reproMode === \"reproUnconditionally\") {\n        if (serialized.sourceFilePaths) {\n          debugReproSourceFiles = serialized.sourceFilePaths.sourceFiles;\n          debugReproSourceMaps = serialized.sourceFilePaths.sourceMaps;\n        } else {\n          // An input can have no sourcemap/sourcefiles, but we can still package\n          // the input files, prepack runtime, and generate the script.\n          debugReproSourceFiles = [];\n          debugReproSourceMaps = [];\n        }\n      }\n\n      success = printDiagnostics(false);\n      if (resolvedOptions.serialize && serialized) processSerializedCode(serialized);\n    } catch (err) {\n      success = printDiagnostics(err instanceof FatalError, !(err instanceof FatalError));\n      invariant(!success);\n      if (!(err instanceof FatalError)) {\n        // if it is not a FatalError, it means prepack failed, and we should display the Prepack stack trace.\n        console.error(`unexpected ${err}:\\n${err.stack}`);\n      }\n      if (reproMode) {\n        // Get largest list of original sources from all diagnostics.\n        // Must iterate through both because maps are ordered so we can't tell which diagnostic is most recent.\n        let largestLength = 0;\n\n        let allDiagnostics = Array.from(compilerDiagnostics.values()).concat(compilerDiagnosticsList);\n        allDiagnostics.forEach(diagnostic => {\n          if (\n            diagnostic.sourceFilePaths &&\n            diagnostic.sourceFilePaths.sourceFiles &&\n            diagnostic.sourceFilePaths.sourceMaps\n          ) {\n            if (diagnostic.sourceFilePaths.sourceFiles.length > largestLength) {\n              debugReproSourceFiles = diagnostic.sourceFilePaths.sourceFiles;\n              largestLength = diagnostic.sourceFilePaths.sourceFiles.length;\n              debugReproSourceMaps = diagnostic.sourceFilePaths.sourceMaps;\n            }\n          }\n        });\n      }\n    }\n  } finally {\n    if (profiler !== undefined) {\n      let data = profiler.stopProfiling(\"\");\n      let start = Date.now();\n      invariant(cpuprofilePath !== undefined);\n      let stream = fs.createWriteStream(cpuprofilePath);\n      let getNextToken = JSONTokenizer(data);\n      let write = () => {\n        for (let token = getNextToken(); token !== undefined; token = getNextToken()) {\n          if (!stream.write(token)) {\n            stream.once(\"drain\", write);\n            return;\n          }\n        }\n        stream.end();\n        invariant(cpuprofilePath !== undefined);\n        console.log(`Wrote ${cpuprofilePath} in ${Date.now() - start}ms`);\n      };\n      write();\n    }\n  }\n\n  function processSerializedCode(serialized: SerializedResult) {\n    if (serialized.code === \"\") {\n      console.error(\"Prepack returned empty code.\");\n      return;\n    }\n    if (outputFilename) {\n      console.log(`Prepacked source code written to ${outputFilename}.`);\n      fs.writeFileSync(outputFilename, serialized.code);\n    } else {\n      console.log(serialized.code);\n    }\n    if (statsFileName) {\n      let statistics = serialized.statistics;\n      if (statistics === undefined) {\n        return;\n      }\n      let stats = {\n        RealmStatistics: statistics.getRealmStatistics(),\n        SerializerStatistics: statistics.getSerializerStatistics(),\n        TimingStatistics: statistics.projectPerformanceTrackers(\"Time\", pt => pt.time),\n        HeapStatistics: statistics.projectPerformanceTrackers(\"Memory\", pt => pt.memory),\n        MemoryStatistics: v8.getHeapStatistics(),\n      };\n      fs.writeFileSync(statsFileName, JSON.stringify(stats));\n    }\n    if (outputSourceMap) {\n      fs.writeFileSync(outputSourceMap, serialized.map ? JSON.stringify(serialized.map) : \"\");\n    }\n    if (heapGraphFilePath !== undefined) {\n      invariant(serialized.heapGraph);\n      fs.writeFileSync(heapGraphFilePath, serialized.heapGraph);\n    }\n  }\n\n  // If there will be a repro going on, don't exit.\n  // The repro involves an async directory zip, so exiting here will cause the repro\n  // to not complete. Instead, all calls to repro include a flag to indicate\n  // whether or not it should process.exit() upon completion.\n  if (!success && reproMode === undefined) {\n    process.exit(1);\n  } else if ((!success && reproMode === \"reproOnFatalError\") || reproMode === \"reproUnconditionally\") {\n    if (debugReproPackager) {\n      debugReproPackager.generateDebugRepro(\n        !success,\n        debugReproSourceFiles,\n        debugReproSourceMaps,\n        reproFilePath,\n        reproFileNames,\n        reproArguments,\n        externalPrepackPath\n      );\n    } else {\n      console.error(\"Debug Repro Packager was not initialized.\");\n      process.exit(1);\n    }\n  }\n}\n\nif (typeof __residual === \"function\") {\n  // If we're running inside of Prepack. This is the residual function we'll\n  // want to leave untouched in the final program.\n  __residual(\n    \"boolean\",\n    run,\n    Object,\n    Array,\n    console,\n    JSON,\n    process,\n    prepackStdin,\n    prepackFileSync,\n    FatalError,\n    CompatibilityValues,\n    fs\n  );\n} else {\n  run(Object, Array, console, JSON, process, prepackStdin, prepackFileSync, FatalError, CompatibilityValues, fs);\n}\n"],"file":"prepack-cli.js"}