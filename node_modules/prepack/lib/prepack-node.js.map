{"version":3,"sources":["../src/prepack-node.js"],"names":["createStatistics","options","gc","global","profile","undefined","SerializerStatistics","Date","now","process","memoryUsage","heapUsed","prepackStdin","defaultOptions","processSerializedCode","printDiagnostics","sourceMapFilename","inputSourceMapFilenames","length","stdin","setEncoding","resume","on","code","fs","readFile","mapErr","sourceMap","console","warn","filename","serialized","success","filePath","fileContents","sourceMapContents","err","FatalError","error","stack","exit","getSourceMapFilename","path","basename","prepackFile","callback","fileErrorHandler","fileErr","_sourceMap","getSourceFileCollection","filenames","sourceFiles","map","readFileSync","matchedSourceMapFilename","info","_e","SourceFileCollection","prepackFileSync","sourceFileCollection","filterValidSourceMaps","a","filter","sf","debugInFilePath","debugOutFilePath","debuggerConfigArgs","ioWrapper","FileIOWrapper","debugChannel","DebugChannel","sourcemaps","toArray","debugReproArgs"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/*\n Prepack API functions that require Node as the execution environment for Prepack.\n */\n\n/* @flow */\nimport { defaultOptions } from \"./options\";\nimport { FatalError } from \"./errors.js\";\nimport { type PrepackOptions } from \"./prepack-options\";\nimport { prepackSources } from \"./prepack-standalone.js\";\nimport { type SourceMap, SourceFileCollection } from \"./types.js\";\nimport { DebugChannel } from \"./debugger/server/channel/DebugChannel.js\";\nimport { FileIOWrapper } from \"./debugger/common/channel/FileIOWrapper.js\";\nimport { type SerializedResult } from \"./serializer/types.js\";\nimport { SerializerStatistics } from \"./serializer/statistics.js\";\n\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport * from \"./prepack-standalone\";\n\nfunction createStatistics(options: PrepackOptions) {\n  let gc = global.gc; // eslint-disable-line no-undef\n  return options.profile !== undefined\n    ? new SerializerStatistics(\n        () => Date.now(),\n        () => {\n          if (gc) gc();\n          return process.memoryUsage().heapUsed;\n        },\n        !!gc\n      )\n    : new SerializerStatistics();\n}\n\nexport function prepackStdin(\n  options: PrepackOptions = defaultOptions,\n  processSerializedCode: SerializedResult => void,\n  printDiagnostics: boolean => boolean\n): void | SerializedResult {\n  let sourceMapFilename =\n    options.inputSourceMapFilenames && options.inputSourceMapFilenames.length > 0\n      ? options.inputSourceMapFilenames[0]\n      : \"\";\n  process.stdin.setEncoding(\"utf8\");\n  process.stdin.resume();\n  process.stdin.on(\"data\", function(code) {\n    fs.readFile(sourceMapFilename, \"utf8\", function(mapErr, sourceMap = \"\") {\n      if (mapErr) {\n        //if no sourcemap was provided we silently ignore\n        if (sourceMapFilename !== \"\") console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n      }\n      let filename = \"no-filename-specified\";\n      let serialized;\n      let success;\n      try {\n        serialized = prepackSources(\n          [{ filePath: filename, fileContents: code, sourceMapContents: sourceMap }],\n          options,\n          createStatistics(options)\n        );\n        processSerializedCode(serialized);\n        success = printDiagnostics(false);\n      } catch (err) {\n        printDiagnostics(err instanceof FatalError);\n        if (!(err instanceof FatalError)) {\n          // if it is not a FatalError, it means prepack failed, and we should display the Prepack stack trace.\n          console.error(err.stack);\n        }\n        success = false;\n      }\n      if (!success) process.exit(1);\n    });\n  });\n}\n\nfunction getSourceMapFilename(filename: string, options: PrepackOptions): [string, boolean] {\n  if (options.inputSourceMapFilenames !== undefined) {\n    // The convention is that the source map has the same basename as the javascript\n    // source file, except that .map is appended. We look for a match with the\n    // supplied source file names.\n    for (let sourceMapFilename of options.inputSourceMapFilenames) {\n      if (path.basename(filename) + \".map\" === path.basename(sourceMapFilename)) {\n        return [sourceMapFilename, true];\n      }\n    }\n  }\n\n  return [filename + \".map\", false];\n}\nexport function prepackFile(\n  filename: string,\n  options: PrepackOptions = defaultOptions,\n  callback: (any, ?{ code: string, map?: SourceMap }) => void,\n  fileErrorHandler?: (err: ?Error) => void\n): void {\n  let [sourceMapFilename] = getSourceMapFilename(filename, options);\n\n  fs.readFile(filename, \"utf8\", function(fileErr, code) {\n    if (fileErr) {\n      if (fileErrorHandler) fileErrorHandler(fileErr);\n      return;\n    }\n    fs.readFile(sourceMapFilename, \"utf8\", function(mapErr, _sourceMap) {\n      let sourceMap = _sourceMap;\n      if (mapErr) {\n        console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n        sourceMap = \"\";\n      }\n      let serialized;\n      try {\n        serialized = prepackSources(\n          [{ filePath: filename, fileContents: code, sourceMapContents: sourceMap }],\n          options,\n          createStatistics(options)\n        );\n      } catch (err) {\n        callback(err, null);\n        return;\n      }\n      callback(null, serialized);\n    });\n  });\n}\n\nfunction getSourceFileCollection(filenames: Array<string>, options: PrepackOptions) {\n  const sourceFiles = filenames.map(filename => {\n    let code = fs.readFileSync(filename, \"utf8\");\n    let sourceMap = \"\";\n    let [sourceMapFilename, matchedSourceMapFilename] = getSourceMapFilename(filename, options);\n\n    try {\n      sourceMap = fs.readFileSync(sourceMapFilename, \"utf8\");\n      if (matchedSourceMapFilename) console.info(`Matching sourcemap found at ${sourceMapFilename}.`);\n    } catch (_e) {\n      if (matchedSourceMapFilename) console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n    }\n    return {\n      filePath: filename,\n      fileContents: code,\n      sourceMapContents: sourceMap,\n      sourceMapFilename: sourceMapFilename,\n    };\n  });\n\n  return new SourceFileCollection(sourceFiles);\n}\n\nexport function prepackFileSync(filenames: Array<string>, options: PrepackOptions = defaultOptions): SerializedResult {\n  let sourceFileCollection = getSourceFileCollection(filenames, options);\n\n  // Filter to not include sourcemaps that weren't found\n  let filterValidSourceMaps = a => a.filter(sf => sf.sourceMapContents !== \"\");\n\n  // The existence of debug[In/Out]FilePath represents the desire to use the debugger.\n  if (options.debugInFilePath !== undefined && options.debugOutFilePath !== undefined) {\n    if (options.debuggerConfigArgs === undefined) options.debuggerConfigArgs = {};\n    let debuggerConfigArgs = options.debuggerConfigArgs;\n\n    let ioWrapper = new FileIOWrapper(false, options.debugInFilePath, options.debugOutFilePath);\n    debuggerConfigArgs.debugChannel = new DebugChannel(ioWrapper);\n    debuggerConfigArgs.sourcemaps = filterValidSourceMaps(sourceFileCollection.toArray());\n  }\n\n  let debugReproArgs = options.debugReproArgs;\n  if (debugReproArgs) debugReproArgs.sourcemaps = filterValidSourceMaps(sourceFileCollection.toArray());\n\n  return prepackSources(sourceFileCollection, options, createStatistics(options));\n}\n"],"file":"prepack-node.js"}