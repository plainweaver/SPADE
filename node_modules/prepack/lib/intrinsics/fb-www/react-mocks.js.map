{"version":3,"sources":["../../../src/intrinsics/fb-www/react-mocks.js"],"names":["reactCode","reactAst","plugins","createMockReact","realm","reactRequireName","reactFactory","Environment","GetValue","$GlobalEnv","evaluate","ECMAScriptSourceFunctionValue","currentOwner","react","ObjectValue","intrinsics","ObjectPrototype","factory","$Call","undefined","mockReactElementBuilder","NativeFunctionValue","context","type","key","ref","props","reactValue","refuseSerialization","name","updatePrototype","config","children","Value","null","AbstractValue","AbstractObjectValue","To","ToObject","Array","isArray","length","array","Create","ArrayCreate","i","CreateDataPropertyOrThrow","makeFinal","element","NullValue","funcValue","defaultValue","consumerObject","providerObject","consumer","createTemporalFromBuildFunction","skipInvariant","isPure","values","ValuesDomain","Set","provider","Properties","NumberValue","funcVal","createRef","FunctionValue"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { parseExpression } from \"@babel/parser\";\nimport { ValuesDomain } from \"../../domains/index.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  NativeFunctionValue,\n  NullValue,\n  NumberValue,\n  ObjectValue,\n  Value,\n} from \"../../values/index.js\";\nimport { Environment } from \"../../singletons.js\";\nimport { createInternalReactElement, getReactSymbol } from \"../../react/utils.js\";\nimport { cloneReactElement, createReactElement } from \"../../react/elements.js\";\nimport { Properties, Create, To } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\nimport { updateIntrinsicNames, addMockFunctionToObject } from \"./utils.js\";\nimport { createOperationDescriptor } from \"../../utils/generator.js\";\n\n// most of the code here was taken from https://github.com/facebook/react/blob/master/packages/react/src/ReactElement.js\nlet reactCode = `\n  function createReact(\n    REACT_ELEMENT_TYPE,\n    REACT_FRAGMENT_TYPE,\n    REACT_PORTAL_TYPE,\n    REACT_FORWARD_REF_TYPE,\n    ReactElement,\n    ReactCurrentOwner\n  ) {\n    function makeEmptyFunction(arg) {\n      return function() {\n        return arg;\n      };\n    }\n    var emptyFunction = function() {};\n\n    emptyFunction.thatReturns = makeEmptyFunction;\n    emptyFunction.thatReturnsFalse = makeEmptyFunction(false);\n    emptyFunction.thatReturnsTrue = makeEmptyFunction(true);\n    emptyFunction.thatReturnsNull = makeEmptyFunction(null);\n    emptyFunction.thatReturnsThis = function() { return this; };\n    emptyFunction.thatReturnsArgument = function(arg) { return arg; };\n\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var RESERVED_PROPS = {\n      key: true,\n      ref: true,\n      __self: true,\n      __source: true,\n    };\n\n    function hasValidRef(config) {\n      return config.ref !== undefined;\n    }\n\n    function hasValidKey(config) {\n      return config.key !== undefined;\n    }\n\n    function Component(props, context) {\n      this.props = props;\n      this.context = context;\n      this.refs = {};\n      this.setState = function () {}; // NO-OP\n      this.setState.__PREPACK_MOCK__ = true;\n    }\n\n    Component.prototype.isReactComponent = {};\n\n    function PureComponent(props, context) {\n      this.props = props;\n      this.context = context;\n      this.refs = {};\n      this.setState = function () {}; // NO-OP\n      this.setState.__PREPACK_MOCK__ = true;\n    }\n\n    PureComponent.prototype.isReactComponent = {};\n    PureComponent.prototype.isPureReactComponent = true;\n\n    function forwardRef(render) {\n      // NOTE: In development there are a bunch of warnings which will be logged to validate the \\`render\\` function.\n      // Since Prepack is a production only tool (for now) we don’t include these warnings.\n      //\n      // https://github.com/facebook/react/blob/f9358c51c8de93abe3cdd0f4720b489befad8c48/packages/react/src/forwardRef.js\n      return {\n        $$typeof: REACT_FORWARD_REF_TYPE,\n        render,\n      };\n    }\n\n    var userProvidedKeyEscapeRegex = /\\/+/g;\n\n    function escapeUserProvidedKey(text) {\n      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n    }\n\n    function escape(key) {\n      const escapeRegex = /[=:]/g;\n      const escaperLookup = {\n        '=': '=0',\n        ':': '=2',\n      };\n      const escapedString = ('' + key).replace(escapeRegex, function(match) {\n        return escaperLookup[match];\n      });\n\n      return '$' + escapedString;\n    }\n\n    var SEPARATOR = '.';\n    var SUBSEPARATOR = ':';\n    var POOL_SIZE = 10;\n    function getPooledTraverseContext(\n      mapResult,\n      keyPrefix,\n      mapFunction,\n      mapContext,\n    ) {\n      return {\n        result: mapResult,\n        keyPrefix: keyPrefix,\n        func: mapFunction,\n        context: mapContext,\n        count: 0,\n      };\n    }\n\n    function traverseAllChildren(children, callback, traverseContext) {\n      if (children == null) {\n        return 0;\n      }\n\n      return traverseAllChildrenImpl(children, '', callback, traverseContext);\n    }\n\n    function getComponentKey(component, index) {\n      // Do some typechecking here since we call this blindly. We want to ensure\n      // that we don't block potential future ES APIs.\n      if (\n        typeof component === 'object' &&\n        component !== null &&\n        component.key != null\n      ) {\n        // Explicit key\n        return escape(component.key);\n      }\n      // Implicit key determined by the index in the set\n      return index.toString(36);\n    }\n\n    function traverseAllChildrenImpl(\n      children,\n      nameSoFar,\n      callback,\n      traverseContext,\n    ) {\n      const type = typeof children;\n\n      if (type === 'undefined' || type === 'boolean') {\n        // All of the above are perceived as null.\n        children = null;\n      }\n\n      let invokeCallback = false;\n\n      if (children === null) {\n        invokeCallback = true;\n      } else {\n        switch (type) {\n          case 'string':\n          case 'number':\n            invokeCallback = true;\n            break;\n          case 'object':\n            switch (children.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n              case REACT_PORTAL_TYPE:\n                invokeCallback = true;\n            }\n        }\n      }\n\n      if (invokeCallback) {\n        callback(\n          traverseContext,\n          children,\n          // If it's the only child, treat the name as if it was wrapped in an array\n          // so that it's consistent if the number of children grows.\n          nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,\n        );\n        return 1;\n      }\n\n      let child;\n      let nextName;\n      let subtreeCount = 0; // Count of children found in the current subtree.\n      const nextNamePrefix =\n        nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n      if (Array.isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          child = children[i];\n          nextName = nextNamePrefix + getComponentKey(child, i);\n          subtreeCount += traverseAllChildrenImpl(\n            child,\n            nextName,\n            callback,\n            traverseContext,\n          );\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          var iterator = iteratorFn.call(children);\n          let step;\n          let ii = 0;\n          while (!(step = iterator.next()).done) {\n            child = step.value;\n            nextName = nextNamePrefix + getComponentKey(child, ii++);\n            subtreeCount += traverseAllChildrenImpl(\n              child,\n              nextName,\n              callback,\n              traverseContext,\n            );\n          }\n        } else if (type === 'object') {\n          let addendum = '';\n          var childrenString = '' + children;\n        }\n      }\n\n      return subtreeCount;\n    }\n\n    function cloneAndReplaceKey(oldElement, newKey) {\n      var newElement = ReactElement(\n        oldElement.type,\n        newKey,\n        oldElement.ref,\n        oldElement.props,\n      );\n    \n      return newElement;\n    }\n\n    function mapSingleChildIntoContext(bookKeeping, child, childKey) {\n      var {result, keyPrefix, func, context} = bookKeeping;\n    \n      let mappedChild = func.call(context, child);\n      if (Array.isArray(mappedChild)) {\n        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, c => c);\n      } else if (mappedChild != null) {\n        if (isValidElement(mappedChild)) {\n          mappedChild = cloneAndReplaceKey(\n            mappedChild,\n            // Keep both the (mapped) and old keys if they differ, just as\n            // traverseAllChildren used to do for objects as children\n            keyPrefix +\n              (mappedChild.key && (!child || child.key !== mappedChild.key)\n                ? escapeUserProvidedKey(mappedChild.key) + '/'\n                : '') +\n              childKey,\n          );\n        }\n        result.push(mappedChild);\n      }\n    }\n\n    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n      var escapedPrefix = '';\n      if (prefix != null) {\n        escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n      }\n      const traverseContext = getPooledTraverseContext(\n        array,\n        escapedPrefix,\n        func,\n        context,\n      );\n      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n    }\n\n    function forEachSingleChild(bookKeeping, child, name) {\n      var {func, context} = bookKeeping;\n      func.call(context, child);\n    }\n\n    function forEachChildren(children, forEachFunc, forEachContext) {\n      if (children == null) {\n        return children;\n      }\n      var traverseContext = getPooledTraverseContext(\n        null,\n        null,\n        forEachFunc,\n        forEachContext,\n      );\n      traverseAllChildren(children, forEachSingleChild, traverseContext);\n    }\n\n    function mapChildren(children, func, context) {\n      if (children == null) {\n        return children;\n      }\n      var result = [];\n      mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n      return result;\n    }\n\n    function countChildren(children) {\n      return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);\n    }\n\n    function onlyChild(children) {\n      return children;\n    }\n\n    function toArray(children) {\n      var result = [];\n      mapIntoWithKeyPrefixInternal(\n        children,\n        result,\n        null,\n        emptyFunction.thatReturnsArgument,\n      );\n      return result;\n    }\n\n    function isValidElement(object) {\n      return (\n        typeof object === 'object' &&\n        object !== null &&\n        object.$$typeof === REACT_ELEMENT_TYPE\n      );\n    }\n\n    function shim() {\n\n    }\n    shim.isRequired = shim;\n\n    function getShim() {\n      return shim;\n    };\n\n    var ReactPropTypes = {\n      array: shim,\n      bool: shim,\n      func: shim,\n      number: shim,\n      object: shim,\n      string: shim,\n      symbol: shim,\n\n      any: shim,\n      arrayOf: getShim,\n      element: shim,\n      instanceOf: getShim,\n      node: shim,\n      objectOf: getShim,\n      oneOf: getShim,\n      oneOfType: getShim,\n      shape: getShim,\n      exact: getShim\n    };\n\n    ReactPropTypes.checkPropTypes = shim;\n    ReactPropTypes.PropTypes = ReactPropTypes;\n\n    var ReactSharedInternals = {\n      ReactCurrentOwner,\n    };\n\n    return {\n      Children: {\n        forEach: forEachChildren,\n        map: mapChildren,\n        count: countChildren,\n        only: onlyChild,\n        toArray,\n      },\n      Component,\n      PureComponent,\n      forwardRef,\n      Fragment: REACT_FRAGMENT_TYPE,\n      isValidElement,\n      version: \"16.2.0\",\n      PropTypes: ReactPropTypes,\n      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals,\n    };\n  }\n`;\nlet reactAst = parseExpression(reactCode, { plugins: [\"flow\"] });\n\nexport function createMockReact(realm: Realm, reactRequireName: string): ObjectValue {\n  let reactFactory = Environment.GetValue(realm, realm.$GlobalEnv.evaluate(reactAst, false));\n  invariant(reactFactory instanceof ECMAScriptSourceFunctionValue);\n\n  let currentOwner = (realm.react.currentOwner = new ObjectValue(\n    realm,\n    realm.intrinsics.ObjectPrototype,\n    \"currentOwner\"\n  ));\n  // this is to get around Flow getting confused\n  let factory = reactFactory.$Call;\n  invariant(factory !== undefined);\n\n  let mockReactElementBuilder = new NativeFunctionValue(\n    realm,\n    undefined,\n    \"ReactElement\",\n    0,\n    (context, [type, key, ref, props]) => {\n      invariant(props instanceof ObjectValue);\n      return createInternalReactElement(realm, type, key, ref, props);\n    }\n  );\n\n  let reactValue = factory(realm.intrinsics.undefined, [\n    getReactSymbol(\"react.element\", realm),\n    getReactSymbol(\"react.fragment\", realm),\n    getReactSymbol(\"react.portal\", realm),\n    getReactSymbol(\"react.forward_ref\", realm),\n    mockReactElementBuilder,\n    currentOwner,\n  ]);\n  invariant(reactValue instanceof ObjectValue);\n  reactValue.refuseSerialization = true;\n\n  // update existing properties with the new intrinsic mock values\n  updateIntrinsicNames(realm, reactValue, reactRequireName, [\n    \"PropTypes\",\n    \"Children\",\n    \"isValidElement\",\n    { name: \"Component\", updatePrototype: true },\n    { name: \"PureComponent\", updatePrototype: true },\n  ]);\n\n  addMockFunctionToObject(\n    realm,\n    reactValue,\n    reactRequireName,\n    \"createElement\",\n    (context, [type, config, ...children]) => {\n      invariant(type instanceof Value);\n      // if config is undefined/null, use an empy object\n      if (config === realm.intrinsics.undefined || config === realm.intrinsics.null || config === undefined) {\n        config = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n      }\n      if (config instanceof AbstractValue && !(config instanceof AbstractObjectValue)) {\n        config = To.ToObject(realm, config);\n      }\n      invariant(config instanceof ObjectValue || config instanceof AbstractObjectValue);\n\n      if (Array.isArray(children)) {\n        if (children.length === 0) {\n          children = undefined;\n        } else if (children.length === 1) {\n          children = children[0];\n        } else {\n          let array = Create.ArrayCreate(realm, 0);\n          let length = children.length;\n\n          for (let i = 0; i < length; i++) {\n            Create.CreateDataPropertyOrThrow(realm, array, \"\" + i, children[i]);\n          }\n          children = array;\n          children.makeFinal();\n        }\n      }\n      return createReactElement(realm, type, config, children);\n    }\n  );\n\n  addMockFunctionToObject(\n    realm,\n    reactValue,\n    reactRequireName,\n    \"cloneElement\",\n    (context, [element, config, ...children]) => {\n      invariant(element instanceof ObjectValue);\n      // if config is undefined/null, use an empy object\n      if (config === realm.intrinsics.undefined || config === realm.intrinsics.null || config === undefined) {\n        config = realm.intrinsics.null;\n      }\n      if (config instanceof AbstractValue && !(config instanceof AbstractObjectValue)) {\n        config = To.ToObject(realm, config);\n      }\n      invariant(config instanceof ObjectValue || config instanceof AbstractObjectValue || config instanceof NullValue);\n\n      if (Array.isArray(children)) {\n        if (children.length === 0) {\n          children = undefined;\n        } else if (children.length === 1) {\n          children = children[0];\n        } else {\n          let array = Create.ArrayCreate(realm, 0);\n          let length = children.length;\n\n          for (let i = 0; i < length; i++) {\n            Create.CreateDataPropertyOrThrow(realm, array, \"\" + i, children[i]);\n          }\n          children = array;\n          children.makeFinal();\n        }\n      }\n      return cloneReactElement(realm, element, config, children);\n    }\n  );\n\n  addMockFunctionToObject(\n    realm,\n    reactValue,\n    reactRequireName,\n    \"createContext\",\n    (funcValue, [defaultValue = realm.intrinsics.undefined]) => {\n      invariant(defaultValue instanceof Value);\n      let consumerObject = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n      let providerObject = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n      let consumer = AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        ObjectValue,\n        [funcValue, defaultValue],\n        createOperationDescriptor(\"REACT_TEMPORAL_FUNC\"),\n        { skipInvariant: true, isPure: true }\n      );\n      invariant(consumer instanceof AbstractObjectValue);\n      consumer.values = new ValuesDomain(new Set([consumerObject]));\n\n      let provider = AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        ObjectValue,\n        [consumer],\n        createOperationDescriptor(\"REACT_CREATE_CONTEXT_PROVIDER\"),\n        { skipInvariant: true, isPure: true }\n      );\n      invariant(provider instanceof AbstractObjectValue);\n      provider.values = new ValuesDomain(new Set([providerObject]));\n\n      Properties.Set(realm, consumerObject, \"$$typeof\", getReactSymbol(\"react.context\", realm), true);\n      Properties.Set(realm, consumerObject, \"currentValue\", defaultValue, true);\n      Properties.Set(realm, consumerObject, \"defaultValue\", defaultValue, true);\n      Properties.Set(realm, consumerObject, \"changedBits\", new NumberValue(realm, 0), true);\n      Properties.Set(realm, consumerObject, \"Consumer\", consumer, true);\n\n      Properties.Set(realm, providerObject, \"$$typeof\", getReactSymbol(\"react.provider\", realm), true);\n      Properties.Set(realm, providerObject, \"context\", consumer, true);\n\n      Properties.Set(realm, consumerObject, \"Provider\", provider, true);\n      return consumer;\n    }\n  );\n\n  addMockFunctionToObject(realm, reactValue, reactRequireName, \"createRef\", funcVal => {\n    let createRef = AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      FunctionValue,\n      [funcVal],\n      createOperationDescriptor(\"REACT_TEMPORAL_FUNC\"),\n      { skipInvariant: true, isPure: true }\n    );\n    invariant(createRef instanceof AbstractObjectValue);\n    return createRef;\n  });\n\n  reactValue.refuseSerialization = false;\n  reactValue.makeFinal();\n  return reactValue;\n}\n"],"file":"react-mocks.js"}