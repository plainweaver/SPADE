{"version":3,"sources":["../../../src/intrinsics/fb-www/relay-mocks.js"],"names":["reactRelayCode","reactRelayAst","plugins","createReactRelayContainer","realm","reactRelay","containerName","reactRelayFirstRenderValue","relayRequireName","funcValue","args","value","AbstractValue","createTemporalFromBuildFunction","FunctionValue","StringValue","skipInvariant","isPure","firstRenderContainerValue","firstRenderValue","intrinsics","undefined","ECMAScriptSourceFunctionValue","firstRenderContainerValueCall","$Call","react","abstractHints","set","createMockReactRelay","reactRelayFirstRenderFactory","Environment","GetValue","$GlobalEnv","evaluate","factory","fbLibraries","ObjectValue","ObjectPrototype","queryRendererComponent","Create","CreateDataPropertyOrThrow","graphql","reactRelayContainers","reactRelayContainer","commitLocalUpdate","commitMutation","fetchQuery","requestSubscription","refuseSerialization","makeFinal"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport {\n  AbstractValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  ObjectValue,\n  StringValue,\n} from \"../../values/index.js\";\nimport { Create, Environment } from \"../../singletons.js\";\nimport { createAbstract } from \"../prepack/utils.js\";\nimport { Get } from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\nimport { createReactHintObject } from \"../../react/utils.js\";\nimport { parseExpression } from \"@babel/parser\";\nimport { addMockFunctionToObject } from \"./utils.js\";\nimport { createOperationDescriptor } from \"../../utils/generator.js\";\n\nlet reactRelayCode = `\n  function createReactRelay(React) {\n\n   function mapObject(obj, func) {\n     var newObj = {};\n\n      Object.keys(obj).forEach(function(key) {\n        newObj[key] = func(obj[key]);\n      });\n\n      return newObj;\n   }\n\n    function isReactComponent(component) {\n      return !!(\n        component &&\n        typeof component.prototype === 'object' &&\n        component.prototype &&\n        component.prototype.isReactComponent\n      );\n    }\n\n    function getReactComponent(Component) {\n      if (isReactComponent(Component)) {\n        return Component;\n      } else {\n        return null;\n      }\n    }\n\n    function getComponentName(Component) {\n      let name;\n      const ComponentClass = getReactComponent(Component);\n      if (ComponentClass) {\n        name = ComponentClass.displayName || ComponentClass.name;\n      } else if (typeof Component === 'function') {\n        name = Component.displayName || Component.name || 'StatelessComponent';\n      } else {\n        name = 'ReactElement';\n      }\n      return String(name);\n    }\n\n    function createFragmentContainer(Component, fragmentSpec) {\n      var componentName = getComponentName(Component);\n      var containerName = \\`Relay(\\${componentName})\\`;\n\n      return function(props, context) {\n        var relay = context.relay;\n        var {\n          createFragmentSpecResolver,\n          getFragment: getFragmentFromTag,\n        } = relay.environment.unstable_internal;\n        var fragments = mapObject(fragmentSpec, getFragmentFromTag);\n        var resolver = createFragmentSpecResolver(\n          relay,\n          containerName,\n          fragments,\n          props,\n        );\n        var relayProp = {\n          isLoading: resolver.isLoading(),\n          environment: relay.environment,\n        };\n        var newProps = Object.assign({}, props, resolver.resolve(), {\n          relay: relayProp,\n        });\n        return React.createElement(Component, newProps);\n      };\n    }\n\n    return {\n      createFragmentContainer,\n    };\n  }\n`;\nlet reactRelayAst = parseExpression(reactRelayCode, { plugins: [\"flow\"] });\n\nfunction createReactRelayContainer(\n  realm: Realm,\n  reactRelay: ObjectValue,\n  containerName: string,\n  reactRelayFirstRenderValue: ObjectValue,\n  relayRequireName: string\n) {\n  // we create a ReactRelay container function that returns an abstract object\n  // allowing us to reconstruct this ReactReact.createSomeContainer(...) again\n  // we also pass a reactHint so the reconciler can properly deal with this\n  addMockFunctionToObject(realm, reactRelay, relayRequireName, containerName, (funcValue, args) => {\n    let value = AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      FunctionValue,\n      [reactRelay, new StringValue(realm, containerName), ...args],\n      createOperationDescriptor(\"REACT_RELAY_MOCK_CONTAINER\"),\n      { skipInvariant: true, isPure: true }\n    );\n    invariant(value instanceof AbstractValue);\n    let firstRenderContainerValue = Get(realm, reactRelayFirstRenderValue, containerName);\n    let firstRenderValue = realm.intrinsics.undefined;\n\n    if (firstRenderContainerValue instanceof ECMAScriptSourceFunctionValue) {\n      let firstRenderContainerValueCall = firstRenderContainerValue.$Call;\n      invariant(firstRenderContainerValueCall !== undefined);\n      firstRenderValue = firstRenderContainerValueCall(realm.intrinsics.undefined, args);\n      invariant(firstRenderValue instanceof ECMAScriptSourceFunctionValue);\n    }\n\n    realm.react.abstractHints.set(value, createReactHintObject(reactRelay, containerName, args, firstRenderValue));\n    return value;\n  });\n}\n\nexport function createMockReactRelay(realm: Realm, relayRequireName: string): ObjectValue {\n  let reactRelayFirstRenderFactory = Environment.GetValue(realm, realm.$GlobalEnv.evaluate(reactRelayAst, false));\n  invariant(reactRelayFirstRenderFactory instanceof ECMAScriptSourceFunctionValue);\n  let factory = reactRelayFirstRenderFactory.$Call;\n  invariant(factory !== undefined);\n  invariant(realm.fbLibraries.react instanceof ObjectValue, \"mock ReactRelay cannot be required before mock React\");\n  let reactRelayFirstRenderValue = factory(realm.intrinsics.undefined, [realm.fbLibraries.react]);\n  invariant(reactRelayFirstRenderValue instanceof ObjectValue);\n\n  // we set refuseSerialization to true so we don't serialize the below properties straight away\n  let reactRelay = new ObjectValue(realm, realm.intrinsics.ObjectPrototype, `require(\"${relayRequireName}\")`, true);\n  // for QueryRenderer, we want to leave the component alone but process it's \"render\" prop\n  let queryRendererComponent = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").QueryRenderer`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"QueryRenderer\", queryRendererComponent);\n\n  let graphql = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").graphql`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"graphql\", graphql);\n\n  let reactRelayContainers = [\"createFragmentContainer\", \"createPaginationContainer\", \"createRefetchContainer\"];\n  for (let reactRelayContainer of reactRelayContainers) {\n    createReactRelayContainer(realm, reactRelay, reactRelayContainer, reactRelayFirstRenderValue, relayRequireName);\n  }\n\n  let commitLocalUpdate = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").commitLocalUpdate`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"commitLocalUpdate\", commitLocalUpdate);\n\n  let commitMutation = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").commitMutation`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"commitMutation\", commitMutation);\n\n  let fetchQuery = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").fetchQuery`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"fetchQuery\", fetchQuery);\n\n  let requestSubscription = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").requestSubscription`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"requestSubscription\", requestSubscription);\n\n  // we set refuseSerialization back to false\n  reactRelay.refuseSerialization = false;\n  reactRelay.makeFinal();\n  return reactRelay;\n}\n"],"file":"relay-mocks.js"}