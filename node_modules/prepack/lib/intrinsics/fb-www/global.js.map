{"version":3,"sources":["../../../src/intrinsics/fb-www/global.js"],"names":["realm","global","$GlobalObject","react","enabled","defaultPropsHelper","emptyArray","ArrayValue","makeFinal","emptyObject","ObjectValue","intrinsics","ObjectPrototype","moduleValue","AbstractValue","createAbstractObject","kind","moduleExportsValue","$DefineOwnProperty","PropertyDescriptor","value","writable","enumerable","configurable","NativeFunctionValue","context","requireNameVal","StringValue","requireNameValValue","fbLibraries","undefined","reactDom","reactDomServer","reactNative","reactRelay","FatalError","propTypes","requireVal","other","has","get","set","isCompatibleWith"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, ArrayValue, NativeFunctionValue, StringValue, ObjectValue } from \"../../values/index.js\";\nimport { createMockReact } from \"./react-mocks.js\";\nimport { createMockReactDOM, createMockReactDOMServer } from \"./react-dom-mocks.js\";\nimport { createMockReactNative } from \"./react-native-mocks.js\";\nimport { createMockReactRelay } from \"./relay-mocks.js\";\nimport { createAbstract } from \"../prepack/utils.js\";\nimport { createFbMocks } from \"./fb-mocks.js\";\nimport { FatalError } from \"../../errors\";\nimport { Get } from \"../../methods/index.js\";\nimport invariant from \"../../invariant\";\nimport { createDefaultPropsHelper } from \"../../react/utils.js\";\nimport { PropertyDescriptor } from \"../../descriptors.js\";\n\nexport default function(realm: Realm): void {\n  let global = realm.$GlobalObject;\n\n  if (realm.react.enabled) {\n    // Create it eagerly so it's created outside effect branches\n    realm.react.defaultPropsHelper = createDefaultPropsHelper(realm);\n    let emptyArray = new ArrayValue(realm);\n    emptyArray.makeFinal();\n    realm.react.emptyArray = emptyArray;\n    let emptyObject = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n    emptyObject.makeFinal();\n    realm.react.emptyObject = emptyObject;\n  }\n\n  // module.exports support\n  let moduleValue = AbstractValue.createAbstractObject(realm, \"module\");\n  moduleValue.kind = \"resolved\";\n  let moduleExportsValue = AbstractValue.createAbstractObject(realm, \"module.exports\");\n  moduleExportsValue.kind = \"resolved\";\n\n  moduleValue.$DefineOwnProperty(\n    \"exports\",\n    new PropertyDescriptor({\n      value: moduleExportsValue,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    })\n  );\n  global.$DefineOwnProperty(\n    \"module\",\n    new PropertyDescriptor({\n      value: moduleValue,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    })\n  );\n\n  // apply require() mock\n  global.$DefineOwnProperty(\n    \"require\",\n    new PropertyDescriptor({\n      value: new NativeFunctionValue(realm, \"require\", \"require\", 0, (context, [requireNameVal]) => {\n        invariant(requireNameVal instanceof StringValue);\n        let requireNameValValue = requireNameVal.value;\n\n        if (requireNameValValue === \"react\" || requireNameValValue === \"React\") {\n          if (realm.fbLibraries.react === undefined) {\n            let react = createMockReact(realm, requireNameValValue);\n            realm.fbLibraries.react = react;\n            return react;\n          }\n          return realm.fbLibraries.react;\n        } else if (requireNameValValue === \"react-dom\" || requireNameValValue === \"ReactDOM\") {\n          if (realm.fbLibraries.reactDom === undefined) {\n            let reactDom = createMockReactDOM(realm, requireNameValValue);\n            realm.fbLibraries.reactDom = reactDom;\n            return reactDom;\n          }\n          return realm.fbLibraries.reactDom;\n        } else if (requireNameValValue === \"react-dom/server\" || requireNameValValue === \"ReactDOMServer\") {\n          if (realm.fbLibraries.reactDomServer === undefined) {\n            let reactDomServer = createMockReactDOMServer(realm, requireNameValValue);\n            realm.fbLibraries.reactDomServer = reactDomServer;\n            return reactDomServer;\n          }\n          return realm.fbLibraries.reactDomServer;\n        } else if (requireNameValValue === \"react-native\" || requireNameValValue === \"ReactNative\") {\n          if (realm.fbLibraries.reactNative === undefined) {\n            let reactNative = createMockReactNative(realm, requireNameValValue);\n            realm.fbLibraries.reactNative = reactNative;\n            return reactNative;\n          }\n          return realm.fbLibraries.reactNative;\n        } else if (requireNameValValue === \"react-relay\" || requireNameValValue === \"RelayModern\") {\n          if (realm.fbLibraries.reactRelay === undefined) {\n            let reactRelay = createMockReactRelay(realm, requireNameValValue);\n            realm.fbLibraries.reactRelay = reactRelay;\n            return reactRelay;\n          }\n          return realm.fbLibraries.reactRelay;\n        } else if (requireNameValValue === \"prop-types\" || requireNameValValue === \"PropTypes\") {\n          if (realm.fbLibraries.react === undefined) {\n            throw new FatalError(\"unable to require PropTypes due to React not being referenced in scope\");\n          }\n          let propTypes = Get(realm, realm.fbLibraries.react, \"PropTypes\");\n          invariant(propTypes instanceof ObjectValue);\n          return propTypes;\n        } else {\n          let requireVal;\n\n          if (realm.fbLibraries.other.has(requireNameValValue)) {\n            requireVal = realm.fbLibraries.other.get(requireNameValValue);\n          } else {\n            requireVal = createAbstract(realm, \"function\", `require(\"${requireNameValValue}\")`);\n            realm.fbLibraries.other.set(requireNameValValue, requireVal);\n          }\n          invariant(requireVal instanceof AbstractValue);\n          return requireVal;\n        }\n      }),\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    })\n  );\n\n  if (realm.isCompatibleWith(\"fb-www\")) {\n    createFbMocks(realm, global);\n  }\n}\n"],"file":"global.js"}