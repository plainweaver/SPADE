{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayProto_toString.js"],"names":["realm","NativeFunctionValue","context","array","To","ToObject","ArrayValue","isIntrinsicAndHasWidenedNumericProperty","isInPureScope","$GetOwnProperty","undefined","AbstractValue","createTemporalFromBuildFunction","StringValue","func","intrinsics","ObjectProto_toString"],"mappings":";;;;;;;AAYA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAjBA;;;;;;;;;AASA;AAUe,kBAASA,KAAT,EAA4C;AACzD;AACA,SAAO,IAAIC,0BAAJ,CACLD,KADK,EAEL,0BAFK,EAGL,UAHK,EAIL,CAJK,EAKLE,OAAO,IAAI;AACT;AACA,QAAIC,KAAK,GAAGC,eAAGC,QAAH,CAAYL,KAAZ,EAAmBE,OAAnB,CAAZ,CAFS,CAIT;AACA;AACA;;;AACA,QACEI,kBAAWC,uCAAX,CAAmDJ,KAAnD,KACAH,KAAK,CAACQ,aAAN,EADA,IAEAL,KAAK,CAACM,eAAN,CAAsB,UAAtB,MAAsCC,SAHxC,EAIE;AACA,aAAOC,qBAAcC,+BAAd,CACLZ,KADK,EAELa,kBAFK,EAGL,CAACV,KAAD,EAAQ,IAAIU,kBAAJ,CAAgBb,KAAhB,EAAuB,UAAvB,CAAR,CAHK,EAIL,0CAA0B,oCAA1B,CAJK,CAAP;AAMD,KAlBQ,CAoBT;;;AACA,QAAIc,IAAI,GAAG,cAAId,KAAJ,EAAWG,KAAX,EAAkB,MAAlB,CAAX,CArBS,CAuBT;;AACA,QAAI,CAAC,oBAAWH,KAAX,EAAkBc,IAAlB,CAAL,EAA8BA,IAAI,GAAGd,KAAK,CAACe,UAAN,CAAiBC,oBAAxB,CAxBrB,CA0BT;;AACA,WAAO,gBAAKhB,KAAL,EAAYc,IAAZ,EAAkBX,KAAlB,CAAP;AACD,GAjCI,EAkCL,KAlCK,CAAP;AAoCD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, ArrayValue, NativeFunctionValue, StringValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\nimport { Get } from \"../../methods/get.js\";\nimport { Call } from \"../../methods/call.js\";\nimport { IsCallable } from \"../../methods/is.js\";\nimport { createOperationDescriptor } from \"../../utils/generator.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 22.1.3.30\n  return new NativeFunctionValue(\n    realm,\n    \"Array.prototype.toString\",\n    \"toString\",\n    0,\n    context => {\n      // 1. Let array be ? ToObject(this value).\n      let array = To.ToObject(realm, context);\n\n      // If we have an object that is an array with widened numeric properties, then\n      // we can return a temporal here as we know nothing of the array's properties.\n      // This should be safe to do, as we never expose the internals of the array.\n      if (\n        ArrayValue.isIntrinsicAndHasWidenedNumericProperty(array) &&\n        realm.isInPureScope() &&\n        array.$GetOwnProperty(\"toString\") === undefined\n      ) {\n        return AbstractValue.createTemporalFromBuildFunction(\n          realm,\n          StringValue,\n          [array, new StringValue(realm, \"toString\")],\n          createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n        );\n      }\n\n      // 2. Let func be ? Get(array, \"join\").\n      let func = Get(realm, array, \"join\");\n\n      // 3. If IsCallable(func) is false, let func be the intrinsic function %ObjProto_toString%.\n      if (!IsCallable(realm, func)) func = realm.intrinsics.ObjectProto_toString;\n\n      // 4. Return ? Call(func, array).\n      return Call(realm, func, array);\n    },\n    false\n  );\n}\n"],"file":"ArrayProto_toString.js"}