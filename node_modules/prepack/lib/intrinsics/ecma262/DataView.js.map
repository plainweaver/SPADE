{"version":3,"sources":["../../../src/intrinsics/ecma262/DataView.js"],"names":["realm","func","NativeFunctionValue","context","_buffer","byteOffset","byteLength","argCount","NewTarget","buffer","createErrorThrowCompletion","intrinsics","TypeError","throwIfNotConcrete","ObjectValue","offset","To","ToIndexPartial","bufferByteLength","$ArrayBufferByteLength","RangeError","viewByteLength","UndefinedValue","O","Create","OrdinaryCreateFromConstructor","$DataView","undefined","$ViewedArrayBuffer","$ByteLength","$ByteOffset"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { IsDetachedBuffer } from \"../../methods/index.js\";\nimport { NativeFunctionValue, ObjectValue, UndefinedValue } from \"../../values/index.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 24.2.2.1\n  let func = new NativeFunctionValue(\n    realm,\n    \"DataView\",\n    \"DataView\",\n    3,\n    (context, [_buffer, byteOffset, byteLength], argCount, NewTarget) => {\n      let buffer = _buffer;\n      // 1. If NewTarget is undefined, throw a TypeError exception.\n      if (!NewTarget) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      buffer = buffer.throwIfNotConcrete();\n      // 2. If Type(buffer) is not Object, throw a TypeError exception.\n      if (!(buffer instanceof ObjectValue)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 3. If buffer does not have an [[ArrayBufferData]] internal slot, throw a TypeError exception.\n      if (!(\"$ArrayBufferData\" in buffer)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 4. Let offset be ? ToIndex(byteOffset).\n      let offset = To.ToIndexPartial(realm, byteOffset);\n\n      // 5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n      if (IsDetachedBuffer(realm, buffer)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 6. Let bufferByteLength be the value of buffer's [[ArrayBufferByteLength]] internal slot.\n      let bufferByteLength = buffer.$ArrayBufferByteLength;\n      invariant(typeof bufferByteLength === \"number\");\n\n      // 7. If offset > bufferByteLength, throw a RangeError exception.\n      if (offset > bufferByteLength) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError);\n      }\n\n      // 8. If byteLength is undefined, then\n      let viewByteLength;\n      if (!byteLength || byteLength instanceof UndefinedValue) {\n        // a. Let viewByteLength be bufferByteLength - offset.\n        viewByteLength = bufferByteLength - offset;\n      } else {\n        // 9. Else,\n        // a. Let viewByteLength be ? ToIndex(byteLength).\n        viewByteLength = To.ToIndexPartial(realm, byteLength);\n\n        // b. If offset+viewByteLength > bufferByteLength, throw a RangeError exception.\n        if (offset + viewByteLength > bufferByteLength) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError);\n        }\n      }\n\n      // 10. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\", « [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] »).\n      let O = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"DataViewPrototype\", {\n        $DataView: undefined,\n        $ViewedArrayBuffer: undefined,\n        $ByteLength: undefined,\n        $ByteOffset: undefined,\n      });\n\n      // 11. Set O's [[DataView]] internal slot to true.\n      O.$DataView = true;\n\n      // 12. Set O's [[ViewedArrayBuffer]] internal slot to buffer.\n      O.$ViewedArrayBuffer = buffer;\n\n      // 13. Set O's [[ByteLength]] internal slot to viewByteLength.\n      O.$ByteLength = viewByteLength;\n\n      // 14. Set O's [[ByteOffset]] internal slot to offset.\n      O.$ByteOffset = offset;\n\n      // 15. Return O.\n      return O;\n    }\n  );\n\n  return func;\n}\n"],"file":"DataView.js"}