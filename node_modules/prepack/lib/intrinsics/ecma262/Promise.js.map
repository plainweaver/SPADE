{"version":3,"sources":["../../../src/intrinsics/ecma262/Promise.js"],"names":["realm","func","NativeFunctionValue","context","executor","argCount","NewTarget","createErrorThrowCompletion","intrinsics","TypeError","promise","Create","OrdinaryCreateFromConstructor","$PromiseState","undefined","$PromiseResult","$PromiseFulfillReactions","$PromiseRejectReactions","$PromiseIsHandled","resolvingFunctions","completion","resolve","reject","err","AbruptCompletion","value","defineNativeMethod","iterable","C","throwIfNotConcrete","ObjectValue","promiseCapability","iterator","e","iteratorRecord","$Iterator","$Done","result","FunctionValue","resultCompletion","r","x","xConstructor","defineNativeGetter","SymbolSpecies"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, FunctionValue, NativeFunctionValue } from \"../../values/index.js\";\nimport { AbruptCompletion } from \"../../completions.js\";\nimport {\n  NewPromiseCapability,\n  PerformPromiseAll,\n  PerformPromiseRace,\n  CreateResolvingFunctions,\n} from \"../../methods/promise.js\";\nimport { IsCallable, Call, GetIterator, SameValuePartial, Get, IsPromise } from \"../../methods/index.js\";\nimport { IteratorClose } from \"../../methods/iterator.js\";\nimport { Create } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 25.4.3.1\n  let func = new NativeFunctionValue(realm, \"Promise\", \"Promise\", 1, (context, [executor], argCount, NewTarget) => {\n    // 1. If NewTarget is undefined, throw a TypeError exception.\n    if (!NewTarget) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. If IsCallable(executor) is false, throw a TypeError exception.\n    if (!IsCallable(realm, executor)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Let promise be ? OrdinaryCreateFromConstructor(NewTarget, \"%PromisePrototype%\", « [[PromiseState]], [[PromiseResult]], [[PromiseFulfillReactions]], [[PromiseRejectReactions]], [[PromiseIsHandled]] »).\n    let promise = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"PromisePrototype\", {\n      $PromiseState: undefined,\n      $PromiseResult: undefined,\n      $PromiseFulfillReactions: undefined,\n      $PromiseRejectReactions: undefined,\n      $PromiseIsHandled: undefined,\n    });\n\n    // 4. Set promise's [[PromiseState]] internal slot to \"pending\".\n    promise.$PromiseState = \"pending\";\n\n    // 5. Set promise's [[PromiseFulfillReactions]] internal slot to a new empty List.\n    promise.$PromiseFulfillReactions = [];\n\n    // 6. Set promise's [[PromiseRejectReactions]] internal slot to a new empty List.\n    promise.$PromiseRejectReactions = [];\n\n    // 7. Set promise's [[PromiseIsHandled]] internal slot to false.\n    promise.$PromiseIsHandled = false;\n\n    // 8. Let resolvingFunctions be CreateResolvingFunctions(promise).\n    let resolvingFunctions = CreateResolvingFunctions(realm, promise);\n\n    // 9. Let completion be Call(executor, undefined, « resolvingFunctions.[[Resolve]], resolvingFunctions.[[Reject]] »).\n    let completion;\n    try {\n      completion = Call(realm, executor, realm.intrinsics.undefined, [\n        resolvingFunctions.resolve,\n        resolvingFunctions.reject,\n      ]);\n    } catch (err) {\n      if (err instanceof AbruptCompletion) {\n        completion = err;\n      } else {\n        throw err;\n      }\n    }\n\n    // 10. If completion is an abrupt completion, then\n    if (completion instanceof AbruptCompletion) {\n      // a. Perform ? Call(resolvingFunctions.[[Reject]], undefined, « completion.[[Value]] »).\n      Call(realm, resolvingFunctions.reject, realm.intrinsics.undefined, [completion.value]);\n    }\n\n    // 11. Return promise.\n    return promise;\n  });\n\n  // ECMA262 25.4.4.1\n  func.defineNativeMethod(\"all\", 1, (context, [iterable]) => {\n    // 1. Let C be the this value.\n    let C = context.throwIfNotConcrete();\n\n    // 2. If Type(C) is not Object, throw a TypeError exception.\n    if (!(C instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Let promiseCapability be ? NewPromiseCapability(C).\n    let promiseCapability = NewPromiseCapability(realm, C);\n\n    // 4. Let iterator be GetIterator(iterable).\n    let iterator;\n    try {\n      iterator = GetIterator(realm, iterable);\n    } catch (e) {\n      if (e instanceof AbruptCompletion) {\n        // 5. IfAbruptRejectPromise(iterator, promiseCapability).\n        Call(realm, promiseCapability.reject, realm.intrinsics.undefined, [e.value]);\n        return promiseCapability.promise;\n      } else throw e;\n    }\n\n    // 6. Let iteratorRecord be Record {[[Iterator]]: iterator, [[Done]]: false}.\n    let iteratorRecord = { $Iterator: iterator, $Done: false };\n\n    // 7. Let result be PerformPromiseAll(iteratorRecord, C, promiseCapability).\n    let result;\n    try {\n      invariant(C instanceof FunctionValue);\n      result = PerformPromiseAll(realm, iteratorRecord, C, promiseCapability);\n    } catch (e) {\n      // 8. If result is an abrupt completion, then\n      if (e instanceof AbruptCompletion) {\n        // a. If iteratorRecord.[[Done]] is false, let result be IteratorClose(iterator, result).\n        if (iteratorRecord.$Done === false) {\n          try {\n            result = IteratorClose(realm, iterator, e).value;\n          } catch (resultCompletion) {\n            if (resultCompletion instanceof AbruptCompletion) {\n              result = resultCompletion.value;\n            } else throw resultCompletion;\n          }\n        } else {\n          result = e.value;\n        }\n\n        // b. IfAbruptRejectPromise(result, promiseCapability).\n        Call(realm, promiseCapability.reject, realm.intrinsics.undefined, [result]);\n        return promiseCapability.promise;\n      } else throw e;\n    }\n\n    // 9. Return Completion(result).\n    return result;\n  });\n\n  // ECMA262 25.4.4.3\n  func.defineNativeMethod(\"race\", 1, (context, [iterable]) => {\n    // 1. Let C be the this value.\n    let C = context.throwIfNotConcrete();\n\n    // 2. If Type(C) is not Object, throw a TypeError exception.\n    if (!(C instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Let promiseCapability be ? NewPromiseCapability(C).\n    let promiseCapability = NewPromiseCapability(realm, C);\n\n    // 4. Let iterator be GetIterator(iterable).\n    let iterator;\n    try {\n      iterator = GetIterator(realm, iterable);\n    } catch (e) {\n      if (e instanceof AbruptCompletion) {\n        // 5. IfAbruptRejectPromise(iterator, promiseCapability).\n        Call(realm, promiseCapability.reject, realm.intrinsics.undefined, [e.value]);\n        return promiseCapability.promise;\n      } else throw e;\n    }\n\n    // 6. Let iteratorRecord be Record {[[Iterator]]: iterator, [[Done]]: false}.\n    let iteratorRecord = { $Iterator: iterator, $Done: false };\n\n    // 7. Let result be PerformPromiseRace(iteratorRecord, promiseCapability, C).\n    let result;\n    try {\n      result = PerformPromiseRace(realm, iteratorRecord, promiseCapability, C);\n    } catch (e) {\n      // 8. If result is an abrupt completion, then\n      if (e instanceof AbruptCompletion) {\n        // a. If iteratorRecord.[[Done]] is false, let result be IteratorClose(iterator, result).\n        if (iteratorRecord.$Done === false) {\n          try {\n            result = IteratorClose(realm, iterator, e).value;\n          } catch (resultCompletion) {\n            if (resultCompletion instanceof AbruptCompletion) {\n              result = resultCompletion.value;\n            } else throw resultCompletion;\n          }\n        } else {\n          result = e.value;\n        }\n\n        // b. IfAbruptRejectPromise(result, promiseCapability).\n        Call(realm, promiseCapability.reject, realm.intrinsics.undefined, [result]);\n        return promiseCapability.promise;\n      } else throw e;\n    }\n\n    // 9. Return Completion(result).\n    return result;\n  });\n\n  // ECMA262 25.4.4.4\n  func.defineNativeMethod(\"reject\", 1, (context, [r]) => {\n    // 1. Let C be the this value.\n    let C = context.throwIfNotConcrete();\n\n    // 2. If Type(C) is not Object, throw a TypeError exception.\n    if (!(C instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Let promiseCapability be ? NewPromiseCapability(C).\n    let promiseCapability = NewPromiseCapability(realm, C);\n\n    // 4. Perform ? Call(promiseCapability.[[Reject]], undefined, « r »).\n    Call(realm, promiseCapability.reject, realm.intrinsics.undefined, [r]);\n\n    // 5. Return promiseCapability.[[Promise]].\n    return promiseCapability.promise;\n  });\n\n  // ECMA262 25.4.4.5\n  func.defineNativeMethod(\"resolve\", 1, (context, [x]) => {\n    // 1. Let C be the this value.\n    let C = context.throwIfNotConcrete();\n\n    // 2. If Type(C) is not Object, throw a TypeError exception.\n    if (!(C instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If IsPromise(x) is true, then\n    if (IsPromise(realm, x)) {\n      invariant(x instanceof ObjectValue);\n      // a. Let xConstructor be ? Get(x, \"constructor\").\n      let xConstructor = Get(realm, x, \"constructor\");\n\n      // b. If SameValue(xConstructor, C) is true, return x.\n      if (SameValuePartial(realm, xConstructor, C)) return x;\n    }\n\n    // 4. Let promiseCapability be ? NewPromiseCapability(C).\n    let promiseCapability = NewPromiseCapability(realm, C);\n\n    // 5. Perform ? Call(promiseCapability.[[Resolve]], undefined, « x »).\n    Call(realm, promiseCapability.resolve, realm.intrinsics.undefined, [x]);\n\n    // 6. Return promiseCapability.[[Promise]].\n    return promiseCapability.promise;\n  });\n\n  // ECMA262 25.4.4.6\n  func.defineNativeGetter(realm.intrinsics.SymbolSpecies, context => {\n    // 1. Return the this value\n    return context;\n  });\n\n  return func;\n}\n"],"file":"Promise.js"}