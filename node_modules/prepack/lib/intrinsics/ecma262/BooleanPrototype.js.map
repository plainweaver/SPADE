{"version":3,"sources":["../../../src/intrinsics/ecma262/BooleanPrototype.js"],"names":["realm","obj","$BooleanData","intrinsics","false","tsTemplateSrc","defineNativeMethod","context","target","ObjectValue","AbstractValue","getType","BooleanValue","createFromTemplate","StringValue","b","To","thisBooleanValue","value"],"mappings":";;;;;;;AAYA;;AACA;;AAbA;;;;;;;;;AASA;AAMe,kBAASA,KAAT,EAAuBC,GAAvB,EAA+C;AAC5D;AACAA,EAAAA,GAAG,CAACC,YAAJ,GAAmBF,KAAK,CAACG,UAAN,CAAiBC,KAApC;AAEA,QAAMC,aAAa,GAAG,UAAtB,CAJ4D,CAM5D;;AACAJ,EAAAA,GAAG,CAACK,kBAAJ,CAAuB,UAAvB,EAAmC,CAAnC,EAAsCC,OAAO,IAAI;AAC/C,UAAMC,MAAM,GAAGD,OAAO,YAAYE,kBAAnB,GAAiCF,OAAO,CAACL,YAAzC,GAAwDK,OAAvE;;AACA,QAAIC,MAAM,YAAYE,oBAAlB,IAAmCF,MAAM,CAACG,OAAP,OAAqBC,mBAA5D,EAA0E;AACxE,aAAOF,qBAAcG,kBAAd,CAAiCb,KAAjC,EAAwCK,aAAxC,EAAuDS,kBAAvD,EAAoE,CAACN,MAAD,CAApE,CAAP;AACD,KAJ8C,CAK/C;;;AACA,QAAIO,CAAC,GAAGC,eAAGC,gBAAH,CAAoBjB,KAApB,EAA2BO,OAA3B,CAAR,CAN+C,CAQ/C;;;AACA,WAAO,IAAIO,kBAAJ,CAAgBd,KAAhB,EAAuBe,CAAC,CAACG,KAAF,GAAU,MAAV,GAAmB,OAA1C,CAAP;AACD,GAVD,EAP4D,CAmB5D;;AACAjB,EAAAA,GAAG,CAACK,kBAAJ,CAAuB,SAAvB,EAAkC,CAAlC,EAAqCC,OAAO,IAAI;AAC9C;AACA,WAAOS,eAAGC,gBAAH,CAAoBjB,KAApB,EAA2BO,OAA3B,CAAP;AACD,GAHD;AAID","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, StringValue, AbstractValue, BooleanValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 19.3.1\n  obj.$BooleanData = realm.intrinsics.false;\n\n  const tsTemplateSrc = \"('' + A)\";\n\n  // ECMA262 19.3.3.3\n  obj.defineNativeMethod(\"toString\", 0, context => {\n    const target = context instanceof ObjectValue ? context.$BooleanData : context;\n    if (target instanceof AbstractValue && target.getType() === BooleanValue) {\n      return AbstractValue.createFromTemplate(realm, tsTemplateSrc, StringValue, [target]);\n    }\n    // 1. Let b be ? thisBooleanValue(this value).\n    let b = To.thisBooleanValue(realm, context);\n\n    // 2. If b is true, return \"true\"; else return \"false\".\n    return new StringValue(realm, b.value ? \"true\" : \"false\");\n  });\n\n  // ECMA262 19.3.3.4\n  obj.defineNativeMethod(\"valueOf\", 0, context => {\n    // 1. Return ? thisBooleanValue(this value).\n    return To.thisBooleanValue(realm, context);\n  });\n}\n"],"file":"BooleanPrototype.js"}