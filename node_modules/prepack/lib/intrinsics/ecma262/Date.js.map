{"version":3,"sources":["../../../src/intrinsics/ecma262/Date.js"],"names":["buildDateNowSrc","realm","lastNow","offsetGenerator","getCurrentTime","useAbstractInterpretation","AbstractValue","createTemporalFromTemplate","NumberValue","isPure","skipInvariant","newNow","Date","now","strictlyMonotonicDateNow","Math","floor","func","NativeFunctionValue","context","args","argCount","NewTarget","year","month","date","hours","minutes","seconds","ms","numberOfArgs","y","To","ToNumber","m","dt","h","min","s","milli","yr","isNaN","ToInteger","finalDate","O","Create","OrdinaryCreateFromConstructor","$DateValue","undefined","throwIfNotConcreteNumber","value","StringValue","value_","throwIfNotConcrete","tv","ObjectValue","v","ToPrimitive","getTime","defineNativeMethod","string","reportIntrospectionError","FatalError","parsedDate","parse"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, NativeFunctionValue, NumberValue, StringValue, ObjectValue } from \"../../values/index.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport { MakeTime, MakeDate, MakeDay, TimeClip, UTC, ToDateString, thisTimeValue } from \"../../methods/date.js\";\nimport { FatalError } from \"../../errors.js\";\nimport invariant from \"../../invariant.js\";\nimport seedrandom from \"seedrandom\";\n\nconst buildDateNowSrc = \"global.Date.now()\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  let lastNow;\n  let offsetGenerator;\n  function getCurrentTime(): AbstractValue | NumberValue {\n    if (realm.useAbstractInterpretation) {\n      return AbstractValue.createTemporalFromTemplate(realm, buildDateNowSrc, NumberValue, [], {\n        isPure: true,\n        skipInvariant: true,\n      });\n    } else {\n      let newNow = Date.now();\n      if (realm.strictlyMonotonicDateNow && lastNow >= newNow) {\n        if (!offsetGenerator) offsetGenerator = seedrandom(0);\n        // certain behaviors in the test262 test suite can only be (reliably) triggered if Date.now() is strictly monotonically increasing\n        // TODO #1004: Set the strictlyMonotonicDateNow option on the realm in the test262 test runner, fix the issues that will come up in the tests, and remove this comment.\n        newNow = lastNow + 1 + Math.floor(offsetGenerator() * 500);\n      }\n      lastNow = newNow;\n      return new NumberValue(realm, newNow);\n    }\n  }\n\n  // ECMA262 20.3.2\n  let func = new NativeFunctionValue(realm, \"Date\", \"Date\", 7, (context, args, argCount, NewTarget) => {\n    if (argCount >= 2) {\n      // ECMA262 20.3.2.1\n      let [year, month, date, hours, minutes, seconds, ms] = args;\n\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs â‰¥ 2.\n      invariant(numberOfArgs >= 2, \"expected two or more arguments\");\n\n      // 3. If NewTarget is not undefined, then\n      if (NewTarget) {\n        // a. Let y be ? ToNumber(year).\n        let y = To.ToNumber(realm, year);\n\n        // b. Let m be ? ToNumber(month).\n        let m = To.ToNumber(realm, month);\n\n        // c. If date is supplied, let dt be ? ToNumber(date); else let dt be 1.\n        let dt = argCount >= 3 ? To.ToNumber(realm, date) : 1;\n\n        // d. If hours is supplied, let h be ? ToNumber(hours); else let h be 0.\n        let h = argCount >= 4 ? To.ToNumber(realm, hours) : 0;\n\n        // e. If minutes is supplied, let min be ? ToNumber(minutes); else let min be 0.\n        let min = argCount >= 5 ? To.ToNumber(realm, minutes) : 0;\n\n        // f. If seconds is supplied, let s be ? ToNumber(seconds); else let s be 0.\n        let s = argCount >= 6 ? To.ToNumber(realm, seconds) : 0;\n\n        // g. If ms is supplied, let milli be ? ToNumber(ms); else let milli be 0.\n        let milli = argCount >= 7 ? To.ToNumber(realm, ms) : 0;\n\n        // h. If y is not NaN and 0 â‰¤ ToInteger(y) â‰¤ 99, let yr be 1900+ToInteger(y); otherwise, let yr be y.\n        let yr;\n        if (!isNaN(y) && To.ToInteger(realm, y) >= 0 && To.ToInteger(realm, y) <= 99) {\n          yr = 1900 + To.ToInteger(realm, new NumberValue(realm, y));\n        } else {\n          yr = y;\n        }\n\n        // i. Let finalDate be MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)).\n        let finalDate = MakeDate(realm, MakeDay(realm, yr, m, dt), MakeTime(realm, h, min, s, milli));\n\n        // j. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DatePrototype%\", Â« [[DateValue]] Â»).\n        let O = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"DatePrototype\", { $DateValue: undefined });\n\n        // k. Set the [[DateValue]] internal slot of O to TimeClip(UTC(finalDate)).\n        O.$DateValue = TimeClip(realm, UTC(realm, finalDate));\n\n        // l. Return O.\n        return O;\n      } else {\n        // 4. Else,\n        // a. Let now be the Number that is the time value (UTC) identifying the current time.\n        let now = getCurrentTime().throwIfNotConcreteNumber().value;\n\n        // b. Return ToDateString(now).\n        return new StringValue(realm, ToDateString(realm, now));\n      }\n    } else if (argCount === 1) {\n      // ECMA262 20.3.2.2\n      let [value_] = args;\n      let value = value_.throwIfNotConcrete();\n\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 1.\n      invariant(numberOfArgs === 1, \"expected number of arguments to equal 1\");\n\n      // 3. If NewTarget is not undefined, then\n      if (NewTarget) {\n        let tv;\n\n        // a. If Type(value) is Object and value has a [[DateValue]] internal slot, then\n        if (value instanceof ObjectValue && value.$DateValue !== undefined) {\n          // i. Let tv be thisTimeValue(value).\n          tv = thisTimeValue(realm, value);\n        } else {\n          // b. Else,\n          // i. Let v be ? ToPrimitive(value)\n          let v = To.ToPrimitive(realm, value);\n\n          // ii. If Type(v) is String, then\n          if (v instanceof StringValue) {\n            // 1. Let tv be the result of parsing v as a date, in exactly the same manner as for the parse\n            //    method (20.3.3.2). If the parse resulted in an abrupt completion, tv is the Completion Record.\n            tv = new NumberValue(realm, new Date(v.value).getTime());\n\n            // 2. ReturnIfAbrupt(tv).\n          } else {\n            // iii. Else,\n            // 1. Let tv be ? ToNumber(v).\n            tv = new NumberValue(realm, To.ToNumber(realm, v));\n          }\n        }\n\n        // c. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DatePrototype%\", Â« [[DateValue]] Â»).\n        let O = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"DatePrototype\", { $DateValue: undefined });\n\n        // d. Set the [[DateValue]] internal slot of O to TimeClip(tv).\n        O.$DateValue = TimeClip(realm, tv);\n\n        // e. Return O.\n        return O;\n      } else {\n        // 4. Else,\n        // a. Let now be the Number that is the time value (UTC) identifying the current time.\n        let now = getCurrentTime().throwIfNotConcreteNumber().value;\n\n        // b. Return ToDateString(now).\n        return new StringValue(realm, ToDateString(realm, now));\n      }\n    } else {\n      // ECMA262 20.3.2.3\n\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 0.\n      invariant(numberOfArgs === 0, \"expected zero arguments\");\n\n      // 3. If NewTarget is not undefined, then\n      if (NewTarget) {\n        // a. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DatePrototype%\", Â« [[DateValue]] Â»).\n        let O = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"DatePrototype\", { $DateValue: undefined });\n\n        // b. Set the [[DateValue]] internal slot of O to the time value (UTC) identifying the current time.\n        O.$DateValue = getCurrentTime();\n\n        // c. Return O.\n        return O;\n      } else {\n        // 4. Else,\n        // a. Let now be the Number that is the time value (UTC) identifying the current time.\n        let now = getCurrentTime().throwIfNotConcreteNumber().value;\n\n        // b. Return ToDateString(now).\n        return new StringValue(realm, ToDateString(realm, now));\n      }\n    }\n  });\n\n  // ECMA262 20.3.3.1\n  func.defineNativeMethod(\"now\", 0, context => {\n    return getCurrentTime();\n  });\n\n  // ECMA262 20.3.3.2\n  func.defineNativeMethod(\"parse\", 1, (context, [string]) => {\n    if (realm.useAbstractInterpretation) {\n      AbstractValue.reportIntrospectionError(string);\n      throw new FatalError();\n    } else {\n      const parsedDate = Date.parse(string.value);\n      return new NumberValue(realm, parsedDate);\n    }\n  });\n\n  // ECMA262 20.3.3.4\n  func.defineNativeMethod(\"UTC\", 7, (context, [year, month, date, hours, minutes, seconds, ms], argCount) => {\n    // 1. Let y be ? ToNumber(year).\n    let y = To.ToNumber(realm, year);\n\n    // 2. Let m be ? ToNumber(month).\n    let m = argCount >= 2 ? To.ToNumber(realm, month) : 0;\n\n    // 3. If date is supplied, let dt be ? ToNumber(date); else let dt be 1.\n    let dt = argCount >= 3 ? To.ToNumber(realm, date) : 1;\n\n    // 4. If hours is supplied, let h be ? ToNumber(hours); else let h be 0.\n    let h = argCount >= 4 ? To.ToNumber(realm, hours) : 0;\n\n    // 5. If minutes is supplied, let min be ? ToNumber(minutes); else let min be 0.\n    let min = argCount >= 5 ? To.ToNumber(realm, minutes) : 0;\n\n    // 6. If seconds is supplied, let s be ? ToNumber(seconds); else let s be 0.\n    let s = argCount >= 6 ? To.ToNumber(realm, seconds) : 0;\n\n    // 7. If ms is supplied, let milli be ? ToNumber(ms); else let milli be 0.\n    let milli = argCount >= 7 ? To.ToNumber(realm, ms) : 0;\n\n    // 8. If y is not NaN and 0 â‰¤ ToInteger(y) â‰¤ 99, let yr be 1900+ToInteger(y); otherwise, let yr be y.\n    let yr =\n      !isNaN(y) && To.ToInteger(realm, y) >= 0 && To.ToInteger(realm, y) <= 99 ? 1900 + To.ToInteger(realm, y) : y;\n\n    // 9. Return TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))).\n    return TimeClip(realm, MakeDate(realm, MakeDay(realm, yr, m, dt), MakeTime(realm, h, min, s, milli)));\n  });\n\n  return func;\n}\n"],"file":"Date.js"}