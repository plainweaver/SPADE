{"version":3,"sources":["../../../src/intrinsics/ecma262/NumberPrototype.js"],"names":["realm","obj","$NumberData","intrinsics","zero","defineNativeMethod","context","_fractionDigits","fractionDigits","x","To","thisNumberValue","value","throwIfNotConcrete","f","ToInteger","UndefinedValue","isNaN","StringValue","s","Infinity","createErrorThrowCompletion","RangeError","positiveResultString","toExponential","undefined","toFixed","toLocaleStringSrc","useAbstractInterpretation","AbstractValue","createTemporalFromTemplate","toLocaleString","precision","num","ToString","p","toPrecision","tsTemplateSrc","radix","target","ObjectValue","getType","NumberValue","IntegralValue","createFromTemplate","radixNumber","TypeError","toString"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport {\n  ObjectValue,\n  StringValue,\n  UndefinedValue,\n  AbstractValue,\n  NumberValue,\n  IntegralValue,\n} from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 20.1.3\n  obj.$NumberData = realm.intrinsics.zero;\n\n  // ECMA262 20.1.3.2\n  obj.defineNativeMethod(\"toExponential\", 1, (context, [_fractionDigits]) => {\n    let fractionDigits = _fractionDigits;\n    // 1. Let x be ? thisNumberValue(this value).\n    let x = To.thisNumberValue(realm, context).value;\n\n    // 2. Let f be ? ToInteger(fractionDigits).\n    fractionDigits = fractionDigits.throwIfNotConcrete();\n    let f = To.ToInteger(realm, fractionDigits);\n\n    // 3. Assert: f is 0, when fractionDigits is undefined.\n    invariant(f === 0 || !(fractionDigits instanceof UndefinedValue));\n\n    // 4. If x is NaN, return the String \"NaN\".\n    if (isNaN(x)) return new StringValue(realm, \"NaN\");\n\n    // 5. Let s be the empty String.\n    let s = \"\";\n\n    // 6. If x < 0, then\n    if (x < 0) {\n      // 6a. Let s be \"-\".\n      s = \"-\";\n\n      // 6b. Let x be -x.\n      x = -x;\n    }\n\n    // 7. If x = +âˆž, then\n    if (x === +Infinity) {\n      // 7a. Return the concatenation of the Strings s and \"Infinity\".\n      return new StringValue(realm, s + \"Infinity\");\n    }\n\n    // 8. If f < 0 or f > 20, throw a RangeError exception. However, an implementation is permitted to extend the behaviour of toExponential for values of f less than 0 or greater than 20. In this case toExponential would not necessarily throw RangeError for such values.\n    if (f < 0 || f > 20) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"f < 0 || f > 20\");\n    }\n\n    let positiveResultString = x.toExponential(fractionDigits instanceof UndefinedValue ? undefined : f);\n    return new StringValue(realm, s + positiveResultString);\n  });\n\n  // ECMA262 20.1.3.3\n  obj.defineNativeMethod(\"toFixed\", 1, (context, [fractionDigits]) => {\n    // 1. Let f be ToInteger(fractionDigits). (If fractionDigits is undefined, this step produces the value 0).\n    let f = To.ToInteger(realm, fractionDigits);\n\n    // 2. If f < 0 or f > 20, throw a RangeError exception.\n    if (f < 0 || f > 20) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"f < 0 || f > 20\");\n    }\n\n    // 3. Let x be this Number value.\n    let x = To.thisNumberValue(realm, context).value;\n\n    // 4. If x is NaN, return the String \"NaN\".\n    if (isNaN(x)) return new StringValue(realm, \"NaN\");\n\n    return new StringValue(realm, x.toFixed(f));\n  });\n\n  let toLocaleStringSrc = \"(A).toLocaleString()\";\n\n  // ECMA262 20.1.3.4\n  obj.defineNativeMethod(\"toLocaleString\", 0, context => {\n    let x = To.thisNumberValue(realm, context);\n    if (realm.useAbstractInterpretation) {\n      // The locale is environment-dependent and may also be time-dependent\n      // so do this at runtime and at this point in time\n      return AbstractValue.createTemporalFromTemplate(realm, toLocaleStringSrc, StringValue, [x]);\n    } else {\n      return new StringValue(realm, x.toLocaleString());\n    }\n  });\n\n  // ECMA262 20.1.3.5\n  obj.defineNativeMethod(\"toPrecision\", 1, (context, [precision]) => {\n    // 1. Let x be ? thisNumberValue(this value).\n    // 2. If precision is undefined, return ! ToString(x).\n    let num = To.thisNumberValue(realm, context);\n    if (precision instanceof UndefinedValue) {\n      return new StringValue(realm, To.ToString(realm, num));\n    }\n    // 3. Let p be ? ToInteger(precision).\n    let p = To.ToInteger(realm, precision.throwIfNotConcrete());\n    // 4. If x is NaN, return the String \"NaN\".\n    let x = num.value;\n    if (isNaN(x)) {\n      return new StringValue(realm, \"NaN\");\n    }\n    // 5. Let s be the empty String.\n    let s = \"\";\n    // 6. If x < 0, then\n    if (x < 0) {\n      // a. Let s be code unit 0x002D (HYPHEN-MINUS).\n      s = \"-\";\n      // b. Let x be -x.\n      x = -x;\n    }\n    // 7. If x = +âˆž, then\n    if (x === +Infinity) {\n      // a. Return the String that is the concatenation of s and \"Infinity\".\n      return new StringValue(realm, s + \"Infinity\");\n    }\n    // 8. If p < 1 or p > 21, throw a RangeError exception.\n    // However, an implementation is permitted to extend the behaviour of\n    // toPrecision for values of p less than 1 or greater than 21.\n    // In this case toPrecision would not necessarily throw RangeError for such\n    // values.\n    if (p < 1 || p > 21) {\n      // for simplicity, throw the error\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"p should be in between 1 and 21 inclusive\");\n    }\n    return new StringValue(realm, s + x.toPrecision(p));\n  });\n\n  const tsTemplateSrc = \"('' + A)\";\n\n  // ECMA262 20.1.3.6\n  obj.defineNativeMethod(\"toString\", 1, (context, [radix]) => {\n    if (radix instanceof UndefinedValue) {\n      const target = context instanceof ObjectValue ? context.$NumberData : context;\n      if (target instanceof AbstractValue && (target.getType() === NumberValue || target.getType() === IntegralValue)) {\n        return AbstractValue.createFromTemplate(realm, tsTemplateSrc, StringValue, [target]);\n      }\n    }\n    // 1. Let x be ? thisNumberValue(this value).\n    let x = To.thisNumberValue(realm, context);\n\n    // 2. If radix is not present, let radixNumber be 10.\n    // 3. Else if radix is undefined, let radixNumber be 10.\n    let radixNumber;\n    if (!radix || radix instanceof UndefinedValue) {\n      radixNumber = 10;\n    } else {\n      // 4. Else let radixNumber be ? ToInteger(radix).\n      radixNumber = To.ToInteger(realm, radix.throwIfNotConcrete());\n    }\n\n    // 5. If radixNumber < 2 or radixNumber > 36, throw a RangeError exception.\n    if (radixNumber < 2 || radixNumber > 36) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 6. If radixNumber = 10, return ! ToString(x).\n    if (radixNumber === 10) return new StringValue(realm, To.ToString(realm, x));\n\n    // 7. Return the String representation of this Number value using the radix specified by radixNumber.\n    //    Letters a-z are used for digits with values 10 through 35. The precise algorithm is\n    //    implementation-dependent, however the algorithm should be a generalization of that specified in\n    //    7.1.12.1.\n    return new StringValue(realm, x.value.toString(radixNumber));\n  });\n\n  // ECMA262 20.1.3.7\n  obj.defineNativeMethod(\"valueOf\", 0, context => {\n    // 1. Return ? thisNumberValue(this value).\n    return To.thisNumberValue(realm, context);\n  });\n}\n"],"file":"NumberPrototype.js"}