{"version":3,"sources":["../../../src/intrinsics/ecma262/SetPrototype.js"],"names":["realm","obj","defineNativeMethod","context","value","S","throwIfNotConcrete","ObjectValue","createErrorThrowCompletion","intrinsics","TypeError","$SetData","recordModifiedProperty","$SetData_binding","entries","undefined","e","NumberValue","Object","is","zero","push","i","length","true","false","callbackfn","thisArg","T","$DefineOwnProperty","PropertyDescriptor","get","NativeFunctionValue","count","configurable","valuesPropertyDescriptor","$GetOwnProperty","Properties","ThrowIfMightHaveBeenDeleted","SymbolIterator","defineNativeProperty","SymbolToStringTag","StringValue","writable"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, ObjectValue, StringValue, NumberValue } from \"../../values/index.js\";\nimport { Call, CreateSetIterator, IsCallable, SameValueZeroPartial } from \"../../methods/index.js\";\nimport { Properties } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\nimport { PropertyDescriptor } from \"../../descriptors.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 23.2.3.1\n  obj.defineNativeMethod(\"add\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    realm.recordModifiedProperty((S: any).$SetData_binding);\n    let entries = S.$SetData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each e that is an element of entries,\n    for (let e of entries) {\n      // a. If e is not empty and SameValueZero(e, value) is true, then\n      if (e && SameValueZeroPartial(realm, e, value)) {\n        // i. Return S.\n        return S;\n      }\n    }\n\n    // 6. If value is -0, let value be +0.\n    value = value.throwIfNotConcrete();\n    if (value instanceof NumberValue && Object.is(value.value, -0)) {\n      value = realm.intrinsics.zero;\n    }\n\n    // 7. Append value as the last element of entries.\n    entries.push(value);\n\n    // 8. Return S.\n    return S;\n  });\n\n  // ECMA262 23.2.3.2\n  obj.defineNativeMethod(\"clear\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // All of these steps can be replace with just reseting [[SetData]]\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    // 5. Repeat for each e that is an element of entries,\n    // 5.a Replace the element of entries whose value is e with an element whose value is empty.\n    realm.recordModifiedProperty((S: any).$SetData_binding);\n    S.$SetData = [];\n\n    // 6. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.2.3.4\n  obj.defineNativeMethod(\"delete\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    realm.recordModifiedProperty((S: any).$SetData_binding);\n    let entries = S.$SetData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each e that is an element of entries,\n    for (let i = 0; i < entries.length; i++) {\n      let e = entries[i];\n\n      // a. If e is not empty and SameValueZero(e, value) is true, then\n      if (e !== undefined && SameValueZeroPartial(realm, e, value)) {\n        // i. Replace the element of entries whose value is e with an element whose value is empty.\n        entries[i] = undefined;\n\n        // ii. Return true.\n        return realm.intrinsics.true;\n      }\n    }\n\n    // 6. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.2.3.5\n  obj.defineNativeMethod(\"entries\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateSetIterator(S, \"key+value\").\n    return CreateSetIterator(realm, S, \"key+value\");\n  });\n\n  // ECMA262 23.2.3.6\n  obj.defineNativeMethod(\"forEach\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 6. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    let entries = S.$SetData;\n    invariant(entries);\n\n    // 7. Repeat for each e that is an element of entries, in original insertion order\n    for (let e of entries) {\n      // a. If e is not empty, then\n      if (e) {\n        // i. Perform ? Call(callbackfn, T, « e, e, S »).\n        Call(realm, callbackfn, T, [e, e, S]);\n      }\n    }\n\n    // 8. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.2.3.7\n  obj.defineNativeMethod(\"has\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    let entries = S.$SetData;\n\n    // 5. Repeat for each e that is an element of entries,\n    for (let e of entries) {\n      // a. If e is not empty and SameValueZero(e, value) is true, return true.\n      if (e && SameValueZeroPartial(realm, e, value)) return realm.intrinsics.true;\n    }\n\n    // 6. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.2.3.9 get Set.prototype.size\n  obj.$DefineOwnProperty(\n    \"size\",\n    new PropertyDescriptor({\n      get: new NativeFunctionValue(realm, undefined, \"get size\", 0, context => {\n        // 1. Let S be the this value.\n        let S = context.throwIfNotConcrete();\n\n        // 2. If Type(S) is not Object, throw a TypeError exception.\n        if (!(S instanceof ObjectValue)) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n        }\n\n        // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n        if (!S.$SetData) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n        }\n\n        // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n        let entries = S.$SetData;\n\n        // 5. Let count be 0.\n        let count = 0;\n\n        // 6. For each e that is an element of entries\n        for (let e of entries) {\n          // a. If e is not empty, set count to count+1.\n          if (e) count++;\n        }\n\n        // 7. Return count.\n        return new NumberValue(realm, count);\n      }),\n      configurable: true,\n    })\n  );\n\n  // ECMA262 23.2.3.10\n  obj.defineNativeMethod(\"values\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateSetIterator(S, \"value\").\n    return CreateSetIterator(realm, S, \"value\");\n  });\n\n  // ECMA262 23.2.3.8\n  let valuesPropertyDescriptor = obj.$GetOwnProperty(\"values\");\n  invariant(valuesPropertyDescriptor instanceof PropertyDescriptor);\n  Properties.ThrowIfMightHaveBeenDeleted(valuesPropertyDescriptor);\n  obj.$DefineOwnProperty(\"keys\", valuesPropertyDescriptor);\n\n  // ECMA262 23.2.3.11\n  obj.$DefineOwnProperty(realm.intrinsics.SymbolIterator, valuesPropertyDescriptor);\n\n  // ECMA262 23.2.3.12 Set.prototype [ @@toStringTag ]\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Set\"), { writable: false });\n}\n"],"file":"SetPrototype.js"}