{"version":3,"sources":["../../../src/intrinsics/ecma262/parseFloat.js"],"names":["realm","NativeFunctionValue","context","string","intrinsics","NaN","inputString","To","ToStringPartial","NumberValue","parseFloat"],"mappings":";;;;;;;AAYA;;AAEA;;AAdA;;;;;;;;;AASA;AAOe,kBAASA,KAAT,EAA4C;AACzD;AACA,SAAO,IAAIC,0BAAJ,CACLD,KADK,EAEL,YAFK,EAGL,YAHK,EAIL,CAJK,EAKL,CAACE,OAAD,EAAU,CAACC,MAAD,CAAV,KAAuB;AACrB,QAAI,CAACA,MAAL,EAAa,OAAOH,KAAK,CAACI,UAAN,CAAiBC,GAAxB,CADQ,CAGrB;;AACA,QAAIC,WAAW,GAAGC,eAAGC,eAAH,CAAmBR,KAAnB,EAA0BG,MAA1B,CAAlB;;AAEA,WAAO,IAAIM,kBAAJ,CAAgBT,KAAhB,EAAuBU,UAAU,CAACJ,WAAD,CAAjC,CAAP;AACD,GAZI,EAaL,KAbK,CAAP;AAeD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { NumberValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 18.2.4\n  return new NativeFunctionValue(\n    realm,\n    \"parseFloat\",\n    \"parseFloat\",\n    1,\n    (context, [string]) => {\n      if (!string) return realm.intrinsics.NaN;\n\n      // 1. Let inputString be ? ToString(string).\n      let inputString = To.ToStringPartial(realm, string);\n\n      return new NumberValue(realm, parseFloat(inputString));\n    },\n    false\n  );\n}\n"],"file":"parseFloat.js"}