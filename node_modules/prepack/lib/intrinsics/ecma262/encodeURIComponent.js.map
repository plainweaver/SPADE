{"version":3,"sources":["../../../src/intrinsics/ecma262/encodeURIComponent.js"],"names":["realm","name","NativeFunctionValue","context","_uriComponent","argCount","NewTarget","uriComponent","createErrorThrowCompletion","intrinsics","TypeError","throwIfNotConcrete","componentString","To","ToString","StringValue","encodeURIComponent","e","URIError","message"],"mappings":";;;;;;;AAYA;;AACA;;AAbA;;;;;;;;;AASA;AAOe,kBAASA,KAAT,EAA4C;AACzD;AACA,MAAIC,IAAI,GAAG,oBAAX;AACA,SAAO,IAAIC,0BAAJ,CAAwBF,KAAxB,EAA+BC,IAA/B,EAAqCA,IAArC,EAA2C,CAA3C,EAA8C,CAACE,OAAD,EAAU,CAACC,aAAD,CAAV,EAA2BC,QAA3B,EAAqCC,SAArC,KAAmD;AACtG,QAAIC,YAAY,GAAGH,aAAnB;AACA,QAAIE,SAAJ,EAAe,MAAMN,KAAK,CAACQ,0BAAN,CAAiCR,KAAK,CAACS,UAAN,CAAiBC,SAAlD,EAA8D,GAAET,IAAK,uBAArE,CAAN;AAEfM,IAAAA,YAAY,GAAGA,YAAY,CAACI,kBAAb,EAAf,CAJsG,CAMtG;;AACA,QAAIC,eAAe,GAAGC,eAAGC,QAAH,CAAYd,KAAZ,EAAmBO,YAAnB,CAAtB,CAPsG,CAStG;AACA;;;AACA,QAAI;AACF,aAAO,IAAIQ,kBAAJ,CAAgBf,KAAhB,EAAuBgB,kBAAkB,CAACJ,eAAD,CAAzC,CAAP;AACD,KAFD,CAEE,OAAOK,CAAP,EAAU;AACV,YAAMjB,KAAK,CAACQ,0BAAN,CAAiCR,KAAK,CAACS,UAAN,CAAiBS,QAAlD,EAA4DD,CAAC,CAACE,OAA9D,CAAN;AACD;AACF,GAhBM,CAAP;AAiBD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\nimport { StringValue } from \"../../values/index.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 18.2.6.5\n  let name = \"encodeURIComponent\";\n  return new NativeFunctionValue(realm, name, name, 1, (context, [_uriComponent], argCount, NewTarget) => {\n    let uriComponent = _uriComponent;\n    if (NewTarget) throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, `${name} is not a constructor`);\n\n    uriComponent = uriComponent.throwIfNotConcrete();\n\n    // 1. Let componentString be ? ToString(uri).\n    let componentString = To.ToString(realm, uriComponent);\n\n    // 2. Let unescapedURIComponentSet be a String containing one instance of each code unit valid in uriUnescaped.\n    // 3. Return ? Encode(componentString, unescapedURIComponentSet).\n    try {\n      return new StringValue(realm, encodeURIComponent(componentString));\n    } catch (e) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.URIError, e.message);\n    }\n  });\n}\n"],"file":"encodeURIComponent.js"}