{"version":3,"sources":["../../../src/intrinsics/ecma262/WeakMapPrototype.js"],"names":["realm","obj","defineNativeProperty","intrinsics","SymbolToStringTag","StringValue","writable","defineNativeMethod","context","key","M","throwIfNotConcrete","ObjectValue","createErrorThrowCompletion","TypeError","$WeakMapData","entries","recordModifiedProperty","$WeakMapData_binding","undefined","false","p","$Key","$Value","true","value","push"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { StringValue, ObjectValue } from \"../../values/index.js\";\nimport { SameValuePartial } from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 23.3.3.6\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"WeakMap\"), { writable: false });\n\n  // ECMA262 23.3.3.2\n  obj.defineNativeMethod(\"delete\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[WeakMapData]] internal slot, throw a TypeError exception.\n    if (!M.$WeakMapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[WeakMapData]] internal slot.\n    let entries = M.$WeakMapData;\n    realm.recordModifiedProperty((M: any).$WeakMapData_binding);\n    invariant(entries !== undefined);\n\n    // 5. If Type(key) is not Object, return false.\n    key = key.throwIfNotConcrete();\n    if (!(key instanceof ObjectValue)) {\n      return realm.intrinsics.false;\n    }\n\n    // 6. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, then\n      if (p.$Key !== undefined && SameValuePartial(realm, p.$Key, key)) {\n        // i. Set p.[[Key]] to empty.\n        p.$Key = undefined;\n\n        // ii. Set p.[[Value]] to empty.\n        p.$Value = undefined;\n\n        // iii. Return true.\n        return realm.intrinsics.true;\n      }\n    }\n\n    // 7. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.3.3.3\n  obj.defineNativeMethod(\"get\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[WeakMapData]] internal slot, throw a TypeError exception.\n    if (!M.$WeakMapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[WeakMapData]] internal slot.\n    let entries = M.$WeakMapData;\n    invariant(entries !== undefined);\n\n    // 5. If Type(key) is not Object, return undefined.\n    key = key.throwIfNotConcrete();\n    if (!(key instanceof ObjectValue)) {\n      return realm.intrinsics.undefined;\n    }\n\n    // 6. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, return p.[[Value]].\n      if (p.$Key !== undefined && SameValuePartial(realm, p.$Key, key)) {\n        invariant(p.$Value !== undefined);\n        return p.$Value;\n      }\n    }\n\n    // 7. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.3.3.4\n  obj.defineNativeMethod(\"has\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[WeakMapData]] internal slot, throw a TypeError exception.\n    if (!M.$WeakMapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[WeakMapData]] internal slot.\n    let entries = M.$WeakMapData;\n    invariant(entries !== undefined);\n\n    // 5. If Type(key) is not Object, return false.\n    key = key.throwIfNotConcrete();\n    if (!(key instanceof ObjectValue)) {\n      return realm.intrinsics.false;\n    }\n\n    // 6. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, return true.\n      if (p.$Key !== undefined && SameValuePartial(realm, p.$Key, key)) return realm.intrinsics.true;\n    }\n\n    // 7. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.3.3.5\n  obj.defineNativeMethod(\"set\", 2, (context, [key, value]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[WeakMapData]] internal slot, throw a TypeError exception.\n    if (!M.$WeakMapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[WeakMapData]] internal slot.\n    realm.recordModifiedProperty((M: any).$WeakMapData_binding);\n    let entries = M.$WeakMapData;\n    invariant(entries !== undefined);\n\n    // 5. If Type(key) is not Object, throw a TypeError exception.\n    key = key.throwIfNotConcrete();\n    if (!(key instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 6. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, then\n      if (p.$Key !== undefined && SameValuePartial(realm, p.$Key, key)) {\n        // i. Set p.[[Value]] to value.\n        p.$Value = value;\n\n        // ii. Return M.\n        return M;\n      }\n    }\n\n    // 7. Let p be the Record {[[Key]]: key, [[Value]]: value}.\n    let p = { $Key: key, $Value: value };\n\n    // 8. Append p as the last element of entries.\n    entries.push(p);\n\n    // 9. Return M.\n    return M;\n  });\n}\n"],"file":"WeakMapPrototype.js"}