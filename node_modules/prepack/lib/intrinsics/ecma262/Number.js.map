{"version":3,"sources":["../../../src/intrinsics/ecma262/Number.js"],"names":["realm","func","NativeFunctionValue","context","value","argCount","NewTarget","n","intrinsics","zero","NumberValue","To","ToNumber","O","Create","OrdinaryCreateFromConstructor","$NumberData","undefined","defineNativeConstant","isCompatibleWith","MOBILE_JSC_VERSION","defineNativeMethod","_number","number","mightBeNumber","false","throwIfNotConcreteNumber","isNaN","Infinity","true","integer","ToInteger","Math","abs","pow","NaN","negativeInfinity","defineNativeProperty","parseFloat","parseInt"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, NumberValue } from \"../../values/index.js\";\nimport { Create, To } from \"../../singletons.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 20.1.1\n  let func = new NativeFunctionValue(realm, \"Number\", \"Number\", 1, (context, [value], argCount, NewTarget) => {\n    let n;\n\n    // 1. If no arguments were passed to this function invocation, let n be +0.\n    if (argCount === 0) {\n      n = realm.intrinsics.zero;\n    } else {\n      // 2. Else, let n be ? ToNumber(value).\n      n = new NumberValue(realm, To.ToNumber(realm, value));\n    }\n\n    // 3. If NewTarget is undefined, return n.\n    if (!NewTarget) return n;\n\n    // 4. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%NumberPrototype%\", « [[NumberData]] »).\n    let O = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"NumberPrototype\", { $NumberData: undefined });\n\n    // 5. Set the value of O's [[NumberData]] internal slot to n.\n    O.$NumberData = n;\n\n    // 6. Return O.\n    return O;\n  });\n\n  // ECMA262 20.1.2.1\n  func.defineNativeConstant(\"EPSILON\", new NumberValue(realm, 2.220446049250313e-16));\n\n  // ECMA262 20.1.2.2\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"isFinite\", 1, (context, [_number]) => {\n      let number = _number;\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, +∞, or -∞, return false.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value) || number.value === +Infinity || number.value === -Infinity)\n        return realm.intrinsics.false;\n\n      // 3. Otherwise, return true.\n      return realm.intrinsics.true;\n    });\n\n  // ECMA262 20.1.2.3\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"isInteger\", 1, (context, [_number]) => {\n      let number = _number;\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, +∞, or -∞, return false.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value) || number.value === +Infinity || number.value === -Infinity)\n        return realm.intrinsics.false;\n\n      // 3. Let integer be ToInteger(number).\n      let integer = To.ToInteger(realm, number);\n\n      // 4. If integer is not equal to number, return false.\n      if (integer !== number.value) return realm.intrinsics.false;\n\n      // 5. Otherwise, return true.\n      return realm.intrinsics.true;\n    });\n\n  // ECMA262 20.1.2.4\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"isNaN\", 1, (context, [_number]) => {\n      let number = _number;\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, return true.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value)) return realm.intrinsics.true;\n\n      // 3. Otherwise, return false.\n      return realm.intrinsics.false;\n    });\n\n  // ECMA262 20.1.2.5\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"isSafeInteger\", 1, (context, [_number]) => {\n      let number = _number;\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, +∞, or -∞, return false.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value) || number.value === +Infinity || number.value === -Infinity)\n        return realm.intrinsics.false;\n\n      // 3. Let integer be ToInteger(number).\n      let integer = To.ToInteger(realm, number);\n\n      // 4. If integer is not equal to number, return false.\n      if (integer !== number.value) return realm.intrinsics.false;\n\n      // 5. If abs(integer) ≤ 2^53-1, return true.\n      if (Math.abs(integer) <= Math.pow(2, 53) - 1) return realm.intrinsics.true;\n\n      // 6. Otherwise, return false.\n      return realm.intrinsics.false;\n    });\n\n  // ECMA262 20.1.2.6\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeConstant(\"MAX_SAFE_INTEGER\", new NumberValue(realm, 9007199254740991));\n\n  // ECMA262 20.1.2.7\n  func.defineNativeConstant(\"MAX_VALUE\", new NumberValue(realm, 1.7976931348623157e308));\n\n  // ECMA262 20.1.2.8\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeConstant(\"MIN_SAFE_INTEGER\", new NumberValue(realm, -9007199254740991));\n\n  // ECMA262 20.1.2.9\n  func.defineNativeConstant(\"MIN_VALUE\", new NumberValue(realm, 5e-324));\n\n  // ECMA262 20.1.2.10\n  func.defineNativeConstant(\"NaN\", realm.intrinsics.NaN);\n\n  // ECMA262 20.1.2.11\n  func.defineNativeConstant(\"NEGATIVE_INFINITY\", realm.intrinsics.negativeInfinity);\n\n  // ECMA262 20.1.2.12\n  func.defineNativeProperty(\"parseFloat\", realm.intrinsics.parseFloat);\n\n  // ECMA262 20.1.2.13\n  func.defineNativeProperty(\"parseInt\", realm.intrinsics.parseInt);\n\n  // ECMA262 20.1.2.14\n  func.defineNativeConstant(\"POSITIVE_INFINITY\", realm.intrinsics.Infinity);\n\n  return func;\n}\n"],"file":"Number.js"}