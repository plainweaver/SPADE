{"version":3,"sources":["../../../src/intrinsics/ecma262/WeakSetPrototype.js"],"names":["realm","obj","defineNativeMethod","context","value","S","throwIfNotConcrete","ObjectValue","createErrorThrowCompletion","intrinsics","TypeError","$WeakSetData","recordModifiedProperty","$WeakSetData_binding","entries","e","undefined","push","false","i","length","true","defineNativeProperty","SymbolToStringTag","StringValue","writable"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { StringValue, ObjectValue } from \"../../values/index.js\";\nimport { SameValuePartial } from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 23.4.3.1\n  obj.defineNativeMethod(\"add\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(S) is not Object\");\n    }\n\n    // 3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError exception.\n    if (!S.$WeakSetData) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"S does not have a [[WeakSetData]] internal slot\"\n      );\n    }\n\n    // 4. If Type(value) is not Object, throw a TypeError exception.\n    value = value.throwIfNotConcrete();\n    if (!(value instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(value) is not Object\");\n    }\n\n    // 5. Let entries be the List that is S.[[WeakSetData]].\n    realm.recordModifiedProperty((S: any).$WeakSetData_binding);\n    let entries = S.$WeakSetData;\n    invariant(entries != null);\n\n    // 6. Repeat for each e that is an element of entries,\n    for (let e of entries) {\n      // a. If e is not empty and SameValue(e, value) is true, then\n      if (e !== undefined && SameValuePartial(realm, e, value) === true) {\n        // i. Return S.\n        return S;\n      }\n    }\n\n    // 7. Append value as the last element of entries.\n    entries.push(value);\n\n    // 8. Return S.\n    return S;\n  });\n\n  // ECMA262 23.4.3.3\n  obj.defineNativeMethod(\"delete\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(S) is not Object\");\n    }\n\n    // 3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError exception.\n    if (!S.$WeakSetData) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"S does not have a [[WeakSetData]] internal slot\"\n      );\n    }\n\n    // 4. If Type(value) is not Object, throw a TypeError exception.\n    value = value.throwIfNotConcrete();\n    if (!(value instanceof ObjectValue)) return realm.intrinsics.false;\n\n    // 5. Let entries be the List that is S.[[WeakSetData]].\n    realm.recordModifiedProperty((S: any).$WeakSetData_binding);\n    let entries = S.$WeakSetData;\n    invariant(entries != null);\n\n    // 6. Repeat for each e that is an element of entries,\n    for (let i = 0; i < entries.length; ++i) {\n      let e = entries[i];\n\n      // a. If e is not empty and SameValue(e, value) is true, then\n      if (e !== undefined && SameValuePartial(realm, e, value) === true) {\n        // i. Replace the element of entries whose value is e with an element whose value is empty.\n        entries[i] = undefined;\n\n        // ii. Return true.\n        return realm.intrinsics.true;\n      }\n    }\n\n    // 7. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.4.3.3\n  obj.defineNativeMethod(\"has\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(S) is not Object\");\n    }\n\n    // 3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError exception.\n    if (!S.$WeakSetData) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"S does not have a [[WeakSetData]] internal slot\"\n      );\n    }\n\n    // 4. Let entries be the List that is S.[[WeakSetData]].\n    let entries = S.$WeakSetData;\n\n    // 5. If Type(value) is not Object, return false.\n    value = value.throwIfNotConcrete();\n    if (!(value instanceof ObjectValue)) return realm.intrinsics.false;\n\n    // 6. Repeat for each e that is an element of entries,\n    for (let e of entries) {\n      // a. If e is not empty and SameValue(e, value) is true, return true.\n      if (e !== undefined && SameValuePartial(realm, e, value) === true) return realm.intrinsics.true;\n    }\n\n    // 7. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.4.3.5\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"WeakSet\"), { writable: false });\n}\n"],"file":"WeakSetPrototype.js"}