{"version":3,"sources":["../../../src/intrinsics/ecma262/ObjectPrototype.js"],"names":["realm","obj","ObjectPrototypeHasOwnPrototype","defineNativeMethod","context","V","P","To","ToPropertyKey","throwIfNotConcrete","O","ToObject","BooleanValue","x","isInPureScope","FatalError","key","StringValue","evaluateWithPossibleThrowCompletion","AbstractValue","createTemporalFromBuildFunction","TypesDomain","topVal","ValuesDomain","mightBeObject","intrinsics","false","throwIfNotConcreteObject","$GetPrototypeOf","NullValue","true","desc","$GetOwnProperty","Properties","ThrowIfMightHaveBeenDeleted","enumerable","undefined","defineNativeProperty","ObjectProto_toString","$DefineOwnProperty","PropertyDescriptor","get","NativeFunctionValue","set","proto","ObjectValue","status","$SetPrototypeOf","createErrorThrowCompletion","TypeError"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport {\n  AbstractValue,\n  NativeFunctionValue,\n  ObjectValue,\n  BooleanValue,\n  NullValue,\n  StringValue,\n} from \"../../values/index.js\";\nimport { SameValuePartial, RequireObjectCoercible } from \"../../methods/abstract.js\";\nimport { HasOwnProperty, HasSomeCompatibleType } from \"../../methods/has.js\";\nimport { Invoke } from \"../../methods/call.js\";\nimport { Properties, To } from \"../../singletons.js\";\nimport { FatalError } from \"../../errors.js\";\nimport invariant from \"../../invariant.js\";\nimport { TypesDomain, ValuesDomain } from \"../../domains/index.js\";\nimport { createOperationDescriptor } from \"../../utils/generator.js\";\nimport { PropertyDescriptor } from \"../../descriptors.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 19.1.3.2\n  const ObjectPrototypeHasOwnPrototype = obj.defineNativeMethod(\"hasOwnProperty\", 1, (context, [V]) => {\n    // 1. Let P be ? ToPropertyKey(V).\n    let P = To.ToPropertyKey(realm, V.throwIfNotConcrete());\n\n    // The pure parts are wrapped with a recovery mode.\n    try {\n      // 2. Let O be ? ToObject(this value).\n      let O = To.ToObject(realm, context);\n\n      // 3. Return ? HasOwnProperty(O, P).\n      return new BooleanValue(realm, HasOwnProperty(realm, O, P));\n    } catch (x) {\n      if (realm.isInPureScope() && x instanceof FatalError) {\n        // If we're in pure scope we can try to recover from any fatals by\n        // leaving the call in place which we do by default, but we don't\n        // have to leak the state of any arguments since this function is pure.\n        // This also lets us define the return type properly.\n        const key = typeof P === \"string\" ? new StringValue(realm, P) : P;\n        return realm.evaluateWithPossibleThrowCompletion(\n          () =>\n            AbstractValue.createTemporalFromBuildFunction(\n              realm,\n              BooleanValue,\n              [ObjectPrototypeHasOwnPrototype, context, key],\n              createOperationDescriptor(\"OBJECT_PROTO_HAS_OWN_PROPERTY\")\n            ),\n          TypesDomain.topVal,\n          ValuesDomain.topVal\n        );\n      }\n      throw x;\n    }\n  });\n\n  // ECMA262 19.1.3.3\n  obj.defineNativeMethod(\"isPrototypeOf\", 1, (context, [V]) => {\n    // 1. If Type(V) is not Object, return false.\n    if (!V.mightBeObject()) return realm.intrinsics.false;\n    V = V.throwIfNotConcreteObject();\n\n    // 2. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // 3. Repeat\n    while (true) {\n      // a. Let V be ? V.[[GetPrototypeOf]]().\n      V = V.$GetPrototypeOf();\n\n      // b. If V is null, return false.\n      if (V instanceof NullValue) return realm.intrinsics.false;\n\n      // c. If SameValue(O, V) is true, return true.\n      if (SameValuePartial(realm, O, V) === true) return realm.intrinsics.true;\n    }\n\n    invariant(false);\n  });\n\n  // ECMA262 19.1.3.4\n  obj.defineNativeMethod(\"propertyIsEnumerable\", 1, (context, [V]) => {\n    // 1. Let P be ? ToPropertyKey(V).\n    let P = To.ToPropertyKey(realm, V.throwIfNotConcrete());\n\n    // 2. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // 3. Let desc be ? O.[[GetOwnProperty]](P).\n    let desc = O.$GetOwnProperty(P);\n\n    // 4. If desc is undefined, return false.\n    if (!desc) return realm.intrinsics.false;\n    Properties.ThrowIfMightHaveBeenDeleted(desc);\n    desc = desc.throwIfNotConcrete(realm);\n\n    // 5. Return the value of desc.[[Enumerable]].\n    return desc.enumerable === undefined ? realm.intrinsics.undefined : new BooleanValue(realm, desc.enumerable);\n  });\n\n  // ECMA262 19.1.3.5\n  obj.defineNativeMethod(\"toLocaleString\", 0, context => {\n    // 1. Let O be the this value.\n    let O = context;\n\n    // 2. Return ? Invoke(O, \"toString\").\n    return Invoke(realm, O, \"toString\");\n  });\n\n  // ECMA262 19.1.3.6\n  obj.defineNativeProperty(\"toString\", realm.intrinsics.ObjectProto_toString);\n\n  // ECMA262 19.1.3.7\n  obj.defineNativeMethod(\"valueOf\", 0, context => {\n    // 1. Return ? ToObject(this value).\n    return To.ToObject(realm, context);\n  });\n\n  obj.$DefineOwnProperty(\n    \"__proto__\",\n    new PropertyDescriptor({\n      // B.2.2.1.1\n      get: new NativeFunctionValue(realm, undefined, \"get __proto__\", 0, context => {\n        // 1. Let O be ? ToObject(this value).\n        let O = To.ToObject(realm, context);\n\n        // 2. Return ? O.[[GetPrototypeOf]]().\n        return O.$GetPrototypeOf();\n      }),\n\n      // B.2.2.1.2\n      set: new NativeFunctionValue(realm, undefined, \"set __proto__\", 1, (context, [proto]) => {\n        // 1. Let O be ? RequireObjectCoercible(this value).\n        let O = RequireObjectCoercible(realm, context);\n\n        // 2. If Type(proto) is neither Object nor Null, return undefined.\n        if (!HasSomeCompatibleType(proto, ObjectValue, NullValue)) return realm.intrinsics.undefined;\n\n        // 3. If Type(O) is not Object, return undefined.\n        if (!O.mightBeObject()) return realm.intrinsics.undefined;\n        O = O.throwIfNotConcreteObject();\n\n        // 4. Let status be ? O.[[SetPrototypeOf]](proto).\n        let status = O.$SetPrototypeOf(((proto.throwIfNotConcrete(): any): ObjectValue | NullValue));\n\n        // 5. If status is false, throw a TypeError exception.\n        if (!status) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"couldn't set proto\");\n        }\n\n        // 6. Return undefined.\n        return realm.intrinsics.undefined;\n      }),\n    })\n  );\n}\n"],"file":"ObjectPrototype.js"}