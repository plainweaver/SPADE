{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayProto_values.js"],"names":["realm","NativeFunctionValue","context","O","To","ToObject","ArrayValue","isIntrinsicAndHasWidenedNumericProperty","isInPureScope","$GetOwnProperty","undefined","AbstractValue","createTemporalFromBuildFunction","Value","StringValue","Create","CreateArrayIterator","throwIfNotConcreteObject"],"mappings":";;;;;;;AAYA;;AACA;;AACA;;AAdA;;;;;;;;;AASA;AAOe,kBAASA,KAAT,EAA4C;AACzD;AACA,SAAO,IAAIC,0BAAJ,CAAwBD,KAAxB,EAA+B,wBAA/B,EAAyD,QAAzD,EAAmE,CAAnE,EAAsEE,OAAO,IAAI;AACtF;AACA,QAAIC,CAAC,GAAGC,eAAGC,QAAH,CAAYL,KAAZ,EAAmBE,OAAnB,CAAR,CAFsF,CAItF;AACA;AACA;;;AACA,QACEI,kBAAWC,uCAAX,CAAmDJ,CAAnD,KACAH,KAAK,CAACQ,aAAN,EADA,IAEAL,CAAC,CAACM,eAAF,CAAkB,QAAlB,MAAgCC,SAHlC,EAIE;AACA,aAAOC,qBAAcC,+BAAd,CACLZ,KADK,EAELa,YAFK,EAGL,CAACV,CAAD,EAAI,IAAIW,kBAAJ,CAAgBd,KAAhB,EAAuB,QAAvB,CAAJ,CAHK,EAIL,0CAA0B,oCAA1B,CAJK,CAAP;AAMD,KAlBqF,CAoBtF;;;AACA,WAAOe,mBAAOC,mBAAP,CAA2BhB,KAA3B,EAAkCG,CAAC,CAACc,wBAAF,EAAlC,EAAgE,OAAhE,CAAP;AACD,GAtBM,CAAP;AAuBD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, ArrayValue, NativeFunctionValue, StringValue, Value } from \"../../values/index.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport { createOperationDescriptor } from \"../../utils/generator.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 22.1.3.30\n  return new NativeFunctionValue(realm, \"Array.prototype.values\", \"values\", 0, context => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"values\") === undefined\n    ) {\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        Value,\n        [O, new StringValue(realm, \"values\")],\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Return CreateArrayIterator(O, \"value\").\n    return Create.CreateArrayIterator(realm, O.throwIfNotConcreteObject(), \"value\");\n  });\n}\n"],"file":"ArrayProto_values.js"}