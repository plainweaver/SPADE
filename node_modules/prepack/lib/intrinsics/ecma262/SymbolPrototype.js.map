{"version":3,"sources":["../../../src/intrinsics/ecma262/SymbolPrototype.js"],"names":["realm","obj","tsTemplateSrc","defineNativeMethod","context","target","ObjectValue","$SymbolData","AbstractValue","getType","SymbolValue","createFromTemplate","StringValue","s","throwIfNotConcrete","sym","createErrorThrowCompletion","intrinsics","TypeError","throwIfNotConcreteSymbol","SymbolToPrimitive","hint","writable","defineNativeProperty","SymbolToStringTag"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, StringValue, SymbolValue, AbstractValue } from \"../../values/index.js\";\nimport { SymbolDescriptiveString } from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  const tsTemplateSrc = \"('' + A)\";\n\n  // ECMA262 19.4.3.2\n  obj.defineNativeMethod(\"toString\", 0, context => {\n    const target = context instanceof ObjectValue ? context.$SymbolData : context;\n    if (target instanceof AbstractValue && target.getType() === SymbolValue) {\n      return AbstractValue.createFromTemplate(realm, tsTemplateSrc, StringValue, [target]);\n    }\n    // 1. Let s be the this value.\n    let s = context.throwIfNotConcrete();\n\n    // 2. If Type(s) is Symbol, let sym be s.\n    let sym;\n    if (s instanceof SymbolValue) {\n      sym = s;\n    } else {\n      // 3. Else,\n      // a. If Type(s) is not Object, throw a TypeError exception.\n      if (!(s instanceof ObjectValue)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // b. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception.\n      if (!s.$SymbolData) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // c. Let sym be the value of s's [[SymbolData]] internal slot.\n      sym = s.$SymbolData;\n    }\n    sym.throwIfNotConcreteSymbol();\n    invariant(sym instanceof SymbolValue, \"expected symbol data internal slot to be a symbol value\");\n    // 4. Return SymbolDescriptiveString(sym).\n    return new StringValue(realm, SymbolDescriptiveString(realm, sym));\n  });\n\n  // ECMA262 19.4.3.3\n  obj.defineNativeMethod(\"valueOf\", 0, context => {\n    // 1. Let s be the this value.\n    let s = context.throwIfNotConcrete();\n\n    // 2. If Type(s) is Symbol, return s.\n    if (s instanceof SymbolValue) return s;\n\n    // 3. If Type(s) is not Object, throw a TypeError exception.\n    if (!(s instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception.\n    if (!s.$SymbolData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 5. Return the value of s's [[SymbolData]] internal slot.\n    return s.$SymbolData;\n  });\n\n  // ECMA262 19.4.3.4\n  obj.defineNativeMethod(\n    realm.intrinsics.SymbolToPrimitive,\n    1,\n    (context, [hint]) => {\n      // 1. Let s be the this value.\n      let s = context.throwIfNotConcrete();\n\n      // 2. If Type(s) is Symbol, return s.\n      if (s instanceof SymbolValue) return s;\n\n      // 3. If Type(s) is not Object, throw a TypeError exception.\n      if (!(s instanceof ObjectValue)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 4. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception.\n      if (!s.$SymbolData) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 5. Return s.[[SymbolData]].\n      return s.$SymbolData;\n    },\n    { writable: false }\n  );\n\n  // ECMA262 19.4.3.5\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Symbol\"), { writable: false });\n}\n"],"file":"SymbolPrototype.js"}