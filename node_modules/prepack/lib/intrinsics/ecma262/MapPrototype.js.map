{"version":3,"sources":["../../../src/intrinsics/ecma262/MapPrototype.js"],"names":["realm","obj","defineNativeMethod","context","M","throwIfNotConcrete","ObjectValue","createErrorThrowCompletion","intrinsics","TypeError","$MapData","recordModifiedProperty","$MapData_binding","entries","undefined","p","$Key","$Value","key","true","false","callbackfn","thisArg","T","e","value","NumberValue","Object","is","zero","push","$DefineOwnProperty","PropertyDescriptor","configurable","get","NativeFunctionValue","count","entriesPropertyDescriptor","$GetOwnProperty","Properties","ThrowIfMightHaveBeenDeleted","SymbolIterator","defineNativeProperty","SymbolToStringTag","StringValue","writable"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NumberValue, StringValue, NativeFunctionValue, ObjectValue } from \"../../values/index.js\";\nimport { Call, CreateMapIterator, IsCallable, SameValueZeroPartial } from \"../../methods/index.js\";\nimport { Properties } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\nimport { PropertyDescriptor } from \"../../descriptors.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 23.1.3.1\n  obj.defineNativeMethod(\"clear\", 0, context => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    realm.recordModifiedProperty((M: any).$MapData_binding);\n    let entries = M.$MapData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. Set p.[[Key]] to empty.\n      p.$Key = undefined;\n\n      // b. Set p.[[Value]] to empty.\n      p.$Value = undefined;\n    }\n\n    // 6. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.1.3.3\n  obj.defineNativeMethod(\"delete\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    realm.recordModifiedProperty((M: any).$MapData_binding);\n    let entries = M.$MapData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, then\n      if (p.$Key !== undefined && SameValueZeroPartial(realm, p.$Key, key)) {\n        // i. Set p.[[Key]] to empty.\n        p.$Key = undefined;\n\n        // ii. Set p.[[Value]] to empty.\n        p.$Value = undefined;\n\n        // iii. Return true.\n        return realm.intrinsics.true;\n      }\n    }\n\n    // 6. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.1.3.4\n  obj.defineNativeMethod(\"entries\", 0, context => {\n    // 1. Let M be the this value.\n    let M = context;\n\n    // 2. Return ? CreateMapIterator(M, \"key+value\").\n    return CreateMapIterator(realm, M, \"key+value\");\n  });\n\n  // ECMA262 23.1.3.5\n  obj.defineNativeMethod(\"forEach\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 6. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    let entries = M.$MapData;\n    invariant(entries);\n\n    // 7. Repeat for each Record {[[Key]], [[Value]]} e that is an element of entries, in original key insertion order\n    for (let e of entries) {\n      // a. If e.[[Key]] is not empty, then\n      if (e.$Key !== undefined) {\n        // i. Perform ? Call(callbackfn, T, « e.[[Value]], e.[[Key]], M »).\n        invariant(e.$Value !== undefined);\n        Call(realm, callbackfn, T, [e.$Value, e.$Key, M]);\n      }\n    }\n\n    // 8. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.1.3.6\n  obj.defineNativeMethod(\"get\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    let entries = M.$MapData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, return p.[[Value]].\n      if (p.$Key !== undefined && SameValueZeroPartial(realm, p.$Key, key)) {\n        invariant(p.$Value !== undefined);\n        return p.$Value;\n      }\n    }\n\n    // 6. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.1.3.7\n  obj.defineNativeMethod(\"has\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    let entries = M.$MapData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, return true.\n      if (p.$Key !== undefined && SameValueZeroPartial(realm, p.$Key, key)) {\n        return realm.intrinsics.true;\n      }\n    }\n\n    // 6. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.1.3.8\n  obj.defineNativeMethod(\"keys\", 0, context => {\n    // 1. Let M be the this value.\n    let M = context;\n\n    // 2. Return ? CreateMapIterator(M, \"key\").\n    return CreateMapIterator(realm, M, \"key\");\n  });\n\n  // ECMA262 23.1.3.9\n  obj.defineNativeMethod(\"set\", 2, (context, [key, value]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    realm.recordModifiedProperty((M: any).$MapData_binding);\n    let entries = M.$MapData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, then\n      if (p.$Key !== undefined && SameValueZeroPartial(realm, p.$Key, key)) {\n        // i. Set p.[[Value]] to value.\n        p.$Value = value;\n\n        // ii. Return M.\n        return M;\n      }\n    }\n\n    // 6. If key is -0, let key be +0.\n    key = key.throwIfNotConcrete();\n    if (key instanceof NumberValue && Object.is(key.value, -0)) key = realm.intrinsics.zero;\n\n    // 7. Let p be the Record {[[Key]]: key, [[Value]]: value}.\n    let p = { $Key: key, $Value: value };\n\n    // 8. Append p as the last element of entries.\n    entries.push(p);\n\n    // 9. Return M.\n    return M;\n  });\n\n  // ECMA262 23.1.3.10\n  obj.$DefineOwnProperty(\n    \"size\",\n    new PropertyDescriptor({\n      configurable: true,\n      get: new NativeFunctionValue(realm, undefined, \"get size\", 0, context => {\n        // 1. Let M be the this value.\n        let M = context.throwIfNotConcrete();\n\n        // 2. If Type(M) is not Object, throw a TypeError exception.\n        if (!(M instanceof ObjectValue)) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n        }\n\n        // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n        if (!M.$MapData) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n        }\n\n        // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n        let entries = M.$MapData;\n        invariant(entries !== undefined);\n\n        // 5. Let count be 0.\n        let count = 0;\n\n        // 6. For each Record {[[Key]], [[Value]]} p that is an element of entries\n        for (let p of entries) {\n          // a. If p.[[Key]] is not empty, set count to count+1.\n          if (p.$Key !== undefined) count++;\n        }\n\n        // 7. Return count.\n        return new NumberValue(realm, count);\n      }),\n    })\n  );\n\n  // ECMA262 23.1.3.11\n  obj.defineNativeMethod(\"values\", 0, context => {\n    // 1. Let M be the this value.\n    let M = context;\n\n    // 2. Return ? CreateMapIterator(M, \"value\").\n    return CreateMapIterator(realm, M, \"value\");\n  });\n\n  // ECMA262 23.1.3.12\n  let entriesPropertyDescriptor = obj.$GetOwnProperty(\"entries\");\n  invariant(entriesPropertyDescriptor instanceof PropertyDescriptor);\n  Properties.ThrowIfMightHaveBeenDeleted(entriesPropertyDescriptor);\n  obj.$DefineOwnProperty(realm.intrinsics.SymbolIterator, entriesPropertyDescriptor);\n\n  // ECMA262 23.1.3.13\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Map\"), { writable: false });\n}\n"],"file":"MapPrototype.js"}