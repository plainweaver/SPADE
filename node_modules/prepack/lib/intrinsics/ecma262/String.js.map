{"version":3,"sources":["../../../src/intrinsics/ecma262/String.js"],"names":["realm","func","NativeFunctionValue","context","value","argCount","NewTarget","s","intrinsics","emptyString","SymbolValue","StringValue","To","ToStringValue","throwIfNotConcreteString","Create","StringCreate","defineNativeMethod","codeUnits","length","elements","nextIndex","next","nextCU","ToUint16","push","String","fromCharCode","apply","isCompatibleWith","MOBILE_JSC_VERSION","codePoints","nextCP","ToNumber","ToInteger","createErrorThrowCompletion","RangeError","fromCodePoint","join","template","_substitutions","substitutions","numberOfSubstitutions","cooked","ToObject","raw","literalSegments","ToLength","stringElements","nextKey","ToString","NumberValue","nextSeg","ToStringPartial","nextSub"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, NumberValue, StringValue, SymbolValue, Value } from \"../../values/index.js\";\nimport { Get, GetPrototypeFromConstructor, SymbolDescriptiveString } from \"../../methods/index.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 21.1.1\n  let func = new NativeFunctionValue(realm, \"String\", \"String\", 1, (context, [value], argCount, NewTarget) => {\n    let s: ?Value;\n\n    // 1. If no arguments were passed to this function invocation, let s be \"\".\n    if (argCount === 0) {\n      s = realm.intrinsics.emptyString;\n    } else {\n      // 2. Else,\n      // a. If NewTarget is undefined and Type(value) is Symbol, return SymbolDescriptiveString(value).\n      if (!NewTarget && value instanceof SymbolValue) {\n        return new StringValue(realm, SymbolDescriptiveString(realm, value));\n      }\n\n      // b. Let s be ? ToString(value).\n      s = To.ToStringValue(realm, value);\n    }\n\n    // 3. If NewTarget is undefined, return s.\n    if (!NewTarget) return s;\n\n    // 4. Return ? StringCreate(s, ? GetPrototypeFromConstructor(NewTarget, \"%StringPrototype%\")).\n    s = s.throwIfNotConcreteString();\n    return Create.StringCreate(realm, s, GetPrototypeFromConstructor(realm, NewTarget, \"StringPrototype\"));\n  });\n\n  // ECMA262 21.1.2.1 ( ..._codeUnits_ )\n  func.defineNativeMethod(\"fromCharCode\", 1, (context, codeUnits, argCount) => {\n    // 1. Let codeUnits be a List containing the arguments passed to this function.\n    codeUnits;\n\n    // 2. Let length be the number of elements in codeUnits.\n    let length = argCount;\n\n    // 3. Let elements be a new empty List.\n    let elements = [];\n\n    // 4. Let nextIndex be 0.\n    let nextIndex = 0;\n\n    // 5. Repeat while nextIndex < length\n    while (nextIndex < length) {\n      // a. Let next be codeUnits[nextIndex].\n      let next = codeUnits[nextIndex];\n\n      // b. Let nextCU be ? ToUint16(next).\n      let nextCU = To.ToUint16(realm, next);\n\n      // c. Append nextCU to the end of elements.\n      elements.push(nextCU);\n\n      // d. Let nextIndex be nextIndex + 1.\n      nextIndex++;\n    }\n    // 6. Return the String value whose elements are, in order, the elements in the List elements. If length\n    //    is 0, the empty string is returned.\n    return new StringValue(realm, String.fromCharCode.apply(null, elements));\n  });\n\n  // ECMA262 21.1.2.2 ( ..._codePoints_ )\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"fromCodePoint\", 1, (context, codePoints, argCount) => {\n      // 1. Let codePoints be a List containing the arguments passed to this function.\n      codePoints;\n\n      // 2. Let length be the number of elements in codePoints.\n      let length = argCount;\n\n      // 3. Let elements be a new empty List.\n      let elements = [];\n\n      // 4. Let nextIndex be 0.\n      let nextIndex = 0;\n\n      // 5. Repeat while nextIndex < length\n      while (nextIndex < length) {\n        // a. Let next be codePoints[nextIndex].\n        let next = codePoints[nextIndex];\n\n        // b. Let nextCP be ? ToNumber(next).\n        let nextCP = To.ToNumber(realm, next);\n\n        // c. If SameValue(nextCP, ToInteger(nextCP)) is false, throw a RangeError exception.\n        if (nextCP !== To.ToInteger(realm, nextCP)) {\n          throw realm.createErrorThrowCompletion(\n            realm.intrinsics.RangeError,\n            \"SameValue(nextCP, To.ToInteger(nextCP)) is false\"\n          );\n        }\n\n        // d. If nextCP < 0 or nextCP > 0x10FFFF, throw a RangeError exception.\n        if (nextCP < 0 || nextCP > 0x10ffff) {\n          throw realm.createErrorThrowCompletion(\n            realm.intrinsics.RangeError,\n            \"SameValue(nextCP, To.ToInteger(nextCP)) is false\"\n          );\n        }\n\n        // e. Append the elements of the UTF16Encoding of nextCP to the end of elements.\n        elements.push(String.fromCodePoint(nextCP));\n\n        // f. Let nextIndex be nextIndex + 1.\n        nextIndex++;\n      }\n\n      // 6. Return the String value whose elements are, in order, the elements in the List elements. If length\n      //    is 0, the empty string is returned.\n      return new StringValue(realm, elements.join(\"\"));\n    });\n\n  // ECMA262 21.1.2.4\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"raw\", 1, (context, [template, ..._substitutions], argCount) => {\n      let substitutions = _substitutions;\n      // 1. Let substitutions be a List consisting of all of the arguments passed to this function, starting with the second argument. If fewer than two arguments were passed, the List is empty.\n      substitutions = argCount < 2 ? [] : substitutions;\n\n      // 2. Let numberOfSubstitutions be the number of elements in substitutions.\n      let numberOfSubstitutions = substitutions.length;\n\n      // 3. Let cooked be ? ToObject(template).\n      let cooked = To.ToObject(realm, template);\n\n      // 4. Let raw be ? ToObject(? Get(cooked, \"raw\")).\n      let raw = To.ToObject(realm, Get(realm, cooked, \"raw\"));\n\n      // 5. Let literalSegments be ? ToLength(? Get(raw, \"length\")).\n      let literalSegments = To.ToLength(realm, Get(realm, raw, \"length\"));\n\n      // 6. If literalSegments ≤ 0, return the empty string.\n      if (literalSegments <= 0) return realm.intrinsics.emptyString;\n\n      // 7. Let stringElements be a new empty List.\n      let stringElements = \"\";\n\n      // 8. Let nextIndex be 0.\n      let nextIndex = 0;\n\n      // 9. Repeat\n      while (true) {\n        // a. Let nextKey be ! ToString(nextIndex).\n        let nextKey = To.ToString(realm, new NumberValue(realm, nextIndex));\n\n        // b. Let nextSeg be ? ToString(? Get(raw, nextKey)).\n        let nextSeg = To.ToStringPartial(realm, Get(realm, raw, nextKey));\n\n        // c. Append in order the code unit elements of nextSeg to the end of stringElements.\n        stringElements = stringElements + nextSeg;\n\n        // d. If nextIndex + 1 = literalSegments, then\n        if (nextIndex + 1 === literalSegments) {\n          // i. Return the String value whose code units are, in order, the elements in the List stringElements. If stringElements has no elements, the empty string is returned.\n          return new StringValue(realm, stringElements);\n        }\n\n        let next;\n        // e. If nextIndex < numberOfSubstitutions, let next be substitutions[nextIndex].\n        if (nextIndex < numberOfSubstitutions) next = substitutions[nextIndex];\n        else {\n          // f. Else, let next be the empty String.\n          next = realm.intrinsics.emptyString;\n        }\n        // g. Let nextSub be ? ToString(next).\n        let nextSub = To.ToStringPartial(realm, next);\n\n        // h. Append in order the code unit elements of nextSub to the end of stringElements.\n        stringElements = stringElements + nextSub;\n\n        // i. Let nextIndex be nextIndex + 1.\n        nextIndex = nextIndex + 1;\n      }\n      invariant(false);\n    });\n\n  return func;\n}\n"],"file":"String.js"}