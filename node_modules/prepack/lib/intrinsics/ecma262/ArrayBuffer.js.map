{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayBuffer.js"],"names":["realm","func","NativeFunctionValue","context","length","argCount","NewTarget","createErrorThrowCompletion","intrinsics","TypeError","byteLength","To","ToIndexPartial","defineNativeMethod","_arg","arg","mightBeObject","false","throwIfNotConcreteObject","true","defineNativeGetter","SymbolSpecies"],"mappings":";;;;;;;AAYA;;AACA;;AACA;;AAdA;;;;;;;;;AASA;AAOe,kBAASA,KAAT,EAA4C;AACzD;AACA,MAAIC,IAAI,GAAG,IAAIC,0BAAJ,CACTF,KADS,EAET,aAFS,EAGT,aAHS,EAIT,CAJS,EAKT,CAACG,OAAD,EAAU,CAACC,MAAD,CAAV,EAAoBC,QAApB,EAA8BC,SAA9B,KAA4C;AAC1C;AACA,QAAI,CAACA,SAAL,EAAgB;AACd,YAAMN,KAAK,CAACO,0BAAN,CAAiCP,KAAK,CAACQ,UAAN,CAAiBC,SAAlD,CAAN;AACD,KAJyC,CAM1C;;;AACA,QAAIC,UAAU,GAAGC,eAAGC,cAAH,CAAkBZ,KAAlB,EAAyBI,MAAzB,CAAjB,CAP0C,CAS1C;;;AACA,WAAO,sCAAoBJ,KAApB,EAA2BM,SAA3B,EAAsCI,UAAtC,CAAP;AACD,GAhBQ,CAAX,CAFyD,CAqBzD;;AACAT,EAAAA,IAAI,CAACY,kBAAL,CAAwB,QAAxB,EAAkC,CAAlC,EAAqC,CAACV,OAAD,EAAU,CAACW,IAAD,CAAV,KAAqB;AACxD,QAAIC,GAAG,GAAGD,IAAV,CADwD,CAExD;;AACA,QAAI,CAACC,GAAG,CAACC,aAAJ,EAAL,EAA0B,OAAOhB,KAAK,CAACQ,UAAN,CAAiBS,KAAxB,CAH8B,CAKxD;;AACAF,IAAAA,GAAG,GAAGA,GAAG,CAACG,wBAAJ,EAAN;AACA,QAAI,wBAAwBH,GAA5B,EAAiC,OAAOf,KAAK,CAACQ,UAAN,CAAiBW,IAAxB,CAPuB,CASxD;;AACA,WAAOnB,KAAK,CAACQ,UAAN,CAAiBS,KAAxB;AACD,GAXD,EAtByD,CAmCzD;;AACAhB,EAAAA,IAAI,CAACmB,kBAAL,CAAwBpB,KAAK,CAACQ,UAAN,CAAiBa,aAAzC,EAAwDlB,OAAO,IAAI;AACjE;AACA,WAAOA,OAAP;AACD,GAHD;AAKA,SAAOF,IAAP;AACD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\nimport { AllocateArrayBuffer } from \"../../methods/arraybuffer.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 24.1.2.1\n  let func = new NativeFunctionValue(\n    realm,\n    \"ArrayBuffer\",\n    \"ArrayBuffer\",\n    1,\n    (context, [length], argCount, NewTarget) => {\n      // 1. If NewTarget is undefined, throw a TypeError exception.\n      if (!NewTarget) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 2. Let byteLength be ToIndex(numberLength).\n      let byteLength = To.ToIndexPartial(realm, length);\n\n      // 3. Return ? AllocateArrayBuffer(NewTarget, byteLength).\n      return AllocateArrayBuffer(realm, NewTarget, byteLength);\n    }\n  );\n\n  // ECMA262 24.1.3.1\n  func.defineNativeMethod(\"isView\", 1, (context, [_arg]) => {\n    let arg = _arg;\n    // 1. If Type(arg) is not Object, return false.\n    if (!arg.mightBeObject()) return realm.intrinsics.false;\n\n    // 2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.\n    arg = arg.throwIfNotConcreteObject();\n    if (\"$ViewedArrayBuffer\" in arg) return realm.intrinsics.true;\n\n    // 3. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 24.1.3.3\n  func.defineNativeGetter(realm.intrinsics.SymbolSpecies, context => {\n    // 1. Return the this value\n    return context;\n  });\n\n  return func;\n}\n"],"file":"ArrayBuffer.js"}