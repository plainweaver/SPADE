{"version":3,"sources":["../../../src/intrinsics/ecma262/ErrorPrototype.js"],"names":["realm","obj","build","name","defineNativeProperty","intrinsics","emptyString","StringValue","defineNativeMethod","context","O","throwIfNotConcrete","ObjectValue","createErrorThrowCompletion","TypeError","nameValue","nameString","UndefinedValue","To","ToStringPartial","msg"],"mappings":";;;;;;;;AAYA;;AACA;;AACA;;AAdA;;;;;;;;;AASA;AAOe,kBAASA,KAAT,EAAuBC,GAAvB,EAA+C;AAC5D,SAAOC,KAAK,CAAC,OAAD,EAAUF,KAAV,EAAiBC,GAAjB,CAAZ;AACD;;AAEM,SAASC,KAAT,CAAeC,IAAf,EAA6BH,KAA7B,EAA2CC,GAA3C,EAAmE;AACxE;AACAA,EAAAA,GAAG,CAACG,oBAAJ,CAAyB,SAAzB,EAAoCJ,KAAK,CAACK,UAAN,CAAiBC,WAArD,EAFwE,CAIxE;;AACAL,EAAAA,GAAG,CAACG,oBAAJ,CAAyB,MAAzB,EAAiC,IAAIG,kBAAJ,CAAgBP,KAAhB,EAAuBG,IAAvB,CAAjC,EALwE,CAOxE;;AACAF,EAAAA,GAAG,CAACO,kBAAJ,CAAuB,UAAvB,EAAmC,CAAnC,EAAsCC,OAAO,IAAI;AAC/C;AACA,QAAIC,CAAC,GAAGD,OAAO,CAACE,kBAAR,EAAR,CAF+C,CAI/C;;AACA,QAAI,EAAED,CAAC,YAAYE,kBAAf,CAAJ,EAAiC;AAC/B,YAAMZ,KAAK,CAACa,0BAAN,CAAiCb,KAAK,CAACK,UAAN,CAAiBS,SAAlD,CAAN;AACD,KAP8C,CAS/C;;;AACA,QAAIC,SAAS,GAAG,iBAAIf,KAAJ,EAAWU,CAAX,EAAc,MAAd,CAAhB,CAV+C,CAY/C;;AACA,QAAIM,UAAU,GAAGD,SAAS,YAAYE,qBAArB,GAAsC,OAAtC,GAAgDC,eAAGC,eAAH,CAAmBnB,KAAnB,EAA0Be,SAA1B,CAAjE,CAb+C,CAe/C;;AACA,QAAIK,GAAG,GAAG,iBAAIpB,KAAJ,EAAWU,CAAX,EAAc,SAAd,CAAV,CAhB+C,CAkB/C;;AACAU,IAAAA,GAAG,GAAGA,GAAG,YAAYH,qBAAf,GAAgC,EAAhC,GAAqCC,eAAGC,eAAH,CAAmBnB,KAAnB,EAA0BoB,GAA1B,CAA3C,CAnB+C,CAqB/C;AACA;AACA;;AACA,QAAIJ,UAAU,KAAK,EAAnB,EAAuB,OAAO,IAAIT,kBAAJ,CAAgBP,KAAhB,EAAuBoB,GAAvB,CAAP,CAxBwB,CA0B/C;;AACA,QAAIA,GAAG,KAAK,EAAZ,EAAgB,OAAO,IAAIb,kBAAJ,CAAgBP,KAAhB,EAAuBgB,UAAvB,CAAP,CA3B+B,CA6B/C;;AACA,WAAO,IAAIT,kBAAJ,CAAgBP,KAAhB,EAAwB,GAAEgB,UAAW,KAAII,GAAI,EAA7C,CAAP;AACD,GA/BD;AAgCD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, StringValue, UndefinedValue } from \"../../values/index.js\";\nimport { Get } from \"../../methods/index.js\";\nimport { To } from \"../../singletons.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  return build(\"Error\", realm, obj);\n}\n\nexport function build(name: string, realm: Realm, obj: ObjectValue): void {\n  // ECMA262 19.5.3.2\n  obj.defineNativeProperty(\"message\", realm.intrinsics.emptyString);\n\n  // ECMA262 19.5.3.3\n  obj.defineNativeProperty(\"name\", new StringValue(realm, name));\n\n  // ECMA262 19.5.3.4\n  obj.defineNativeMethod(\"toString\", 0, context => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Let name be ? Get(O, \"name\").\n    let nameValue = Get(realm, O, \"name\");\n\n    // 4. If name is undefined, let name be \"Error\"; otherwise let name be ? ToString(name).\n    let nameString = nameValue instanceof UndefinedValue ? \"Error\" : To.ToStringPartial(realm, nameValue);\n\n    // 5. Let msg be ? Get(O, \"message\").\n    let msg = Get(realm, O, \"message\");\n\n    // 6. If msg is undefined, let msg be the empty String; otherwise let msg be ? ToString(msg).\n    msg = msg instanceof UndefinedValue ? \"\" : To.ToStringPartial(realm, msg);\n\n    // Note that in ES5, both name and msg are checked for emptiness in step 7,\n    // which however is later dropped in ES6.\n    // 7. If name is the empty String, return msg.\n    if (nameString === \"\") return new StringValue(realm, msg);\n\n    // 8. If msg is the empty String, return name.\n    if (msg === \"\") return new StringValue(realm, nameString);\n\n    // 9. Return the result of concatenating name, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and msg.\n    return new StringValue(realm, `${nameString}: ${msg}`);\n  });\n}\n"],"file":"ErrorPrototype.js"}