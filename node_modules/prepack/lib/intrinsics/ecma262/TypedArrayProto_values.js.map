{"version":3,"sources":["../../../src/intrinsics/ecma262/TypedArrayProto_values.js"],"names":["realm","NativeFunctionValue","context","O","To","ToObject","Create","CreateArrayIterator","throwIfNotConcreteObject"],"mappings":";;;;;;;AAYA;;AACA;;AACA;;AAdA;;;;;;;;;AASA;AAOe,kBAASA,KAAT,EAA4C;AACzD;AACA,SAAO,IAAIC,0BAAJ,CAAwBD,KAAxB,EAA+B,wBAA/B,EAAyD,QAAzD,EAAmE,CAAnE,EAAsEE,OAAO,IAAI;AACtF;AACA,QAAIC,CAAC,GAAGC,eAAGC,QAAH,CAAYL,KAAZ,EAAmBE,OAAnB,CAAR,CAFsF,CAItF;;;AACA,wCAAmBF,KAAnB,EAA0BG,CAA1B,EALsF,CAOtF;;AACA,WAAOG,mBAAOC,mBAAP,CAA2BP,KAA3B,EAAkCG,CAAC,CAACK,wBAAF,EAAlC,EAAgE,OAAhE,CAAP;AACD,GATM,CAAP;AAUD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport { ValidateTypedArray } from \"../../methods/typedarray.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 22.1.3.30\n  return new NativeFunctionValue(realm, \"Array.prototype.values\", \"values\", 0, context => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // 2. Perform ? ValidateTypedArray(O).\n    ValidateTypedArray(realm, O);\n\n    // 3. Return CreateArrayIterator(O, \"value\").\n    return Create.CreateArrayIterator(realm, O.throwIfNotConcreteObject(), \"value\");\n  });\n}\n"],"file":"TypedArrayProto_values.js"}