{"version":3,"sources":["../../../src/intrinsics/ecma262/Array.js"],"names":["realm","func","NativeFunctionValue","context","items","argCount","NewTarget","numberOfArgs","newTarget","undefined","proto","Create","ArrayCreate","array","len","intLen","mightBeNumber","defineStatus","CreateDataProperty","To","ToUint32","throwIfNotConcreteNumber","NumberValue","value","createErrorThrowCompletion","intrinsics","RangeError","Properties","Set","k","Pk","ToString","itemK","length","throwIfNotConcrete","defineNativeMethod","arg","BooleanValue","isCompatibleWith","MOBILE_JSC_VERSION","C","A","ObjectValue","kValue","CreateDataPropertyOrThrow","arrayFrom","mapfn","thisArg","mapping","T","UndefinedValue","mightBeUndefined","AbstractValue","TypeError","isInPureScope","values","isTop","args","possibleNestedOptimizedFunctions","push","thisValue","kind","Leak","ArrayValue","createTemporalWithWidenedNumericProperty","usingIterator","SymbolIterator","iterator","Math","pow","error","next","nextValue","mappedValue","mappedValueCompletion","AbruptCompletion","completion","arrayLike","ToObject","ToLength","StringValue","defineNativeGetter","SymbolSpecies"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbruptCompletion } from \"../../completions.js\";\nimport {\n  AbstractValue,\n  ArrayValue,\n  BooleanValue,\n  NativeFunctionValue,\n  NumberValue,\n  ObjectValue,\n  StringValue,\n  UndefinedValue,\n} from \"../../values/index.js\";\nimport {\n  Construct,\n  Call,\n  Get,\n  GetPrototypeFromConstructor,\n  GetMethod,\n  IsArray,\n  IsConstructor,\n  IsCallable,\n} from \"../../methods/index.js\";\nimport { GetIterator, IteratorClose, IteratorStep, IteratorValue } from \"../../methods/iterator.js\";\nimport { Create, Leak, Properties, To } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\nimport { createOperationDescriptor } from \"../../utils/generator.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, \"Array\", \"Array\", 1, (context, [...items], argCount, NewTarget) => {\n    if (argCount === 0) {\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 0.\n      invariant(numberOfArgs === 0, \"numberOfArgs = 0\");\n\n      // 3. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n      let newTarget = NewTarget === undefined ? func : NewTarget;\n\n      // 4. Let proto be ? GetPrototypeFromConstructor(newTarget, \"%ArrayPrototype%\").\n      let proto = GetPrototypeFromConstructor(realm, newTarget, \"ArrayPrototype\");\n\n      // 5. Return ArrayCreate(0, proto).\n      return Create.ArrayCreate(realm, 0, proto);\n    } else if (argCount === 1) {\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 1.\n      invariant(numberOfArgs === 1, \"numberOfArgs = 1\");\n\n      // 3. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n      let newTarget = NewTarget === undefined ? func : NewTarget;\n\n      // 4. Let proto be ? GetPrototypeFromConstructor(newTarget, \"%ArrayPrototype%\").\n      let proto = GetPrototypeFromConstructor(realm, newTarget, \"ArrayPrototype\");\n\n      // 5. Let array be ArrayCreate(0, proto).\n      let array = Create.ArrayCreate(realm, 0, proto);\n\n      // 6. If Type(len) is not Number, then\n      let len = items[0];\n      invariant(len !== undefined);\n      let intLen;\n      if (!len.mightBeNumber()) {\n        // a. Let defineStatus be CreateDataProperty(array, \"0\", len).\n        let defineStatus = Create.CreateDataProperty(realm, array, \"0\", len);\n\n        // b. Assert: defineStatus is true.\n        invariant(defineStatus, \"defineStatus is true\");\n\n        // c. Let intLen be 1.\n        intLen = 1;\n      } else {\n        // 7. Else,\n\n        // a. Let intLen be ToUint32(len).\n        intLen = To.ToUint32(realm, len.throwIfNotConcreteNumber());\n        invariant(len instanceof NumberValue);\n\n        // b If intLen ≠ len, throw a RangeError exception.\n        if (intLen !== len.value) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"intLen ≠ len\");\n        }\n      }\n\n      // 8. Perform ! Set(array, \"length\", intLen, true).\n      Properties.Set(realm, array, \"length\", new NumberValue(realm, intLen), true);\n\n      // 9. Return array.\n      return array;\n    } else {\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs ≥ 2.\n      invariant(numberOfArgs >= 2, \"numberOfArgs >= 2\");\n\n      // 3. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n      let newTarget = NewTarget === undefined ? func : NewTarget;\n\n      // 4. Let proto be ? GetPrototypeFromConstructor(newTarget, \"%ArrayPrototype%\").\n      let proto = GetPrototypeFromConstructor(realm, newTarget, \"ArrayPrototype\");\n\n      // 5. Let array be ? ArrayCreate(numberOfArgs, proto).\n      let array = Create.ArrayCreate(realm, numberOfArgs, proto);\n\n      // 6. Let k be 0.\n      let k = 0;\n\n      // 7. Let items be a zero-origined List containing the argument items in order.\n      items;\n\n      // 8. Repeat, while k < numberOfArgs\n      while (k < numberOfArgs) {\n        // a. Let Pk be ! ToString(k).\n        let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n        // b. Let itemK be items[k].\n        let itemK = items[k];\n        invariant(itemK !== undefined);\n\n        // c. Let defineStatus be CreateDataProperty(array, Pk, itemK).\n        let defineStatus = Create.CreateDataProperty(realm, array, Pk, itemK);\n\n        // d. Assert: defineStatus is true.\n        invariant(defineStatus, \"defineStatus is true\");\n\n        // e. Increase k by 1.\n        k += 1;\n      }\n\n      // 9. Assert: the value of array's length property is numberOfArgs.\n      let length = Get(realm, array, \"length\").throwIfNotConcrete();\n      invariant(length instanceof NumberValue);\n      invariant(length.value === numberOfArgs, \"the value of array's length property is numberOfArgs\");\n\n      // 10. Return array.\n      return array;\n    }\n  });\n\n  // ECMA262 22.1.2.2\n  func.defineNativeMethod(\"isArray\", 1, (context, [arg]) => {\n    // 1. Return ? IsArray(arg).\n    return new BooleanValue(realm, IsArray(realm, arg));\n  });\n\n  // ECMA262 22.1.2.3\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"of\", 0, (context, [...items], argCount) => {\n      // 1. Let len be the actual number of arguments passed to this function.\n      let len = argCount;\n\n      // 2. Let items be the List of arguments passed to this function.\n      items;\n\n      // 3. Let C be the this value.\n      let C = context;\n\n      // 4. If IsConstructor(C) is true, then\n      let A;\n      if (IsConstructor(realm, C)) {\n        invariant(C instanceof ObjectValue);\n        // a. Let A be ? Construct(C, « len »).\n        A = Construct(realm, C, [new NumberValue(realm, len)]);\n      } else {\n        // 5. Else,\n        // a. Let A be ? ArrayCreate(len).\n        A = Create.ArrayCreate(realm, len);\n      }\n\n      // 6. Let k be 0.\n      let k = 0;\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        // a. Let kValue be items[k].\n        let kValue = items[k];\n\n        // b. Let Pk be ! To.ToString(k).\n        let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n        // c. Perform ? CreateDataPropertyOrThrow(A, Pk, kValue).\n        Create.CreateDataPropertyOrThrow(realm, A, Pk, kValue);\n\n        // d. Increase k by 1.\n        k += 1;\n      }\n\n      // 8. Perform ? Set(A, \"length\", len, true).\n      Properties.Set(realm, A, \"length\", new NumberValue(realm, len), true);\n\n      // 9. Return A.\n      return A;\n    });\n\n  // ECMA262 22.1.2.1\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\")) {\n    let arrayFrom = func.defineNativeMethod(\"from\", 1, (context, [items, mapfn, thisArg], argCount) => {\n      // 1. Let C be the this value.\n      let C = context;\n\n      let mapping, T;\n      // 2. If mapfn is undefined, let mapping be false.\n      if (!mapfn || mapfn instanceof UndefinedValue) {\n        mapping = false;\n      } else if (mapfn.mightBeUndefined()) {\n        invariant(mapfn instanceof AbstractValue);\n        mapfn.throwIfNotConcrete();\n      } else {\n        // 3. Else,\n        // a. If IsCallable(mapfn) is false, throw a TypeError exception.\n        if (IsCallable(realm, mapfn) === false) {\n          mapfn.throwIfNotConcrete();\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsCallable(mapfn) is false\");\n        }\n\n        // b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        T = thisArg !== undefined ? thisArg : realm.intrinsics.undefined;\n\n        // c. Let mapping be true.\n        mapping = true;\n      }\n      // If we're in pure scope and the items are completely abstract,\n      // then create an abstract temporal with an array kind\n      if (realm.isInPureScope() && items instanceof AbstractValue && items.values.isTop()) {\n        let args = [arrayFrom, items];\n        let possibleNestedOptimizedFunctions;\n        if (mapfn) {\n          args.push(mapfn);\n          if (thisArg) {\n            args.push(thisArg);\n          }\n          possibleNestedOptimizedFunctions = [\n            { func: mapfn, thisValue: thisArg || realm.intrinsics.undefined, kind: \"map\" },\n          ];\n        }\n        Leak.value(realm, items);\n        return ArrayValue.createTemporalWithWidenedNumericProperty(\n          realm,\n          args,\n          createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_CALL\"),\n          possibleNestedOptimizedFunctions\n        );\n      }\n\n      // 4. Let usingIterator be ? GetMethod(items, @@iterator).\n      let usingIterator = GetMethod(realm, items, realm.intrinsics.SymbolIterator);\n\n      // 5. If usingIterator is not undefined, then\n      if (!usingIterator.mightBeUndefined()) {\n        let A;\n        // a. If IsConstructor(C) is true, then\n        if (IsConstructor(realm, C)) {\n          invariant(C instanceof ObjectValue);\n          // i. Let A be ? Construct(C).\n          A = Construct(realm, C);\n        } else {\n          // b. Else,\n          // i. Let A be ArrayCreate(0).\n          A = Create.ArrayCreate(realm, 0);\n        }\n\n        // c. Let iterator be ? GetIterator(items, usingIterator).\n        let iterator = GetIterator(realm, items, usingIterator);\n\n        // d. Let k be 0.\n        let k = 0;\n\n        // e. Repeat\n        while (true) {\n          // i. If k ≥ 2^53-1, then\n          if (k >= Math.pow(2, 53) - 1) {\n            // 1. Let error be Completion{[[Type]]: throw, [[Value]]: a newly created TypeError object, [[Target]]: empty}.\n            let error = realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"k >= 2^53 - 1\");\n\n            // 2. Return ? IteratorClose(iterator, error).\n            throw IteratorClose(realm, iterator, error);\n          }\n\n          // ii. Let Pk be ! ToString(k).\n          let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n          // iii. Let next be ? IteratorStep(iterator).\n          let next = IteratorStep(realm, iterator);\n\n          // iv. If next is false, then\n          if (next === false) {\n            // 1. Perform ? Set(A, \"length\", k, true).\n            Properties.Set(realm, A, \"length\", new NumberValue(realm, k), true);\n\n            // 2. Return A.\n            return A;\n          }\n\n          // v. Let nextValue be ? IteratorValue(next).\n          let nextValue = IteratorValue(realm, next);\n\n          let mappedValue;\n          // vi. If mapping is true, then\n          if (mapping === true) {\n            // 1. Let mappedValue be Call(mapfn, T, « nextValue, k »).\n            try {\n              invariant(T !== undefined);\n              mappedValue = Call(realm, mapfn, T, [nextValue, new NumberValue(realm, k)]);\n            } catch (mappedValueCompletion) {\n              if (mappedValueCompletion instanceof AbruptCompletion) {\n                // 2. If mappedValue is an abrupt completion, return ? IteratorClose(iterator, mappedValue).\n                throw IteratorClose(realm, iterator, mappedValueCompletion);\n              } else {\n                throw mappedValueCompletion;\n              }\n            }\n            // 3. Let mappedValue be mappedValue.[[Value]].\n          } else {\n            // vii. Else, let mappedValue be nextValue.\n            mappedValue = nextValue;\n          }\n\n          // viii. Let defineStatus be CreateDataPropertyOrThrow(A, Pk, mappedValue).\n          try {\n            Create.CreateDataPropertyOrThrow(realm, A, Pk, mappedValue);\n          } catch (completion) {\n            if (completion instanceof AbruptCompletion) {\n              // ix. If defineStatus is an abrupt completion, return ? IteratorClose(iterator, defineStatus).\n              throw IteratorClose(realm, iterator, completion);\n            } else throw completion;\n          }\n\n          // x. Increase k by 1.\n          k = k + 1;\n        }\n      } else {\n        usingIterator.throwIfNotConcrete();\n      }\n\n      // 6. NOTE: items is not an Iterable so assume it is an array-like object.\n      items = items.throwIfNotConcrete();\n      invariant(items instanceof ObjectValue);\n\n      // 7. Let arrayLike be ! ToObject(items).\n      let arrayLike = To.ToObject(realm, items);\n\n      // 8. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n      let len = To.ToLength(realm, Get(realm, arrayLike, \"length\"));\n\n      let A;\n      // 9. If IsConstructor(C) is true, then\n      if (IsConstructor(realm, C)) {\n        invariant(C instanceof ObjectValue);\n        // a. Let A be ? Construct(C, « len »).\n        A = Construct(realm, C, [new NumberValue(realm, len)]);\n      } else {\n        // 10. Else,\n        // a. Let A be ? ArrayCreate(len).\n        A = Create.ArrayCreate(realm, len);\n      }\n\n      // 11. Let k be 0.\n      let k = 0;\n\n      // 12. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n        // b. Let kValue be ? Get(arrayLike, Pk).\n        let kValue = Get(realm, arrayLike, Pk);\n\n        let mappedValue;\n        // c. If mapping is true, then\n        if (mapping === true) {\n          // i. Let mappedValue be ? Call(mapfn, T, « kValue, k »).\n          invariant(T !== undefined);\n          mappedValue = Call(realm, mapfn, T, [kValue, new NumberValue(realm, k)]);\n        } else {\n          // d. Else, let mappedValue be kValue.\n          mappedValue = kValue;\n        }\n\n        // e. Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).\n        Create.CreateDataPropertyOrThrow(realm, A, new StringValue(realm, Pk), mappedValue);\n\n        // f. Increase k by 1.\n        k = k + 1;\n      }\n\n      // 13. Perform ? Set(A, \"length\", len, true).\n      Properties.Set(realm, A, \"length\", new NumberValue(realm, len), true);\n\n      // 14. Return A.\n      return A;\n    });\n  }\n\n  // ECMA262 22.1.2.5\n  func.defineNativeGetter(realm.intrinsics.SymbolSpecies, context => {\n    // 1. Return the this value\n    return context;\n  });\n\n  return func;\n}\n"],"file":"Array.js"}