{"version":3,"sources":["../../../src/intrinsics/ecma262/TypedArray.js"],"names":["realm","func","NativeFunctionValue","context","createErrorThrowCompletion","intrinsics","TypeError","defineNativeMethod","source","mapfn","thisArg","C","ObjectValue","mapping","undefined","mightBeUndefined","throwIfNotConcrete","T","usingIterator","SymbolIterator","UndefinedValue","values","len","length","targetObj","NumberValue","k","Pk","To","ToString","kValue","shift","mappedValue","Properties","Set","arrayLike","ToObject","ToLength","items","argCount","newObj","defineNativeGetter","SymbolSpecies","getConstructorName","type","build","args","NewTarget","constructorName","elementLength","ToIndexPartial","typedArray","$TypedArrayName","O","srcArray","srcData","$ViewedArrayBuffer","elementType","ArrayElementType","$ArrayLength","srcName","srcType","srcElementSize","ArrayElementSize","srcByteOffset","$ByteOffset","elementSize","byteLength","data","bufferConstructor","ArrayBuffer","srcByteIndex","targetByteIndex","count","value","$ByteLength","object","$ArrayBufferData","StringValue","buffer","byteOffset","offset","RangeError","bufferByteLength","$ArrayBufferByteLength","newByteLength","newLength","$Prototype","TypedArray","defineNativeConstant","ElementSize"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport type { ElementType, TypedArrayKind } from \"../../types.js\";\nimport { ElementSize } from \"../../types.js\";\nimport { NumberValue, NativeFunctionValue, ObjectValue, StringValue, UndefinedValue } from \"../../values/index.js\";\nimport {\n  ArrayElementSize,\n  ArrayElementType,\n  AllocateTypedArray,\n  AllocateTypedArrayBuffer,\n  TypedArrayCreate,\n} from \"../../methods/typedarray.js\";\nimport { SpeciesConstructor } from \"../../methods/construct.js\";\nimport { Get, GetMethod } from \"../../methods/get.js\";\nimport { Properties, To } from \"../../singletons.js\";\nimport { IterableToList } from \"../../methods/iterator.js\";\nimport { IsDetachedBuffer, IsConstructor, IsCallable } from \"../../methods/is.js\";\nimport { Call } from \"../../methods/call.js\";\nimport {\n  CloneArrayBuffer,\n  AllocateArrayBuffer,\n  GetValueFromBuffer,\n  SetValueInBuffer,\n} from \"../../methods/arraybuffer.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, \"TypedArray\", \"TypedArray\", 0, context => {\n    // 1. Throw a TypeError exception.\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"TypedArray\");\n  });\n\n  // ECMA262 22.2.2.1\n  func.defineNativeMethod(\"from\", 1, (context, [source, mapfn, thisArg]) => {\n    // 1. Let C be the this value.\n    let C = context;\n\n    // 2. If IsConstructor(C) is false, throw a TypeError exception.\n    if (IsConstructor(realm, C) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsConstructor(C) is false\");\n    }\n    invariant(C instanceof ObjectValue);\n\n    let mapping;\n    // 3. If mapfn was supplied and mapfn is not undefined, then\n    if (mapfn !== undefined && !mapfn.mightBeUndefined()) {\n      // a. If IsCallable(mapfn) is false, throw a TypeError exception.\n      if (IsCallable(realm, mapfn) === false) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsConstructor(C) is false\");\n      }\n\n      // b. Let mapping be true.\n      mapping = true;\n    } else {\n      // 4. Else, let mapping be false.\n      mapfn === undefined || mapfn.throwIfNotConcrete();\n      mapping = false;\n    }\n\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg !== undefined ? thisArg : realm.intrinsics.undefined;\n\n    // 6. Let usingIterator be ? GetMethod(source, @@iterator).\n    let usingIterator = GetMethod(realm, source, realm.intrinsics.SymbolIterator);\n\n    // 7. If usingIterator is not undefined, then\n    if (!(usingIterator instanceof UndefinedValue)) {\n      // a. Let values be ? IterableToList(source, usingIterator).\n      let values = IterableToList(realm, source, usingIterator);\n\n      // b. Let len be the number of elements in values.\n      let len = values.length;\n\n      // c. Let targetObj be ? TypedArrayCreate(C, «len»).\n      let targetObj = TypedArrayCreate(realm, C, [new NumberValue(realm, len)]);\n\n      // d. Let k be 0.\n      let k = 0;\n\n      // e. Repeat, while k < len\n      while (k < len) {\n        // i. Let Pk be ! ToString(k).\n        let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n        // ii. Let kValue be the first element of values and remove that element from values.\n        let kValue = values.shift();\n\n        let mappedValue;\n        // iii. If mapping is true, then\n        if (mapping === true) {\n          // 1. Let mappedValue be ? Call(mapfn, T, « kValue, k »).\n          mappedValue = Call(realm, mapfn, T, [kValue, new NumberValue(realm, k)]);\n        } else {\n          // iv. Else, let mappedValue be kValue.\n          mappedValue = kValue;\n        }\n\n        // v. Perform ? Set(targetObj, Pk, mappedValue, true).\n        Properties.Set(realm, targetObj, Pk, mappedValue, true);\n\n        // vi. Increase k by 1.\n        k = k + 1;\n      }\n\n      // f. Assert: values is now an empty List.\n      invariant(values.length === 0, \"values is not an empty List\");\n\n      // g. Return targetObj.\n      return targetObj;\n    }\n\n    // 8. NOTE: source is not an Iterable so assume it is already an array-like object.\n\n    // 9. Let arrayLike be ! ToObject(source).\n    let arrayLike = To.ToObject(realm, source);\n\n    // 10. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n    let len = To.ToLength(realm, Get(realm, arrayLike, \"length\"));\n\n    // 11. Let targetObj be ? TypedArrayCreate(C, « len »).\n    let targetObj = TypedArrayCreate(realm, C, [new NumberValue(realm, len)]);\n\n    // 12. Let k be 0.\n    let k = 0;\n\n    // 13. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n      // b. Let kValue be ? Get(arrayLike, Pk).\n      let kValue = Get(realm, arrayLike, Pk);\n\n      let mappedValue;\n      // c. If mapping is true, then\n      if (mapping === true) {\n        // i. Let mappedValue be ? Call(mapfn, T, « kValue, k »).\n        mappedValue = Call(realm, mapfn, T, [kValue, new NumberValue(realm, k)]);\n      } else {\n        // d. Else, let mappedValue be kValue.\n        mappedValue = kValue;\n      }\n\n      // e. Perform ? Set(targetObj, Pk, mappedValue, true).\n      Properties.Set(realm, targetObj, Pk, mappedValue, true);\n\n      // f. Increase k by 1.\n      k = k + 1;\n    }\n\n    // 14. Return targetObj.\n    return targetObj;\n  });\n\n  // ECMA262 22.2.2.2\n  func.defineNativeMethod(\"of\", 0, (context, items, argCount) => {\n    // 1. Let len be the actual number of arguments passed to this function.\n    let len = argCount;\n\n    // 2. Let items be the List of arguments passed to this function.\n    items;\n\n    // 3. Let C be the this value.\n    let C = context;\n\n    // 4. If IsConstructor(C) is false, throw a TypeError exception.\n    if (IsConstructor(realm, C) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsConstructor(C) is false\");\n    }\n    invariant(C instanceof ObjectValue);\n\n    // 5. Let newObj be ? TypedArrayCreate(C, « len »).\n    let newObj = TypedArrayCreate(realm, C, [new NumberValue(realm, len)]);\n\n    // 6. Let k be 0.\n    let k = 0;\n\n    // 7. Repeat, while k < len\n    while (k < len) {\n      // a. Let kValue be items[k].\n      let kValue = items[k];\n\n      // b. Let Pk be ! ToString(k).\n      let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n      // c. Perform ? Set(newObj, Pk, kValue, true).\n      Properties.Set(realm, newObj, Pk, kValue, true);\n\n      // d. Increase k by 1.\n      k = k + 1;\n    }\n\n    // 8. Return newObj.\n    return newObj;\n  });\n\n  // ECMA262 22.2.2.4\n  func.defineNativeGetter(realm.intrinsics.SymbolSpecies, context => {\n    // 1. Return the this value\n    return context;\n  });\n\n  return func;\n}\n\n// ECMA262 22.2 Table 50\nfunction getConstructorName(type: ElementType): TypedArrayKind {\n  switch (type) {\n    case \"Float32\":\n      return \"Float32Array\";\n    case \"Float64\":\n      return \"Float64Array\";\n    case \"Int8\":\n      return \"Int8Array\";\n    case \"Int16\":\n      return \"Int16Array\";\n    case \"Int32\":\n      return \"Int32Array\";\n    case \"Uint8\":\n      return \"Uint8Array\";\n    case \"Uint16\":\n      return \"Uint16Array\";\n    case \"Uint32\":\n      return \"Uint32Array\";\n    case \"Uint8Clamped\":\n      return \"Uint8ClampedArray\";\n    default:\n      invariant(false);\n  }\n}\n\nexport function build(realm: Realm, type: ElementType): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, `${type}Array`, `${type}Array`, 3, (context, args, argCount, NewTarget) => {\n    if (argCount === 0) {\n      // ECMA262 22.2.4.1\n\n      // 1. If NewTarget is undefined, throw a TypeError exception.\n      if (!NewTarget) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"NewTarget is undefined\");\n      }\n\n      // 2. Let constructorName be the String value of the Constructor Name value specified in Table 50 for this TypedArray constructor.\n      let constructorName = getConstructorName(type);\n\n      // 3. Return ? AllocateTypedArray(constructorName, NewTarget, \"%TypedArrayPrototype%\", 0).\n      return AllocateTypedArray(realm, constructorName, NewTarget, `${type}ArrayPrototype`, 0);\n    } else if (!(args[0] instanceof ObjectValue)) {\n      // ECMA262 22.2.4.2\n      let length = args[0].throwIfNotConcrete();\n\n      // 1. Assert: Type(length) is not Object.\n      invariant(!(length instanceof ObjectValue), \"Type(length) is not Object\");\n\n      // 2. If NewTarget is undefined, throw a TypeError exception.\n      if (!NewTarget) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"NewTarget is undefined\");\n      }\n\n      // 3. Let elementLength be ? ToIndex(length).\n      let elementLength = To.ToIndexPartial(realm, length);\n\n      // 4. Let constructorName be the String value of the Constructor Name value specified in Table 50 for this TypedArray constructor.\n      let constructorName = getConstructorName(type);\n\n      // 5. Return ? AllocateTypedArray(constructorName, NewTarget, \"%TypedArrayPrototype%\", elementLength).\n      return AllocateTypedArray(realm, constructorName, NewTarget, `${type}ArrayPrototype`, elementLength);\n    } else if (\"$TypedArrayName\" in args[0]) {\n      // ECMA262 22.2.4.3\n      let typedArray = args[0].throwIfNotConcrete();\n\n      // 1. Assert: Type(typedArray) is Object and typedArray has a [[TypedArrayName]] internal slot.\n      invariant(typedArray instanceof ObjectValue && typeof typedArray.$TypedArrayName === \"string\");\n\n      // 2. If NewTarget is undefined, throw a TypeError exception.\n      if (!NewTarget) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"NewTarget is undefined\");\n      }\n\n      // 3. Let constructorName be the String value of the Constructor Name value specified in Table 50 for this TypedArray constructor.\n      let constructorName = getConstructorName(type);\n\n      // 4. Let O be ? AllocateTypedArray(constructorName, NewTarget, \"%TypedArrayPrototype%\").\n      let O = AllocateTypedArray(realm, constructorName, NewTarget, `${type}ArrayPrototype`);\n\n      // 5. Let srcArray be typedArray.\n      let srcArray = typedArray;\n\n      // 6. Let srcData be srcArray.[[ViewedArrayBuffer]].\n      let srcData = srcArray.$ViewedArrayBuffer;\n      invariant(srcData);\n\n      // 7. If IsDetachedBuffer(srcData) is true, throw a TypeError exception.\n      if (IsDetachedBuffer(realm, srcData) === true) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(srcData) is true\");\n      }\n\n      // 8. Let constructorName be the String value of O.[[TypedArrayName]].\n      constructorName = O.$TypedArrayName;\n      invariant(typeof constructorName === \"string\");\n\n      // 9. Let elementType be the String value of the Element Type value in Table 50 for constructorName.\n      let elementType = ArrayElementType[constructorName];\n\n      // 10. Let elementLength be srcArray.[[ArrayLength]].\n      let elementLength = srcArray.$ArrayLength;\n      invariant(typeof elementLength === \"number\");\n\n      // 11. Let srcName be the String value of srcArray.[[TypedArrayName]].\n      let srcName = srcArray.$TypedArrayName;\n      invariant(typeof srcName === \"string\");\n\n      // 12. Let srcType be the String value of the Element Type value in Table 50 for srcName.\n      let srcType = ArrayElementType[srcName];\n\n      // 13. Let srcElementSize be the Element Size value in Table 50 for srcName.\n      let srcElementSize = ArrayElementSize[srcName];\n\n      // 14. Let srcByteOffset be srcArray.[[ByteOffset]].\n      let srcByteOffset = srcArray.$ByteOffset;\n      invariant(typeof srcByteOffset === \"number\");\n\n      // 15. Let elementSize be the Element Size value in Table 50 for constructorName.\n      let elementSize = ArrayElementSize[constructorName];\n\n      // 16. Let byteLength be elementSize × elementLength.\n      let byteLength = elementSize * elementLength;\n\n      let data;\n      // 17. If SameValue(elementType, srcType) is true, then\n      if (elementType === srcType) {\n        // a. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n        data = CloneArrayBuffer(realm, srcData, srcByteOffset);\n      } else {\n        // 18. Else,\n        // a. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n        let bufferConstructor = SpeciesConstructor(realm, srcData, realm.intrinsics.ArrayBuffer);\n\n        // b. Let data be ? AllocateArrayBuffer(bufferConstructor, byteLength).\n        data = AllocateArrayBuffer(realm, bufferConstructor, byteLength);\n\n        // c. If IsDetachedBuffer(srcData) is true, throw a TypeError exception.\n        if (IsDetachedBuffer(realm, srcData) === true) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(srcData) is true\");\n        }\n\n        // d. Let srcByteIndex be srcByteOffset.\n        let srcByteIndex = srcByteOffset;\n\n        // e. Let targetByteIndex be 0.\n        let targetByteIndex = 0;\n\n        // f. Let count be elementLength.\n        let count = elementLength;\n\n        // g. Repeat, while count > 0\n        while (count > 0) {\n          // i. Let value be GetValueFromBuffer(srcData, srcByteIndex, srcType).\n          let value = GetValueFromBuffer(realm, srcData, srcByteIndex, srcType);\n\n          // ii. Perform SetValueInBuffer(data, targetByteIndex, elementType, value).\n          SetValueInBuffer(realm, data, targetByteIndex, elementType, value.value);\n\n          // iii. Set srcByteIndex to srcByteIndex + srcElementSize.\n          srcByteIndex = srcByteIndex + srcElementSize;\n\n          // iv. Set targetByteIndex to targetByteIndex + elementSize.\n          targetByteIndex = targetByteIndex + elementSize;\n\n          // v. Decrement count by 1.\n          count -= 1;\n        }\n      }\n\n      // 19. Set O.[[ViewedArrayBuffer]] to data.\n      O.$ViewedArrayBuffer = data;\n\n      // 20. Set O.[[ByteLength]] to byteLength.\n      O.$ByteLength = byteLength;\n\n      // 21. Set O.[[ByteOffset]] to 0.\n      O.$ByteOffset = 0;\n\n      // 22. Set O.[[ArrayLength]] to elementLength.\n      O.$ArrayLength = elementLength;\n\n      // 23. Return O.\n      return O;\n    } else if (!(\"$ArrayBufferData\" in args[0]) && !(\"$TypedArrayName\" in args[0])) {\n      // ECMA262 22.2.4.4\n      let object = args[0].throwIfNotConcrete();\n\n      // 1. Assert: Type(object) is Object and object does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.\n      invariant(object instanceof ObjectValue && typeof object.$TypedArrayName && !object.$ArrayBufferData);\n\n      // 2. If NewTarget is undefined, throw a TypeError exception.\n      if (!NewTarget) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"NewTarget is undefined\");\n      }\n\n      // 3. Let constructorName be the String value of the Constructor Name value specified in Table 50 for this TypedArray constructor.\n      let constructorName = getConstructorName(type);\n\n      // 4. Let O be ? AllocateTypedArray(constructorName, NewTarget, \"%TypedArrayPrototype%\").\n      let O = AllocateTypedArray(realm, constructorName, NewTarget, `${type}ArrayPrototype`);\n\n      // 5. Let usingIterator be ? GetMethod(object, @@iterator).\n      let usingIterator = GetMethod(realm, object, realm.intrinsics.SymbolIterator);\n\n      // 6. If usingIterator is not undefined, then\n      if (!(usingIterator instanceof UndefinedValue)) {\n        // a. Let values be ? IterableToList(object, usingIterator).\n        let values = IterableToList(realm, object, usingIterator);\n\n        // b. Let len be the number of elements in values.\n        let len = values.length;\n\n        // c. Perform ? AllocateTypedArrayBuffer(O, len).\n        AllocateTypedArrayBuffer(realm, O, len);\n\n        // d. Let k be 0.\n        let k = 0;\n\n        // e. Repeat, while k < len\n        while (k < len) {\n          // i. Let Pk be ! ToString(k).\n          let Pk = new StringValue(realm, To.ToString(realm, new NumberValue(realm, k)));\n\n          // ii. Let kValue be the first element of values and remove that element from values.\n          let kValue = values.shift();\n\n          // iii. Perform ? Set(O, Pk, kValue, true).\n          Properties.Set(realm, O, Pk, kValue, true);\n\n          // iv. Increase k by 1.\n          k = k + 1;\n        }\n\n        // f. Assert: values is now an empty List.\n        invariant(values.length === 0);\n\n        // g. Return O.\n        return O;\n      }\n\n      // 7. NOTE: object is not an Iterable so assume it is already an array-like object.\n\n      // 8. Let arrayLike be object.\n      let arrayLike = object;\n\n      // 9. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n      let len = To.ToLength(realm, Get(realm, arrayLike, \"length\"));\n\n      // 10. Perform ? AllocateTypedArrayBuffer(O, len).\n      AllocateTypedArrayBuffer(realm, O, len);\n\n      // 11. Let k be 0.\n      let k = 0;\n\n      // 12. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        let Pk = new StringValue(realm, To.ToString(realm, new NumberValue(realm, k)));\n\n        // b. Let kValue be ? Get(arrayLike, Pk).\n        let kValue = Get(realm, arrayLike, Pk);\n\n        // c. Perform ? Set(O, Pk, kValue, true).\n        Properties.Set(realm, O, Pk, kValue, true);\n\n        // d. Increase k by 1.\n        k += 1;\n      }\n\n      // 13. Return O.\n      return O;\n    } else {\n      // ECMA262 22.2.4.5\n      let buffer = args[0].throwIfNotConcrete(),\n        byteOffset = args[1],\n        length = args[2];\n\n      // 1. Assert: Type(buffer) is Object and buffer has an [[ArrayBufferData]] internal slot.\n      invariant(buffer instanceof ObjectValue && \"$ArrayBufferData\" in buffer);\n\n      // 2. If NewTarget is undefined, throw a TypeError exception.\n      if (!NewTarget) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"NewTarget is undefined\");\n      }\n\n      // 3. Let constructorName be the String value of the Constructor Name value specified in Table 50 for this TypedArray constructor.\n      let constructorName = getConstructorName(type);\n\n      // 4. Let O be ? AllocateTypedArray(constructorName, NewTarget, \"%TypedArrayPrototype%\").\n      let O = AllocateTypedArray(realm, constructorName, NewTarget, `${type}ArrayPrototype`);\n\n      // 5. Let constructorName be the String value of O.[[TypedArrayName]].\n      constructorName = O.$TypedArrayName;\n      invariant(constructorName);\n\n      // 6. Let elementSize be the Number value of the Element Size value in Table 50 for constructorName.\n      let elementSize = ArrayElementSize[constructorName];\n\n      // 7. Let offset be ? ToIndex(byteOffset).\n      let offset = To.ToIndexPartial(realm, byteOffset);\n\n      // 8. If offset modulo elementSize ≠ 0, throw a RangeError exception.\n      if (offset % elementSize !== 0) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"offset modulo elementSize ≠ 0\");\n      }\n\n      // 9. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n      if (IsDetachedBuffer(realm, buffer) === true) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(buffer) is true\");\n      }\n\n      // 10. Let bufferByteLength be buffer.[[ArrayBufferByteLength]].\n      let bufferByteLength = buffer.$ArrayBufferByteLength;\n      invariant(typeof bufferByteLength === \"number\");\n\n      let newByteLength;\n      // 11. If length is either not present or undefined, then\n      if (!length || length instanceof UndefinedValue) {\n        // a. If bufferByteLength modulo elementSize ≠ 0, throw a RangeError exception.\n        if (bufferByteLength % elementSize !== 0) {\n          throw realm.createErrorThrowCompletion(\n            realm.intrinsics.RangeError,\n            \"bufferByteLength modulo elementSize ≠ 0\"\n          );\n        }\n        // b. Let newByteLength be bufferByteLength - offset.\n        newByteLength = bufferByteLength - offset;\n\n        // c. If newByteLength < 0, throw a RangeError exception.\n        if (newByteLength < 0) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"newByteLength < 0\");\n        }\n      } else {\n        // 12. Else,\n        // a. Let newLength be ? ToIndex(length).\n        let newLength = To.ToIndexPartial(realm, length);\n\n        // b. Let newByteLength be newLength × elementSize.\n        newByteLength = newLength * elementSize;\n\n        // c. If offset+newByteLength > bufferByteLength, throw a RangeError exception.\n        if (offset + newByteLength > bufferByteLength) {\n          throw realm.createErrorThrowCompletion(\n            realm.intrinsics.RangeError,\n            \"offset+newByteLength > bufferByteLength\"\n          );\n        }\n      }\n\n      // 13. Set O.[[ViewedArrayBuffer]] to buffer.\n      O.$ViewedArrayBuffer = buffer;\n\n      // 14. Set O.[[ByteLength]] to newByteLength.\n      O.$ByteLength = newByteLength;\n\n      // 15. Set O.[[ByteOffset]] to offset.\n      O.$ByteOffset = offset;\n\n      // 16. Set O.[[ArrayLength]] to newByteLength / elementSize.\n      O.$ArrayLength = newByteLength / elementSize;\n\n      // 17. Return O.\n      return O;\n    }\n  });\n\n  // ECMA262 22.2.5\n  func.$Prototype = realm.intrinsics.TypedArray;\n\n  // ECMA262 22.2.5.1\n  func.defineNativeConstant(\"BYTES_PER_ELEMENT\", new NumberValue(realm, ElementSize[type]));\n\n  return func;\n}\n"],"file":"TypedArray.js"}