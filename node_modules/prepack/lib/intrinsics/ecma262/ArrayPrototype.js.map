{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayPrototype.js"],"names":["realm","obj","defineNativeProperty","intrinsics","SymbolIterator","ArrayProto_values","zero","defineNativeMethod","context","args","argCount","O","To","ToObject","ArrayValue","isIntrinsicAndHasWidenedNumericProperty","isInPureScope","$GetOwnProperty","undefined","newArgs","StringValue","createTemporalWithWidenedNumericProperty","A","Create","ArraySpeciesCreate","throwIfNotConcreteObject","n","items","length","E","shift","spreadable","k","len","ToLength","Math","pow","createErrorThrowCompletion","TypeError","P","exists","subElement","CreateDataPropertyOrThrow","Properties","Set","NumberValue","isCompatibleWith","MOBILE_JSC_VERSION","target","start","end","push","AbstractValue","createTemporalFromBuildFunction","BooleanValue","relativeTarget","ToInteger","to","max","min","relativeStart","from","relativeEnd","UndefinedValue","throwIfNotConcrete","final","count","direction","fromKey","ToString","toKey","fromPresent","fromVal","DeletePropertyOrThrow","Value","CreateArrayIterator","callbackfn","thisArg","T","Pk","kPresent","kValue","testResult","ToBooleanPartial","false","true","value","selected","predicate","searchElement","fromIndex","elementK","Object","is","same","separator","sep","ToStringPartial","emptyString","element0","R","NullValue","S","element","next","ECMAScriptSourceFunctionValue","BoundFunctionValue","possibleNestedOptimizedFunctions","func","thisValue","kind","lenVal","mightNotBeNumber","values","isTop","getElements","size","a","Join","mapAndJoin","v","createFromBinaryOp","expressionLocation","doMap","val","resultArray","mappedValue","newLen","indx","initialValue","accumulator","middle","floor","lower","upper","upperP","lowerP","lowerExists","lowerValue","upperExists","upperValue","first","frm","comparefn","isSparse","i","elem","toString","ThrowIfMightHaveBeenDeleted","sparse","proto","$GetPrototypeOf","j","Error","prop","configurable","writable","SortCompare","x","y","mightBeUndefined","ToNumber","isNaN","xString","yString","xSmaller","ySmaller","arr","comparefn_","result_","numb","$Get","sort","hasOwnProperty","ok","$Set","deleteCount","argLength","actualStart","insertCount","actualDeleteCount","dc","fromValue","itemCount","array","firstElement","nextElement","ArrayProto_toString","unscopableList","ObjectCreate","null","CreateDataProperty","SymbolUnscopables"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport {\n  AbstractValue,\n  ArrayValue,\n  BooleanValue,\n  BoundFunctionValue,\n  ConcreteValue,\n  ECMAScriptSourceFunctionValue,\n  NullValue,\n  NumberValue,\n  ObjectValue,\n  StringValue,\n  UndefinedValue,\n  Value,\n} from \"../../values/index.js\";\nimport invariant from \"../../invariant.js\";\nimport { SameValueZeroPartial, AbstractRelationalComparison } from \"../../methods/abstract.js\";\nimport {\n  StrictEqualityComparisonPartial,\n  IsCallable,\n  IsConcatSpreadable,\n  IsExtensible,\n  HasOwnProperty,\n  HasProperty,\n  Call,\n  Invoke,\n  Get,\n  HasSomeCompatibleType,\n} from \"../../methods/index.js\";\nimport { Create, Join, Properties, To } from \"../../singletons.js\";\nimport { createOperationDescriptor } from \"../../utils/generator.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 22.1.3.31\n  obj.defineNativeProperty(realm.intrinsics.SymbolIterator, realm.intrinsics.ArrayProto_values);\n\n  // ECMA262 22.1.3\n  obj.defineNativeProperty(\"length\", realm.intrinsics.zero);\n\n  // ECMA262 22.1.3.1\n  obj.defineNativeMethod(\"concat\", 1, (context, args, argCount) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"concat\") === undefined\n    ) {\n      let newArgs = [O, new StringValue(realm, \"concat\"), ...args];\n      return ArrayValue.createTemporalWithWidenedNumericProperty(\n        realm,\n        newArgs,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let A be ? ArraySpeciesCreate(O, 0).\n    let A = Create.ArraySpeciesCreate(realm, O.throwIfNotConcreteObject(), 0);\n\n    // 3. Let n be 0.\n    let n = 0;\n\n    // 4. Let items be a List whose first element is O and whose subsequent elements are, in left to right\n    //    order, the arguments that were passed to this function invocation.\n    let items = argCount === 0 ? [O] : [O, ...args];\n\n    // 5. Repeat, while items is not empty\n    while (items.length) {\n      // a. Remove the first element from items and let E be the value of the element.\n      let E = items.shift();\n\n      // b. Let spreadable be ? IsConcatSpreadable(E).\n      let spreadable = IsConcatSpreadable(realm, E);\n\n      // c. If spreadable is true, then\n      if (spreadable) {\n        E = E.throwIfNotConcreteObject();\n\n        // i. Let k be 0.\n        let k = 0;\n\n        // ii. Let len be ? ToLength(? Get(E, \"length\")).\n        let len = To.ToLength(realm, Get(realm, E, \"length\"));\n\n        // ii. If n + len > 2^53-1, throw a TypeError exception.\n        if (n + len > Math.pow(2, 53) - 1) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"too damn high\");\n        }\n\n        // iv. Repeat, while k < len\n        while (k < len) {\n          // 1. Let P be ! ToString(k).\n          let P = new StringValue(realm, k + \"\");\n\n          // 2. Let exists be ? HasProperty(E, P).\n          let exists = HasProperty(realm, E, P);\n\n          // 3. If exists is true, then\n          if (exists) {\n            // a. Let subElement be ? Get(E, P).\n            let subElement = Get(realm, E, P);\n\n            // b. Perform ? CreateDataPropertyOrThrow(A, ! ToString(n), subElement).\n            Create.CreateDataPropertyOrThrow(realm, A, new StringValue(realm, n + \"\"), subElement);\n          }\n\n          // 4. Increase n by 1.\n          n++;\n\n          // 5. Increase k by 1.\n          k++;\n        }\n      } else {\n        // d. Else E is added as a single item rather than spread,\n        // i. If n≥2^53-1, throw a TypeError exception.\n        if (n > Math.pow(2, 53) - 1) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"too damn high\");\n        }\n\n        // ii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(n), E).\n        Create.CreateDataPropertyOrThrow(realm, A, new StringValue(realm, n + \"\"), E);\n\n        // iii. Increase n by 1.\n        n++;\n      }\n    }\n\n    // 6. Perform ? Set(A, \"length\", n, true).\n    Properties.Set(realm, A, \"length\", new NumberValue(realm, n), true);\n\n    // 7. Return A.\n    return A;\n  });\n\n  // ECMA262 22.1.3.3\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    obj.defineNativeMethod(\"copyWithin\", 2, (context, [target, start, end]) => {\n      // 1. Let O be ? ToObject(this value).\n      let O = To.ToObject(realm, context);\n\n      // If we have an object that is an array with widened numeric properties, then\n      // we can return a temporal here as we know nothing of the array's properties.\n      // This should be safe to do, as we never expose the internals of the array.\n      if (\n        ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n        realm.isInPureScope() &&\n        O.$GetOwnProperty(\"copyWithin\") === undefined\n      ) {\n        let args = [O, new StringValue(realm, \"copyWithin\"), target];\n        if (start) {\n          args.push(start);\n        }\n        if (end) {\n          args.push(end);\n        }\n        AbstractValue.createTemporalFromBuildFunction(\n          realm,\n          BooleanValue,\n          args,\n          createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n        );\n        return O;\n      }\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n      // 3. Let relativeTarget be ? ToInteger(target).\n      let relativeTarget = To.ToInteger(realm, target);\n\n      // 4. If relativeTarget < 0, let to be max((len + relativeTarget), 0); else let to be min(relativeTarget, len).\n      let to = relativeTarget < 0 ? Math.max(len + relativeTarget, 0) : Math.min(relativeTarget, len);\n\n      // 5. Let relativeStart be ? ToInteger(start).\n      let relativeStart = To.ToInteger(realm, start);\n\n      // 6. If relativeStart < 0, let from be max((len + relativeStart), 0); else let from be min(relativeStart, len).\n      let from = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);\n\n      // 7. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n      let relativeEnd = !end || end instanceof UndefinedValue ? len : To.ToInteger(realm, end.throwIfNotConcrete());\n\n      // 8. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).\n      let final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);\n\n      // 9. Let count be min(final-from, len-to).\n      let count = Math.min(final - from, len - to);\n\n      let direction;\n      // 10. If from<to and to<from+count, then\n      if (from < to && to < from + count) {\n        // a. Let direction be -1.\n        direction = -1;\n\n        // b. Let from be from + count - 1.\n        from = from + count - 1;\n\n        // c. Let to be to + count - 1.\n        to = to + count - 1;\n      } else {\n        // 11. Else,\n        // a. Let direction be 1.\n        direction = 1;\n      }\n\n      // 12. Repeat, while count > 0\n      while (count > 0) {\n        // a. Let fromKey be ! ToString(from).\n        let fromKey = To.ToString(realm, new NumberValue(realm, from));\n\n        // b. Let toKey be ! ToString(to).\n        let toKey = To.ToString(realm, new NumberValue(realm, to));\n\n        // c. Let fromPresent be ? HasProperty(O, fromKey).\n        let fromPresent = HasProperty(realm, O, fromKey);\n\n        // d. If fromPresent is true, then\n        if (fromPresent === true) {\n          // i. Let fromVal be ? Get(O, fromKey).\n          let fromVal = Get(realm, O, fromKey);\n          // ii. Perform ? Set(O, toKey, fromVal, true).\n          Properties.Set(realm, O, toKey, fromVal, true);\n        } else {\n          // e. Else fromPresent is false,\n          // i. Perform ? DeletePropertyOrThrow(O, toKey).\n          Properties.DeletePropertyOrThrow(realm, O.throwIfNotConcreteObject(), toKey);\n        }\n\n        // f. Let from be from + direction.\n        from = from + direction;\n\n        // g. Let to be to + direction.\n        to = to + direction;\n\n        // h. Let count be count - 1.\n        count = count - 1;\n      }\n\n      // 13. Return O.\n      return O;\n    });\n\n  // ECMA262 22.1.3.4\n  obj.defineNativeMethod(\"entries\", 0, context => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"entries\") === undefined\n    ) {\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        Value,\n        [O, new StringValue(realm, \"entries\")],\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Return CreateArrayIterator(O, \"key+value\").\n    return Create.CreateArrayIterator(realm, O.throwIfNotConcreteObject(), \"key+value\");\n  });\n\n  // ECMA262 22.1.3.5\n  obj.defineNativeMethod(\"every\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"every\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"every\"), callbackfn];\n      if (thisArg) {\n        args.push(thisArg);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        BooleanValue,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Let testResult be ToBoolean(? Call(callbackfn, T, « kValue, k, O »)).\n        let testResult = To.ToBooleanPartial(realm, Call(realm, callbackfn, T, [kValue, new NumberValue(realm, k), O]));\n\n        // iii. If testResult is false, return false.\n        if (!testResult) return realm.intrinsics.false;\n      }\n\n      // d. Increase k by 1.\n      k++;\n    }\n\n    // 7. Return true.\n    return realm.intrinsics.true;\n  });\n\n  // ECMA262 22.1.3.6\n  obj.defineNativeMethod(\"fill\", 1, (context, [value, start, end]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"fill\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"fill\"), value];\n      if (start) {\n        args.push(start);\n      }\n      if (end) {\n        args.push(end);\n      }\n      AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        Value,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n      return O;\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. Let relativeStart be ? ToInteger(start).\n    let relativeStart = To.ToInteger(realm, start || realm.intrinsics.undefined);\n\n    // 4. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be min(relativeStart, len).\n    let k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);\n\n    // 5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n    let relativeEnd = !end || end instanceof UndefinedValue ? len : To.ToInteger(realm, end.throwIfNotConcrete());\n\n    // 6. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).\n    let final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);\n\n    // 7. Repeat, while k < final\n    while (k < final) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Perform ? Set(O, Pk, value, true).\n      Properties.Set(realm, O, Pk, value, true);\n\n      // c. Increase k by 1.\n      k++;\n    }\n\n    // 8. Return O.\n    return O;\n  });\n\n  // ECMA262 22.1.3.7\n  obj.defineNativeMethod(\"filter\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"filter\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"filter\"), callbackfn];\n      if (thisArg) {\n        args.push(thisArg);\n      }\n      return ArrayValue.createTemporalWithWidenedNumericProperty(\n        realm,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 5. Let A be ? ArraySpeciesCreate(O, 0).\n    let A = Create.ArraySpeciesCreate(realm, O.throwIfNotConcreteObject(), 0);\n\n    // 6. Let k be 0.\n    let k = 0;\n\n    // 7. Let to be 0.\n    let to = 0;\n\n    // 8. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Let selected be ToBoolean(? Call(callbackfn, T, « kValue, k, O »)).\n        let selected = To.ToBooleanPartial(realm, Call(realm, callbackfn, T, [kValue, new NumberValue(realm, k), O]));\n\n        // iii. If selected is true, then\n        if (selected) {\n          // 1. Perform ? CreateDataPropertyOrThrow(A, ! ToString(to), kValue).\n          Create.CreateDataPropertyOrThrow(realm, A, To.ToString(realm, new NumberValue(realm, to)), kValue);\n\n          // 2. Increase to by 1.\n          to++;\n        }\n      }\n\n      // d. Increase k by 1.\n      k++;\n    }\n\n    // 9. Return A.\n    return A;\n  });\n\n  // ECMA262 22.1.3.8\n  obj.defineNativeMethod(\"find\", 1, (context, [predicate, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"find\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"find\"), predicate];\n      if (thisArg) {\n        args.push(thisArg);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        Value,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n    if (!IsCallable(realm, predicate)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kValue be ? Get(O, Pk).\n      let kValue = Get(realm, O, Pk);\n\n      // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n      let testResult = To.ToBooleanPartial(realm, Call(realm, predicate, T, [kValue, new NumberValue(realm, k), O]));\n\n      // d. If testResult is true, return kValue.\n      if (testResult) return kValue;\n\n      // e. Increase k by 1.\n      k++;\n    }\n\n    // 7. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 22.1.3.9\n  obj.defineNativeMethod(\"findIndex\", 1, (context, [predicate, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"findIndex\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"findIndex\"), predicate];\n      if (thisArg) {\n        args.push(thisArg);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        NumberValue,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n    if (IsCallable(realm, predicate) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg ? thisArg : realm.intrinsics.undefined;\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n      // b. Let kValue be ? Get(O, Pk).\n      let kValue = Get(realm, O, new StringValue(realm, Pk));\n\n      // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n      let testResult = To.ToBooleanPartial(realm, Call(realm, predicate, T, [kValue, new NumberValue(realm, k), O]));\n\n      // d. If testResult is true, return k.\n      if (testResult === true) return new NumberValue(realm, k);\n\n      // e. Increase k by 1.\n      k = k + 1;\n    }\n\n    // 7. Return -1.\n    return new NumberValue(realm, -1);\n  });\n\n  // ECMA262 22.1.3.10\n  obj.defineNativeMethod(\"forEach\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"forEach\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"forEach\"), callbackfn];\n      if (thisArg) {\n        args.push(thisArg);\n      }\n      AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        BooleanValue,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n      return realm.intrinsics.undefined;\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! To.ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Perform ? Call(callbackfn, T, « kValue, k, O »).\n        Call(realm, callbackfn, T, [kValue, new NumberValue(realm, k), O]);\n      }\n\n      // d. Increase k by 1.\n      k++;\n    }\n\n    // 7. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 22.1.3.11\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    obj.defineNativeMethod(\"includes\", 1, (context, [searchElement, fromIndex]) => {\n      // 1. Let O be ? ToObject(this value).\n      let O = To.ToObject(realm, context);\n\n      // If we have an object that is an array with widened numeric properties, then\n      // we can return a temporal here as we know nothing of the array's properties.\n      // This should be safe to do, as we never expose the internals of the array.\n      if (\n        ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n        realm.isInPureScope() &&\n        O.$GetOwnProperty(\"includes\") === undefined\n      ) {\n        let args = [O, new StringValue(realm, \"includes\"), searchElement];\n        if (fromIndex) {\n          args.push(fromIndex);\n        }\n        return AbstractValue.createTemporalFromBuildFunction(\n          realm,\n          BooleanValue,\n          args,\n          createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n        );\n      }\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n      // 3. If len is 0, return false.\n      if (len === 0) return realm.intrinsics.false;\n\n      // 4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step produces the value 0.)\n      let n = To.ToInteger(realm, fromIndex || realm.intrinsics.undefined);\n\n      let k;\n      // 5. If n ≥ 0, then\n      if (n >= 0) {\n        // a. Let k be n.\n        k = n;\n      } else {\n        // 6. Else n < 0,\n        // a. Let k be len + n.\n        k = len + n;\n        // b. If k < 0, let k be 0.\n        if (k < 0) k = 0;\n      }\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        let elementK = Get(realm, O, To.ToString(realm, new NumberValue(realm, k)));\n\n        // b. If SameValueZero(searchElement, elementK) is true, return true.\n        if (SameValueZeroPartial(realm, searchElement, elementK) === true) return realm.intrinsics.true;\n\n        // c. Increase k by 1.\n        k = k + 1;\n      }\n\n      // 8. Return false.\n      return realm.intrinsics.false;\n    });\n\n  // ECMA262 22.1.3.12\n  obj.defineNativeMethod(\"indexOf\", 1, (context, [searchElement, fromIndex]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"indexOf\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"indexOf\"), searchElement];\n      if (fromIndex) {\n        args.push(fromIndex);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        NumberValue,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If len is 0, return -1.\n    if (len === 0) return new NumberValue(realm, -1);\n\n    // 4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step produces the value 0.)\n    let n = fromIndex ? To.ToInteger(realm, fromIndex) : 0;\n\n    // 5. If n ≥ len, return -1.\n    if (n >= len) return new NumberValue(realm, -1);\n\n    // 6. If n ≥ 0, then\n    let k;\n    if (n >= 0) {\n      // a. If n is -0, let k be +0; else let k be n.\n      k = Object.is(n, -0) ? +0 : n;\n    } else {\n      // 7. Else n < 0,\n      // a. Let k be len + n.\n      k = len + n;\n\n      // b. If k < 0, let k be 0.\n      if (k < 0) k = 0;\n    }\n\n    // 8. Repeat, while k < len\n    while (k < len) {\n      // a. Let kPresent be ? HasProperty(O, ! ToString(k)).\n      let kPresent = HasProperty(realm, O, k + \"\");\n\n      // b. If kPresent is true, then\n      if (kPresent === true) {\n        // i. Let elementK be ? Get(O, ! ToString(k)).\n        let elementK = Get(realm, O, k + \"\");\n\n        // ii. Let same be the result of performing Strict Equality Comparison searchElement === elementK.\n        let same = StrictEqualityComparisonPartial(realm, searchElement, elementK);\n\n        // iii. If same is true, return k.\n        if (same) return new NumberValue(realm, k);\n      }\n\n      // c. Increase k by 1.\n      k++;\n    }\n\n    // 9. Return -1.\n    return new NumberValue(realm, -1);\n  });\n\n  // ECMA262 22.1.3.13\n  obj.defineNativeMethod(\"join\", 1, (context, [separator]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"join\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"join\")];\n      if (separator) {\n        args.push(separator);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        StringValue,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If separator is undefined, let separator be the single-element String \",\".\n    if (!separator || separator instanceof UndefinedValue) separator = new StringValue(realm, \",\");\n\n    // 4. Let sep be ? ToString(separator).\n    let sep = To.ToStringPartial(realm, separator);\n\n    // 5. If len is zero, return the empty String.\n    if (len === 0) return realm.intrinsics.emptyString;\n\n    // 6. Let element0 be Get(O, \"0\").\n    let element0 = Get(realm, O, \"0\");\n\n    // 7. If element0 is undefined or null, let R be the empty String; otherwise, let R be ? ToString(element0).\n    let R: ?string;\n    if (HasSomeCompatibleType(element0, UndefinedValue, NullValue)) {\n      R = \"\";\n    } else {\n      R = To.ToStringPartial(realm, element0);\n    }\n\n    // 8. Let k be 1.\n    let k = 1;\n\n    // 9. Repeat, while k < len\n    while (k < len) {\n      // a. Let S be the String value produced by concatenating R and sep.\n      let S: string = R + sep;\n\n      // b. Let element be ? Get(O, ! To.ToString(k)).\n      let element = Get(realm, O, new StringValue(realm, k + \"\"));\n\n      // c. If element is undefined or null, let next be the empty String; otherwise, let next be ? ToString(element).\n      let next: ?string;\n      if (HasSomeCompatibleType(element, UndefinedValue, NullValue)) {\n        next = \"\";\n      } else {\n        next = To.ToStringPartial(realm, element);\n      }\n\n      // d. Let R be a String value produced by concatenating S and next.\n      R = S + next;\n\n      // e. Increase k by 1.\n      k++;\n    }\n\n    // 10. Return R.\n    return new StringValue(realm, R + \"\");\n  });\n\n  // ECMA262 22.1.3.14\n  obj.defineNativeMethod(\"keys\", 0, context => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"keys\") === undefined\n    ) {\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        Value,\n        [O, new StringValue(realm, \"keys\")],\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Return CreateArrayIterator(O, \"key\").\n    return Create.CreateArrayIterator(realm, O.throwIfNotConcreteObject(), \"key\");\n  });\n\n  // ECMA262 22.1.3.15\n  obj.defineNativeMethod(\"lastIndexOf\", 1, (context, [searchElement, fromIndex]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"lastIndexOf\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"lastIndexOf\"), searchElement];\n      if (fromIndex) {\n        args.push(fromIndex);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        NumberValue,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If len is 0, return -1.\n    if (len === 0) return new NumberValue(realm, -1);\n\n    // 4. If argument fromIndex was passed, let n be ? ToInteger(fromIndex); else let n be len-1.\n    let n = fromIndex ? To.ToInteger(realm, fromIndex) : len - 1;\n\n    // 5. If n ≥ 0, then\n    let k;\n    if (n >= 0) {\n      // a. If n is -0, let k be +0; else let k be min(n, len - 1).\n      k = Object.is(n, -0) ? +0 : Math.min(n, len - 1);\n    } else {\n      // 6. Else n < 0,\n      // a. Let k be len + n.\n      k = len + n;\n    }\n\n    // 7. Repeat, while k ≥ 0\n    while (k >= 0) {\n      // a. Let kPresent be ? HasProperty(O, ! ToString(k)).\n      let kPresent = HasProperty(realm, O, new StringValue(realm, k + \"\"));\n\n      // b. If kPresent is true, then\n      if (kPresent) {\n        // i. Let elementK be ? Get(O, ! ToString(k)).\n        let elementK = Get(realm, O, new StringValue(realm, k + \"\"));\n\n        // ii. Let same be the result of performing Strict Equality Comparison searchElement === elementK.\n        let same = StrictEqualityComparisonPartial(realm, searchElement, elementK);\n\n        // iii. If same is true, return k.\n        if (same) return new NumberValue(realm, k);\n      }\n\n      // c. Decrease k by 1.\n      k--;\n    }\n\n    // 8. Return -1.\n    return new NumberValue(realm, -1);\n  });\n\n  // ECMA262 22.1.3.16\n  obj.defineNativeMethod(\"map\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"map\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"map\"), callbackfn];\n      if (thisArg) {\n        args.push(thisArg);\n      }\n      invariant(callbackfn instanceof ECMAScriptSourceFunctionValue || callbackfn instanceof BoundFunctionValue);\n      let possibleNestedOptimizedFunctions = [\n        { func: callbackfn, thisValue: thisArg || realm.intrinsics.undefined, kind: \"map\" },\n      ];\n      return ArrayValue.createTemporalWithWidenedNumericProperty(\n        realm,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\"),\n        possibleNestedOptimizedFunctions\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let lenVal = Get(realm, O, \"length\");\n    if (lenVal instanceof AbstractValue && !lenVal.mightNotBeNumber() && !lenVal.values.isTop()) {\n      let values = lenVal.values.getElements();\n      let n = values.size;\n      if (n > 1 && n < 10) {\n        let a = Create.ArraySpeciesCreate(realm, O.throwIfNotConcreteObject(), 0);\n        return Join.mapAndJoin(\n          realm,\n          values,\n          v => AbstractValue.createFromBinaryOp(realm, \"===\", v, lenVal, lenVal.expressionLocation),\n          v => doMap(v, a)\n        );\n      }\n    }\n    return doMap(lenVal.throwIfNotConcrete());\n\n    function doMap(val: ConcreteValue, resultArray?: ObjectValue) {\n      let len = To.ToLength(realm, val);\n\n      // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n      if (!IsCallable(realm, callbackfn)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n      }\n\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      let T = thisArg || realm.intrinsics.undefined;\n\n      // 5. Let A be ? ArraySpeciesCreate(O, len).\n      let A;\n      if (resultArray === undefined) A = Create.ArraySpeciesCreate(realm, O.throwIfNotConcreteObject(), len);\n      else {\n        A = resultArray;\n        Properties.Set(realm, A, \"length\", val, true);\n      }\n\n      // 6. Let k be 0.\n      let k = 0;\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! To.ToString(k).\n        let Pk = new StringValue(realm, k + \"\");\n\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        let kPresent = HasProperty(realm, O, Pk);\n\n        // c. If kPresent is true, then\n        if (kPresent) {\n          // i. Let kValue be ? Get(O, Pk).\n          let kValue = Get(realm, O, Pk);\n\n          // ii. Let mappedValue be ? Call(callbackfn, T, « kValue, k, O »).\n          let mappedValue = Call(realm, callbackfn, T, [kValue, new NumberValue(realm, k), O]);\n\n          // iii. Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).\n          Create.CreateDataPropertyOrThrow(realm, A, Pk, mappedValue);\n        }\n\n        // d. Increase k by 1.\n        k++;\n      }\n\n      // 8. Return A.\n      return A;\n    }\n  });\n\n  // ECMA262 22.1.3.17\n  obj.defineNativeMethod(\"pop\", 0, context => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"pop\") === undefined\n    ) {\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        Value,\n        [O, new StringValue(realm, \"pop\")],\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If len is zero, then\n    if (len === 0) {\n      // a. Perform ? Set(O, \"length\", 0, true).\n      Properties.Set(realm, O, \"length\", realm.intrinsics.zero, true);\n\n      // b. Return undefined.\n      return realm.intrinsics.undefined;\n    } else {\n      // 4. Else len > 0,\n      // a. Let newLen be len-1.\n      let newLen = len - 1;\n\n      // b. Let indx be ! ToString(newLen).\n      let indx = new StringValue(realm, newLen + \"\");\n\n      // c. Let element be ? Get(O, indx).\n      let element = Get(realm, O, indx);\n\n      // d. Perform ? DeletePropertyOrThrow(O, indx).\n      Properties.DeletePropertyOrThrow(realm, O.throwIfNotConcreteObject(), indx);\n\n      // e. Perform ? Set(O, \"length\", newLen, true).\n      Properties.Set(realm, O, \"length\", new NumberValue(realm, newLen), true);\n\n      // f. Return element.\n      return element;\n    }\n  });\n\n  // ECMA262 22.1.3.18\n  obj.defineNativeMethod(\"push\", 1, (context, args, argCount) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"push\") === undefined\n    ) {\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        NumberValue,\n        [O, new StringValue(realm, \"push\"), ...args],\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, new StringValue(realm, \"length\")));\n\n    // 3. Let items be a List whose elements are, in left to right order, the arguments that were passed to realm function invocation.\n    let items = argCount > 0 ? args : [];\n\n    // 4. Let argCount be the number of elements in items.\n    argCount;\n\n    // 5. If len + argCount > 2^53-1, throw a TypeError exception.\n    if (len + argCount > Math.pow(2, 53) - 1) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Array.prototype\");\n    }\n\n    // 6. Repeat, while items is not empty\n    while (items.length) {\n      // a. Remove the first element from items and let E be the value of the element.\n      let E = items.shift();\n\n      // b. Perform ? Set(O, ! ToString(len), E, true).\n      Properties.Set(realm, O, new StringValue(realm, len + \"\"), E, true);\n\n      // c. Let len be len+1.\n      len++;\n    }\n\n    // 7. Perform ? Set(O, \"length\", len, true).\n    Properties.Set(realm, O, new StringValue(realm, \"length\"), new NumberValue(realm, len), true);\n\n    // 8. Return len.\n    return new NumberValue(realm, len);\n  });\n\n  // ECMA262 22.1.3.19\n  obj.defineNativeMethod(\"reduce\", 1, (context, [callbackfn, initialValue]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"reduce\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"reduce\"), callbackfn];\n      if (initialValue) {\n        args.push(initialValue);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        Value,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If len is 0 and initialValue is not present, throw a TypeError exception.\n    if (len === 0 && !initialValue) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Array.prototype\");\n    }\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. If initialValue is present, then\n    let accumulator;\n    if (initialValue) {\n      // a. Set accumulator to initialValue.\n      accumulator = initialValue;\n    } else {\n      // 7. Else initialValue is not present,\n      // a. Let kPresent be false.\n      let kPresent = false;\n\n      // b. Repeat, while kPresent is false and k < len\n      while (kPresent === false && k < len) {\n        // i. Let Pk be ! ToString(k).\n        let Pk = new StringValue(realm, k + \"\");\n\n        // ii. Let kPresent be ? HasProperty(O, Pk).\n        kPresent = HasProperty(realm, O, Pk);\n\n        // iv. If kPresent is true, then\n        if (kPresent) {\n          // 1. Let accumulator be ? Get(O, Pk).\n          accumulator = Get(realm, O, Pk);\n        }\n\n        // v. Increase k by 1.\n        k++;\n      }\n\n      // c. If kPresent is false, throw a TypeError exception.\n      if (!kPresent) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"kPresent is false\");\n      }\n\n      invariant(accumulator);\n    }\n\n    // 8. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Let accumulator be ? Call(callbackfn, undefined, « accumulator, kValue, k, O »).\n        accumulator = Call(realm, callbackfn, realm.intrinsics.undefined, [\n          accumulator,\n          kValue,\n          new NumberValue(realm, k),\n          O,\n        ]);\n      }\n\n      // d. Increase k by 1.\n      k++;\n    }\n\n    // 9. Return accumulator.\n    return accumulator;\n  });\n\n  // ECMA262 22.1.3.20\n  obj.defineNativeMethod(\"reduceRight\", 1, (context, [callbackfn, initialValue]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"reduceRight\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"reduceRight\"), callbackfn];\n      if (initialValue) {\n        args.push(initialValue);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        Value,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If len is 0 and initialValue is not present, throw a TypeError exception.\n    if (len === 0 && !initialValue) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Array.prototype\");\n    }\n\n    // 5. Let k be len-1.\n    let k = len - 1;\n\n    // 6. If initialValue is present, then\n    let accumulator;\n    if (initialValue) {\n      // 1. Set accumulator to initialValue.\n      accumulator = initialValue;\n    } else {\n      // 7. Else initialValue is not present,\n      // a. Let kPresent be false.\n      let kPresent = false;\n\n      // b. Repeat, while kPresent is false and k ≥ 0\n      while (!kPresent && k >= 0) {\n        // i. Let Pk be ! ToString(k).\n        let Pk = new StringValue(realm, k + \"\");\n\n        // ii. Let kPresent be ? HasProperty(O, Pk).\n        kPresent = HasProperty(realm, O, Pk);\n\n        // iii. If kPresent is true, then\n        if (kPresent) {\n          // 1. Let accumulator be ? Get(O, Pk).\n          accumulator = Get(realm, O, Pk);\n        }\n\n        // iv. Decrease k by 1.\n        k--;\n      }\n\n      // c. If kPresent is false, throw a TypeError exception.\n      if (!kPresent || !accumulator) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Array.prototype\");\n      }\n    }\n\n    // 8. Repeat, while k ≥ 0\n    while (k >= 0) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Let accumulator be ? Call(callbackfn, undefined, « accumulator, kValue, k, O »).\n        accumulator = Call(realm, callbackfn, realm.intrinsics.undefined, [\n          accumulator,\n          kValue,\n          new NumberValue(realm, k),\n          O,\n        ]);\n      }\n\n      // d. Decrease k by 1.\n      k--;\n    }\n\n    // 9. Return accumulator.\n    return accumulator;\n  });\n\n  // ECMA262 22.1.3.21\n  obj.defineNativeMethod(\"reverse\", 0, context => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"reverse\") === undefined\n    ) {\n      AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        ArrayValue,\n        [O, new StringValue(realm, \"reverse\")],\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n      return O;\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. Let middle be floor(len/2).\n    let middle = Math.floor(len / 2);\n\n    // 4. Let lower be 0.\n    let lower = 0;\n\n    // 5. Repeat, while lower ≠ middle\n    while (lower !== middle) {\n      // a. Let upper be len - lower - 1.\n      let upper = len - lower - 1;\n\n      // b. Let upperP be ! ToString(upper).\n      let upperP = new StringValue(realm, upper + \"\");\n\n      // c. Let lowerP be ! ToString(lower).\n      let lowerP = new StringValue(realm, lower + \"\");\n\n      // d. Let lowerExists be ? HasProperty(O, lowerP).\n      let lowerExists = HasProperty(realm, O, lowerP);\n\n      // e. If lowerExists is true, then\n      let lowerValue;\n      if (lowerExists) {\n        // i. Let lowerValue be ? Get(O, lowerP).\n        lowerValue = Get(realm, O, lowerP);\n      }\n\n      // f. Let upperExists be ? HasProperty(O, upperP).\n      let upperExists = HasProperty(realm, O, upperP);\n\n      // g. If upperExists is true, then\n      let upperValue;\n      if (upperExists) {\n        // i. Let upperValue be ? Get(O, upperP).\n        upperValue = Get(realm, O, upperP);\n      }\n\n      // h. If lowerExists is true and upperExists is true, then\n      if (lowerExists && upperExists) {\n        invariant(lowerValue, \"expected lower value to exist\");\n        invariant(upperValue, \"expected upper value to exist\");\n\n        // i. Perform ? Set(O, lowerP, upperValue, true).\n        Properties.Set(realm, O, lowerP, upperValue, true);\n\n        // ii. Perform ? Set(O, upperP, lowerValue, true).\n        Properties.Set(realm, O, upperP, lowerValue, true);\n      } else if (!lowerExists && upperExists) {\n        // i. Else if lowerExists is false and upperExists is true, then\n        invariant(upperValue, \"expected upper value to exist\");\n\n        // i. Perform ? Set(O, lowerP, upperValue, true).\n        Properties.Set(realm, O, lowerP, upperValue, true);\n\n        // ii. Perform ? DeletePropertyOrThrow(O, upperP).\n        Properties.DeletePropertyOrThrow(realm, O.throwIfNotConcreteObject(), upperP);\n      } else if (lowerExists && !upperExists) {\n        // j. Else if lowerExists is true and upperExists is false, then\n        invariant(lowerValue, \"expected lower value to exist\");\n\n        // i. Perform ? DeletePropertyOrThrow(O, lowerP).\n        Properties.DeletePropertyOrThrow(realm, O.throwIfNotConcreteObject(), lowerP);\n\n        // ii. Perform ? Set(O, upperP, lowerValue, true).\n        Properties.Set(realm, O, upperP, lowerValue, true);\n      } else {\n        // k. Else both lowerExists and upperExists are false,\n        // i. No action is required.\n      }\n\n      // l. Increase lower by 1.\n      lower++;\n    }\n\n    // 6. Return O.\n    return O;\n  });\n\n  // ECMA262 22.1.3.22\n  obj.defineNativeMethod(\"shift\", 0, context => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"shift\") === undefined\n    ) {\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        Value,\n        [O, new StringValue(realm, \"shift\")],\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If len is zero, then\n    if (len === 0) {\n      // a. Perform ? Set(O, \"length\", 0, true).\n      Properties.Set(realm, O, \"length\", realm.intrinsics.zero, true);\n\n      // b. Return undefined.\n      return realm.intrinsics.undefined;\n    }\n\n    // 4. Let first be ? Get(O, \"0\").\n    let first = Get(realm, O, \"0\");\n\n    // 5. Let k be 1.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let from be ! ToString(k).\n      let frm = new StringValue(realm, k + \"\");\n\n      // b. Let to be ! ToString(k-1).\n      let to = new StringValue(realm, k - 1 + \"\");\n\n      // c. Let fromPresent be ? HasProperty(O, from).\n      let fromPresent = HasProperty(realm, O, frm);\n\n      // d. If fromPresent is true, then\n      if (fromPresent) {\n        // i. Let fromVal be ? Get(O, from).\n        let fromVal = Get(realm, O, frm);\n\n        // ii. Perform ? Set(O, to, fromVal, true).\n        Properties.Set(realm, O, to, fromVal, true);\n      } else {\n        // d. Else fromPresent is false,\n        // i. Perform ? DeletePropertyOrThrow(O, to).\n        Properties.DeletePropertyOrThrow(realm, O.throwIfNotConcreteObject(), to);\n      }\n\n      // e. Increase k by 1.\n      k++;\n    }\n\n    // 7. Perform ? DeletePropertyOrThrow(O, ! ToString(len-1)).\n    Properties.DeletePropertyOrThrow(realm, O.throwIfNotConcreteObject(), new StringValue(realm, len - 1 + \"\"));\n\n    // 8. Perform ? Set(O, \"length\", len-1, true).\n    Properties.Set(realm, O, \"length\", new NumberValue(realm, len - 1), true);\n\n    // 9. Return first.\n    return first;\n  });\n\n  // ECMA262 22.1.3.23\n  obj.defineNativeMethod(\"slice\", 2, (context, [start, end]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"slice\") === undefined\n    ) {\n      let newArgs = [O, new StringValue(realm, \"slice\"), start, end];\n      return ArrayValue.createTemporalWithWidenedNumericProperty(\n        realm,\n        newArgs,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. Let relativeStart be ? ToInteger(start).\n    let relativeStart = To.ToInteger(realm, start);\n\n    // 4. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be min(relativeStart, len).\n    let k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);\n\n    // 5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n    let relativeEnd = !end || end instanceof UndefinedValue ? len : To.ToInteger(realm, end.throwIfNotConcrete());\n\n    // 6. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).\n    let final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);\n\n    // 7. Let count be max(final - k, 0).\n    let count = Math.max(final - k, 0);\n\n    // 8. Let A be ? ArraySpeciesCreate(O, count).\n    let A = Create.ArraySpeciesCreate(realm, O.throwIfNotConcreteObject(), count);\n\n    // 9. Let n be 0.\n    let n = 0;\n\n    // 10. Repeat, while k < final\n    while (k < final) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(n), kValue).\n        Create.CreateDataPropertyOrThrow(realm, A, new StringValue(realm, n + \"\"), kValue);\n      }\n\n      // d. Increase k by 1.\n      k++;\n\n      // e. Increase n by 1.\n      n++;\n    }\n\n    // 11. Perform ? Set(A, \"length\", n, true).\n    Properties.Set(realm, A, \"length\", new NumberValue(realm, n), true);\n\n    // 12. Return A.\n    return A;\n  });\n\n  // ECMA262 22.1.3.24\n  obj.defineNativeMethod(\"some\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"some\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"some\"), callbackfn];\n      if (thisArg) {\n        args.push(thisArg);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        BooleanValue,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"callback passed to Array.prototype.some isn't callable\"\n      );\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Let testResult be ToBoolean(? Call(callbackfn, T, « kValue, k, O »)).\n        let testResult = To.ToBooleanPartial(realm, Call(realm, callbackfn, T, [kValue, new NumberValue(realm, k), O]));\n\n        // iii. If testResult is true, return true.\n        if (testResult) return realm.intrinsics.true;\n      }\n\n      // d. Increase k by 1.\n      k++;\n    }\n\n    // 7. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 22.1.3.25\n  obj.defineNativeMethod(\"sort\", 1, (context, [comparefn]) => {\n    // 1. Let obj be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"sort\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"sort\"), comparefn];\n      AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        Value,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n      // context is returned instead of O at the end of this method\n      // so we do the same here\n      return context;\n    }\n\n    // 2. Let len be ? ToLength(? Get(obj, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // Within this specification of the sort method, an object, obj, is said to be sparse if the following algorithm returns true:\n    let isSparse = () => {\n      // 1.For each integer i in the range 0≤i< len\n      for (let i = 0; i < len; i++) {\n        // a.Let elem be obj.[[GetOwnProperty]](! ToString(i)).\n        let elem = O.$GetOwnProperty(i.toString());\n        // b.If elem is undefined, return true.\n        if (elem === undefined) return true;\n        Properties.ThrowIfMightHaveBeenDeleted(elem);\n      }\n      // 2.Return false.\n      return false;\n    };\n    let sparse = isSparse();\n\n    // Let proto be obj.[[GetPrototypeOf]]().\n    let proto = O.$GetPrototypeOf();\n\n    // If proto is not null\n    if (!(proto instanceof NullValue)) {\n      // and there exists an integer j such that all of the conditions below are satisfied then the sort order is implementation-defined:\n      for (let j = 0; j < len; j++) {\n        // HasProperty(proto, ToString(j)) is true.\n        if (\n          HasProperty(realm, proto, j.toString()) &&\n          // obj is sparse\n          sparse\n        )\n          // We abord when the result of the sort is implementation defined.\n          throw Error(\"Implentation defined behavior detected\");\n      }\n    }\n\n    // The sort order is also implementation defined if obj is sparse and any of the following conditions are true:\n    if (sparse) {\n      // IsExtensible(obj) is false.\n      if (!IsExtensible(realm, O)) throw Error(\"Implementation defined behavior, Array is both sparse and extensible\");\n      // Any integer index property of obj whose name is a nonnegative integer less than len\n      for (let j = 0; j < len; j++) {\n        // is a data property whose [[Configurable]] attribute is false.\n        let prop = O.$GetOwnProperty(j.toString());\n        if (prop !== undefined && !prop.throwIfNotConcrete(realm).configurable) {\n          Properties.ThrowIfMightHaveBeenDeleted(prop);\n          throw Error(\n            \"Implementation defined behavior :  Array is sparse and it's prototype has some numbered properties\"\n          );\n        }\n      }\n    }\n\n    // Any integer index property of obj whose name is a nonnegative integer less than len\n    for (let j = 0; j < len; j++) {\n      //is a data property whose [[writable]] attribute is false.\n      let prop = O.$GetOwnProperty(j.toString());\n      if (prop !== undefined && !prop.throwIfNotConcrete(realm).writable) {\n        Properties.ThrowIfMightHaveBeenDeleted(prop);\n        throw Error(\"Implementation defined behavior : property \" + j.toString() + \"is non writable : \");\n      }\n    }\n\n    // The SortCompare abstract operation is called with two arguments x and y. It also has access to the comparefn\n    // argument passed to the current invocation of the sort method. The following steps are taken:\n\n    // 22.1.3.25.1 Runtime Semantics: SortCompare( x, y )#\n    let SortCompare = (x, y) => {\n      x = x.throwIfNotConcrete();\n      y = y.throwIfNotConcrete();\n      // 1. If x and y are both undefined, return +0.\n      if (x instanceof UndefinedValue && y instanceof UndefinedValue) {\n        return realm.intrinsics.zero;\n      }\n      // 2. If x is undefined, return 1.\n      if (x instanceof UndefinedValue) {\n        return new NumberValue(realm, 1);\n      }\n      // 3. If y is undefined, return -1.\n      if (y instanceof UndefinedValue) {\n        return new NumberValue(realm, -1);\n      }\n      // 4. If the argument comparefn is not undefined, then\n      if (!comparefn.mightBeUndefined()) {\n        // a. Let v be ? ToNumber(? Call(comparefn, undefined, « x, y »)).\n        let v = To.ToNumber(realm, Call(realm, comparefn, new UndefinedValue(realm), [x, y]));\n        // b. If v is NaN, return +0.\n        if (isNaN(v)) return new NumberValue(realm, +0);\n        // c. Return v.\n        return new NumberValue(realm, v);\n      } else {\n        comparefn.throwIfNotConcrete();\n      }\n      // 5. Let xString be ? ToString(x).\n      let xString = new StringValue(realm, To.ToString(realm, x));\n      // 6. Let yString be ? ToString(y).\n      let yString = new StringValue(realm, To.ToString(realm, y));\n      // 7. Let xSmaller be the result of performing Abstract Relational Comparison xString < yString.\n      let xSmaller = AbstractRelationalComparison(realm, xString, yString, true, \"<\");\n      // 8. If xSmaller is true, return -1.\n      if (xSmaller.value) return new NumberValue(realm, -1);\n      // 9. Let ySmaller be the result of performing Abstract Relational Comparison yString < xString.\n      let ySmaller = AbstractRelationalComparison(realm, yString, xString, true, \"<\");\n      // 10. If ySmaller is true, return 1.\n      if (ySmaller.value) return new NumberValue(realm, 1);\n      // 11. Return +0.\n      return realm.intrinsics.zero;\n    };\n\n    //1. Perform an implementation-dependent sequence of calls to the [[Get]] and [[Set]] internal methods of obj, to the DeletePropertyOrThrow and HasOwnProperty abstract operation with obj as the first argument, and to SortCompare (described below), such that:\n    //   The property key argument for each call to [[Get]], [[Set]], HasOwnProperty, or DeletePropertyOrThrow is the string representation of a nonnegative integer less than len.\n\n    // We leverage the underlying implementation sort by copying the element in a temp. array, sorting it, and\n    // transfering back the value inside the our array.\n\n    let arr = [];\n\n    // We need to adapt the comparefn function to match the expected types\n    let comparefn_ = (x, y) => {\n      invariant(x instanceof Value, \"Unexpected type\");\n      invariant(y instanceof Value, \"Unexpected type\");\n\n      let result_ = SortCompare(x, y);\n      let numb = To.ToNumber(realm, result_);\n      return numb;\n    };\n\n    for (let j = 0; j < len; j++) {\n      // The property key argument for each call to [[Get]], [[Set]], HasOwnProperty, or DeletePropertyOrThrow is the string representation of a nonnegative integer less than len.\n      if (!HasOwnProperty(realm, O, j.toString())) continue;\n      // The arguments for calls to SortCompare are values returned by a previous call to the [[Get]] internal method,\n      // unless the properties accessed by those previous calls did not exist according to HasOwnProperty.\n\n      // -- Important : We rely on the fact that the underlying sort implementation respect the standard for the following 3 properties\n      // If both perspective arguments to SortCompare correspond to non-existent properties,\n      // use +0 instead of calling SortCompare. If only the first perspective argument is non-existent use +1.\n      // If only the second perspective argument is non-existent use -1.\n      let val = O.$Get(j.toString(), O);\n      arr[j] = val;\n    }\n\n    arr.sort(comparefn_);\n\n    //Apply the permutation back to the original array.\n    for (let j = 0; j < len; j++) {\n      if (arr.hasOwnProperty(j.toString())) {\n        let ok = O.$Set(j.toString(), arr[j], O);\n        // If any [[Set]] call returns false a TypeError exception is thrown.\n        if (!ok) throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"[[Set]] returned false\");\n      } else {\n        // If obj is not sparse then DeletePropertyOrThrow must not be called.\n        invariant(sparse);\n        Properties.DeletePropertyOrThrow(realm, O.throwIfNotConcreteObject(), j.toString());\n      }\n    }\n    // If an abrupt completion is returned from any of these operations, it is immediately returned as the value of this function.\n\n    // 2. Return obj;\n    return context;\n  });\n\n  // ECMA262 22.1.3.26\n  obj.defineNativeMethod(\"splice\", 2, (context, [start, deleteCount, ...items], argLength) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"splice\") === undefined\n    ) {\n      let args = [O, new StringValue(realm, \"splice\"), start];\n      if (deleteCount) {\n        args.push(deleteCount);\n      }\n      if (items && items.length > 0) {\n        args.push(...items);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        ArrayValue,\n        args,\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. Let relativeStart be ? ToInteger(start).\n    let relativeStart = To.ToInteger(realm, start);\n\n    // 4. If relativeStart < 0, let actualStart be max((len + relativeStart), 0); else let actualStart be min(relativeStart, len).\n    let actualStart = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);\n\n    let insertCount;\n    let actualDeleteCount;\n\n    // 5. If the number of actual arguments is 0, then\n    if (argLength === 0) {\n      // a. Let insertCount be 0.\n      insertCount = 0;\n\n      // b. Let actualDeleteCount be 0.\n      actualDeleteCount = 0;\n    } else if (argLength === 1) {\n      // 6. Else if the number of actual arguments is 1, then\n      // a. Let insertCount be 0.\n      insertCount = 0;\n\n      // b. Let actualDeleteCount be len - actualStart.\n      actualDeleteCount = len - actualStart;\n    } else {\n      // 7. Else,\n      // a. Let insertCount be the number of actual arguments minus 2.\n      insertCount = argLength - 2;\n\n      // b. Let dc be ? ToInteger(deleteCount).\n      let dc = To.ToInteger(realm, deleteCount);\n\n      // c. Let actualDeleteCount be min(max(dc, 0), len - actualStart).\n      actualDeleteCount = Math.min(Math.max(dc, 0), len - actualStart);\n    }\n\n    // 8. If len+insertCount-actualDeleteCount > 2^53-1, throw a TypeError exception.\n    if (len + insertCount - actualDeleteCount > Math.pow(2, 53) - 1) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"the item count is too damn high\");\n    }\n\n    // 9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n    let A = Create.ArraySpeciesCreate(realm, O.throwIfNotConcreteObject(), actualDeleteCount);\n\n    // 10. Let k be 0.\n    let k = 0;\n\n    // 11. Repeat, while k < actualDeleteCount\n    while (k < actualDeleteCount) {\n      // a. Let from be ! ToString(actualStart+k).\n      let frm = new StringValue(realm, actualStart + k + \"\");\n\n      // b. Let fromPresent be ? HasProperty(O, from).\n      let fromPresent = HasProperty(realm, O, frm);\n\n      // c. If fromPresent is true, then\n      if (fromPresent) {\n        // i. Let fromValue be ? Get(O, from).\n        let fromValue = Get(realm, O, frm);\n\n        // ii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(k), fromValue).\n        Create.CreateDataPropertyOrThrow(realm, A, new StringValue(realm, k + \"\"), fromValue);\n      }\n\n      // d. Increment k by 1.\n      k++;\n    }\n\n    // 12. Perform ? Set(A, \"length\", actualDeleteCount, true).\n    Properties.Set(realm, A, \"length\", new NumberValue(realm, actualDeleteCount), true);\n\n    // 13. Let items be a List whose elements are, in left to right order, the portion of the actual argument\n    //     list starting with the third argument. The list is empty if fewer than three arguments were passed.\n    items;\n\n    // 14. Let itemCount be the number of elements in items.\n    let itemCount = items.length;\n\n    // 15. If itemCount < actualDeleteCount, then\n    if (itemCount < actualDeleteCount) {\n      // a. Let k be actualStart.\n      k = actualStart;\n\n      // b. Repeat, while k < (len - actualDeleteCount)\n      while (k < len - actualDeleteCount) {\n        // i. Let from be ! ToString(k+actualDeleteCount).\n        let frm = new StringValue(realm, k + actualDeleteCount + \"\");\n\n        // ii. Let to be ! ToString(k+itemCount).\n        let to = new StringValue(realm, k + itemCount + \"\");\n\n        // iii. Let fromPresent be ? HasProperty(O, from).\n        let fromPresent = HasProperty(realm, O, frm);\n\n        // iv. If fromPresent is true, then\n        if (fromPresent) {\n          // 1. Let fromValue be ? Get(O, from).\n          let fromValue = Get(realm, O, frm);\n\n          // 2. Perform ? Set(O, to, fromValue, true).\n          Properties.Set(realm, O, to, fromValue, true);\n        } else {\n          // v. Else fromPresent is false,\n          // 1. Perform ? DeletePropertyOrThrow(O, to).\n          Properties.DeletePropertyOrThrow(realm, O.throwIfNotConcreteObject(), to);\n        }\n\n        // vi. Increase k by 1.\n        k++;\n      }\n\n      // c. Let k be len.\n      k = len;\n\n      // d. Repeat, while k > (len - actualDeleteCount + itemCount)\n      while (k > len - actualDeleteCount + itemCount) {\n        // i. Perform ? DeletePropertyOrThrow(O, ! ToString(k-1)).\n        Properties.DeletePropertyOrThrow(realm, O.throwIfNotConcreteObject(), new StringValue(realm, k - 1 + \"\"));\n\n        // ii. Decrease k by 1.\n        k--;\n      }\n    } else if (itemCount > actualDeleteCount) {\n      // 16. Else if itemCount > actualDeleteCount, then\n      // a. Let k be (len - actualDeleteCount).\n      k = len - actualDeleteCount;\n\n      // b. Repeat, while k > actualStart\n      while (k > actualStart) {\n        // i. Let from be ! ToString(k + actualDeleteCount - 1).\n        let frm = new StringValue(realm, k + actualDeleteCount - 1 + \"\");\n\n        // ii. Let to be ! ToString(k + itemCount - 1).\n        let to = new StringValue(realm, k + itemCount - 1 + \"\");\n\n        // iii. Let fromPresent be ? HasProperty(O, from).\n        let fromPresent = HasProperty(realm, O, frm);\n\n        // iv. If fromPresent is true, then\n        if (fromPresent) {\n          // 1. Let fromValue be ? Get(O, from).\n          let fromValue = Get(realm, O, frm);\n\n          // 2. Perform ? Set(O, to, fromValue, true).\n          Properties.Set(realm, O, to, fromValue, true);\n        } else {\n          // v. Else fromPresent is false,\n          // 1. Perform ? DeletePropertyOrThrow(O, to).\n          Properties.DeletePropertyOrThrow(realm, O.throwIfNotConcreteObject(), to);\n        }\n\n        // vi. Decrease k by 1.\n        k--;\n      }\n    }\n\n    // 17. Let k be actualStart.\n    k = actualStart;\n\n    // 18. Repeat, while items is not empty\n    while (items.length) {\n      // a. Remove the first element from items and let E be the value of that element.\n      let E = items.shift();\n\n      // b. Perform ? Set(O, ! ToString(k), E, true).\n      Properties.Set(realm, O, new StringValue(realm, k + \"\"), E, true);\n\n      // c. Increase k by 1.\n      k++;\n    }\n\n    // 19. Perform ? Set(O, \"length\", len - actualDeleteCount + itemCount, true).\n    Properties.Set(realm, O, \"length\", new NumberValue(realm, len - actualDeleteCount + itemCount), true);\n\n    // 20. Return A.\n    return A;\n  });\n\n  // ECMA262 22.1.3.27\n  obj.defineNativeMethod(\"toLocaleString\", 0, context => {\n    // 1. Let array be ? ToObject(this value).\n    let array = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(array) &&\n      realm.isInPureScope() &&\n      array.$GetOwnProperty(\"toLocaleString\") === undefined\n    ) {\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        StringValue,\n        [array, new StringValue(realm, \"toLocaleString\")],\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(array, \"length\")).\n    let len = To.ToLength(realm, Get(realm, array, \"length\"));\n\n    // 3. Let separator be the String value for the list-separator String appropriate for the host environment's\n    //    current locale (this is derived in an implementation-defined way).\n    let separator = \",\";\n\n    // 4. If len is zero, return the empty String.\n    if (len === 0) return realm.intrinsics.emptyString;\n\n    // 5. Let firstElement be ? Get(array, \"0\").\n    let firstElement = Get(realm, array, \"0\");\n\n    // 6. If firstElement is undefined or null, then\n    let R: ?string;\n    if (HasSomeCompatibleType(firstElement, UndefinedValue, NullValue)) {\n      // a. Let R be the empty String.\n      R = \"\";\n    } else {\n      // 7. Else,\n      // a. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n      R = To.ToStringPartial(realm, Invoke(realm, firstElement, \"toLocaleString\"));\n    }\n\n    // 8. Let k be 1.\n    let k = 1;\n\n    // 9. Repeat, while k < len\n    while (k < len) {\n      // a. Let S be a String value produced by concatenating R and separator.\n      let S: string = R + separator;\n\n      // b. Let nextElement be ? Get(array, ! ToString(k)).\n      let nextElement = Get(realm, array, new StringValue(realm, k + \"\")).throwIfNotConcrete();\n\n      // c. If nextElement is undefined or null, then\n      if (HasSomeCompatibleType(nextElement, UndefinedValue, NullValue)) {\n        // i. Let R be the empty String.\n        R = \"\";\n      } else {\n        // d. Else,\n        // i. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n        R = To.ToStringPartial(realm, Invoke(realm, nextElement, \"toLocaleString\"));\n      }\n\n      // e. Let R be a String value produced by concatenating S and R.\n      R = S + R;\n\n      // f. Increase k by 1.\n      k++;\n    }\n\n    // 10. Return R.\n    return new StringValue(realm, R);\n  });\n\n  // ECMA262 22.1.3.28\n  obj.defineNativeProperty(\"toString\", realm.intrinsics.ArrayProto_toString);\n\n  // ECMA262 22.1.3.29\n  obj.defineNativeMethod(\"unshift\", 1, (context, items, argCount) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an array with widened numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"unshift\") === undefined\n    ) {\n      return AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        NumberValue,\n        [O, new StringValue(realm, \"unshift\")],\n        createOperationDescriptor(\"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\")\n      );\n    }\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = To.ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. Let argCount be the number of actual arguments.\n    argCount;\n\n    // 4. If argCount > 0, then\n    if (argCount > 0) {\n      // a. If len+argCount > 2^53-1, throw a TypeError exception.\n      if (len + argCount > Math.pow(2, 53) - 1) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"too damn high\");\n      }\n\n      // b. Let k be len.\n      let k = len;\n\n      // c. Repeat, while k > 0,\n      while (k > 0) {\n        // i. Let from be ! ToString(k-1).\n        let frm = new StringValue(realm, k - 1 + \"\");\n\n        // ii. Let to be ! ToString(k+argCount-1).\n        let to = new StringValue(realm, k + argCount - 1 + \"\");\n\n        // iv. Let fromPresent be ? HasProperty(O, from).\n        let fromPresent = HasProperty(realm, O, frm);\n\n        // v. If fromPresent is true, then\n        if (fromPresent) {\n          // 1. Let fromValue be ? Get(O, from).\n          let fromValue = Get(realm, O, frm);\n\n          // 2. Perform ? Set(O, to, fromValue, true).\n          Properties.Set(realm, O, to, fromValue, true);\n        } else {\n          // vi. Else fromPresent is false,\n          // 1. Perform ? DeletePropertyOrThrow(O, to).\n          Properties.DeletePropertyOrThrow(realm, O.throwIfNotConcreteObject(), to);\n        }\n\n        // vii. Decrease k by 1.\n        k--;\n      }\n\n      // e. Let j be 0.\n      let j = 0;\n\n      // f. Let items be a List whose elements are, in left to right order, the arguments that were passed to\n      //    this function invocation.\n      items;\n\n      // g. Repeat, while items is not empty\n      while (items.length) {\n        // i. Remove the first element from items and let E be the value of that element.\n        let E = items.shift();\n\n        // ii. Perform ? Set(O, ! ToString(j), E, true).\n        Properties.Set(realm, O, new StringValue(realm, j + \"\"), E, true);\n\n        // iii. Increase j by 1.\n        j++;\n      }\n    }\n\n    // 5. Perform ? Set(O, \"length\", len+argCount, true).\n    Properties.Set(realm, O, \"length\", new NumberValue(realm, len + argCount), true);\n\n    // 6. Return len+argCount.\n    return new NumberValue(realm, len + argCount);\n  });\n\n  // ECMA262 22.1.3.30\n  obj.defineNativeProperty(\"values\", realm.intrinsics.ArrayProto_values);\n\n  // ECMA262 22.1.3.32\n  {\n    // 1. Let unscopableList be ObjectCreate(null).\n    let unscopableList = Create.ObjectCreate(realm, realm.intrinsics.null);\n\n    // 2. Perform CreateDataProperty(unscopableList, \"copyWithin\", true).\n    Create.CreateDataProperty(realm, unscopableList, \"copyWithin\", realm.intrinsics.true);\n\n    // 3. Perform CreateDataProperty(unscopableList, \"entries\", true).\n    Create.CreateDataProperty(realm, unscopableList, \"entries\", realm.intrinsics.true);\n\n    // 4. Perform CreateDataProperty(unscopableList, \"fill\", true).\n    Create.CreateDataProperty(realm, unscopableList, \"fill\", realm.intrinsics.true);\n\n    // 5. Perform CreateDataProperty(unscopableList, \"find\", true).\n    Create.CreateDataProperty(realm, unscopableList, \"find\", realm.intrinsics.true);\n\n    // 6. Perform CreateDataProperty(unscopableList, \"findIndex\", true).\n    Create.CreateDataProperty(realm, unscopableList, \"findIndex\", realm.intrinsics.true);\n\n    // 7. Perform CreateDataProperty(unscopableList, \"includes\", true).\n    Create.CreateDataProperty(realm, unscopableList, \"includes\", realm.intrinsics.true);\n\n    // 8. Perform CreateDataProperty(unscopableList, \"keys\", true).\n    Create.CreateDataProperty(realm, unscopableList, \"keys\", realm.intrinsics.true);\n\n    // 9. Perform CreateDataProperty(unscopableList, \"values\", true).\n    Create.CreateDataProperty(realm, unscopableList, \"values\", realm.intrinsics.true);\n\n    // 10. Assert: Each of the above calls will return true.\n\n    // 11. Return unscopableList.\n    obj.defineNativeProperty(realm.intrinsics.SymbolUnscopables, unscopableList, {\n      writable: false,\n    });\n  }\n}\n"],"file":"ArrayPrototype.js"}