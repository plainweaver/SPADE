{"version":3,"sources":["../../../src/intrinsics/ecma262/decodeURI.js"],"names":["realm","name","NativeFunctionValue","context","_encodedURI","argCount","NewTarget","encodedURI","createErrorThrowCompletion","intrinsics","TypeError","throwIfNotConcrete","uriString","To","ToString","StringValue","decodeURI","e","URIError","message"],"mappings":";;;;;;;AAYA;;AAEA;;AAdA;;;;;;;;;AASA;AAOe,kBAASA,KAAT,EAA4C;AACzD;AACA,MAAIC,IAAI,GAAG,WAAX;AACA,SAAO,IAAIC,0BAAJ,CAAwBF,KAAxB,EAA+BC,IAA/B,EAAqCA,IAArC,EAA2C,CAA3C,EAA8C,CAACE,OAAD,EAAU,CAACC,WAAD,CAAV,EAAyBC,QAAzB,EAAmCC,SAAnC,KAAiD;AACpG,QAAIC,UAAU,GAAGH,WAAjB;AACA,QAAIE,SAAJ,EAAe,MAAMN,KAAK,CAACQ,0BAAN,CAAiCR,KAAK,CAACS,UAAN,CAAiBC,SAAlD,EAA8D,GAAET,IAAK,uBAArE,CAAN;AAEfM,IAAAA,UAAU,GAAGA,UAAU,CAACI,kBAAX,EAAb,CAJoG,CAKpG;;AACA,QAAIC,SAAS,GAAGC,eAAGC,QAAH,CAAYd,KAAZ,EAAmBO,UAAnB,CAAhB,CANoG,CAOpG;AACA;;;AACA,QAAI;AACF,aAAO,IAAIQ,kBAAJ,CAAgBf,KAAhB,EAAuBgB,SAAS,CAACJ,SAAD,CAAhC,CAAP;AACD,KAFD,CAEE,OAAOK,CAAP,EAAU;AACV,YAAMjB,KAAK,CAACQ,0BAAN,CAAiCR,KAAK,CAACS,UAAN,CAAiBS,QAAlD,EAA4DD,CAAC,CAACE,OAA9D,CAAN;AACD;AACF,GAdM,CAAP;AAeD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { StringValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 18.2.6.2\n  let name = \"decodeURI\";\n  return new NativeFunctionValue(realm, name, name, 1, (context, [_encodedURI], argCount, NewTarget) => {\n    let encodedURI = _encodedURI;\n    if (NewTarget) throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, `${name} is not a constructor`);\n\n    encodedURI = encodedURI.throwIfNotConcrete();\n    // 1. Let uriString be ? ToString(encodedURI).\n    let uriString = To.ToString(realm, encodedURI);\n    // 2. Let reservedURISet be a String containing one instance of each code unit valid in uriReserved plus \"#\".\n    // 3. Return ? Decode(uriString, reservedURISet).\n    try {\n      return new StringValue(realm, decodeURI(uriString));\n    } catch (e) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.URIError, e.message);\n    }\n  });\n}\n"],"file":"decodeURI.js"}