{"version":3,"sources":["../../../src/intrinsics/ecma262/RegExpPrototype.js"],"names":["InternalHasFlag","realm","context","flag","R","throwIfNotConcrete","ObjectValue","createErrorThrowCompletion","intrinsics","TypeError","$OriginalFlags","RegExpPrototype","undefined","flags","indexOf","true","false","obj","defineNativeMethod","string","$RegExpMatcher","S","To","ToStringPartial","defineNativeGetter","result","global","ToBooleanPartial","ignoreCase","multiline","unicode","sticky","StringValue","SymbolMatch","rx","fullUnicode","Properties","Set","zero","A","Create","ArrayCreate","n","NullValue","null","matchStr","status","CreateDataProperty","ToString","NumberValue","thisIndex","ToLength","nextIndex","SymbolReplace","_replaceValue","replaceValue","lengthS","length","functionalReplace","results","done","push","accumulatedResult","nextSourcePosition","nCaptures","Math","max","matched","matchLength","position","ToInteger","min","captures","capN","mightBeUndefined","replacement","replacerArgs","capture","concat","replValue","value","substr","SymbolSearch","previousLastIndex","$OriginalSource","src","SymbolSplit","limit","C","RegExp","unicodeMatching","newFlags","splitter","throwIfNotConcreteObject","lengthA","lim","UndefinedValue","pow","ToUint32","size","p","z","q","e","T","numberOfCaptures","i","nextCapture","match","BooleanValue","pattern"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport invariant from \"../../invariant.js\";\nimport {\n  BooleanValue,\n  StringValue,\n  ObjectValue,\n  NullValue,\n  NumberValue,\n  UndefinedValue,\n  Value,\n} from \"../../values/index.js\";\nimport { SameValue } from \"../../methods/abstract.js\";\nimport { Call } from \"../../methods/call.js\";\nimport { Construct, SpeciesConstructor } from \"../../methods/construct.js\";\nimport { Get, GetSubstitution } from \"../../methods/get.js\";\nimport { Create, Properties, To } from \"../../singletons.js\";\nimport { IsCallable } from \"../../methods/is.js\";\nimport { RegExpBuiltinExec, RegExpExec, EscapeRegExpPattern, AdvanceStringIndex } from \"../../methods/regexp.js\";\n\nfunction InternalHasFlag(realm: Realm, context: Value, flag: string): Value {\n  // 1. Let R be the this value.\n  let R = context.throwIfNotConcrete();\n\n  // 2. If Type(R) is not Object, throw a TypeError exception.\n  if (!(R instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(R) is not an object\");\n  }\n\n  // 3. If R does not have an [[OriginalFlags]] internal slot, throw a TypeError exception.\n  if (typeof R.$OriginalFlags !== \"string\") {\n    // a. If SameValue(R, %RegExpPrototype%) is true, return undefined.\n    if (SameValue(realm, R, realm.intrinsics.RegExpPrototype)) {\n      return realm.intrinsics.undefined;\n    } else {\n      // b. Otherwise, throw a TypeError exception.\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"R does not have an [[OriginalFlags]] internal slot\"\n      );\n    }\n  }\n\n  // 4. Let flags be the value of R's [[OriginalFlags]] internal slot.\n  let flags = R.$OriginalFlags;\n\n  // 5. If flags contains the code unit \"g\", return true.\n  if (flags.indexOf(flag) >= 0) {\n    return realm.intrinsics.true;\n  }\n\n  // 6. Return false.\n  return realm.intrinsics.false;\n}\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 21.2.5.2\n  obj.defineNativeMethod(\"exec\", 1, (context, [string]) => {\n    // 1. Let R be the this value.\n    let R = context.throwIfNotConcrete();\n\n    // 2. If Type(R) is not Object, throw a TypeError exception.\n    if (!(R instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(R) is not an object\");\n    }\n\n    // 3. If R does not have a [[RegExpMatcher]] internal slot, throw a TypeError exception.\n    if (R.$RegExpMatcher === undefined) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"R does not have a [[RegExpMatcher]] internal slot\"\n      );\n    }\n\n    // 4. Let S be ? ToString(string).\n    let S = To.ToStringPartial(realm, string);\n\n    // 5. Return ? RegExpBuiltinExec(R, S).\n    return RegExpBuiltinExec(realm, R, S);\n  });\n\n  // ECMA262 21.2.5.3\n  obj.defineNativeGetter(\"flags\", context => {\n    // 1. Let R be the this value.\n    let R = context.throwIfNotConcrete();\n\n    // 2. If Type(R) is not Object, throw a TypeError exception.\n    if (!(R instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(R) is not an object\");\n    }\n\n    // 3. Let result be the empty String.\n    let result = \"\";\n\n    // 4. Let global be ToBoolean(? Get(R, \"global\")).\n    let global = To.ToBooleanPartial(realm, Get(realm, R, \"global\"));\n\n    // 5. If global is true, append \"g\" as the last code unit of result.\n    if (global) result += \"g\";\n\n    // 6. Let ignoreCase be ToBoolean(? Get(R, \"ignoreCase\")).\n    let ignoreCase = To.ToBooleanPartial(realm, Get(realm, R, \"ignoreCase\"));\n\n    // 7. If ignoreCase is true, append \"i\" as the last code unit of result.\n    if (ignoreCase) result += \"i\";\n\n    // 8. Let multiline be ToBoolean(? Get(R, \"multiline\")).\n    let multiline = To.ToBooleanPartial(realm, Get(realm, R, \"multiline\"));\n\n    // 9. If multiline is true, append \"m\" as the last code unit of result.\n    if (multiline) result += \"m\";\n\n    // 10. Let unicode be ToBoolean(? Get(R, \"unicode\")).\n    let unicode = To.ToBooleanPartial(realm, Get(realm, R, \"unicode\"));\n\n    // 11. If unicode is true, append \"u\" as the last code unit of result.\n    if (unicode) result += \"u\";\n\n    // 12. Let sticky be ToBoolean(? Get(R, \"sticky\")).\n    let sticky = To.ToBooleanPartial(realm, Get(realm, R, \"sticky\"));\n\n    // 13. If sticky is true, append \"y\" as the last code unit of result.\n    if (sticky) result += \"y\";\n\n    // 14. Return result.\n    return new StringValue(realm, result);\n  });\n\n  // ECMA262 21.2.5.4\n  obj.defineNativeGetter(\"global\", context => {\n    return InternalHasFlag(realm, context, \"g\");\n  });\n\n  // ECMA262 21.2.5.5\n  obj.defineNativeGetter(\"ignoreCase\", context => {\n    return InternalHasFlag(realm, context, \"i\");\n  });\n\n  // ECMA262 21.2.5.6\n  obj.defineNativeMethod(realm.intrinsics.SymbolMatch, 1, (context, [string]) => {\n    // 1. Let rx be the this value.\n    let rx = context.throwIfNotConcrete();\n\n    // 2. If Type(rx) is not Object, throw a TypeError exception.\n    if (!(rx instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(R) is not an object\");\n    }\n\n    // 3. Let S be ? ToString(string).\n    let S = To.ToStringPartial(realm, string);\n\n    // 4. Let global be ToBoolean(? Get(rx, \"global\")).\n    let global = To.ToBooleanPartial(realm, Get(realm, rx, \"global\"));\n\n    // 5. If global is false, then\n    if (global === false) {\n      // a. Return ? RegExpExec(rx, S).\n      return RegExpExec(realm, rx, S);\n    } else {\n      // 6. Else global is true,\n      // a. Let fullUnicode be ToBoolean(? Get(rx, \"unicode\")).\n      let fullUnicode = To.ToBooleanPartial(realm, Get(realm, rx, \"unicode\"));\n\n      // b. Perform ? Set(rx, \"lastIndex\", 0, true).\n      Properties.Set(realm, rx, \"lastIndex\", realm.intrinsics.zero, true);\n\n      // c. Let A be ArrayCreate(0).\n      let A = Create.ArrayCreate(realm, 0);\n\n      // d. Let n be 0.\n      let n = 0;\n\n      // e. Repeat,\n      while (true) {\n        // i. Let result be ? RegExpExec(rx, S).\n        let result = RegExpExec(realm, rx, S);\n\n        // ii. If result is null, then\n        if (result instanceof NullValue) {\n          // 1. If n=0, return null.\n          if (n === 0) {\n            return realm.intrinsics.null;\n          } else {\n            // 2. Else, return A.\n            return A;\n          }\n        } else {\n          // iii. Else result is not null,\n          // 1. Let matchStr be ? ToString(? Get(result, \"0\")).\n          let matchStr = To.ToStringPartial(realm, Get(realm, result, \"0\"));\n\n          // 2. Let status be CreateDataProperty(A, ! ToString(n), matchStr).\n          let status = Create.CreateDataProperty(\n            realm,\n            A,\n            To.ToString(realm, new NumberValue(realm, n)),\n            new StringValue(realm, matchStr)\n          );\n\n          // 3. Assert: status is true.\n          invariant(status === true, \"status is true\");\n\n          // 4. If matchStr is the empty String, then\n          if (matchStr === \"\") {\n            // a. Let thisIndex be ? ToLength(? Get(rx, \"lastIndex\")).\n            let thisIndex = To.ToLength(realm, Get(realm, rx, \"lastIndex\"));\n\n            // b. Let nextIndex be AdvanceStringIndex(S, thisIndex, fullUnicode).\n            let nextIndex = AdvanceStringIndex(realm, S, thisIndex, fullUnicode);\n\n            // c .Perform ? Set(rx, \"lastIndex\", nextIndex, true).\n            Properties.Set(realm, rx, \"lastIndex\", new NumberValue(realm, nextIndex), true);\n          }\n\n          // 5. Increment n.\n          n += 1;\n        }\n      }\n\n      invariant(false);\n    }\n  });\n\n  // ECMA262 21.2.5.7\n  obj.defineNativeGetter(\"multiline\", context => {\n    return InternalHasFlag(realm, context, \"m\");\n  });\n\n  // ECMA262 21.2.5.8\n  obj.defineNativeMethod(realm.intrinsics.SymbolReplace, 2, (context, [string, _replaceValue]) => {\n    let replaceValue = _replaceValue;\n    // 1. Let rx be the this value.\n    let rx = context.throwIfNotConcrete();\n\n    // 2. If Type(rx) is not Object, throw a TypeError exception.\n    if (!(rx instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(R) is not an object\");\n    }\n\n    // 3. Let S be ? ToString(string).\n    let S = To.ToStringPartial(realm, string);\n\n    // 4. Let lengthS be the number of code unit elements in S.\n    let lengthS = S.length;\n\n    // 5. Let functionalReplace be IsCallable(replaceValue).\n    let functionalReplace = IsCallable(realm, replaceValue);\n\n    // 6. If functionalReplace is false, then\n    if (functionalReplace === false) {\n      // a. Let replaceValue be ? ToString(replaceValue).\n      replaceValue = new StringValue(realm, To.ToStringPartial(realm, replaceValue));\n    }\n\n    // 7. Let global be ToBoolean(? Get(rx, \"global\")).\n    let global = To.ToBooleanPartial(realm, Get(realm, rx, \"global\"));\n\n    let fullUnicode;\n    // 8. If global is true, then\n    if (global === true) {\n      // a. Let fullUnicode be ToBoolean(? Get(rx, \"unicode\")).\n      fullUnicode = To.ToBooleanPartial(realm, Get(realm, rx, \"unicode\"));\n\n      // b. Perform ? Set(rx, \"lastIndex\", 0, true).\n      Properties.Set(realm, rx, \"lastIndex\", realm.intrinsics.zero, true);\n    }\n\n    // 9. Let results be a new empty List.\n    let results = [];\n\n    // 10. Let done be false.\n    let done = false;\n\n    // 11. Repeat, while done is false\n    while (done === false) {\n      // a. Let result be ? RegExpExec(rx, S).\n      let result = RegExpExec(realm, rx, S);\n\n      // b. If result is null, set done to true.\n      if (result instanceof NullValue) {\n        done = true;\n      } else {\n        // c. Else result is not null,\n        // i. Append result to the end of results.\n        results.push(result);\n\n        // ii. If global is false, set done to true.\n        if (global === false) {\n          done = true;\n        } else {\n          // iii. Else,\n          invariant(fullUnicode !== undefined);\n\n          // 1. Let matchStr be ? ToString(? Get(result, \"0\")).\n          let matchStr = To.ToStringPartial(realm, Get(realm, result, \"0\"));\n\n          // 2. If matchStr is the empty String, then\n          if (matchStr === \"\") {\n            // a. Let thisIndex be ? ToLength(? Get(rx, \"lastIndex\")).\n            let thisIndex = To.ToLength(realm, Get(realm, rx, \"lastIndex\"));\n\n            // b. Let nextIndex be AdvanceStringIndex(S, thisIndex, fullUnicode).\n            let nextIndex = AdvanceStringIndex(realm, S, thisIndex, fullUnicode);\n\n            // c. Perform ? Set(rx, \"lastIndex\", nextIndex, true).\n            Properties.Set(realm, rx, \"lastIndex\", new NumberValue(realm, nextIndex), true);\n          }\n        }\n      }\n    }\n\n    // 12. Let accumulatedResult be the empty String value.\n    let accumulatedResult = \"\";\n\n    // 13. Let nextSourcePosition be 0.\n    let nextSourcePosition = 0;\n\n    // 14. Repeat, for each result in results,\n    for (let result of results) {\n      // a. Let nCaptures be ? ToLength(? Get(result, \"length\")).\n      let nCaptures = To.ToLength(realm, Get(realm, result, \"length\"));\n\n      // b. Let nCaptures be max(nCaptures - 1, 0).\n      nCaptures = Math.max(nCaptures - 1, 0);\n\n      // c. Let matched be ? ToString(? Get(result, \"0\")).\n      let matched = To.ToStringPartial(realm, Get(realm, result, \"0\"));\n\n      // d. Let matchLength be the number of code units in matched.\n      let matchLength = matched.length;\n\n      // e. Let position be ? ToInteger(? Get(result, \"index\")).\n      let position = To.ToInteger(realm, Get(realm, result, \"index\"));\n\n      // f. Let position be max(min(position, lengthS), 0).\n      position = Math.max(Math.min(position, lengthS), 0);\n\n      // g. Let n be 1.\n      let n = 1;\n\n      // h. Let captures be a new empty List.\n      let captures = [];\n\n      // i. Repeat while n ≤ nCaptures\n      while (n <= nCaptures) {\n        // i. Let capN be ? Get(result, ! ToString(n)).\n        let capN = Get(realm, result, To.ToString(realm, new NumberValue(realm, n)));\n\n        // ii. If capN is not undefined, then\n        if (!capN.mightBeUndefined()) {\n          // 1. Let capN be ? ToString(capN).\n          capN = To.ToStringPartial(realm, capN);\n        } else {\n          capN.throwIfNotConcrete();\n          capN = undefined;\n        }\n\n        // iii. Append capN as the last element of captures.\n        captures.push(capN);\n\n        // iv. Let n be n+1.\n        n = n + 1;\n      }\n\n      let replacement;\n      // j. If functionalReplace is true, then\n      if (functionalReplace) {\n        // i. Let replacerArgs be « matched ».\n        let replacerArgs = [new StringValue(realm, matched)];\n\n        // ii. Append in list order the elements of captures to the end of the List replacerArgs.\n        for (let capture of captures) {\n          replacerArgs.push(capture === undefined ? realm.intrinsics.undefined : new StringValue(realm, capture));\n        }\n\n        // iii. Append position and S as the last two elements of replacerArgs.\n        replacerArgs = replacerArgs.concat([new NumberValue(realm, position), new StringValue(realm, S)]);\n\n        // iv. Let replValue be ? Call(replaceValue, undefined, replacerArgs).\n        let replValue = Call(realm, replaceValue, realm.intrinsics.undefined, replacerArgs);\n\n        // v. Let replacement be ? ToString(replValue).\n        replacement = To.ToStringPartial(realm, replValue);\n      } else {\n        // k. Else,\n        invariant(replaceValue instanceof StringValue);\n        // i. Let replacement be GetSubstitution(matched, S, position, captures, replaceValue).\n        replacement = GetSubstitution(realm, matched, S, position, captures, replaceValue.value);\n      }\n\n      // l. If position ≥ nextSourcePosition, then\n      if (position >= nextSourcePosition) {\n        // i. NOTE position should not normally move backwards. If it does, it is an indication of an ill-behaving RegExp subclass or use of an access triggered side-effect to change the global flag or other characteristics of rx. In such cases, the corresponding substitution is ignored.\n        // ii. Let accumulatedResult be the String formed by concatenating the code units of the current value of accumulatedResult with the substring of S consisting of the code units from nextSourcePosition (inclusive) up to position (exclusive) and with the code units of replacement.\n        accumulatedResult =\n          accumulatedResult + S.substr(nextSourcePosition, position - nextSourcePosition) + replacement;\n\n        // iii. Let nextSourcePosition be position + matchLength.\n        nextSourcePosition = position + matchLength;\n      }\n    }\n    // 15. If nextSourcePosition ≥ lengthS, return accumulatedResult.\n    if (nextSourcePosition >= lengthS) return new StringValue(realm, accumulatedResult);\n\n    // 16. Return the String formed by concatenating the code units of accumulatedResult with the substring of S consisting of the code units from nextSourcePosition (inclusive) up through the final code unit of S (inclusive).\n    return new StringValue(realm, accumulatedResult + S.substr(nextSourcePosition));\n  });\n\n  // ECMA262 21.2.5.9\n  obj.defineNativeMethod(realm.intrinsics.SymbolSearch, 1, (context, [string]) => {\n    // 1. Let rx be the this value.\n    let rx = context.throwIfNotConcrete();\n\n    // 2. If Type(rx) is not Object, throw a TypeError exception.\n    if (!(rx instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(R) is not an object\");\n    }\n\n    // 3. Let S be ? ToString(string).\n    let S = To.ToStringPartial(realm, string);\n\n    // 4. Let previousLastIndex be ? Get(rx, \"lastIndex\").\n    let previousLastIndex = Get(realm, rx, \"lastIndex\");\n\n    // 5. Perform ? Set(rx, \"lastIndex\", 0, true).\n    Properties.Set(realm, rx, \"lastIndex\", realm.intrinsics.zero, true);\n\n    // 6. Let result be ? RegExpExec(rx, S).\n    let result = RegExpExec(realm, rx, S);\n\n    // 7. Perform ? Set(rx, \"lastIndex\", previousLastIndex, true).\n    Properties.Set(realm, rx, \"lastIndex\", previousLastIndex, true);\n\n    // 8. If result is null, return -1.\n    if (result instanceof NullValue) return new NumberValue(realm, -1);\n\n    // 9. Return ? Get(result, \"index\").\n    return Get(realm, result, \"index\");\n  });\n\n  // ECMA262 21.2.5.10\n  obj.defineNativeGetter(\"source\", context => {\n    // 1. Let R be the this value.\n    let R = context.throwIfNotConcrete();\n\n    // 2. If Type(R) is not Object, throw a TypeError exception.\n    if (!(R instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(R) is not an object\");\n    }\n\n    // 3. If R does not have an [[OriginalSource]] internal slot, throw a TypeError exception.\n    if (typeof R.$OriginalSource !== \"string\") {\n      // a. If SameValue(R, %RegExpPrototype%) is true, return undefined.\n      if (SameValue(realm, R, realm.intrinsics.RegExpPrototype)) {\n        return new StringValue(realm, \"(?:)\");\n      } else {\n        // b. Otherwise, throw a TypeError exception.\n        throw realm.createErrorThrowCompletion(\n          realm.intrinsics.TypeError,\n          \"R does not have an [[OriginalSource]] internal slot\"\n        );\n      }\n    }\n\n    // 4. Assert: R has an [[OriginalFlags]] internal slot.\n    invariant(R.$OriginalFlags !== undefined, \"R has an [[OriginalFlags]] internal slot\");\n\n    // 5. Let src be R.[[OriginalSource]].\n    let src = R.$OriginalSource;\n    invariant(typeof src === \"string\");\n\n    // 6. Let flags be R.[[OriginalFlags]].\n    let flags = R.$OriginalFlags;\n    invariant(typeof flags === \"string\");\n\n    // 7. Return EscapeRegExpPattern(src, flags).\n    return new StringValue(realm, EscapeRegExpPattern(realm, src, flags));\n  });\n\n  // ECMA262 21.2.5.11\n  obj.defineNativeMethod(realm.intrinsics.SymbolSplit, 2, (context, [string, limit]) => {\n    // 1. Let rx be the this value.\n    let rx = context.throwIfNotConcrete();\n\n    // 2. If Type(rx) is not Object, throw a TypeError exception.\n    if (!(rx instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(rx) is not an object\");\n    }\n\n    // 3. Let S be ? ToString(string).\n    let S = To.ToStringPartial(realm, string);\n\n    // 4. Let C be ? SpeciesConstructor(rx, %RegExp%).\n    let C = SpeciesConstructor(realm, rx, realm.intrinsics.RegExp);\n\n    // 5. Let flags be ? ToString(? Get(rx, \"flags\")).\n    let flags = To.ToStringPartial(realm, Get(realm, rx, \"flags\"));\n\n    let unicodeMatching;\n    // 6. If flags contains \"u\", let unicodeMatching be true.\n    if (flags.indexOf(\"u\") >= 0) {\n      unicodeMatching = true;\n    } else {\n      // 7. Else, let unicodeMatching be false.\n      unicodeMatching = false;\n    }\n\n    let newFlags;\n    // 8. If flags contains \"y\", let newFlags be flags.\n    if (flags.indexOf(\"y\") >= 0) {\n      newFlags = flags;\n    } else {\n      // 9. Else, let newFlags be the string that is the concatenation of flags and \"y\".\n      newFlags = flags + \"y\";\n    }\n\n    // 10. Let splitter be ? Construct(C, « rx, newFlags »).\n    let splitter = Construct(realm, C, [rx, new StringValue(realm, newFlags)]).throwIfNotConcreteObject();\n\n    // 11. Let A be ArrayCreate(0).\n    let A = Create.ArrayCreate(realm, 0);\n\n    // 12. Let lengthA be 0.\n    let lengthA = 0;\n\n    // 13. If limit is undefined, let lim be 2^32-1; else let lim be ? ToUint32(limit).\n    let lim = limit instanceof UndefinedValue ? Math.pow(2, 32) - 1 : To.ToUint32(realm, limit.throwIfNotConcrete());\n\n    // 14. Let size be the number of elements in S.\n    let size = S.length;\n\n    // 15. Let p be 0.\n    let p = 0;\n\n    // 16. If lim = 0, return A.\n    if (lim === 0) return A;\n\n    // 17. If size = 0, then\n    if (size === 0) {\n      // a. Let z be ? RegExpExec(splitter, S).\n      let z = RegExpExec(realm, splitter, S);\n\n      // b. If z is not null, return A.\n      if (!(z instanceof NullValue)) return A;\n\n      // c. Perform ! CreateDataProperty(A, \"0\", S).\n      Create.CreateDataProperty(realm, A, \"0\", new StringValue(realm, S));\n\n      // d Return A.\n      return A;\n    }\n\n    // 18. Let q be p.\n    let q = p;\n\n    // 19. Repeat, while q < size\n    while (q < size) {\n      // a. Perform ? Set(splitter, \"lastIndex\", q, true).\n      Properties.Set(realm, splitter, \"lastIndex\", new NumberValue(realm, q), true);\n\n      // b. Let z be ? RegExpExec(splitter, S).\n      let z = RegExpExec(realm, splitter, S);\n\n      // c. If z is null, let q be AdvanceStringIndex(S, q, unicodeMatching).\n      if (z instanceof NullValue) {\n        q = AdvanceStringIndex(realm, S, q, unicodeMatching);\n      } else {\n        // d. Else z is not null,\n        // i. Let e be ? ToLength(? Get(splitter, \"lastIndex\")).\n        let e = To.ToLength(realm, Get(realm, splitter, \"lastIndex\"));\n\n        // ii. Let e be min(e, size).\n        e = Math.min(e, size);\n\n        // iii. If e = p, let q be AdvanceStringIndex(S, q, unicodeMatching).\n        if (e === p) {\n          q = AdvanceStringIndex(realm, S, q, unicodeMatching);\n        } else {\n          // iv. Else e ≠ p,\n          // 1. Let T be a String value equal to the substring of S consisting of the elements at indices p (inclusive) through q (exclusive).\n          let T = S.substr(p, q - p);\n\n          // 2. Perform ! CreateDataProperty(A, ! ToString(lengthA), T).\n          Create.CreateDataProperty(\n            realm,\n            A,\n            To.ToString(realm, new NumberValue(realm, lengthA)),\n            new StringValue(realm, T)\n          );\n\n          // 3. Let lengthA be lengthA + 1.\n          lengthA = lengthA + 1;\n\n          // 4. If lengthA = lim, return A.\n          if (lengthA === lim) return A;\n\n          // 5. Let p be e.\n          p = e;\n\n          // 6. Let numberOfCaptures be ? ToLength(? Get(z, \"length\")).\n          let numberOfCaptures = To.ToLength(realm, Get(realm, z, \"length\"));\n\n          // 7. Let numberOfCaptures be max(numberOfCaptures-1, 0).\n          numberOfCaptures = Math.max(numberOfCaptures - 1, 0);\n\n          // 8. Let i be 1.\n          let i = 1;\n\n          // 9. Repeat, while i ≤ numberOfCaptures,\n          while (i <= numberOfCaptures) {\n            // a. Let nextCapture be ? Get(z, ! ToString(i)).\n            let nextCapture = Get(realm, z, To.ToString(realm, new NumberValue(realm, i)));\n\n            // b. Perform ! CreateDataProperty(A, ! ToString(lengthA), nextCapture).\n            Create.CreateDataProperty(realm, A, To.ToString(realm, new NumberValue(realm, lengthA)), nextCapture);\n\n            // c. Let i be i + 1.\n            i = i + 1;\n\n            // d. Let lengthA be lengthA + 1.\n            lengthA = lengthA + 1;\n\n            // e. If lengthA = lim, return A.\n            if (lengthA === lim) return A;\n          }\n\n          // 10. Let q be p.\n          q = p;\n        }\n      }\n    }\n\n    // 20. Let T be a String value equal to the substring of S consisting of the elements at indices p (inclusive) through size (exclusive).\n    let T = S.substr(p, size - p);\n\n    // 21. Perform ! CreateDataProperty(A, ! ToString(lengthA), T).\n    Create.CreateDataProperty(realm, A, To.ToString(realm, new NumberValue(realm, lengthA)), new StringValue(realm, T));\n\n    // 22. Return A.\n    return A;\n  });\n\n  // ECMA262 21.2.5.12\n  obj.defineNativeGetter(\"sticky\", context => {\n    return InternalHasFlag(realm, context, \"y\");\n  });\n\n  // ECMA262 21.2.5.13\n  obj.defineNativeMethod(\"test\", 1, (context, [S]) => {\n    // 1. Let R be the this value.\n    let R = context.throwIfNotConcrete();\n\n    // 2. If Type(R) is not Object, throw a TypeError exception.\n    if (!(R instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(R) is not an object\");\n    }\n\n    // 3. Let string be ? ToString(S).\n    let string = To.ToStringPartial(realm, S);\n\n    // 4. Let match be ? RegExpExec(R, string).\n    let match = RegExpExec(realm, R, string);\n\n    // 5. If match is not null, return true; else return false.\n    return new BooleanValue(realm, !(match instanceof NullValue) ? true : false);\n  });\n\n  // ECMA262 21.2.5.14\n  obj.defineNativeMethod(\"toString\", 0, context => {\n    // 1. Let R be the this value.\n    let R = context.throwIfNotConcrete();\n\n    // 2. If Type(R) is not Object, throw a TypeError exception.\n    if (!(R instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(R) is not an object\");\n    }\n\n    // 3. Let pattern be ? ToString(? Get(R, \"source\")).\n    let pattern = To.ToStringPartial(realm, Get(realm, R, \"source\"));\n\n    // 4. Let flags be ? ToString(? Get(R, \"flags\")).\n    let flags = To.ToStringPartial(realm, Get(realm, R, \"flags\"));\n\n    // 5. Let result be the String value formed by concatenating \"/\", pattern, \"/\", and flags.\n    let result = \"/\" + pattern + \"/\" + flags;\n\n    // 6. Return result.\n    return new StringValue(realm, result);\n  });\n\n  // ECMA262 21.2.5.15\n  obj.defineNativeGetter(\"unicode\", context => {\n    return InternalHasFlag(realm, context, \"u\");\n  });\n}\n"],"file":"RegExpPrototype.js"}