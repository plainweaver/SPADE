{"version":3,"sources":["../../../src/intrinsics/ecma262/FunctionPrototype.js"],"names":["realm","obj","$Call","thisArgument","argsList","intrinsics","undefined","defineNativeProperty","zero","writable","emptyString","defineNativeMethod","func","thisArg","argList","createErrorThrowCompletion","TypeError","conditionalFunctionApply","condValue","consequentVal","alternateVal","evaluateWithAbstractConditional","evaluateForEffects","functionApply","argArray","NullValue","UndefinedValue","AbstractValue","kind","args","leftValue","rightValue","Create","CreateListFromArrayLike","context","Target","ObjectValue","F","Functions","BoundFunctionCreate","targetHasLength","StringValue","L","targetLen","mightBeNumber","throwIfNotConcreteNumber","To","ToInteger","Math","max","length","Properties","DefinePropertyOrThrow","PropertyDescriptor","value","NumberValue","enumerable","configurable","targetName","SetFunctionName","SymbolHasInstance","V","BooleanValue","_context","throwIfNotConcrete","NativeFunctionValue","name","FunctionValue"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { Functions, Properties } from \"../../singletons.js\";\nimport {\n  AbstractValue,\n  BooleanValue,\n  FunctionValue,\n  NativeFunctionValue,\n  NullValue,\n  NumberValue,\n  ObjectValue,\n  StringValue,\n  UndefinedValue,\n  Value,\n} from \"../../values/index.js\";\nimport { Call } from \"../../methods/call.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport { Get } from \"../../methods/get.js\";\nimport { IsCallable } from \"../../methods/is.js\";\nimport { HasOwnProperty, HasSomeCompatibleType } from \"../../methods/has.js\";\nimport { OrdinaryHasInstance } from \"../../methods/abstract.js\";\nimport invariant from \"../../invariant.js\";\nimport { PropertyDescriptor } from \"../../descriptors.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 19.2.3\n  obj.$Call = (thisArgument, argsList) => {\n    return realm.intrinsics.undefined;\n  };\n\n  // ECMA262 19.2.3\n  obj.defineNativeProperty(\"length\", realm.intrinsics.zero, { writable: false });\n\n  // ECMA262 19.2.3\n  obj.defineNativeProperty(\"name\", realm.intrinsics.emptyString, { writable: false });\n\n  // ECMA262 19.2.3.3\n  obj.defineNativeMethod(\"call\", 1, (func, [thisArg, ...argList]) => {\n    // 1. If IsCallable(func) is false, throw a TypeError exception.\n    if (IsCallable(realm, func) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not callable\");\n    }\n\n    // 2. Let argList be a new empty List.\n    // 3. If this method was called with more than one argument, then in left to right order,\n    //    starting with the second argument, append each argument as the last element of argList.\n    argList;\n\n    // TODO #1008 4. Perform PrepareForTailCall().\n\n    // 5. Return ? Call(func, thisArg, argList).\n    return Call(realm, func, thisArg, argList);\n  });\n\n  function conditionalFunctionApply(\n    func,\n    thisArg,\n    condValue: AbstractValue,\n    consequentVal: Value,\n    alternateVal: Value\n  ): Value {\n    return realm.evaluateWithAbstractConditional(\n      condValue,\n      () => {\n        return realm.evaluateForEffects(\n          () => functionApply(func, thisArg, consequentVal),\n          null,\n          \"conditionalFunctionApply consequent\"\n        );\n      },\n      () => {\n        return realm.evaluateForEffects(\n          () => functionApply(func, thisArg, alternateVal),\n          null,\n          \"conditionalFunctionApply alternate\"\n        );\n      }\n    );\n  }\n\n  function functionApply(func, thisArg, argArray) {\n    // 1. If IsCallable(func) is false, throw a TypeError exception.\n    if (IsCallable(realm, func) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not callable\");\n    }\n\n    // 2. If argArray is null or undefined, then\n    if (HasSomeCompatibleType(argArray, NullValue, UndefinedValue)) {\n      // TODO #1008 a. Perform PrepareForTailCall().\n\n      // b. Return ? Call(func, thisArg).\n      return Call(realm, func, thisArg);\n    }\n\n    if (argArray instanceof AbstractValue) {\n      if (argArray.kind === \"conditional\") {\n        let [condValue, consequentVal, alternateVal] = argArray.args;\n        invariant(condValue instanceof AbstractValue);\n        return conditionalFunctionApply(func, thisArg, condValue, consequentVal, alternateVal);\n      } else if (argArray.kind === \"||\") {\n        let [leftValue, rightValue] = argArray.args;\n        invariant(leftValue instanceof AbstractValue);\n        return conditionalFunctionApply(func, thisArg, leftValue, leftValue, rightValue);\n      } else if (argArray.kind === \"&&\") {\n        let [leftValue, rightValue] = argArray.args;\n        invariant(leftValue instanceof AbstractValue);\n        return conditionalFunctionApply(func, thisArg, leftValue, rightValue, leftValue);\n      }\n    }\n\n    // 3. Let argList be ? CreateListFromArrayLike(argArray).\n    let argList = Create.CreateListFromArrayLike(realm, argArray);\n\n    // TODO #1008 4. Perform PrepareForTailCall().\n\n    // 5. Return ? Call(func, thisArg, argList).\n    return Call(realm, func, thisArg, argList);\n  }\n\n  // ECMA262 19.2.3.1\n  obj.defineNativeMethod(\"apply\", 2, (func, [thisArg, argArray]) => functionApply(func, thisArg, argArray));\n\n  // ECMA262 19.2.3.2\n  obj.defineNativeMethod(\"bind\", 1, (context, [thisArg, ...args]) => {\n    // 1. Let Target be the realm value.\n    let Target = context;\n\n    // 2. If IsCallable(Target) is false, throw a TypeError exception.\n    if (IsCallable(realm, Target) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n    invariant(Target instanceof ObjectValue);\n\n    // 3. Let args be a new (possibly empty) List consisting of all of the argument values provided after thisArg in order.\n    args;\n\n    // 4. Let F be ? BoundFunctionCreate(Target, thisArg, args).\n    let F = Functions.BoundFunctionCreate(realm, Target, thisArg, args);\n\n    // 5. Let targetHasLength be ? HasOwnProperty(Target, \"length\").\n    let targetHasLength = HasOwnProperty(realm, Target, new StringValue(realm, \"length\"));\n\n    let L;\n\n    // 6. If targetHasLength is true, then\n    if (targetHasLength === true) {\n      // a. Let targetLen be ? Get(Target, \"length\").\n      let targetLen = Get(realm, Target, new StringValue(realm, \"length\"));\n\n      // b. If Type(targetLen) is not Number, let L be 0.\n      if (!targetLen.mightBeNumber()) {\n        L = 0;\n      } else {\n        // c. Else,\n        targetLen = targetLen.throwIfNotConcreteNumber();\n        // i. Let targetLen be ToInteger(targetLen).\n        targetLen = To.ToInteger(realm, targetLen);\n\n        // ii. Let L be the larger of 0 and the result of targetLen minus the number of elements of args.\n        L = Math.max(0, targetLen - args.length);\n      }\n    } else {\n      // 7. Else let L be 0.\n      L = 0;\n    }\n\n    // 8. Perform ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor {[[Value]]: L, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n    Properties.DefinePropertyOrThrow(\n      realm,\n      F,\n      \"length\",\n      new PropertyDescriptor({\n        value: new NumberValue(realm, L),\n        writable: false,\n        enumerable: false,\n        configurable: true,\n      })\n    );\n\n    // 9. Let targetName be ? Get(Target, \"name\").\n    let targetName = Get(realm, Target, new StringValue(realm, \"name\"));\n\n    // 10. If Type(targetName) is not String, let targetName be the empty string.\n    if (!(targetName instanceof StringValue)) targetName = realm.intrinsics.emptyString;\n\n    // 11. Perform SetFunctionName(F, targetName, \"bound\").\n    Functions.SetFunctionName(realm, F, targetName, \"bound\");\n\n    // 12. Return F.\n    return F;\n  });\n\n  // ECMA262 19.2.3.6\n  obj.defineNativeMethod(\n    realm.intrinsics.SymbolHasInstance,\n    1,\n    (context, [V]) => {\n      // 1. Let F be the this value.\n      let F = context;\n\n      // 2. Return ? OrdinaryHasInstance(F, V).\n      return new BooleanValue(realm, OrdinaryHasInstance(realm, F, V));\n    },\n    { writable: false, configurable: false }\n  );\n\n  // ECMA262 19.2.3.5\n  obj.defineNativeMethod(\"toString\", 0, _context => {\n    let context = _context.throwIfNotConcrete();\n    if (context instanceof NativeFunctionValue) {\n      let name = context.name;\n      if (name instanceof AbstractValue) {\n        return new StringValue(realm, `function () {[native code]}`);\n      } else {\n        invariant(typeof name === \"string\");\n        return new StringValue(realm, `function ${name}() { [native code] }`);\n      }\n    } else if (context instanceof FunctionValue) {\n      // TODO #1009: provide function source code\n      return new StringValue(realm, \"function () { }\");\n    } else {\n      // 3. Throw a TypeError exception.\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        new StringValue(realm, \"Function.prototype.toString is not generic\")\n      );\n    }\n  });\n}\n"],"file":"FunctionPrototype.js"}