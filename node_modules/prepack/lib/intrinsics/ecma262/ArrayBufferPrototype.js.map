{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayBufferPrototype.js"],"names":["realm","obj","defineNativeGetter","context","O","throwIfNotConcrete","ObjectValue","createErrorThrowCompletion","intrinsics","TypeError","length","$ArrayBufferByteLength","NumberValue","defineNativeMethod","start","end","len","relativeStart","To","ToInteger","first","Math","max","min","relativeEnd","UndefinedValue","final","newLen","ctor","ArrayBuffer","New","throwIfNotConcreteObject","fromBuf","$ArrayBufferData","toBuf","defineNativeProperty","SymbolToStringTag","StringValue","writable"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, StringValue, NumberValue, UndefinedValue } from \"../../values/index.js\";\nimport { Construct, CopyDataBlockBytes, IsDetachedBuffer, SameValue, SpeciesConstructor } from \"../../methods/index.js\";\nimport { To } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 24.1.4.1\n  obj.defineNativeGetter(\"byteLength\", context => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n    }\n\n    // 3. If O does not have an [[ArrayBufferData]] internal slot, throw a TypeError exception.\n    if (!(\"$ArrayBufferData\" in O)) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"O does not have an [[ArrayBufferData]] internal slot\"\n      );\n    }\n\n    // 4. If IsDetachedBuffer(O) is true, throw a TypeError exception.\n    if (IsDetachedBuffer(realm, O) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(O) is true\");\n    }\n\n    // 5. Let length be O.[[ArrayBufferByteLength]].\n    let length = O.$ArrayBufferByteLength;\n    invariant(typeof length === \"number\");\n\n    // 6. Return length.\n    return new NumberValue(realm, length);\n  });\n\n  // ECMA262 24.1.4.3\n  obj.defineNativeMethod(\"slice\", 2, (context, [start, end]) => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n    }\n\n    // 3. If O does not have an [[ArrayBufferData]] internal slot, throw a TypeError exception.\n    if (!(\"$ArrayBufferData\" in O)) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"O does not have an [[ArrayBufferData]] internal slot\"\n      );\n    }\n\n    // 4. If IsDetachedBuffer(O) is true, throw a TypeError exception.\n    if (IsDetachedBuffer(realm, O) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(O) is true\");\n    }\n\n    // 5. Let len be O.[[ArrayBufferByteLength]].\n    let len = O.$ArrayBufferByteLength;\n    invariant(typeof len === \"number\");\n\n    // 6. Let relativeStart be ? ToInteger(start).\n    let relativeStart = To.ToInteger(realm, start);\n\n    // 7. If relativeStart < 0, let first be max((len + relativeStart), 0); else let first be min(relativeStart, len).\n    let first = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);\n\n    // 8. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n    let relativeEnd = !end || end instanceof UndefinedValue ? len : To.ToInteger(realm, end.throwIfNotConcrete());\n\n    // 9. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).\n    let final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);\n\n    // 10. Let newLen be max(final-first, 0).\n    let newLen = Math.max(final - first, 0);\n\n    // 11. Let ctor be ? SpeciesConstructor(O, %ArrayBuffer%).\n    let ctor = SpeciesConstructor(realm, O, realm.intrinsics.ArrayBuffer);\n\n    // 12. Let New be ? Construct(ctor, « newLen »).\n    let New = Construct(realm, ctor, [new NumberValue(realm, newLen)]).throwIfNotConcreteObject();\n\n    // 13. If New does not have an [[ArrayBufferData]] internal slot, throw a TypeError exception.\n    if (!(\"$ArrayBufferData\" in New)) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"new does not have an [[ArrayBufferData]] internal slot\"\n      );\n    }\n\n    // 14. If IsDetachedBuffer(New) is true, throw a TypeError exception.\n    if (IsDetachedBuffer(realm, New) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(new) is true\");\n    }\n\n    // 15. If SameValue(New, O) is true, throw a TypeError exception.\n    if (SameValue(realm, New, O) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"SameValue(new, O) is true\");\n    }\n\n    // 16. If new.[[ArrayBufferByteLength]] < newLen, throw a TypeError exception.\n    if (typeof New.$ArrayBufferByteLength !== \"number\" || New.$ArrayBufferByteLength < newLen) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"new.[[ArrayBufferByteLength]] < newLen\");\n    }\n\n    // 17. NOTE: Side-effects of the above steps may have detached O.\n\n    // 18. If IsDetachedBuffer(O) is true, throw a TypeError exception.\n    if (IsDetachedBuffer(realm, O) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(O) is true\");\n    }\n\n    // 19. Let fromBuf be O.[[ArrayBufferData]].\n    let fromBuf = O.$ArrayBufferData;\n    invariant(fromBuf);\n\n    // 20. Let toBuf be New.[[ArrayBufferData]].\n    let toBuf = New.$ArrayBufferData;\n    invariant(toBuf);\n\n    // 21. Perform CopyDataBlockBytes(toBuf, 0, fromBuf, first, newLen).\n    CopyDataBlockBytes(realm, toBuf, 0, fromBuf, first, newLen);\n\n    // 22. Return New.\n    return New;\n  });\n\n  // ECMA262 24.1.4.4\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"ArrayBuffer\"), {\n    writable: false,\n  });\n}\n"],"file":"ArrayBufferPrototype.js"}