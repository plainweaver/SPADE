{"version":3,"sources":["../../../src/intrinsics/ecma262/Symbol.js"],"names":["realm","func","NativeFunctionValue","context","description","argCount","NewTarget","createErrorThrowCompletion","intrinsics","TypeError","descString","UndefinedValue","undefined","AbstractValue","To","ToStringPartial","StringValue","SymbolValue","defineNativeMethod","key","stringKey","e","globalSymbolRegistry","$Key","value","$Symbol","newSymbol","push","sym","defineNativeConstant","SymbolIsConcatSpreadable","SymbolSpecies","SymbolReplace","SymbolIterator","SymbolHasInstance","SymbolToPrimitive","SymbolToStringTag","SymbolUnscopables","SymbolMatch","SymbolSplit","SymbolSearch"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, NativeFunctionValue, StringValue, SymbolValue, UndefinedValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\nimport { SameValue } from \"../../methods/abstract.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 19.4.1.1\n  let func = new NativeFunctionValue(realm, \"Symbol\", \"Symbol\", 0, (context, [description], argCount, NewTarget) => {\n    // 1. If NewTarget is not undefined, throw a TypeError exception.\n    if (NewTarget) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. If description is undefined, let descString be undefined.\n    let descString;\n    if (!description || description instanceof UndefinedValue) {\n      descString = undefined;\n    } else if (description instanceof AbstractValue) {\n      descString = description;\n    } else {\n      // 3. Else, let descString be ? ToString(description).\n      descString = To.ToStringPartial(realm, description);\n      descString = new StringValue(realm, descString);\n    }\n    // 4. Return a new unique Symbol value whose [[Description]] value is descString.\n    return new SymbolValue(realm, descString);\n  });\n\n  // ECMA262 19.4.2.1\n  func.defineNativeMethod(\"for\", 1, (context, [key]) => {\n    // 1. Let stringKey be ? ToString(key).\n    let stringKey = To.ToStringPartial(realm, key);\n    stringKey = new StringValue(realm, stringKey);\n\n    // 2. For each element e of the GlobalSymbolRegistry List,\n    for (let e of realm.globalSymbolRegistry) {\n      // a. If SameValue(e.[[Key]], stringKey) is true, return e.[[Symbol]].\n      if (e.$Key === stringKey.value) {\n        return e.$Symbol;\n      }\n    }\n\n    // 3. Assert: GlobalSymbolRegistry does not currently contain an entry for stringKey.\n\n    // 4. Let newSymbol be a new unique Symbol value whose [[Description]] value is stringKey.\n    let newSymbol = new SymbolValue(realm, stringKey);\n\n    // 5. Append the Record { [[Key]]: stringKey, [[Symbol]]: newSymbol } to the GlobalSymbolRegistry List.\n    realm.globalSymbolRegistry.push({ $Key: stringKey.value, $Symbol: newSymbol });\n\n    // 6. Return newSymbol.\n    return newSymbol;\n  });\n\n  // ECMA262 19.4.2.2\n  func.defineNativeMethod(\"keyFor\", 1, (context, [sym]) => {\n    // 1. If Type(sym) is not Symbol, throw a TypeError exception.\n    if (!(sym instanceof SymbolValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(sym) is not Symbol\");\n    }\n\n    // 2. For each element e of the GlobalSymbolRegistry List (see 19.4.2.1),\n    for (let e of realm.globalSymbolRegistry) {\n      // a. If SameValue(e.[[Symbol]], sym) is true, return e.[[Key]].\n      if (SameValue(realm, e.$Symbol, sym) === true) {\n        return new StringValue(realm, e.$Key);\n      }\n    }\n\n    // 3. Assert: GlobalSymbolRegistry does not currently contain an entry for sym.\n\n    // 4. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 19.4.2.3\n  func.defineNativeConstant(\"isConcatSpreadable\", realm.intrinsics.SymbolIsConcatSpreadable);\n\n  // ECMA262 19.4.2.10\n  func.defineNativeConstant(\"species\", realm.intrinsics.SymbolSpecies);\n\n  // ECMA262 19.4.2.8\n  func.defineNativeConstant(\"replace\", realm.intrinsics.SymbolReplace);\n\n  // ECMA262 19.4.2.4\n  func.defineNativeConstant(\"iterator\", realm.intrinsics.SymbolIterator);\n\n  // ECMA262 19.4.2.2\n  func.defineNativeConstant(\"hasInstance\", realm.intrinsics.SymbolHasInstance);\n\n  // ECMA262 19.4.2.12\n  func.defineNativeConstant(\"toPrimitive\", realm.intrinsics.SymbolToPrimitive);\n\n  // ECMA262 19.4.2.13\n  func.defineNativeConstant(\"toStringTag\", realm.intrinsics.SymbolToStringTag);\n\n  // ECMA262 19.4.2.14\n  func.defineNativeConstant(\"unscopables\", realm.intrinsics.SymbolUnscopables);\n\n  // ECMA262 19.4.2.6\n  func.defineNativeConstant(\"match\", realm.intrinsics.SymbolMatch);\n\n  // ECMA262 19.4.2.11\n  func.defineNativeConstant(\"split\", realm.intrinsics.SymbolSplit);\n\n  // ECMA262 19.4.2.9\n  func.defineNativeConstant(\"search\", realm.intrinsics.SymbolSearch);\n\n  return func;\n}\n"],"file":"Symbol.js"}