{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayIteratorPrototype.js"],"names":["realm","obj","defineNativeMethod","context","O","throwIfNotConcrete","ObjectValue","createErrorThrowCompletion","intrinsics","TypeError","$IteratedObject","undefined","$ArrayIteratorNextIndex","$ArrayIterationKind","a","UndefinedValue","Create","CreateIterResultObject","index","value","itemKind","len","$TypedArrayName","$ArrayLength","To","ToLength","NumberValue","elementKey","StringValue","elementValue","result","CreateArrayFromList","defineNativeProperty","SymbolToStringTag","writable"],"mappings":";;;;;;;AAYA;;AACA;;AACA;;AACA;;;;AAfA;;;;;;;;;AASA;AAQe,kBAASA,KAAT,EAAuBC,GAAvB,EAA+C;AAC5D;AACAA,EAAAA,GAAG,CAACC,kBAAJ,CAAuB,MAAvB,EAA+B,CAA/B,EAAkCC,OAAO,IAAI;AAC3C;AACA,QAAIC,CAAC,GAAGD,OAAO,CAACE,kBAAR,EAAR,CAF2C,CAI3C;;AACA,QAAI,EAAED,CAAC,YAAYE,kBAAf,CAAJ,EAAiC;AAC/B,YAAMN,KAAK,CAACO,0BAAN,CAAiCP,KAAK,CAACQ,UAAN,CAAiBC,SAAlD,EAA6D,eAA7D,CAAN;AACD,KAP0C,CAS3C;;;AACA,QACEL,CAAC,CAACM,eAAF,KAAsBC,SAAtB,IACAP,CAAC,CAACQ,uBAAF,KAA8BD,SAD9B,IAEAP,CAAC,CAACS,mBAAF,KAA0BF,SAH5B,EAIE;AACA,YAAMX,KAAK,CAACO,0BAAN,CAAiCP,KAAK,CAACQ,UAAN,CAAiBC,SAAlD,EAA6D,2CAA7D,CAAN;AACD,KAhB0C,CAkB3C;;;AACA,QAAIK,CAAC,GAAGV,CAAC,CAACM,eAAV;AACA,4BAAUI,CAAC,YAAYR,kBAAb,IAA4BQ,CAAC,YAAYC,qBAAnD,EApB2C,CAsB3C;;AACA,QAAID,CAAC,YAAYC,qBAAjB,EAAiC;AAC/B,aAAOC,mBAAOC,sBAAP,CAA8BjB,KAA9B,EAAqCA,KAAK,CAACQ,UAAN,CAAiBG,SAAtD,EAAiE,IAAjE,CAAP;AACD,KAzB0C,CA2B3C;;;AACA,QAAIO,KAAK,GAAGd,CAAC,CAACQ,uBAAF,CAA0BO,KAAtC,CA5B2C,CA8B3C;;AACA,QAAIC,QAAQ,GAAGhB,CAAC,CAACS,mBAAjB,CA/B2C,CAiC3C;;AACA,QAAIQ,GAAJ;;AACA,QAAIP,CAAC,CAACQ,eAAN,EAAuB;AACrB;AACAD,MAAAA,GAAG,GAAGP,CAAC,CAACS,YAAR;AACA,8BAAU,OAAOF,GAAP,KAAe,QAAzB;AACD,KAJD,MAIO;AACL;AACA;AACAA,MAAAA,GAAG,GAAGG,eAAGC,QAAH,CAAYzB,KAAZ,EAAmB,cAAIA,KAAJ,EAAWc,CAAX,EAAc,QAAd,CAAnB,CAAN;AACD,KA3C0C,CA6C3C;;;AACA,QAAII,KAAK,IAAIG,GAAb,EAAkB;AAChB;AACAjB,MAAAA,CAAC,CAACM,eAAF,GAAoBV,KAAK,CAACQ,UAAN,CAAiBG,SAArC,CAFgB,CAIhB;;AACA,aAAOK,mBAAOC,sBAAP,CAA8BjB,KAA9B,EAAqCA,KAAK,CAACQ,UAAN,CAAiBG,SAAtD,EAAiE,IAAjE,CAAP;AACD,KApD0C,CAsD3C;;;AACAP,IAAAA,CAAC,CAACQ,uBAAF,GAA4B,IAAIc,kBAAJ,CAAgB1B,KAAhB,EAAuBkB,KAAK,GAAG,CAA/B,CAA5B,CAvD2C,CAyD3C;;AACA,QAAIE,QAAQ,KAAK,KAAjB,EAAwB;AACtB,aAAOJ,mBAAOC,sBAAP,CAA8BjB,KAA9B,EAAqC,IAAI0B,kBAAJ,CAAgB1B,KAAhB,EAAuBkB,KAAvB,CAArC,EAAoE,KAApE,CAAP;AACD,KA5D0C,CA8D3C;;;AACA,QAAIS,UAAU,GAAG,IAAIC,kBAAJ,CAAgB5B,KAAhB,EAAuBkB,KAAK,GAAG,EAA/B,CAAjB,CA/D2C,CAiE3C;;AACA,QAAIW,YAAY,GAAG,cAAI7B,KAAJ,EAAWc,CAAX,EAAca,UAAd,CAAnB,CAlE2C,CAoE3C;;AACA,QAAIG,MAAJ;;AACA,QAAIV,QAAQ,KAAK,OAAjB,EAA0B;AACxBU,MAAAA,MAAM,GAAGD,YAAT;AACD,KAFD,MAEO;AACL;AACA;AACA,8BAAUT,QAAQ,KAAK,WAAvB,EAAoC,oCAApC,EAHK,CAKL;;AACAU,MAAAA,MAAM,GAAGd,mBAAOe,mBAAP,CAA2B/B,KAA3B,EAAkC,CAAC,IAAI0B,kBAAJ,CAAgB1B,KAAhB,EAAuBkB,KAAvB,CAAD,EAAgCW,YAAhC,CAAlC,CAAT;AACD,KA/E0C,CAiF3C;;;AACA,WAAOb,mBAAOC,sBAAP,CAA8BjB,KAA9B,EAAqC8B,MAArC,EAA6C,KAA7C,CAAP;AACD,GAnFD,EAF4D,CAuF5D;;AACA7B,EAAAA,GAAG,CAAC+B,oBAAJ,CAAyBhC,KAAK,CAACQ,UAAN,CAAiByB,iBAA1C,EAA6D,IAAIL,kBAAJ,CAAgB5B,KAAhB,EAAuB,gBAAvB,CAA7D,EAAuG;AACrGkC,IAAAA,QAAQ,EAAE;AAD2F,GAAvG;AAGD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport { NumberValue, ObjectValue, UndefinedValue, StringValue } from \"../../values/index.js\";\nimport { Get } from \"../../methods/get.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 22.1.5.2.1\n  obj.defineNativeMethod(\"next\", 0, context => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not an object\");\n    }\n\n    // 3. If O does not have all of the internal slots of an Array Iterator Instance (22.1.5.3), throw a TypeError exception.\n    if (\n      O.$IteratedObject === undefined ||\n      O.$ArrayIteratorNextIndex === undefined ||\n      O.$ArrayIterationKind === undefined\n    ) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"ArrayIteratorPrototype.next isn't generic\");\n    }\n\n    // 4. Let a be the value of the [[IteratedObject]] internal slot of O.\n    let a = O.$IteratedObject;\n    invariant(a instanceof ObjectValue || a instanceof UndefinedValue);\n\n    // 5. If a is undefined, return CreateIterResultObject(undefined, true).\n    if (a instanceof UndefinedValue) {\n      return Create.CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n    }\n\n    // 6. Let index be the value of the [[ArrayIteratorNextIndex]] internal slot of O.\n    let index = O.$ArrayIteratorNextIndex.value;\n\n    // 7. Let itemKind be the value of the [[ArrayIterationKind]] internal slot of O.\n    let itemKind = O.$ArrayIterationKind;\n\n    // 8. If a has a [[TypedArrayName]] internal slot, then\n    let len;\n    if (a.$TypedArrayName) {\n      // a. Let len be the value of a's [[ArrayLength]] internal slot.\n      len = a.$ArrayLength;\n      invariant(typeof len === \"number\");\n    } else {\n      // 9. Else,\n      // a. Let len be ? ToLength(? Get(a, \"length\")).\n      len = To.ToLength(realm, Get(realm, a, \"length\"));\n    }\n\n    // 10. If index ≥ len, then\n    if (index >= len) {\n      // a. Set the value of the [[IteratedObject]] internal slot of O to undefined.\n      O.$IteratedObject = realm.intrinsics.undefined;\n\n      // b. Return CreateIterResultObject(undefined, true).\n      return Create.CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n    }\n\n    // 11. Set the value of the [[ArrayIteratorNextIndex]] internal slot of O to index+1.\n    O.$ArrayIteratorNextIndex = new NumberValue(realm, index + 1);\n\n    // 12. If itemKind is \"key\", return CreateIterResultObject(index, false).\n    if (itemKind === \"key\") {\n      return Create.CreateIterResultObject(realm, new NumberValue(realm, index), false);\n    }\n\n    // 13. Let elementKey be ! ToString(index).\n    let elementKey = new StringValue(realm, index + \"\");\n\n    // 14. Let elementValue be ? Get(a, elementKey).\n    let elementValue = Get(realm, a, elementKey);\n\n    // 15. If itemKind is \"value\", let result be elementValue.\n    let result;\n    if (itemKind === \"value\") {\n      result = elementValue;\n    } else {\n      // 16. Else,\n      // a. Assert: itemKind is \"key+value\".\n      invariant(itemKind === \"key+value\", \"expected item kind to be key+value\");\n\n      // b. Let result be CreateArrayFromList(« index, elementValue »).\n      result = Create.CreateArrayFromList(realm, [new NumberValue(realm, index), elementValue]);\n    }\n\n    // 17. Return CreateIterResultObject(result, false).\n    return Create.CreateIterResultObject(realm, result, false);\n  });\n\n  // ECMA262 22.1.5.2.2\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Array Iterator\"), {\n    writable: false,\n  });\n}\n"],"file":"ArrayIteratorPrototype.js"}