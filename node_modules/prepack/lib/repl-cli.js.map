{"version":3,"sources":["../src/repl-cli.js"],"names":["serialize","realm","res","Value","ThrowCompletion","context","ExecutionContext","pushContext","err","value","ObjectValue","intrinsics","Error","FatalError","To","ToStringPartial","stack","popContext","reactEnabled","reactOutput","repl","start","prompt","input","process","stdin","output","stdout","eval","code","filename","callback","$GlobalEnv","execute","console","error"],"mappings":";;AAWA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AApBA;;;;;;;;AAsBA,SAASA,SAAT,CAAmBC,KAAnB,EAAiCC,GAAjC,EAAqE;AACnE,MAAIA,GAAG,IAAIA,GAAG,YAAYC,aAA1B,EAAiC;AAC/B,WAAOD,GAAG,CAACF,SAAJ,EAAP;AACD;;AAED,MAAIE,GAAG,IAAIA,GAAG,YAAYE,4BAA1B,EAA2C;AACzC,QAAIC,OAAO,GAAG,IAAIC,uBAAJ,EAAd;AACAL,IAAAA,KAAK,CAACM,WAAN,CAAkBF,OAAlB;AACA,QAAIG,GAAJ;;AACA,QAAI;AACF,UAAIC,KAAK,GAAGP,GAAG,CAACO,KAAhB;;AACA,UAAIA,KAAK,YAAYC,mBAAjB,IAAgC,+BAAmBT,KAAnB,EAA0BQ,KAA1B,EAAiCR,KAAK,CAACU,UAAN,CAAiBC,KAAlD,CAApC,EAA8F;AAC5FJ,QAAAA,GAAG,GAAG,IAAIK,kBAAJ,CAAeC,eAAGC,eAAH,CAAmBd,KAAnB,EAA0B,gBAAIA,KAAJ,EAAWQ,KAAX,EAAkB,SAAlB,CAA1B,CAAf,CAAN;AACAD,QAAAA,GAAG,CAACQ,KAAJ,GAAYF,eAAGC,eAAH,CAAmBd,KAAnB,EAA0B,gBAAIA,KAAJ,EAAWQ,KAAX,EAAkB,OAAlB,CAA1B,CAAZ;AACD,OAHD,MAGO;AACLD,QAAAA,GAAG,GAAG,IAAIK,kBAAJ,CAAeC,eAAGC,eAAH,CAAmBd,KAAnB,EAA0BQ,KAA1B,CAAf,CAAN;AACD;AACF,KARD,SAQU;AACRR,MAAAA,KAAK,CAACgB,UAAN,CAAiBZ,OAAjB;AACD;;AACD,WAAOG,GAAP;AACD;;AAED,SAAON,GAAP;AACD;;AAED,IAAID,KAAK,GAAG,8BAAgB;AAC1BiB,EAAAA,YAAY,EAAE,IADY;AAE1BC,EAAAA,WAAW,EAAE;AAFa,CAAhB,CAAZ;AAIA,sBAAkBlB,KAAlB;;AAEAmB,cAAKC,KAAL,CAAW;AACTC,EAAAA,MAAM,EAAE,IADC;AAETC,EAAAA,KAAK,EAAEC,OAAO,CAACC,KAFN;AAGTC,EAAAA,MAAM,EAAEF,OAAO,CAACG,MAHP;;AAITC,EAAAA,IAAI,CAACC,IAAD,EAAOxB,OAAP,EAAgByB,QAAhB,EAA0BC,QAA1B,EAAoC;AACtC,QAAI;AACF,UAAI7B,GAAG,GAAGD,KAAK,CAAC+B,UAAN,CAAiBC,OAAjB,CAAyBJ,IAAzB,EAA+B,MAA/B,CAAV;AACA3B,MAAAA,GAAG,GAAGF,SAAS,CAACC,KAAD,EAAQC,GAAR,CAAf;;AACA,UAAIA,GAAG,YAAYU,KAAnB,EAA0B;AACxBmB,QAAAA,QAAQ,CAAC7B,GAAD,CAAR;AACD,OAFD,MAEO;AACL6B,QAAAA,QAAQ,CAAC,IAAD,EAAO7B,GAAP,CAAR;AACD;AACF,KARD,CAQE,OAAOM,GAAP,EAAY;AACZ0B,MAAAA,OAAO,CAACC,KAAR,CAAc3B,GAAd;AACAuB,MAAAA,QAAQ,CAACvB,GAAD,CAAR;AACD;AACF;;AAjBQ,CAAX","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, ExecutionContext } from \"./realm.js\";\nimport { FatalError } from \"./errors.js\";\nimport { Get } from \"./methods/index.js\";\nimport { InstanceofOperator } from \"./methods/index.js\";\nimport { AbruptCompletion, ThrowCompletion } from \"./completions.js\";\nimport { Value, ObjectValue } from \"./values/index.js\";\nimport { To } from \"./singletons.js\";\nimport construct_realm from \"./construct_realm.js\";\nimport initializeGlobals from \"./globals.js\";\nimport repl from \"repl\";\n\nfunction serialize(realm: Realm, res: Value | AbruptCompletion): any {\n  if (res && res instanceof Value) {\n    return res.serialize();\n  }\n\n  if (res && res instanceof ThrowCompletion) {\n    let context = new ExecutionContext();\n    realm.pushContext(context);\n    let err;\n    try {\n      let value = res.value;\n      if (value instanceof ObjectValue && InstanceofOperator(realm, value, realm.intrinsics.Error)) {\n        err = new FatalError(To.ToStringPartial(realm, Get(realm, value, \"message\")));\n        err.stack = To.ToStringPartial(realm, Get(realm, value, \"stack\"));\n      } else {\n        err = new FatalError(To.ToStringPartial(realm, value));\n      }\n    } finally {\n      realm.popContext(context);\n    }\n    return err;\n  }\n\n  return res;\n}\n\nlet realm = construct_realm({\n  reactEnabled: true,\n  reactOutput: \"jsx\",\n});\ninitializeGlobals(realm);\n\nrepl.start({\n  prompt: \"> \",\n  input: process.stdin,\n  output: process.stdout,\n  eval(code, context, filename, callback) {\n    try {\n      let res = realm.$GlobalEnv.execute(code, \"repl\");\n      res = serialize(realm, res);\n      if (res instanceof Error) {\n        callback(res);\n      } else {\n        callback(null, res);\n      }\n    } catch (err) {\n      console.error(err);\n      callback(err);\n    }\n  },\n});\n"],"file":"repl-cli.js"}