{"version":3,"sources":["../../src/serializer/serializer.js"],"names":["Serializer","constructor","realm","serializerOptions","useAbstractInterpretation","generator","Generator","pathConditions","logger","Logger","internalDebug","modules","Modules","logModules","functions","Functions","moduleTracer","trace","loggingTracer","LoggingTracer","tracers","push","options","_execute","sourceFileCollection","sourceMaps","onParse","res","code","$GlobalEnv","executeSources","toArray","ast","realmPreludeGenerator","preludeGenerator","forbiddenNames","nameGenerator","node","t","isIdentifier","add","name","destroy","AbruptCompletion","context","ExecutionContext","pushContext","logCompletion","popContext","diagnostic","CompilerDiagnostic","location","handleError","FatalError","processOutputEntries","output","tryQuery","$GlobalObject","intrinsics","undefined","ObjectValue","_entries","length","declaredGlobals","clear","Properties","GetOwnPropertyKeysArray","property","properties","get","value","descriptor","PropertyDescriptor","Value","emitGlobalDeclaration","init","onExecute","realmStatistics","statistics","SerializerStatistics","result","total","measure","react","verbose","logInformation","hasErrors","resolveInitializedModules","checkThatFunctionsAreIndependent","reactStatistics","enabled","optimizeReactComponentTreeRoots","ReactStatistics","processCollectedNestedOptimizedFunctions","dumpIR","optimizedFunctions","Map","functionValue","additionalFunctionEffects","getAdditionalFunctionValuesToEffects","set","modulesToInitialize","initializeMoreModules","heapGraph","additionalFunctionValuesAndEffects","residualHeapInfo","generatorTree","inspector","residualHeapVisitor","ResidualHeapVisitor","deepTraversal","visitRoots","toInfo","residualOptimizedFunctions","ResidualOptimizedFunctions","values","referentializer","Referentializer","createNameGenerator","referentialization","instance","functionInstances","referentialize","residualHeapValueIdentifiers","ResidualHeapValueIdentifiers","keys","heapGraphFormat","heapRefCounter","ResidualHeapRefCounter","heapGraphGenerator","ResidualHeapGraphGenerator","getResult","generateResult","inlineExpressions","initPass1","referenceCounts","ResidualHeapSerializer","serialize","initPass2","TargetSerializer","lazyObjectsRuntime","LazyObjectsSerializer","resetBeforePass","serializePass","stripFlow","generated","babelGenerate","map","logStatistics","log","logSerializerPerformanceTrackers","forcingGC","pf","time","memory","Math","round"],"mappings":";;;;;;;AAWA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAxCA;;;;;;;;AA0CO,MAAMA,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CAACC,KAAD,EAAeC,iBAAoC,GAAG,EAAtD,EAA0D;AACnE,4BAAUD,KAAK,CAACE,yBAAhB,EADmE,CAEnE;;AACAF,IAAAA,KAAK,CAACG,SAAN,GAAkB,IAAIC,oBAAJ,CAAcJ,KAAd,EAAqB,MAArB,EAA6BA,KAAK,CAACK,cAAnC,CAAlB;AAEA,SAAKL,KAAL,GAAaA,KAAb;AACA,SAAKM,MAAL,GAAc,IAAIC,cAAJ,CAAW,KAAKP,KAAhB,EAAuB,CAAC,CAACC,iBAAiB,CAACO,aAA3C,CAAd;AACA,SAAKC,OAAL,GAAe,IAAIC,gBAAJ,CAAY,KAAKV,KAAjB,EAAwB,KAAKM,MAA7B,EAAqC,CAAC,CAACL,iBAAiB,CAACU,UAAzD,CAAf;AACA,SAAKC,SAAL,GAAiB,IAAIC,oBAAJ,CAAc,KAAKb,KAAnB,EAA0B,KAAKS,OAAL,CAAaK,YAAvC,CAAjB;;AACA,QAAIb,iBAAiB,CAACc,KAAtB,EAA6B;AAC3B,UAAIC,aAAa,GAAG,IAAIC,4BAAJ,CAAkB,KAAKjB,KAAvB,CAApB;AACA,WAAKA,KAAL,CAAWkB,OAAX,CAAmBC,IAAnB,CAAwBH,aAAxB;AACD;;AAED,SAAKI,OAAL,GAAenB,iBAAf;AACD;;AAQDoB,EAAAA,QAAQ,CACNC,oBADM,EAENC,UAAoB,GAAG,KAFjB,EAGNC,OAHM,EAIgB;AACtB,QAAIxB,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAI,CAACyB,GAAD,EAAMC,IAAN,IAAc1B,KAAK,CAAC2B,UAAN,CAAiBC,cAAjB,CAAgCN,oBAAoB,CAACO,OAArB,EAAhC,EAAgE,QAAhE,EAA0EC,GAAG,IAAI;AACjG,UAAIC,qBAAqB,GAAG/B,KAAK,CAACgC,gBAAlC;AACA,8BAAUD,qBAAV;AACA,UAAIE,cAAc,GAAGF,qBAAqB,CAACG,aAAtB,CAAoCD,cAAzD;AACA,iCAAaH,GAAb,EAAkBK,IAAI,IAAI;AACxB,YAAI,CAACC,CAAC,CAACC,YAAF,CAAeF,IAAf,CAAL,EAA2B,OAAO,KAAP;AAE3BF,QAAAA,cAAc,CAACK,GAAf,CAAqBH,IAAF,CAAmCI,IAAtD;AACA,eAAO,IAAP;AACD,OALD;AAMA,UAAIf,OAAJ,EAAaA,OAAO,CAACM,GAAD,CAAP;AACd,KAXiB,CAAlB,CAFsB,CAetB;;AACAR,IAAAA,oBAAoB,CAACkB,OAArB;;AAEA,QAAIf,GAAG,YAAYgB,6BAAnB,EAAqC;AACnC,UAAIC,OAAO,GAAG,IAAIC,uBAAJ,EAAd;AACA3C,MAAAA,KAAK,CAAC4C,WAAN,CAAkBF,OAAlB;;AACA,UAAI;AACF,aAAKpC,MAAL,CAAYuC,aAAZ,CAA0BpB,GAA1B;AACD,OAFD,SAEU;AACRzB,QAAAA,KAAK,CAAC8C,UAAN,CAAiBJ,OAAjB;AACD;;AACD,UAAIK,UAAU,GAAG,IAAIC,0BAAJ,CAAuB,8BAAvB,EAAuDvB,GAAG,CAACwB,QAA3D,EAAqE,QAArE,EAA+E,YAA/E,CAAjB;AACAjD,MAAAA,KAAK,CAACkD,WAAN,CAAkBH,UAAlB;AACA,YAAM,IAAII,kBAAJ,EAAN;AACD;;AACD,WAAOzB,IAAP;AACD,GA3DqB,CA6DtB;AACA;AACA;;;AACA0B,EAAAA,oBAAoB,GAAY;AAC9B,QAAIpD,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAIqD,MAAM,GAAG,KAAK/C,MAAL,CAAYgD,QAAZ,CAAqB,MAAM,gBAAItD,KAAJ,EAAWA,KAAK,CAACuD,aAAjB,EAAgC,UAAhC,CAA3B,EAAwEvD,KAAK,CAACwD,UAAN,CAAiBC,SAAzF,CAAb;AACA,QAAI,EAAEJ,MAAM,YAAYK,mBAApB,CAAJ,EAAsC,OAAO,KAAP;AACtC,QAAIvD,SAAS,GAAGH,KAAK,CAACG,SAAtB;AACA,QAAI6B,gBAAgB,GAAGhC,KAAK,CAACgC,gBAA7B;AACA,QAAI7B,SAAS,KAAKsD,SAAd,IAA2BzB,gBAAgB,KAAKyB,SAApD,EAA+D,OAAO,KAAP;AAC/DtD,IAAAA,SAAS,CAACwD,QAAV,CAAmBC,MAAnB,GAA4B,CAA5B;AACA5B,IAAAA,gBAAgB,CAAC6B,eAAjB,CAAiCC,KAAjC;;AACA,SAAK,IAAIvB,IAAT,IAAiBwB,uBAAWC,uBAAX,CAAmChE,KAAnC,EAA0CqD,MAA1C,EAAkD,KAAlD,EAAyD,KAAzD,CAAjB,EAAkF;AAChF,UAAIY,QAAQ,GAAGZ,MAAM,CAACa,UAAP,CAAkBC,GAAlB,CAAsB5B,IAAtB,CAAf;AACA,UAAI,CAAC0B,QAAL,EAAe;AACf,UAAIG,KAAK,GAAGH,QAAQ,CAACI,UAAT,YAA+BC,+BAA/B,IAAqDL,QAAQ,CAACI,UAAT,CAAoBD,KAArF;AACA,UAAI,EAAEA,KAAK,YAAYG,aAAnB,CAAJ,EAA+B;AAC/BpE,MAAAA,SAAS,CAACqE,qBAAV,CAAgCjC,IAAhC,EAAsC6B,KAAtC;AACD;;AACD,WAAO,IAAP;AACD;;AAEDK,EAAAA,IAAI,CACFnD,oBADE,EAEFC,UAAoB,GAAG,KAFrB,EAGFC,OAHE,EAIFkD,SAJE,EAKuB;AACzB,QAAIC,eAAe,GAAG,KAAK3E,KAAL,CAAW4E,UAAjC;AACA,4BAAUD,eAAe,YAAYE,gCAArC,EAA2D,6CAA3D;AACA,QAAID,UAAgC,GAAGD,eAAvC;AAEA,QAAIG,MAAM,GAAGF,UAAU,CAACG,KAAX,CAAiBC,OAAjB,CAAyB,MAAM;AAC1C;AACA,UAAI,KAAKhF,KAAL,CAAWiF,KAAX,CAAiBC,OAArB,EAA8B;AAC5B,aAAK5E,MAAL,CAAY6E,cAAZ,CAA4B,mCAA5B;AACD;;AAED,UAAIzD,IAAI,GAAG,KAAKL,QAAL,CAAcC,oBAAd,EAAoCC,UAApC,EAAgDC,OAAhD,CAAX;;AAEA,UAAI,KAAKlB,MAAL,CAAY8E,SAAZ,EAAJ,EAA6B,OAAO3B,SAAP;;AAE7B,UAAI,CAAC,KAAKL,oBAAL,EAAL,EAAkC;AAChCwB,QAAAA,UAAU,CAACS,yBAAX,CAAqCL,OAArC,CAA6C,MAAM,KAAKvE,OAAL,CAAa4E,yBAAb,EAAnD;AACD;;AAEDT,MAAAA,UAAU,CAACU,gCAAX,CAA4CN,OAA5C,CAAoD,MAAM,KAAKpE,SAAL,CAAe0E,gCAAf,EAA1D;AAEA,UAAIC,eAAJ;;AACA,UAAI,KAAKvF,KAAL,CAAWiF,KAAX,CAAiBO,OAArB,EAA8B;AAC5BZ,QAAAA,UAAU,CAACa,+BAAX,CAA2CT,OAA3C,CAAmD,MAAM;AACvDO,UAAAA,eAAe,GAAG,IAAIG,uBAAJ,EAAlB;AACA,eAAK9E,SAAL,CAAe6E,+BAAf,CAA+CF,eAA/C;AACD,SAHD;AAID;;AAEDX,MAAAA,UAAU,CAACe,wCAAX,CAAoDX,OAApD,CAA4D,MAC1D,KAAKpE,SAAL,CAAe+E,wCAAf,EADF;AAIAf,MAAAA,UAAU,CAACgB,MAAX,CAAkBZ,OAAlB,CAA0B,MAAM;AAC9B,YAAIN,SAAS,KAAKjB,SAAlB,EAA6B;AAC3B,cAAIoC,kBAAkB,GAAG,IAAIC,GAAJ,EAAzB;;AACA,eAAK,IAAI,CAACC,aAAD,EAAgBC,yBAAhB,CAAT,IAAuD,KAAKpF,SAAL,CAAeqF,oCAAf,EAAvD,EACEJ,kBAAkB,CAACK,GAAnB,CAAuBH,aAAvB,EAAsCC,yBAAyB,CAAC7F,SAAhE;;AACFuE,UAAAA,SAAS,CAAC,KAAK1E,KAAN,EAAa6F,kBAAb,CAAT;AACD;AACF,OAPD;AASA,UAAIM,mBAAmB,GAAG,KAAK/E,OAAL,CAAa+E,mBAAvC;;AACA,UAAIA,mBAAJ,EAAyB;AACvBvB,QAAAA,UAAU,CAACuB,mBAAX,CAA+BnB,OAA/B,CAAuC,MAAM,KAAKvE,OAAL,CAAa2F,qBAAb,CAAmCD,mBAAnC,CAA7C;AACA,YAAI,KAAK7F,MAAL,CAAY8E,SAAZ,EAAJ,EAA6B,OAAO3B,SAAP;AAC9B;;AAED,UAAI4C,SAAJ;;AACA,UAAIvE,GAAG,GAAG,CAAC,MAAM;AACf;AACA;AACA;AAEA,YAAIwE,kCAAkC,GAAG,KAAK1F,SAAL,CAAeqF,oCAAf,EAAzC,CALe,CAOf;;AACA,YAAIjE,gBAAgB,GAAG,KAAKhC,KAAL,CAAWgC,gBAAlC;AACA,gCAAUA,gBAAgB,KAAKyB,SAA/B;;AACA,YAAI,KAAKzD,KAAL,CAAWiF,KAAX,CAAiBC,OAArB,EAA8B;AAC5B,eAAK5E,MAAL,CAAY6E,cAAZ,CAA4B,6BAA5B;AACD;;AACD,YAAI,CAACoB,gBAAD,EAAmBC,aAAnB,EAAkCC,SAAlC,IAA+C,CAAC,MAAM;AACxD,cAAIC,mBAAmB,GAAG,IAAIC,wCAAJ,CACxB,KAAK3G,KADmB,EAExB,KAAKM,MAFmB,EAGxB,KAAKG,OAHmB,EAIxB6F,kCAJwB,CAA1B;AAMA1B,UAAAA,UAAU,CAACgC,aAAX,CAAyB5B,OAAzB,CAAiC,MAAM0B,mBAAmB,CAACG,UAApB,EAAvC;AACA,iBAAO,CAACH,mBAAmB,CAACI,MAApB,EAAD,EAA+BJ,mBAAmB,CAACF,aAAnD,EAAkEE,mBAAmB,CAACD,SAAtF,CAAP;AACD,SATkD,GAAnD;;AAUA,YAAI,KAAKnG,MAAL,CAAY8E,SAAZ,EAAJ,EAA6B,OAAO3B,SAAP;AAE7B,YAAIsD,0BAA0B,GAAG,IAAIC,sDAAJ,CAC/BR,aAD+B,EAE/BF,kCAF+B,EAG/BC,gBAAgB,CAACU,MAHc,CAAjC;AAKA,YAAIC,eAAe,GAAG,IAAIC,gCAAJ,CACpB,KAAKnH,KADe,EAEpB,KAAKoB,OAFe,EAGpBY,gBAAgB,CAACoF,mBAAjB,CAAqC,UAArC,CAHoB,EAIpBpF,gBAAgB,CAACoF,mBAAjB,CAAqC,sBAArC,CAJoB,EAKpBpF,gBAAgB,CAACoF,mBAAjB,CAAqC,WAArC,CALoB,EAMpBL,0BANoB,CAAtB;AAQAnC,QAAAA,UAAU,CAACyC,kBAAX,CAA8BrC,OAA9B,CAAsC,MAAM;AAC1C,eAAK,IAAIsC,QAAT,IAAqBf,gBAAgB,CAACgB,iBAAjB,CAAmCN,MAAnC,EAArB,EAAkEC,eAAe,CAACM,cAAhB,CAA+BF,QAA/B;AACnE,SAFD;;AAIA,YAAI,KAAKtH,KAAL,CAAWiF,KAAX,CAAiBC,OAArB,EAA8B;AAC5B,eAAK5E,MAAL,CAAY6E,cAAZ,CAA4B,gCAA5B;AACD;;AACD,cAAMpD,qBAAqB,GAAG,KAAK/B,KAAL,CAAWgC,gBAAzC;AACA,gCAAUD,qBAAV;AACA,cAAM0F,4BAA4B,GAAG,IAAIC,0DAAJ,CACnCnB,gBAAgB,CAACU,MAAjB,CAAwBU,IAAxB,EADmC,EAEnC5F,qBAFmC,CAArC;;AAKA,YAAI,KAAKX,OAAL,CAAawG,eAAjB,EAAkC;AAChC,gBAAMC,cAAc,GAAG,IAAIC,8CAAJ,CACrB,KAAK9H,KADgB,EAErB,KAAKM,MAFgB,EAGrB,KAAKG,OAHgB,EAIrB6F,kCAJqB,CAAvB;AAMAuB,UAAAA,cAAc,CAAChB,UAAf;AAEA,gBAAMkB,kBAAkB,GAAG,IAAIC,sDAAJ,CACzB,KAAKhI,KADoB,EAEzB,KAAKM,MAFoB,EAGzB,KAAKG,OAHoB,EAIzB6F,kCAJyB,EAKzBmB,4BALyB,EAMzBI,cAAc,CAACI,SAAf,EANyB,CAA3B;AAQAF,UAAAA,kBAAkB,CAAClB,UAAnB;AACA,kCAAU,KAAKzF,OAAL,CAAawG,eAAvB;AACAvB,UAAAA,SAAS,GAAG0B,kBAAkB,CAACG,cAAnB,CAAkC,KAAK9G,OAAL,CAAawG,eAA/C,CAAZ;AACD,SAxEc,CA0Ef;AACA;;;AAEA,YAAI,KAAKxG,OAAL,CAAa+G,iBAAjB,EAAoC;AAClCV,UAAAA,4BAA4B,CAACW,SAA7B;AACAxD,UAAAA,UAAU,CAACyD,eAAX,CAA2BrD,OAA3B,CAAmC,MAAM;AACvC,gBAAIsD,8CAAJ,CACE,KAAKtI,KADP,EAEE,KAAKM,MAFP,EAGE,KAAKG,OAHP,EAIEgH,4BAJF,EAKEhB,SALF,EAMEF,gBANF,EAOE,KAAKnF,OAPP,EAQEkF,kCARF,EASEY,eATF,EAUEV,aAVF,EAWEO,0BAXF,EAYEwB,SAZF;AAaD,WAdD;AAeA,cAAI,KAAKjI,MAAL,CAAY8E,SAAZ,EAAJ,EAA6B,OAAO3B,SAAP;AAC7BgE,UAAAA,4BAA4B,CAACe,SAA7B;AACD,SAhGc,CAkGf;;;AACA,cAAMC,gBAAgB,GACpB,KAAKrH,OAAL,CAAasH,kBAAb,IAAmC,IAAnC,GAA0CC,4CAA1C,GAAkEL,8CADpE;AAEA1D,QAAAA,UAAU,CAACgE,eAAX;AACA,eAAOhE,UAAU,CAACiE,aAAX,CAAyB7D,OAAzB,CAAiC,MACtC,IAAIyD,gBAAJ,CACE,KAAKzI,KADP,EAEE,KAAKM,MAFP,EAGE,KAAKG,OAHP,EAIEgH,4BAJF,EAKEhB,SALF,EAMEF,gBANF,EAOE,KAAKnF,OAPP,EAQEkF,kCARF,EASEY,eATF,EAUEV,aAVF,EAWEO,0BAXF,EAYEwB,SAZF,EADK,CAAP;AAeD,OArHS,GAAV;;AAuHA,8BAAUzG,GAAG,KAAK2B,SAAlB;;AACA,UAAI,KAAKzD,KAAL,CAAW8I,SAAf,EAA0B;AACxB,4CAAyBhH,GAAzB;AACD,OAtKyC,CAwK1C;;;AACA,UAAIiH,SAAS,GAAGnE,UAAU,CAACoE,aAAX,CAAyBhE,OAAzB,CAAiC,MAAM,yBAASlD,GAAT,EAAc;AAAEP,QAAAA,UAAU,EAAEA;AAAd,OAAd,EAA2CG,IAA3C,CAAvC,CAAhB;AAEA,8BAAU,CAAC,KAAKpB,MAAL,CAAY8E,SAAZ,EAAX;AACA,aAAO;AACL1D,QAAAA,IAAI,EAAEqH,SAAS,CAACrH,IADX;AAELuH,QAAAA,GAAG,EAAEF,SAAS,CAACE,GAFV;AAGLrE,QAAAA,UAHK;AAILW,QAAAA,eAJK;AAKLc,QAAAA;AALK,OAAP;AAOD,KAnLY,CAAb;;AAqLA,QAAI,KAAKjF,OAAL,CAAa8H,aAAjB,EAAgC;AAC9BtE,MAAAA,UAAU,CAACuE,GAAX;AACAvE,MAAAA,UAAU,CAACwE,gCAAX,CACE,iBADF,EAEExE,UAAU,CAACyE,SAAX,GACI,0JADJ,GAEI5F,SAJN,EAKE6F,EAAE,IAAK,GAAEA,EAAE,CAACC,IAAK,IALnB;AAOA3E,MAAAA,UAAU,CAACwE,gCAAX,CACE,mBADF,EAEExE,UAAU,CAACyE,SAAX,GACI5F,SADJ,GAEI,qJAJN,EAKE6F,EAAE,IAAK,GAAEA,EAAE,CAACE,MAAH,GAAY,CAAZ,GAAgB,GAAhB,GAAsB,EAAG,GAAEC,IAAI,CAACC,KAAL,CAAWJ,EAAE,CAACE,MAAH,GAAY,IAAZ,GAAmB,IAA9B,CAAoC,IAL1E;AAOD;;AAED,WAAO1E,MAAP;AACD;;AArSqB","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, ExecutionContext } from \"../realm.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport { SourceFileCollection } from \"../types.js\";\nimport { AbruptCompletion } from \"../completions.js\";\nimport { Generator } from \"../utils/generator.js\";\nimport generate from \"@babel/generator\";\nimport traverseFast from \"../utils/traverse-fast.js\";\nimport invariant from \"../invariant.js\";\nimport type { SerializerOptions } from \"../options.js\";\nimport { SerializerStatistics } from \"./statistics.js\";\nimport { type SerializedResult, ReactStatistics } from \"./types.js\";\nimport { Functions } from \"./functions.js\";\nimport { Logger } from \"../utils/logger.js\";\nimport { Modules } from \"../utils/modules.js\";\nimport { stripFlowTypeAnnotations } from \"../utils/flow.js\";\nimport { LoggingTracer } from \"./LoggingTracer.js\";\nimport { ResidualHeapVisitor } from \"./ResidualHeapVisitor.js\";\nimport { ResidualHeapSerializer } from \"./ResidualHeapSerializer.js\";\nimport { ResidualHeapValueIdentifiers } from \"./ResidualHeapValueIdentifiers.js\";\nimport { LazyObjectsSerializer } from \"./LazyObjectsSerializer.js\";\nimport * as t from \"@babel/types\";\nimport type { BabelNodeFile } from \"@babel/types\";\nimport { ResidualHeapRefCounter } from \"./ResidualHeapRefCounter\";\nimport { ResidualHeapGraphGenerator } from \"./ResidualHeapGraphGenerator\";\nimport { Referentializer } from \"./Referentializer.js\";\nimport { Get } from \"../methods/index.js\";\nimport { ObjectValue, Value, FunctionValue } from \"../values/index.js\";\nimport { Properties } from \"../singletons.js\";\nimport { PropertyDescriptor } from \"../descriptors.js\";\nimport { ResidualOptimizedFunctions } from \"./ResidualOptimizedFunctions\";\n\nexport class Serializer {\n  constructor(realm: Realm, serializerOptions: SerializerOptions = {}) {\n    invariant(realm.useAbstractInterpretation);\n    // Start tracking mutations\n    realm.generator = new Generator(realm, \"main\", realm.pathConditions);\n\n    this.realm = realm;\n    this.logger = new Logger(this.realm, !!serializerOptions.internalDebug);\n    this.modules = new Modules(this.realm, this.logger, !!serializerOptions.logModules);\n    this.functions = new Functions(this.realm, this.modules.moduleTracer);\n    if (serializerOptions.trace) {\n      let loggingTracer = new LoggingTracer(this.realm);\n      this.realm.tracers.push(loggingTracer);\n    }\n\n    this.options = serializerOptions;\n  }\n\n  realm: Realm;\n  functions: Functions;\n  logger: Logger;\n  modules: Modules;\n  options: SerializerOptions;\n\n  _execute(\n    sourceFileCollection: SourceFileCollection,\n    sourceMaps?: boolean = false,\n    onParse?: BabelNodeFile => void\n  ): { [string]: string } {\n    let realm = this.realm;\n    let [res, code] = realm.$GlobalEnv.executeSources(sourceFileCollection.toArray(), \"script\", ast => {\n      let realmPreludeGenerator = realm.preludeGenerator;\n      invariant(realmPreludeGenerator);\n      let forbiddenNames = realmPreludeGenerator.nameGenerator.forbiddenNames;\n      traverseFast(ast, node => {\n        if (!t.isIdentifier(node)) return false;\n\n        forbiddenNames.add(((node: any): BabelNodeIdentifier).name);\n        return true;\n      });\n      if (onParse) onParse(ast);\n    });\n\n    // Release memory of source files and their source maps\n    sourceFileCollection.destroy();\n\n    if (res instanceof AbruptCompletion) {\n      let context = new ExecutionContext();\n      realm.pushContext(context);\n      try {\n        this.logger.logCompletion(res);\n      } finally {\n        realm.popContext(context);\n      }\n      let diagnostic = new CompilerDiagnostic(\"Global code may end abruptly\", res.location, \"PP0016\", \"FatalError\");\n      realm.handleError(diagnostic);\n      throw new FatalError();\n    }\n    return code;\n  }\n\n  // When global.__output is an object, then this function replaces the global generator\n  // with one that declares global variables corresponding to the key-value pairs in the __output object,\n  // effectively rewriting the roots for visiting/serialization.\n  processOutputEntries(): boolean {\n    let realm = this.realm;\n    let output = this.logger.tryQuery(() => Get(realm, realm.$GlobalObject, \"__output\"), realm.intrinsics.undefined);\n    if (!(output instanceof ObjectValue)) return false;\n    let generator = realm.generator;\n    let preludeGenerator = realm.preludeGenerator;\n    if (generator === undefined || preludeGenerator === undefined) return false;\n    generator._entries.length = 0;\n    preludeGenerator.declaredGlobals.clear();\n    for (let name of Properties.GetOwnPropertyKeysArray(realm, output, false, false)) {\n      let property = output.properties.get(name);\n      if (!property) continue;\n      let value = property.descriptor instanceof PropertyDescriptor && property.descriptor.value;\n      if (!(value instanceof Value)) continue;\n      generator.emitGlobalDeclaration(name, value);\n    }\n    return true;\n  }\n\n  init(\n    sourceFileCollection: SourceFileCollection,\n    sourceMaps?: boolean = false,\n    onParse?: BabelNodeFile => void,\n    onExecute?: (Realm, Map<FunctionValue, Generator>) => void\n  ): void | SerializedResult {\n    let realmStatistics = this.realm.statistics;\n    invariant(realmStatistics instanceof SerializerStatistics, \"serialization requires SerializerStatistics\");\n    let statistics: SerializerStatistics = realmStatistics;\n\n    let result = statistics.total.measure(() => {\n      // Phase 1: Let's interpret.\n      if (this.realm.react.verbose) {\n        this.logger.logInformation(`Evaluating initialization path...`);\n      }\n\n      let code = this._execute(sourceFileCollection, sourceMaps, onParse);\n\n      if (this.logger.hasErrors()) return undefined;\n\n      if (!this.processOutputEntries()) {\n        statistics.resolveInitializedModules.measure(() => this.modules.resolveInitializedModules());\n      }\n\n      statistics.checkThatFunctionsAreIndependent.measure(() => this.functions.checkThatFunctionsAreIndependent());\n\n      let reactStatistics;\n      if (this.realm.react.enabled) {\n        statistics.optimizeReactComponentTreeRoots.measure(() => {\n          reactStatistics = new ReactStatistics();\n          this.functions.optimizeReactComponentTreeRoots(reactStatistics);\n        });\n      }\n\n      statistics.processCollectedNestedOptimizedFunctions.measure(() =>\n        this.functions.processCollectedNestedOptimizedFunctions()\n      );\n\n      statistics.dumpIR.measure(() => {\n        if (onExecute !== undefined) {\n          let optimizedFunctions = new Map();\n          for (let [functionValue, additionalFunctionEffects] of this.functions.getAdditionalFunctionValuesToEffects())\n            optimizedFunctions.set(functionValue, additionalFunctionEffects.generator);\n          onExecute(this.realm, optimizedFunctions);\n        }\n      });\n\n      let modulesToInitialize = this.options.modulesToInitialize;\n      if (modulesToInitialize) {\n        statistics.modulesToInitialize.measure(() => this.modules.initializeMoreModules(modulesToInitialize));\n        if (this.logger.hasErrors()) return undefined;\n      }\n\n      let heapGraph;\n      let ast = (() => {\n        // We wrap the following in an anonymous function declaration to ensure\n        // that all local variables are locally scoped, and allocated memory cannot\n        // get released when this function returns.\n\n        let additionalFunctionValuesAndEffects = this.functions.getAdditionalFunctionValuesToEffects();\n\n        // Deep traversal of the heap to identify the necessary scope of residual functions\n        let preludeGenerator = this.realm.preludeGenerator;\n        invariant(preludeGenerator !== undefined);\n        if (this.realm.react.verbose) {\n          this.logger.logInformation(`Visiting evaluated nodes...`);\n        }\n        let [residualHeapInfo, generatorTree, inspector] = (() => {\n          let residualHeapVisitor = new ResidualHeapVisitor(\n            this.realm,\n            this.logger,\n            this.modules,\n            additionalFunctionValuesAndEffects\n          );\n          statistics.deepTraversal.measure(() => residualHeapVisitor.visitRoots());\n          return [residualHeapVisitor.toInfo(), residualHeapVisitor.generatorTree, residualHeapVisitor.inspector];\n        })();\n        if (this.logger.hasErrors()) return undefined;\n\n        let residualOptimizedFunctions = new ResidualOptimizedFunctions(\n          generatorTree,\n          additionalFunctionValuesAndEffects,\n          residualHeapInfo.values\n        );\n        let referentializer = new Referentializer(\n          this.realm,\n          this.options,\n          preludeGenerator.createNameGenerator(\"__scope_\"),\n          preludeGenerator.createNameGenerator(\"__get_scope_binding_\"),\n          preludeGenerator.createNameGenerator(\"__leaked_\"),\n          residualOptimizedFunctions\n        );\n        statistics.referentialization.measure(() => {\n          for (let instance of residualHeapInfo.functionInstances.values()) referentializer.referentialize(instance);\n        });\n\n        if (this.realm.react.verbose) {\n          this.logger.logInformation(`Serializing evaluated nodes...`);\n        }\n        const realmPreludeGenerator = this.realm.preludeGenerator;\n        invariant(realmPreludeGenerator);\n        const residualHeapValueIdentifiers = new ResidualHeapValueIdentifiers(\n          residualHeapInfo.values.keys(),\n          realmPreludeGenerator\n        );\n\n        if (this.options.heapGraphFormat) {\n          const heapRefCounter = new ResidualHeapRefCounter(\n            this.realm,\n            this.logger,\n            this.modules,\n            additionalFunctionValuesAndEffects\n          );\n          heapRefCounter.visitRoots();\n\n          const heapGraphGenerator = new ResidualHeapGraphGenerator(\n            this.realm,\n            this.logger,\n            this.modules,\n            additionalFunctionValuesAndEffects,\n            residualHeapValueIdentifiers,\n            heapRefCounter.getResult()\n          );\n          heapGraphGenerator.visitRoots();\n          invariant(this.options.heapGraphFormat);\n          heapGraph = heapGraphGenerator.generateResult(this.options.heapGraphFormat);\n        }\n\n        // Phase 2: Let's serialize the heap and generate code.\n        // Serialize for the first time in order to gather reference counts\n\n        if (this.options.inlineExpressions) {\n          residualHeapValueIdentifiers.initPass1();\n          statistics.referenceCounts.measure(() => {\n            new ResidualHeapSerializer(\n              this.realm,\n              this.logger,\n              this.modules,\n              residualHeapValueIdentifiers,\n              inspector,\n              residualHeapInfo,\n              this.options,\n              additionalFunctionValuesAndEffects,\n              referentializer,\n              generatorTree,\n              residualOptimizedFunctions\n            ).serialize();\n          });\n          if (this.logger.hasErrors()) return undefined;\n          residualHeapValueIdentifiers.initPass2();\n        }\n\n        // Serialize for a second time, using reference counts to minimize number of generated identifiers\n        const TargetSerializer =\n          this.options.lazyObjectsRuntime != null ? LazyObjectsSerializer : ResidualHeapSerializer;\n        statistics.resetBeforePass();\n        return statistics.serializePass.measure(() =>\n          new TargetSerializer(\n            this.realm,\n            this.logger,\n            this.modules,\n            residualHeapValueIdentifiers,\n            inspector,\n            residualHeapInfo,\n            this.options,\n            additionalFunctionValuesAndEffects,\n            referentializer,\n            generatorTree,\n            residualOptimizedFunctions\n          ).serialize()\n        );\n      })();\n\n      invariant(ast !== undefined);\n      if (this.realm.stripFlow) {\n        stripFlowTypeAnnotations(ast);\n      }\n\n      // the signature for generate is not complete, hence the any\n      let generated = statistics.babelGenerate.measure(() => generate(ast, { sourceMaps: sourceMaps }, (code: any)));\n\n      invariant(!this.logger.hasErrors());\n      return {\n        code: generated.code,\n        map: generated.map,\n        statistics,\n        reactStatistics,\n        heapGraph,\n      };\n    });\n\n    if (this.options.logStatistics) {\n      statistics.log();\n      statistics.logSerializerPerformanceTrackers(\n        \"time statistics\",\n        statistics.forcingGC\n          ? \"Time statistics are skewed because of forced garbage collections; remove --expose-gc flag from node.js invocation to disable forced garbage collections.\"\n          : undefined,\n        pf => `${pf.time}ms`\n      );\n      statistics.logSerializerPerformanceTrackers(\n        \"memory statistics\",\n        statistics.forcingGC\n          ? undefined\n          : \"Memory statistics are unreliable because garbage collections could not be forced; pass --expose-gc to node.js to enable forced garbage collections.\",\n        pf => `${pf.memory > 0 ? \"+\" : \"\"}${Math.round(pf.memory / 1024 / 1024)}MB`\n      );\n    }\n\n    return result;\n  }\n}\n"],"file":"serializer.js"}