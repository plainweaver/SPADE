{"version":3,"sources":["../../src/serializer/ResidualReactElementSerializer.js"],"names":["ResidualReactElementSerializer","constructor","realm","residualHeapSerializer","residualOptimizedFunctions","logger","reactOutput","react","output","_lazilyHoistedNodes","Map","_residualOptimizedFunctions","_createReactElement","value","attributes","children","declared","type","undefined","_createReactElementAttribute","expr","key","_createReactElementChild","_emitHoistedReactElement","reactElement","id","reactElementAst","hoistedCreateElementIdentifier","originalCreateElementIdentifier","optimizedFunction","tryGetOptimizedFunctionRoot","lazilyHoistedNodes","get","funcId","t","identifier","functionNameGenerator","generate","createElementIdentifier","nodes","set","statement","expressionStatement","logicalExpression","binaryExpression","unaryExpression","numericLiteral","callExpression","getPrelude","push","astNode","_getReactLibraryValue","reactLibraryObject","fbLibraries","FatalError","_getReactCreateElementValue","_emitReactElement","typeValue","keyValue","refValue","propsValue","shouldHoist","getSerializeObjectIdentifier","reactElementAstNode","dependencies","createElement","emitter","emitNowOrAfterWaitingForDependencies","_serializeReactElementToJSXElement","serializeValue","intrinsicNameGenerator","_serializeReactElementToCreateElement","emit","assignmentExpression","variableDeclaration","variableDeclarator","getBody","_serializeNowOrAfterWaitingForDependencies","func","shouldSerialize","reason","getReasonToWaitForDependencies","serialize","emitAfterWaiting","_serializeReactFragmentType","memberExpression","serializeReactElement","val","reactElementData","reactElements","firstRenderOnly","visitType","SymbolValue","residualHeapValueIdentifiers","incrementReferenceCount","visitKey","reactElementKey","visitRef","reactElementRef","visitAbstractOrPartialProps","reactElementSpread","visitConcreteProps","propName","binding","properties","descriptor","propValue","reactElementAttribute","visitChildNode","childValue","_serializeReactElementChild","_addSerializedValueToJSXAttriutes","prop","jSXSpreadAttribute","createElementArguments","length","astAttributes","attribute","spreadElement","attributeKey","includes","stringLiteral","objectProperty","objectExpression","nullLiteral","astChildren","child","createElementCall","_addBailOutMessageToBabelNode","jsxTypeIdentifer","isStringLiteral","isNumericLiteral","jSXText","isJSXElement","jSXExpressionContainer","openingElement","jSXOpeningElement","closingElement","jSXClosingElement","jsxElement","jSXElement","node","$BailOutReason","leadingComments","reactElementChild","serializeLazyHoistedNodes","entries","functionExpression","blockStatement","map","delete"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport { ResidualHeapSerializer } from \"./ResidualHeapSerializer.js\";\nimport { canHoistReactElement } from \"../react/hoisting.js\";\nimport * as t from \"@babel/types\";\nimport type { BabelNode, BabelNodeExpression } from \"@babel/types\";\nimport { AbstractValue, AbstractObjectValue, ObjectValue, SymbolValue, FunctionValue, Value } from \"../values/index.js\";\nimport { convertExpressionToJSXIdentifier, convertKeyValueToJSXAttribute } from \"../react/jsx.js\";\nimport { Logger } from \"../utils/logger.js\";\nimport invariant from \"../invariant.js\";\nimport { FatalError } from \"../errors.js\";\nimport { traverseReactElement } from \"../react/elements.js\";\nimport { canExcludeReactElementObjectProperty, getReactSymbol, getProperty } from \"../react/utils.js\";\nimport type { ReactOutputTypes } from \"../options.js\";\nimport type { LazilyHoistedNodes } from \"./types.js\";\nimport type { ResidualOptimizedFunctions } from \"./ResidualOptimizedFunctions\";\n\ntype ReactElementAttributeType = \"SPREAD\" | \"PROPERTY\" | \"PENDING\";\ntype ReactElementChildType = \"NORMAL\" | \"PENDING\";\n\ntype ReactElementChild = {\n  expr: void | BabelNodeExpression,\n  type: ReactElementChildType,\n};\n\ntype ReactElementAttribute = {\n  expr: void | BabelNodeExpression,\n  key: void | string,\n  type: ReactElementAttributeType,\n};\n\ntype ReactElement = {\n  attributes: Array<ReactElementAttribute>,\n  children: Array<ReactElementChild>,\n  declared: boolean,\n  type: void | BabelNodeExpression,\n  value: ObjectValue,\n};\n\nexport class ResidualReactElementSerializer {\n  constructor(\n    realm: Realm,\n    residualHeapSerializer: ResidualHeapSerializer,\n    residualOptimizedFunctions: ResidualOptimizedFunctions\n  ) {\n    this.realm = realm;\n    this.residualHeapSerializer = residualHeapSerializer;\n    this.logger = residualHeapSerializer.logger;\n    this.reactOutput = realm.react.output || \"create-element\";\n    this._lazilyHoistedNodes = new Map();\n    this._residualOptimizedFunctions = residualOptimizedFunctions;\n  }\n\n  realm: Realm;\n  logger: Logger;\n  reactOutput: ReactOutputTypes;\n  residualHeapSerializer: ResidualHeapSerializer;\n  _lazilyHoistedNodes: Map<FunctionValue, LazilyHoistedNodes>;\n  _residualOptimizedFunctions: ResidualOptimizedFunctions;\n\n  _createReactElement(value: ObjectValue): ReactElement {\n    return { attributes: [], children: [], declared: false, type: undefined, value };\n  }\n\n  _createReactElementAttribute(): ReactElementAttribute {\n    return { expr: undefined, key: undefined, type: \"PENDING\" };\n  }\n\n  _createReactElementChild(): ReactElementChild {\n    return { expr: undefined, type: \"PENDING\" };\n  }\n\n  _emitHoistedReactElement(\n    reactElement: ObjectValue,\n    id: BabelNodeExpression,\n    reactElementAst: BabelNodeExpression,\n    hoistedCreateElementIdentifier: BabelNodeIdentifier,\n    originalCreateElementIdentifier: BabelNodeIdentifier\n  ): void {\n    // if the currentHoistedReactElements is not defined, we create it an emit the function call\n    // this should only occur once per additional function\n    const optimizedFunction = this._residualOptimizedFunctions.tryGetOptimizedFunctionRoot(reactElement);\n    invariant(optimizedFunction);\n    let lazilyHoistedNodes = this._lazilyHoistedNodes.get(optimizedFunction);\n    if (lazilyHoistedNodes === undefined) {\n      let funcId = t.identifier(this.residualHeapSerializer.functionNameGenerator.generate());\n      lazilyHoistedNodes = {\n        id: funcId,\n        createElementIdentifier: hoistedCreateElementIdentifier,\n        nodes: [],\n      };\n      this._lazilyHoistedNodes.set(optimizedFunction, lazilyHoistedNodes);\n      let statement = t.expressionStatement(\n        t.logicalExpression(\n          \"&&\",\n          t.binaryExpression(\"===\", id, t.unaryExpression(\"void\", t.numericLiteral(0), true)),\n          // pass the createElementIdentifier if it's not null\n          t.callExpression(funcId, originalCreateElementIdentifier ? [originalCreateElementIdentifier] : [])\n        )\n      );\n      this.residualHeapSerializer.getPrelude(optimizedFunction).push(statement);\n    }\n    // we then push the reactElement and its id into our list of elements to process after\n    // the current additional function has serialzied\n    lazilyHoistedNodes.nodes.push({ id, astNode: reactElementAst });\n  }\n\n  _getReactLibraryValue(): AbstractObjectValue | ObjectValue {\n    let reactLibraryObject = this.realm.fbLibraries.react;\n    // if there is no React library, then we should throw and error\n    if (reactLibraryObject === undefined) {\n      throw new FatalError(\"unable to find React library reference in scope\");\n    }\n    return reactLibraryObject;\n  }\n\n  _getReactCreateElementValue(): Value {\n    let reactLibraryObject = this._getReactLibraryValue();\n    return getProperty(this.realm, reactLibraryObject, \"createElement\");\n  }\n\n  _emitReactElement(reactElement: ReactElement): BabelNodeExpression {\n    let { value } = reactElement;\n    let typeValue = getProperty(this.realm, value, \"type\");\n    let keyValue = getProperty(this.realm, value, \"key\");\n    let refValue = getProperty(this.realm, value, \"ref\");\n    let propsValue = getProperty(this.realm, value, \"props\");\n\n    let shouldHoist =\n      this._residualOptimizedFunctions.tryGetOptimizedFunctionRoot(value) !== undefined &&\n      canHoistReactElement(this.realm, value);\n\n    let id = this.residualHeapSerializer.getSerializeObjectIdentifier(value);\n    // this identifier is used as the deafult, but also passed to the hoisted factory function\n    let originalCreateElementIdentifier = null;\n    // this name is used when hoisting, and is passed into the factory function, rather than the original\n    let hoistedCreateElementIdentifier = null;\n    let reactElementAstNode;\n    let dependencies = [typeValue, keyValue, refValue, propsValue, value];\n    let createElement;\n\n    if (this.reactOutput === \"create-element\") {\n      createElement = this._getReactCreateElementValue();\n      dependencies.push(createElement);\n    }\n\n    this.residualHeapSerializer.emitter.emitNowOrAfterWaitingForDependencies(\n      dependencies,\n      () => {\n        if (this.reactOutput === \"jsx\") {\n          reactElementAstNode = this._serializeReactElementToJSXElement(value, reactElement);\n        } else if (this.reactOutput === \"create-element\") {\n          originalCreateElementIdentifier = this.residualHeapSerializer.serializeValue(createElement);\n\n          if (shouldHoist) {\n            const optimizedFunction = this._residualOptimizedFunctions.tryGetOptimizedFunctionRoot(value);\n            invariant(optimizedFunction);\n            const lazilyHoistedNodes = this._lazilyHoistedNodes.get(optimizedFunction);\n            // if we haven't created a lazilyHoistedNodes before, then this is the first time\n            // so we only create the hoisted identifier once\n            if (lazilyHoistedNodes === undefined) {\n              // create a new unique instance\n              hoistedCreateElementIdentifier = t.identifier(\n                this.residualHeapSerializer.intrinsicNameGenerator.generate()\n              );\n            } else {\n              hoistedCreateElementIdentifier = lazilyHoistedNodes.createElementIdentifier;\n            }\n          }\n\n          let createElementIdentifier = shouldHoist ? hoistedCreateElementIdentifier : originalCreateElementIdentifier;\n          reactElementAstNode = this._serializeReactElementToCreateElement(\n            value,\n            reactElement,\n            createElementIdentifier\n          );\n        } else {\n          invariant(false, \"Unknown reactOutput specified\");\n        }\n        // if we are hoisting this React element, put the assignment in the body\n        // also ensure we are in an additional function\n        if (shouldHoist) {\n          this._emitHoistedReactElement(\n            value,\n            id,\n            reactElementAstNode,\n            hoistedCreateElementIdentifier,\n            originalCreateElementIdentifier\n          );\n        } else {\n          // Note: it can be expected that we assign to the same variable multiple times\n          // this is due to fact ReactElements are immutable objects and the fact that\n          // when we inline/fold logic, the same ReactElements are referenced at different\n          // points with different attributes. Given we can't mutate an immutable object,\n          // we instead create new objects and assign to the same binding\n          if (reactElement.declared) {\n            this.residualHeapSerializer.emitter.emit(\n              t.expressionStatement(t.assignmentExpression(\"=\", id, reactElementAstNode))\n            );\n          } else {\n            reactElement.declared = true;\n            this.residualHeapSerializer.emitter.emit(\n              t.variableDeclaration(\"var\", [t.variableDeclarator(id, reactElementAstNode)])\n            );\n          }\n        }\n      },\n      this.residualHeapSerializer.emitter.getBody()\n    );\n    return id;\n  }\n\n  _serializeNowOrAfterWaitingForDependencies(\n    value: Value,\n    reactElement: ReactElement,\n    func: () => void | BabelNode,\n    shouldSerialize?: boolean = true\n  ): void {\n    let reason = this.residualHeapSerializer.emitter.getReasonToWaitForDependencies(value);\n\n    const serialize = () => {\n      func();\n    };\n\n    if (reason) {\n      this.residualHeapSerializer.emitter.emitAfterWaiting(\n        reason,\n        [value],\n        () => {\n          serialize();\n          this._emitReactElement(reactElement);\n        },\n        this.residualHeapSerializer.emitter.getBody()\n      );\n    } else {\n      serialize();\n    }\n  }\n\n  _serializeReactFragmentType(typeValue: SymbolValue): BabelNodeExpression {\n    let reactLibraryObject = this._getReactLibraryValue();\n    return t.memberExpression(this.residualHeapSerializer.serializeValue(reactLibraryObject), t.identifier(\"Fragment\"));\n  }\n\n  serializeReactElement(val: ObjectValue): BabelNodeExpression {\n    let reactElementData = this.realm.react.reactElements.get(val);\n    invariant(reactElementData !== undefined);\n    let { firstRenderOnly } = reactElementData;\n    let reactElement = this._createReactElement(val);\n\n    traverseReactElement(this.realm, reactElement.value, {\n      visitType: (typeValue: Value) => {\n        this._serializeNowOrAfterWaitingForDependencies(typeValue, reactElement, () => {\n          let expr;\n\n          if (typeValue instanceof SymbolValue && typeValue === getReactSymbol(\"react.fragment\", this.realm)) {\n            expr = this._serializeReactFragmentType(typeValue);\n          } else {\n            expr = this.residualHeapSerializer.serializeValue(typeValue);\n            // Increment ref count one more time to ensure that this object will be assigned a unique id.\n            // Abstract values that are emitted as first argument to JSX elements needs a proper id.\n            this.residualHeapSerializer.residualHeapValueIdentifiers.incrementReferenceCount(typeValue);\n          }\n          reactElement.type = expr;\n        });\n      },\n      visitKey: (keyValue: Value) => {\n        let reactElementKey = this._createReactElementAttribute();\n        this._serializeNowOrAfterWaitingForDependencies(keyValue, reactElement, () => {\n          let expr = this.residualHeapSerializer.serializeValue(keyValue);\n          reactElementKey.expr = expr;\n          reactElementKey.key = \"key\";\n          reactElementKey.type = \"PROPERTY\";\n        });\n        reactElement.attributes.push(reactElementKey);\n      },\n      visitRef: (refValue: Value) => {\n        if (!firstRenderOnly) {\n          let reactElementRef = this._createReactElementAttribute();\n          this._serializeNowOrAfterWaitingForDependencies(refValue, reactElement, () => {\n            let expr = this.residualHeapSerializer.serializeValue(refValue);\n            reactElementRef.expr = expr;\n            reactElementRef.key = \"ref\";\n            reactElementRef.type = \"PROPERTY\";\n          });\n          reactElement.attributes.push(reactElementRef);\n        }\n      },\n      visitAbstractOrPartialProps: (propsValue: AbstractValue | ObjectValue) => {\n        let reactElementSpread = this._createReactElementAttribute();\n        this._serializeNowOrAfterWaitingForDependencies(propsValue, reactElement, () => {\n          let expr = this.residualHeapSerializer.serializeValue(propsValue);\n          reactElementSpread.expr = expr;\n          reactElementSpread.type = \"SPREAD\";\n        });\n        reactElement.attributes.push(reactElementSpread);\n      },\n      visitConcreteProps: (propsValue: ObjectValue) => {\n        for (let [propName, binding] of propsValue.properties) {\n          if (binding.descriptor === undefined || propName === \"children\") {\n            continue;\n          }\n          let propValue = getProperty(this.realm, propsValue, propName);\n          if (canExcludeReactElementObjectProperty(this.realm, val, propName, propValue)) {\n            continue;\n          }\n          let reactElementAttribute = this._createReactElementAttribute();\n\n          this._serializeNowOrAfterWaitingForDependencies(propValue, reactElement, () => {\n            let expr = this.residualHeapSerializer.serializeValue(propValue);\n            reactElementAttribute.expr = expr;\n            reactElementAttribute.key = propName;\n            reactElementAttribute.type = \"PROPERTY\";\n          });\n          reactElement.attributes.push(reactElementAttribute);\n        }\n      },\n      visitChildNode: (childValue: Value) => {\n        reactElement.children.push(this._serializeReactElementChild(childValue, reactElement));\n      },\n    });\n    return this._emitReactElement(reactElement);\n  }\n\n  _addSerializedValueToJSXAttriutes(prop: string | null, expr: any, attributes: Array<BabelNode>): void {\n    if (prop === null) {\n      attributes.push(t.jSXSpreadAttribute(expr));\n    } else {\n      attributes.push(convertKeyValueToJSXAttribute(prop, expr));\n    }\n  }\n\n  _serializeReactElementToCreateElement(\n    val: ObjectValue,\n    reactElement: ReactElement,\n    createElementIdentifier: BabelNodeIdentifier\n  ): BabelNodeExpression {\n    let { type, attributes, children } = reactElement;\n\n    let createElementArguments = [type];\n    // check if we need to add attributes\n    if (attributes.length !== 0) {\n      let astAttributes = [];\n      for (let attribute of attributes) {\n        let expr = ((attribute.expr: any): BabelNodeExpression);\n\n        if (attribute.type === \"SPREAD\") {\n          astAttributes.push(t.spreadElement(expr));\n        } else if (attribute.type === \"PROPERTY\") {\n          let attributeKey = attribute.key;\n          let key;\n\n          invariant(typeof attributeKey === \"string\");\n          if (attributeKey.includes(\"-\")) {\n            key = t.stringLiteral(attributeKey);\n          } else {\n            key = t.identifier(attributeKey);\n          }\n          astAttributes.push(t.objectProperty(key, expr));\n        }\n      }\n      createElementArguments.push(t.objectExpression(astAttributes));\n    }\n    if (children.length !== 0) {\n      if (attributes.length === 0) {\n        createElementArguments.push(t.nullLiteral());\n      }\n      let astChildren = [];\n      for (let child of children) {\n        let expr = ((child.expr: any): BabelNodeExpression);\n\n        if (child.type === \"NORMAL\") {\n          astChildren.push(expr);\n        }\n      }\n      createElementArguments.push(...astChildren);\n    }\n    // cast to any for createElementArguments as casting it to BabelNodeExpresion[] isn't working\n    let createElementCall = t.callExpression(createElementIdentifier, (createElementArguments: any));\n    this._addBailOutMessageToBabelNode(val, createElementCall);\n    return createElementCall;\n  }\n\n  _serializeReactElementToJSXElement(val: ObjectValue, reactElement: ReactElement): BabelNodeExpression {\n    let { type, attributes, children } = reactElement;\n\n    let jsxTypeIdentifer = convertExpressionToJSXIdentifier(((type: any): BabelNodeIdentifier), true);\n    let astAttributes = [];\n    for (let attribute of attributes) {\n      let expr = ((attribute.expr: any): BabelNodeExpression);\n\n      if (attribute.type === \"SPREAD\") {\n        astAttributes.push(t.jSXSpreadAttribute(expr));\n      } else if (attribute.type === \"PROPERTY\") {\n        let attributeKey = attribute.key;\n        invariant(typeof attributeKey === \"string\");\n        astAttributes.push(convertKeyValueToJSXAttribute(attributeKey, expr));\n      }\n    }\n\n    let astChildren = [];\n    for (let child of children) {\n      let expr = ((child.expr: any): BabelNodeExpression);\n\n      if (child.type === \"NORMAL\") {\n        if (t.isStringLiteral(expr) || t.isNumericLiteral(expr)) {\n          astChildren.push(t.jSXText(((expr: any).value: string) + \"\"));\n        } else if (t.isJSXElement(expr)) {\n          astChildren.push(expr);\n        } else {\n          astChildren.push(t.jSXExpressionContainer(expr));\n        }\n      }\n    }\n\n    let openingElement = t.jSXOpeningElement(jsxTypeIdentifer, (astAttributes: any), astChildren.length === 0);\n    let closingElement = t.jSXClosingElement(jsxTypeIdentifer);\n    let jsxElement = t.jSXElement(openingElement, closingElement, astChildren, astChildren.length === 0);\n    this._addBailOutMessageToBabelNode(val, jsxElement);\n    return jsxElement;\n  }\n\n  _addBailOutMessageToBabelNode(val: ObjectValue, node: BabelNode): void {\n    // if there has been a bail-out, we create an inline BlockComment node before the JSX element\n    if (val.$BailOutReason !== undefined) {\n      // $BailOutReason contains an optional string of what to print out in the comment\n      node.leadingComments = [({ type: \"BlockComment\", value: `${val.$BailOutReason}` }: any)];\n    }\n  }\n\n  _serializeReactElementChild(child: Value, reactElement: ReactElement): ReactElementChild {\n    let reactElementChild = this._createReactElementChild();\n    this._serializeNowOrAfterWaitingForDependencies(child, reactElement, () => {\n      let expr = this.residualHeapSerializer.serializeValue(child);\n\n      reactElementChild.expr = expr;\n      reactElementChild.type = \"NORMAL\";\n    });\n    return reactElementChild;\n  }\n\n  serializeLazyHoistedNodes(optimizedFunction: FunctionValue): Array<BabelNodeStatement> {\n    const entries = [];\n    const lazilyHoistedNodes = this._lazilyHoistedNodes.get(optimizedFunction);\n    if (lazilyHoistedNodes !== undefined) {\n      let { id, nodes, createElementIdentifier } = lazilyHoistedNodes;\n      // create a function that initializes all the hoisted nodes\n      let func = t.functionExpression(\n        null,\n        // use createElementIdentifier if it's not null\n        createElementIdentifier ? [createElementIdentifier] : [],\n        t.blockStatement(nodes.map(node => t.expressionStatement(t.assignmentExpression(\"=\", node.id, node.astNode))))\n      );\n      // push it to the mainBody of the module\n      entries.push(t.variableDeclaration(\"var\", [t.variableDeclarator(id, func)]));\n      // output all the empty variable declarations that will hold the nodes lazily\n      entries.push(...nodes.map(node => t.variableDeclaration(\"var\", [t.variableDeclarator(node.id)])));\n      // reset the _lazilyHoistedNodes so other additional functions work\n      this._lazilyHoistedNodes.delete(optimizedFunction);\n    }\n    return entries;\n  }\n}\n"],"file":"ResidualReactElementSerializer.js"}