{"version":3,"sources":["../../src/serializer/ResidualHeapSerializer.js"],"names":["commentStatement","text","s","t","emptyStatement","leadingComments","type","value","CountingSemaphore","constructor","action","initialCount","count","acquireOne","releaseOne","ResidualHeapSerializer","realm","logger","modules","residualHeapValueIdentifiers","residualHeapInspector","residualHeapInfo","options","additionalFunctionValuesAndEffects","referentializer","generatorTree","residualOptimizedFunctions","_residualOptimizedFunctions","realmGenerator","generator","realmPreludeGenerator","preludeGenerator","residualOperationSerializer","ResidualOperationSerializer","prelude","_descriptors","Map","needsEmptyVar","needsAuxiliaryConstructor","descriptorNameGenerator","createNameGenerator","factoryNameGenerator","intrinsicNameGenerator","functionNameGenerator","initializeConditionNameGenerator","initializerNameGenerator","requireReturns","serializedValues","Set","_serializedValueWithIdentifiers","additionalFunctionValueNestedFunctions","residualReactElementSerializer","ResidualReactElementSerializer","residualFunctions","ResidualFunctions","getContainingAdditionalFunction","functionValue","instance","residualFunctionInstances","get","undefined","containingAdditionalFunction","getLocation","getSerializeObjectIdentifier","createLocation","location","identifier","generate","declar","variableDeclaration","variableDeclarator","getPrelude","push","createFunction","statements","id","functionDeclaration","blockStatement","functionInfos","functionInstances","classMethodInstances","additionalFunctionValueInfos","emitter","Emitter","referencedDeclaredValues","conditionalFeasibility","derivedIds","mainBody","getBody","residualValues","values","residualClassMethodInstances","residualFunctionInfos","_options","activeGeneratorBodies","rewrittenAdditionalFunctions","declarativeEnvironmentRecordsBindings","globalBindings","additionalFunctionGenerators","declaredGlobalLets","_objectSemaphores","additionalGeneratorRoots","environment","$GlobalEnv","environmentRecord","GlobalEnvironmentRecord","globalEnvironmentRecord","getStatistics","statistics","SerializerStatistics","_acquireOneObjectSemaphore","object","semaphore","_emitObjectProperties","obj","properties","objectPrototypeAlreadyEstablished","cleanupDummyProperties","skipPrototype","symbol","propertyBinding","symbols","desc","descriptor","emitNowOrAfterWaitingForDependencies","_getDescriptorValues","concat","_emitProperty","isCertainlyLeaked","mightNotBeLeakedObject","shouldDropAsAssignedProp","PropertyDescriptor","set","key","pathNode","canIgnoreProperty","body","has","unknownProperty","_getNestedValuesFromAbstractDescriptor","_emitPropertiesWithComputedNamesDescriptor","_emitObjectPrototype","FunctionValue","_emitConstructorPrototype","objects","objectProperties","size","kind","getKind","proto","$Prototype","invariantLevel","serializedProto","serializeValue","uid","fetchedPrototype","isCompatibleWith","MOBILE_JSC_VERSION","memberExpression","protoExpression","callExpression","memoizeReference","condition","binaryExpression","consequent","getErrorStatement","stringLiteral","emit","ifStatement","intrinsics","expressionStatement","assignmentExpression","func","prototype","HeapInspector","getPropertyValue","ObjectValue","Value","val","AbstractValue","_getNestedValuesFromAbstract","AbstractJoinedDescriptor","joinCondition","descriptor1","descriptor2","absVal","args","length","cond","P","V","W","alternate","_emitPropertiesWithComputedNames","serializedCond","valuesToProcess","consequentStatement","alternateStatement","oldBody","beginEmitting","parentBody","entries","done","consequentBody","endEmitting","alternateBody","unaryExpression","processValues","earlier_props","serializedP","serializedV","getIdentifierAndIncrementReferenceCount","deleteIfMightHaveBeenDeleted","locationFunction","serializedKey","SymbolValue","computed","isIdentifier","_deleteProperty","emitDefinePropertyBody","trueBody","falseBody","_canEmbedProperty","descValue","getReasonToWaitForDependencies","mightHaveBeenDeleted","_getPropertyAssignmentStatement","descProps","boolKeys","valKeys","descriptorsKey","boolKey","b","objectProperty","booleanLiteral","toString","join","descriptorId","objectExpression","descKey","UndefinedValue","sequenceExpression","_serializeDeclarativeEnvironmentRecordBinding","residualFunctionBinding","serializedValue","declarativeEnvironmentRecord","hasLeaked","referentializeLeakedBinding","voidExpression","modified","referentializeModifiedBinding","mightBeObject","incrementReferenceCount","_getReferencingGenerators","initialGenerators","functionValues","referencingOnlyOptimizedFunction","result","activeFunctions","slice","visitedFunctions","f","pop","add","g","scopes","scope","Generator","Array","from","_getActiveBodyOfGenerator","_getTarget","trace","_logScopes","generators","optimizedFunctionRoot","tryGetOptimizedFunctionRoot","delayInitializations","includes","residualFunctionInitializers","registerValueOnlyReferencedByResidualFunctions","usedOnlyByResidualFunctions","description","console","log","filter","getParent","getGeneratorParent","commonAncestor","reduce","x","y","getName","notYetDoneBodies","dependenciesVisitor","onIntrinsicDerivedObject","dependency","intrinsicName","getActiveOptimizedFunction","declarationBody","getDeclarationBody","onAbstractValueWithIdentifier","scopeBody","nestingLevel","_getValueDebugName","name","getIdentifier","_getResidualFunctionBinding","binding","$DeclarativeRecord","DeclarativeEnvironmentRecord","residualFunctionBindings","serializeBinding","residualBinding","serializedUnscopedLocation","optimizedFunction","additionalFunctionPreludes","_declare","emittingToResidualFunction","bindingType","init","assignment","referenceOnly","refuseSerialization","_serializeAbstractValueHelper","ECMAScriptSourceFunctionValue","classMethodInstance","methodType","error","CompilerDiagnostic","$ECMAScriptCode","loc","handleError","FatalError","isLeaf","res","_serializeValue","target","debugIdentifiers","needsIdentifier","debugScopes","scopeList","map","comment","valueIds","delayedValues","deleteIdentifier","valuesInlined","_serializeValueIntrinsic","intrinsicNameGenerated","convertStringToMember","_assignProperty","c","EmptyValue","_serializeEmptyValue","deletion","_serializeArrayIndexProperties","array","indexPropertyLength","remainingProperties","elems","i","elem","elemVal","instantRenderMode","instantRender","enabled","delayReason","instantRenderBailout","expressionLocation","getReasonToWaitForActiveValue","delete","_serializeArrayLengthIfNeeded","numberOfIndexProperties","lenProperty","mightBeLeakedObject","evaluateWithoutLeakLogic","To","ToLength","_serializeValueArray","unconditionalLength","assignmentNotNeeded","initProperties","arrayExpression","_serializeValueMap","omitDeadEntries","$MapData","$WeakMapData","len","mapConstructorDoesntTakeArguments","entry","$Key","$Value","emitAfterWaiting","newExpression","_serializeValueSet","$SetData","$WeakSetData","setConstructorDoesntTakeArguments","_serializeValueTypedArrayOrDataView","buf","$ViewedArrayBuffer","outlinedArrayBuffer","_serializeValueArrayBuffer","$ArrayBufferByteLength","db","$ArrayBufferData","allzero","numericLiteral","arrayValue","consExpr","_serializeValueFunction","BoundFunctionValue","$BoundTargetFunction","$BoundThis","$BoundArguments","boundArg","NativeFunctionValue","residualBindings","inOptimizedFunction","bindingsEmittedSemaphore","insertionPoint","BodyReference","getBodyReference","boundName","referencedValues","serializeBindingFunc","_serializeGlobalBinding","$FunctionKind","homeObject","$HomeObject","$IsClassPrototype","_serializeClass","additionalEffects","_serializeAdditionalFunction","classFunc","classPrototype","classProtoId","hasSerializedClassProtoId","propertiesToSerialize","classSuperNode","serializeClassPrototypeId","classId","serializeClassMethodOrProperty","propertyNameOrSymbol","methodFuncOrProperty","serializeNameAndId","methodFuncOrPropertyId","_serializeClassMethod","prototypeId","serializeClassProperty","propertyValue","prop","propertyName","method","ClassPropertiesToIgnore","classMethodKeyNode","methodFunc","classMethodComputed","targetDescriptor","getTargetIntegrityDescriptor","writable","configurable","enumerable","_findLastObjectPrototype","_serializeValueRegExpObject","source","$OriginalSource","flags","$OriginalFlags","RegExp","regExpLiteral","serializeValueRawObject","emitIntegrityCommand","dummyProperties","props","temporalAlias","propValue","emptyExpression","_serializeValueObjectViaConstructor","classConstructor","constructorExpression","serializeValueObject","originalConstructor","setFunctionPrototype","numberData","$NumberData","throwIfNotConcreteNumber","NumberValue","stringData","$StringData","throwIfNotConcreteString","StringValue","booleanData","$BooleanData","throwIfNotConcreteBoolean","BooleanValue","dateValue","$DateValue","serializedDateValue","serializeReactElement","_constructor","createViaAuxiliaryConstructor","ObjectPrototype","_serializeValueSymbol","$Description","serializedArg","globalReg","globalSymbolRegistry","find","e","$Symbol","_serializeValueProxy","$ProxyTarget","$ProxyHandler","serializedArgs","abstractArg","ob","operationDescriptor","serializeExpression","cannotDeclare","hasBeenDeclared","_serializeAbstractValue","cf","hasIdentifier","reason","isIntrinsic","valueToNode","serialize","_serializeValueObjectBase","ProxyValue","objectSemaphore","targetCommand","getTargetIntegrityCommand","referentialized","_annotateGeneratorStatements","parent","beginComments","effects","effectsToApply","valueToString","keyToString","createdObjects","modifiedBindings","modifiedProperties","keys","unshift","_withGeneratorScope","callback","newBody","isChild","_getContext","context","serializeOperationDescriptor","serializeStatement","bind","serializeBindingAssignment","bindingValue","serializeCondition","consequentGenerator","alternateGenerator","serializedCondition","serializeGenerator","serializeDebugScopeComment","declared","serializeReturnValue","returnStatement","initGenerator","activeGeneratorBody","finalizeGenerator","finalizeCurrentBody","statement","getPropertyAssignmentStatement","canOmit","declare","emitBindingModification","newValue","bindingReference","isLVal","serializedNewValue","emitPropertyModification","dependencies","_shouldBeWrapped","item","_serializeAdditionalFunctionGeneratorAndEffects","effectsGenerator","withEffectsAppliedInGlobalEnv","lazyHoistedReactNodes","serializeLazyHoistedNodes","additionalFunctionValue","transforms","additionalRoots","additionalRoot","nestedFunctions","forEach","transform","prepareAdditionalFunctionValues","postGeneratorSerialization","declaredCount","moduleId","moduleValue","initializedModules","apply","finalize","factorifyInitializers","unstrictFunctionBodies","strictFunctionBodies","spliceFunctions","strictDirective","directive","directiveLiteral","globalDirectives","isStrict","funcLoop","node","isFunctionExpression","directives","functionExpression","ast_body","declaredGlobals","globalExpression","thisExpression","usesThis","every","_logSerializedResidualMismatches","cleanInstance","program_directives","file","program","__originalName","JSON","stringify","logValue"],"mappings":";;;;;;;AAWA;;AAEA;;AACA;;AAgBA;;AAaA;;AACA;;AACA;;AAEA;;AAWA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAQA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAxFA;;;;;;;;AA2FA,SAASA,gBAAT,CAA0BC,IAA1B,EAAwC;AACtC,MAAIC,CAAC,GAAGC,CAAC,CAACC,cAAF,EAAR;AACAF,EAAAA,CAAC,CAACG,eAAF,GAAoB,CAAE;AAAEC,IAAAA,IAAI,EAAE,cAAR;AAAwBC,IAAAA,KAAK,EAAEN;AAA/B,GAAF,CAApB;AACA,SAAOC,CAAP;AACD;;AAED,MAAMM,iBAAN,CAAwB;AAGtBC,EAAAA,WAAW,CAACC,MAAD,EAAqBC,YAAoB,GAAG,CAA5C,EAA+C;AACxD,4BAAUA,YAAY,IAAI,CAA1B;AACA,SAAKC,KAAL,GAAaD,YAAb;AACA,SAAKD,MAAL,GAAcA,MAAd;AACD;;AACDG,EAAAA,UAAU,GAAG;AACX,SAAKD,KAAL;AACD;;AACDE,EAAAA,UAAU,GAAG;AACX,4BAAU,KAAKF,KAAL,GAAa,CAAvB;AACA,QAAI,EAAE,KAAKA,KAAP,KAAiB,CAArB,EAAwB,KAAKF,MAAL;AACzB;;AAdqB;;AAiBjB,MAAMK,sBAAN,CAA6B;AAClCN,EAAAA,WAAW,CACTO,KADS,EAETC,MAFS,EAGTC,OAHS,EAITC,4BAJS,EAKTC,qBALS,EAMTC,gBANS,EAOTC,OAPS,EAQTC,kCARS,EASTC,eATS,EAUTC,aAVS,EAWTC,0BAXS,EAYT;AACA,SAAKV,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,4BAAL,GAAoCA,4BAApC;AACA,SAAKK,eAAL,GAAuBA,eAAvB;AACA,SAAKG,2BAAL,GAAmCD,0BAAnC;AAEA,QAAIE,cAAc,GAAG,KAAKZ,KAAL,CAAWa,SAAhC;AACA,4BAAUD,cAAV;AACA,SAAKC,SAAL,GAAiBD,cAAjB;AACA,QAAIE,qBAAqB,GAAG,KAAKd,KAAL,CAAWe,gBAAvC;AACA,4BAAUD,qBAAV;AACA,SAAKC,gBAAL,GAAwBD,qBAAxB;AACA,SAAKE,2BAAL,GAAmC,IAAIC,wDAAJ,CAAgCjB,KAAhC,EAAuCc,qBAAvC,CAAnC;AAEA,SAAKI,OAAL,GAAe,EAAf;AACA,SAAKC,YAAL,GAAoB,IAAIC,GAAJ,EAApB;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,yBAAL,GAAiC,KAAjC;AACA,SAAKC,uBAAL,GAA+B,KAAKR,gBAAL,CAAsBS,mBAAtB,CAA0C,IAA1C,CAA/B;AACA,SAAKC,oBAAL,GAA4B,KAAKV,gBAAL,CAAsBS,mBAAtB,CAA0C,IAA1C,CAA5B;AACA,SAAKE,sBAAL,GAA8B,KAAKX,gBAAL,CAAsBS,mBAAtB,CAA0C,KAA1C,CAA9B;AACA,SAAKG,qBAAL,GAA6B,KAAKZ,gBAAL,CAAsBS,mBAAtB,CAA0C,KAA1C,CAA7B;AACA,SAAKI,gCAAL,GAAwC,KAAKb,gBAAL,CAAsBS,mBAAtB,CAA0C,cAA1C,CAAxC;AACA,SAAKK,wBAAL,GAAgC,KAAKd,gBAAL,CAAsBS,mBAAtB,CAA0C,SAA1C,CAAhC;AACA,SAAKM,cAAL,GAAsB,IAAIV,GAAJ,EAAtB;AACA,SAAKW,gBAAL,GAAwB,IAAIC,GAAJ,EAAxB;AACA,SAAKC,+BAAL,GAAuC,IAAID,GAAJ,EAAvC;AACA,SAAKE,sCAAL,GAA8C,IAAIF,GAAJ,EAA9C;AACA,SAAKG,8BAAL,GAAsC,IAAIC,8DAAJ,CACpC,KAAKpC,KAD+B,EAEpC,IAFoC,EAGpCU,0BAHoC,CAAtC;AAKA,SAAK2B,iBAAL,GAAyB,IAAIC,oCAAJ,CACvB,KAAKtC,KADkB,EAEvBM,OAFuB,EAGvB,KAAKJ,OAHkB,EAIvB,KAAK4B,cAJkB,EAKvB;AACES,MAAAA,+BAA+B,EAAEC,aAAa,IAAI;AAChD,YAAIC,QAAQ,GAAG,KAAKC,yBAAL,CAA+BC,GAA/B,CAAmCH,aAAnC,CAAf;AACA,gCAAUC,QAAQ,KAAKG,SAAvB;AACA,eAAOH,QAAQ,CAACI,4BAAhB;AACD,OALH;AAMEC,MAAAA,WAAW,EAAEvD,KAAK,IAAI,KAAKwD,4BAAL,CAAkCxD,KAAlC,CANxB;AAOEyD,MAAAA,cAAc,EAAEH,4BAA4B,IAAI;AAC9C,YAAII,QAAQ,GAAG9D,CAAC,CAAC+D,UAAF,CAAa,KAAKtB,gCAAL,CAAsCuB,QAAtC,EAAb,CAAf;AACA,YAAIC,MAAM,GAAGjE,CAAC,CAACkE,mBAAF,CAAsB,KAAtB,EAA6B,CAAClE,CAAC,CAACmE,kBAAF,CAAqBL,QAArB,CAAD,CAA7B,CAAb;AACA,aAAKM,UAAL,CAAgBV,4BAAhB,EAA8CW,IAA9C,CAAmDJ,MAAnD;AACA,eAAOH,QAAP;AACD,OAZH;AAaEQ,MAAAA,cAAc,EAAE,CAACZ,4BAAD,EAA+Ba,UAA/B,KAA8C;AAC5D,YAAIC,EAAE,GAAGxE,CAAC,CAAC+D,UAAF,CAAa,KAAKrB,wBAAL,CAA8BsB,QAA9B,EAAb,CAAT;AACA,aAAKI,UAAL,CAAgBV,4BAAhB,EAA8CW,IAA9C,CACErE,CAAC,CAACyE,mBAAF,CAAsBD,EAAtB,EAA0B,EAA1B,EAA8BxE,CAAC,CAAC0E,cAAF,CAAiBH,UAAjB,CAA9B,CADF;AAGA,eAAOC,EAAP;AACD;AAnBH,KALuB,EA0BvB,KAAKzC,OA1BkB,EA2BvB,KAAKO,oBA3BkB,EA4BvBpB,gBAAgB,CAACyD,aA5BM,EA6BvBzD,gBAAgB,CAAC0D,iBA7BM,EA8BvB1D,gBAAgB,CAAC2D,oBA9BM,EA+BvB3D,gBAAgB,CAAC4D,4BA/BM,EAgCvB,KAAK/B,sCAhCkB,EAiCvB1B,eAjCuB,CAAzB;AAmCA,SAAK0D,OAAL,GAAe,IAAIC,gBAAJ,CACb,KAAK9B,iBADQ,EAEbhC,gBAAgB,CAAC+D,wBAFJ,EAGb/D,gBAAgB,CAACgE,sBAHJ,EAIb,KAAKrE,KAAL,CAAWsE,UAJE,CAAf;AAMA,SAAKC,QAAL,GAAgB,KAAKL,OAAL,CAAaM,OAAb,EAAhB;AACA,SAAKpE,qBAAL,GAA6BA,qBAA7B;AACA,SAAKqE,cAAL,GAAsBpE,gBAAgB,CAACqE,MAAvC;AACA,SAAKhC,yBAAL,GAAiCrC,gBAAgB,CAAC0D,iBAAlD;AACA,SAAKY,4BAAL,GAAoCtE,gBAAgB,CAAC2D,oBAArD;AACA,SAAKY,qBAAL,GAA6BvE,gBAAgB,CAACyD,aAA9C;AACA,SAAKe,QAAL,GAAgBvE,OAAhB;AACA,SAAK8D,wBAAL,GAAgC/D,gBAAgB,CAAC+D,wBAAjD;AACA,SAAKU,qBAAL,GAA6B,IAAI1D,GAAJ,EAA7B;AACA,SAAKb,kCAAL,GAA0CA,kCAA1C;AACA,SAAK0D,4BAAL,GAAoC5D,gBAAgB,CAAC4D,4BAArD;AACA,SAAKc,4BAAL,GAAoC,IAAI3D,GAAJ,EAApC;AACA,SAAK4D,qCAAL,GAA6C3E,gBAAgB,CAAC2E,qCAA9D;AACA,SAAKC,cAAL,GAAsB5E,gBAAgB,CAAC4E,cAAvC;AACA,SAAKxE,aAAL,GAAqBA,aAArB;AACA,SAAK4D,sBAAL,GAA8BhE,gBAAgB,CAACgE,sBAA/C;AACA,SAAKa,4BAAL,GAAoC,IAAI9D,GAAJ,EAApC;AACA,SAAK+D,kBAAL,GAA0B,IAAI/D,GAAJ,EAA1B;AACA,SAAKgE,iBAAL,GAAyB,IAAIhE,GAAJ,EAAzB;AACA,SAAKiE,wBAAL,GAAgChF,gBAAgB,CAACgF,wBAAjD;AACA,QAAIC,WAAW,GAAGtF,KAAK,CAACuF,UAAN,CAAiBC,iBAAnC;AACA,4BAAUF,WAAW,YAAYG,oCAAjC;AACA,SAAKC,uBAAL,GAA+BJ,WAA/B;AACD;;AAyDDK,EAAAA,aAAa,GAAyB;AACpC,4BAAU,KAAK3F,KAAL,CAAW4F,UAAX,YAAiCC,gCAA3C,EAAiE,6CAAjE;AACA,WAAO,KAAK7F,KAAL,CAAW4F,UAAlB;AACD;;AAIDE,EAAAA,0BAA0B,CAACC,MAAD,EAAgD;AACxE,QAAIC,SAAS,GAAG,KAAKZ,iBAAL,CAAuBzC,GAAvB,CAA2BoD,MAA3B,CAAhB;;AACA,QAAIC,SAAS,KAAKpD,SAAlB,EAA6BoD,SAAS,CAACnG,UAAV;AAC7B,WAAOmG,SAAP;AACD,GApLiC,CAsLlC;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,qBAAqB,CACnBC,GADmB,EAEnBC,UAAwC,GAAGD,GAAG,CAACC,UAF5B,EAGnBC,iCAA0C,GAAG,KAH1B,EAInBC,sBAJmB,EAKnBC,aAAsB,GAAG,KALN,EAMb;AACN;AACA,SAAK,IAAI,CAACC,MAAD,EAASC,eAAT,CAAT,IAAsCN,GAAG,CAACO,OAA1C,EAAmD;AACjD,8BAAUD,eAAV;AACA,UAAIE,IAAI,GAAGF,eAAe,CAACG,UAA3B;AACA,UAAID,IAAI,KAAK9D,SAAb,EAAwB,SAHyB,CAGf;;AAClC,UAAIoD,SAAS,GAAG,KAAKF,0BAAL,CAAgCI,GAAhC,CAAhB;;AACA,WAAKhC,OAAL,CAAa0C,oCAAb,CACE,KAAKC,oBAAL,CAA0BH,IAA1B,EAAgCI,MAAhC,CAAuC,CAACP,MAAD,EAASL,GAAT,CAAvC,CADF,EAEE,MAAM;AACJ,gCAAUQ,IAAI,KAAK9D,SAAnB;;AACA,aAAKmE,aAAL,CAAmBb,GAAnB,EAAwBK,MAAxB,EAAgCG,IAAhC;;AACA,YAAIV,SAAS,KAAKpD,SAAlB,EAA6BoD,SAAS,CAAClG,UAAV;AAC9B,OANH,EAOE,KAAKoE,OAAL,CAAaM,OAAb,EAPF;AASD,KAhBK,CAkBN;;;AACA,QAAIwC,iBAAiB,GAAG,CAACd,GAAG,CAACe,sBAAJ,EAAzB;;AACA,QAAIC,wBAAwB,GAAIP,UAAD,IAC7BK,iBAAiB,IAChBL,UAAU,YAAYQ,+BAAtB,IAA6CR,UAAU,CAAChE,GAAX,KAAmBC,SAAnB,IAAgC+D,UAAU,CAACS,GAAX,KAAmBxE,SAFnG,CApBM,CAwBN;;;AACA,SAAK,IAAI,CAACyE,GAAD,EAAMb,eAAN,CAAT,IAAmCL,UAAnC,EAA+C;AAC7C,8BAAUK,eAAV;AAEA,UAAIA,eAAe,CAACc,QAAhB,KAA6B1E,SAAjC,EAA4C,SAHC,CAGS;;AACtD,UAAI8D,IAAI,GAAGF,eAAe,CAACG,UAA3B;AAEA,UAAIO,wBAAwB,CAACR,IAAD,CAA5B,EAAoC;AAEpC,UAAIA,IAAI,KAAK9D,SAAb,EAAwB,SARqB,CAQX;;AAClC,UAAI,KAAKxC,qBAAL,CAA2BmH,iBAA3B,CAA6CrB,GAA7C,EAAkDmB,GAAlD,CAAJ,EAA4D;AAC5D,8BAAUX,IAAI,KAAK9D,SAAnB;;AACA,UAAIoD,SAAS,GAAG,KAAKF,0BAAL,CAAgCI,GAAhC,CAAhB;;AACA,UAAIsB,IAAI,GAAG,KAAKtD,OAAL,CAAaM,OAAb,EAAX;AACA,WAAKN,OAAL,CAAa0C,oCAAb,CACE,KAAKC,oBAAL,CAA0BH,IAA1B,EAAgCI,MAAhC,CAAuCZ,GAAvC,CADF,EAEE,MAAM;AACJ,gCAAUQ,IAAI,KAAK9D,SAAnB;;AACA,aAAKmE,aAAL,CAAmBb,GAAnB,EAAwBmB,GAAxB,EAA6BX,IAA7B,EAAmCL,sBAAsB,IAAI,IAA1B,IAAkCA,sBAAsB,CAACoB,GAAvB,CAA2BJ,GAA3B,CAArE;;AACA,YAAIrB,SAAS,KAAKpD,SAAlB,EAA6BoD,SAAS,CAAClG,UAAV;AAC9B,OANH,EAOE0H,IAPF;AASD,KA/CK,CAiDN;;;AACA,QAAItB,GAAG,CAACwB,eAAJ,KAAwB9E,SAA5B,EAAuC;AACrC,UAAI8D,IAAI,GAAGR,GAAG,CAACwB,eAAJ,CAAoBf,UAA/B;;AACA,UAAID,IAAI,KAAK9D,SAAb,EAAwB;AACtB,YAAIoD,SAAS,GAAG,KAAKF,0BAAL,CAAgCI,GAAhC,CAAhB;;AACA,aAAKhC,OAAL,CAAa0C,oCAAb,CACE,KAAKe,sCAAL,CAA4CjB,IAA5C,EAAkD,CAACR,GAAD,CAAlD,CADF,EAEE,MAAM;AACJ,eAAK0B,0CAAL,CAAgD1B,GAAhD,EAAqDQ,IAArD;;AACA,cAAIV,SAAS,KAAKpD,SAAlB,EAA6BoD,SAAS,CAAClG,UAAV;AAC9B,SALH,EAME,KAAKoE,OAAL,CAAaM,OAAb,EANF;AAQD;AACF,KA/DK,CAiEN;;;AACA,QAAI,CAAC8B,aAAL,EAAoB;AAClB,WAAKuB,oBAAL,CAA0B3B,GAA1B,EAA+BE,iCAA/B;;AACA,UAAIF,GAAG,YAAY4B,qBAAnB,EAAkC,KAAKC,yBAAL,CAA+B7B,GAA/B;AACnC;;AAED,SAAKP,aAAL,GAAqBqC,OAArB;AACA,SAAKrC,aAAL,GAAqBsC,gBAArB,IAAyC/B,GAAG,CAACC,UAAJ,CAAe+B,IAAxD;AACD;;AAEDL,EAAAA,oBAAoB,CAAC3B,GAAD,EAAmBE,iCAAnB,EAAqE;AACvF,QAAI+B,IAAI,GAAGjC,GAAG,CAACkC,OAAJ,EAAX;AACA,QAAIC,KAAK,GAAGnC,GAAG,CAACoC,UAAhB;;AACA,QAAIlC,iCAAJ,EAAuC;AACrC,UAAI,KAAKpG,KAAL,CAAWuI,cAAX,IAA6B,CAAjC,EAAoC;AAClC,aAAKrE,OAAL,CAAa0C,oCAAb,CACE,CAACyB,KAAD,EAAQnC,GAAR,CADF,EAEE,MAAM;AACJ,kCAAUmC,KAAV;AACA,cAAIG,eAAe,GAAG,KAAKC,cAAL,CAAoBJ,KAApB,CAAtB;AACA,cAAIK,GAAG,GAAG,KAAK3F,4BAAL,CAAkCmD,GAAlC,CAAV;AACA,gBAAMyC,gBAAgB,GACpB,KAAK3I,KAAL,CAAW4I,gBAAX,CAA4B,KAAK5I,KAAL,CAAW6I,kBAAvC,KAA8D,KAAK7I,KAAL,CAAW4I,gBAAX,CAA4B,QAA5B,CAA9D,GACIzJ,CAAC,CAAC2J,gBAAF,CAAmBJ,GAAnB,EAAwBK,6BAAxB,CADJ,GAEI5J,CAAC,CAAC6J,cAAF,CAAiB,KAAKjI,gBAAL,CAAsBkI,gBAAtB,CAAuC,uBAAvC,CAAjB,EAAkF,CAACP,GAAD,CAAlF,CAHN;AAIA,cAAIQ,SAAS,GAAG/J,CAAC,CAACgK,gBAAF,CAAmB,KAAnB,EAA0BR,gBAA1B,EAA4CH,eAA5C,CAAhB;AACA,cAAIY,UAAU,GAAG,KAAKpI,2BAAL,CAAiCqI,iBAAjC,CACflK,CAAC,CAACmK,aAAF,CAAgB,sBAAhB,CADe,CAAjB;AAGA,eAAKpF,OAAL,CAAaqF,IAAb,CAAkBpK,CAAC,CAACqK,WAAF,CAAcN,SAAd,EAAyBE,UAAzB,CAAlB;AACD,SAfH,EAgBE,KAAKlF,OAAL,CAAaM,OAAb,EAhBF;AAkBD;;AACD;AACD;;AACD,QAAI6D,KAAK,KAAK,KAAKrI,KAAL,CAAWyJ,UAAX,CAAsBtB,IAAI,GAAG,WAA7B,CAAd,EAAyD;;AAEzD,QAAInC,SAAS,GAAG,KAAKF,0BAAL,CAAgCI,GAAhC,CAAhB;;AACA,SAAKhC,OAAL,CAAa0C,oCAAb,CACE,CAACyB,KAAD,EAAQnC,GAAR,CADF,EAEE,MAAM;AACJ,8BAAUmC,KAAV;AACA,UAAIG,eAAe,GAAG,KAAKC,cAAL,CAAoBJ,KAApB,CAAtB;AACA,UAAIK,GAAG,GAAG,KAAK3F,4BAAL,CAAkCmD,GAAlC,CAAV;AACA,UAAI,CAAC,KAAKlG,KAAL,CAAW4I,gBAAX,CAA4B,KAAK5I,KAAL,CAAW6I,kBAAvC,CAAD,IAA+D,CAAC,KAAK7I,KAAL,CAAW4I,gBAAX,CAA4B,QAA5B,CAApE,EACE,KAAK1E,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACuK,mBAAF,CACEvK,CAAC,CAAC6J,cAAF,CAAiB,KAAKjI,gBAAL,CAAsBkI,gBAAtB,CAAuC,uBAAvC,CAAjB,EAAkF,CAACP,GAAD,EAAMF,eAAN,CAAlF,CADF,CADF,EADF,KAMK;AACH,aAAKtE,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACuK,mBAAF,CACEvK,CAAC,CAACwK,oBAAF,CAAuB,GAAvB,EAA4BxK,CAAC,CAAC2J,gBAAF,CAAmBJ,GAAnB,EAAwBK,6BAAxB,CAA5B,EAAsEP,eAAtE,CADF,CADF;AAKD;AACD,UAAIxC,SAAS,KAAKpD,SAAlB,EAA6BoD,SAAS,CAAClG,UAAV;AAC9B,KApBH,EAqBE,KAAKoE,OAAL,CAAaM,OAAb,EArBF;AAuBD;;AAEDuD,EAAAA,yBAAyB,CAAC6B,IAAD,EAA4B;AACnD;AACA;AACA;AACA,QAAIC,SAAS,GAAGC,6BAAcC,gBAAd,CAA+BH,IAA/B,EAAqC,WAArC,CAAhB;;AACA,QAAIC,SAAS,YAAYG,mBAArB,IAAoC,KAAKvF,cAAL,CAAoBgD,GAApB,CAAwBoC,SAAxB,CAAxC,EAA4E;AAC1E,WAAK3F,OAAL,CAAa0C,oCAAb,CACE,CAACiD,SAAD,CADF,EAEE,MAAM;AACJ,gCAAUA,SAAS,YAAYI,aAA/B;AACA,aAAKxB,cAAL,CAAoBoB,SAApB;AACD,OALH,EAME,KAAK3F,OAAL,CAAaM,OAAb,EANF;AAQD;AACF;;AAEDmD,EAAAA,sCAAsC,CAACjB,IAAD,EAA0BhC,MAA1B,EAA8D;AAClG,QAAIgC,IAAI,KAAK9D,SAAb,EAAwB,OAAO8B,MAAP;;AACxB,QAAIgC,IAAI,YAAYS,+BAApB,EAAwC;AACtC,UAAI+C,GAAG,GAAGxD,IAAI,CAACnH,KAAf;AACA,8BAAU2K,GAAG,YAAYC,qBAAzB;AACA,aAAO,KAAKC,4BAAL,CAAkCF,GAAlC,EAAuCxF,MAAvC,CAAP;AACD,KAJD,MAIO,IAAIgC,IAAI,YAAY2D,qCAApB,EAA8C;AACnD3F,MAAAA,MAAM,CAAClB,IAAP,CAAYkD,IAAI,CAAC4D,aAAjB;;AACA,WAAK3C,sCAAL,CAA4CjB,IAAI,CAAC6D,WAAjD,EAA8D7F,MAA9D;;AACA,WAAKiD,sCAAL,CAA4CjB,IAAI,CAAC8D,WAAjD,EAA8D9F,MAA9D;;AACA,aAAOA,MAAP;AACD,KALM,MAKA;AACL,8BAAU,KAAV,EAAiB,oBAAjB;AACD;AACF;;AAED0F,EAAAA,4BAA4B,CAACK,MAAD,EAAwB/F,MAAxB,EAA4D;AACtF,QAAI+F,MAAM,CAACtC,IAAP,KAAgB,kBAApB,EAAwC,OAAOzD,MAAP;AACxC,QAAI+F,MAAM,CAACtC,IAAP,KAAgB,0CAApB,EAAgE,OAAOzD,MAAP;AAChE,4BAAU+F,MAAM,CAACC,IAAP,CAAYC,MAAZ,KAAuB,CAAjC;AACA,QAAIC,IAAI,GAAGH,MAAM,CAACC,IAAP,CAAY,CAAZ,CAAX;AACA,4BAAUE,IAAI,YAAYT,qBAA1B;;AACA,QAAIS,IAAI,CAACzC,IAAL,KAAc,sCAAlB,EAA0D;AACxD,UAAI0C,CAAC,GAAGD,IAAI,CAACF,IAAL,CAAU,CAAV,CAAR;AACAhG,MAAAA,MAAM,CAAClB,IAAP,CAAYqH,CAAZ;AACA,UAAIC,CAAC,GAAGL,MAAM,CAACC,IAAP,CAAY,CAAZ,CAAR;AACAhG,MAAAA,MAAM,CAAClB,IAAP,CAAYsH,CAAZ;AACA,UAAIC,CAAC,GAAGN,MAAM,CAACC,IAAP,CAAY,CAAZ,CAAR;AACA,UAAIK,CAAC,YAAYZ,qBAAjB,EAAgC,KAAKC,4BAAL,CAAkCW,CAAlC,EAAqCrG,MAArC,EAAhC,KACKA,MAAM,CAAClB,IAAP,CAAYuH,CAAZ;AACN,KARD,MAQO;AACL;AACArG,MAAAA,MAAM,CAAClB,IAAP,CAAYoH,IAAZ;AACA,UAAIxB,UAAU,GAAGqB,MAAM,CAACC,IAAP,CAAY,CAAZ,CAAjB;;AACA,UAAItB,UAAU,YAAYe,qBAA1B,EAAyC;AACvC,aAAKC,4BAAL,CAAkChB,UAAlC,EAA8C1E,MAA9C;AACD,OAFD,MAEO;AACLA,QAAAA,MAAM,CAAClB,IAAP,CAAY4F,UAAZ;AACD;;AACD,UAAI4B,SAAS,GAAGP,MAAM,CAACC,IAAP,CAAY,CAAZ,CAAhB;;AACA,UAAIM,SAAS,YAAYb,qBAAzB,EAAwC;AACtC,aAAKC,4BAAL,CAAkCY,SAAlC,EAA6CtG,MAA7C;AACD,OAFD,MAEO;AACLA,QAAAA,MAAM,CAAClB,IAAP,CAAYwH,SAAZ;AACD;AACF;;AACD,WAAOtG,MAAP;AACD;;AAEDkD,EAAAA,0CAA0C,CAAC1B,GAAD,EAAmBQ,IAAnB,EAAkD;AAC1F,QAAIA,IAAI,KAAK9D,SAAb,EAAwB;;AACxB,QAAI8D,IAAI,YAAYS,+BAApB,EAAwC;AACtC,UAAI+C,GAAG,GAAGxD,IAAI,CAACnH,KAAf;AACA,8BAAU2K,GAAG,YAAYC,qBAAzB;;AACA,WAAKc,gCAAL,CAAsC/E,GAAtC,EAA2CgE,GAA3C;AACD,KAJD,MAIO,IAAIxD,IAAI,YAAY2D,qCAApB,EAA8C;AACnD,UAAIa,cAAc,GAAG,KAAKzC,cAAL,CAAoB/B,IAAI,CAAC4D,aAAzB,CAArB;AAEA,UAAIa,eAAe,GAAG,IAAInJ,GAAJ,EAAtB;AACA,UAAIoJ,mBAAJ;AACA,UAAIC,kBAAJ;;AAEA,UAAI3E,IAAI,CAAC6D,WAAT,EAAsB;AACpB,YAAIe,OAAO,GAAG,KAAKpH,OAAL,CAAaqH,aAAb,CACZ,YADY,EAEZ;AACEjM,UAAAA,IAAI,EAAE,6BADR;AAEEkM,UAAAA,UAAU,EAAE5I,SAFd;AAGE6I,UAAAA,OAAO,EAAE,EAHX;AAIEC,UAAAA,IAAI,EAAE;AAJR,SAFY;AAQZ;AAAY,YARA,CAAd;;AAUA,aAAK9D,0CAAL,CAAgD1B,GAAhD,EAAqDQ,IAAI,CAAC6D,WAA1D;;AACA,YAAIoB,cAAc,GAAG,KAAKzH,OAAL,CAAa0H,WAAb,CAAyB,YAAzB,EAAuCN,OAAvC,EAAgDH,eAAhD;AAAiE;AAAY,YAA7E,CAArB;AACAC,QAAAA,mBAAmB,GAAGjM,CAAC,CAAC0E,cAAF,CAAiB8H,cAAc,CAACF,OAAhC,CAAtB;AACD;;AACD,UAAI/E,IAAI,CAAC8D,WAAT,EAAsB;AACpB,YAAIc,OAAO,GAAG,KAAKpH,OAAL,CAAaqH,aAAb,CACZ,WADY,EAEZ;AACEjM,UAAAA,IAAI,EAAE,6BADR;AAEEkM,UAAAA,UAAU,EAAE5I,SAFd;AAGE6I,UAAAA,OAAO,EAAE,EAHX;AAIEC,UAAAA,IAAI,EAAE;AAJR,SAFY;AAQZ;AAAY,YARA,CAAd;;AAUA,aAAK9D,0CAAL,CAAgD1B,GAAhD,EAAqDQ,IAAI,CAAC8D,WAA1D;;AACA,YAAIqB,aAAa,GAAG,KAAK3H,OAAL,CAAa0H,WAAb,CAAyB,WAAzB,EAAsCN,OAAtC,EAA+CH,eAA/C;AAAgE;AAAY,YAA5E,CAApB;AACAE,QAAAA,kBAAkB,GAAGlM,CAAC,CAAC0E,cAAF,CAAiBgI,aAAa,CAACJ,OAA/B,CAArB;AACD;;AACD,UAAIL,mBAAJ,EAAyB;AACvB,aAAKlH,OAAL,CAAaqF,IAAb,CAAkBpK,CAAC,CAACqK,WAAF,CAAc0B,cAAd,EAA8BE,mBAA9B,EAAmDC,kBAAnD,CAAlB;AACD,OAFD,MAEO,IAAIA,kBAAJ,EAAwB;AAC7B,aAAKnH,OAAL,CAAaqF,IAAb,CAAkBpK,CAAC,CAACqK,WAAF,CAAcrK,CAAC,CAAC2M,eAAF,CAAkB,GAAlB,EAAuBZ,cAAvB,CAAd,EAAsDG,kBAAtD,CAAlB;AACD;;AACD,WAAKnH,OAAL,CAAa6H,aAAb,CAA2BZ,eAA3B;AACD,KA3CM,MA2CA;AACL,8BAAU,KAAV,EAAiB,oBAAjB;AACD;AACF;;AAEDF,EAAAA,gCAAgC,CAAC/E,GAAD,EAAmBuE,MAAnB,EAAgD;AAC9E,QAAIA,MAAM,CAACtC,IAAP,KAAgB,kBAApB,EAAwC;AACxC,QAAIsC,MAAM,CAACtC,IAAP,KAAgB,0CAApB,EAAgE;AAChE,4BAAUsC,MAAM,CAACC,IAAP,CAAYC,MAAZ,KAAuB,CAAjC;AACA,QAAIC,IAAI,GAAGH,MAAM,CAACC,IAAP,CAAY,CAAZ,CAAX;AACA,4BAAUE,IAAI,YAAYT,qBAA1B;;AACA,QAAIS,IAAI,CAACzC,IAAL,KAAc,sCAAlB,EAA0D;AACxD,UAAI0C,CAAC,GAAGD,IAAI,CAACF,IAAL,CAAU,CAAV,CAAR;AACA,8BAAUG,CAAC,YAAYV,qBAAvB;AACA,UAAIW,CAAC,GAAGL,MAAM,CAACC,IAAP,CAAY,CAAZ,CAAR;AACA,UAAIsB,aAAa,GAAGvB,MAAM,CAACC,IAAP,CAAY,CAAZ,CAApB;AACA,UAAIsB,aAAa,YAAY7B,qBAA7B,EAA4C,KAAKc,gCAAL,CAAsC/E,GAAtC,EAA2C8F,aAA3C;AAC5C,UAAItD,GAAG,GAAG,KAAK3F,4BAAL,CAAkCmD,GAAlC,CAAV;AACA,UAAI+F,WAAW,GAAG,KAAKxD,cAAL,CAAoBoC,CAApB,CAAlB;AACA,UAAIqB,WAAW,GAAG,KAAKzD,cAAL,CAAoBqC,CAApB,CAAlB;AACA,WAAK5G,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACuK,mBAAF,CAAsBvK,CAAC,CAACwK,oBAAF,CAAuB,GAAvB,EAA4BxK,CAAC,CAAC2J,gBAAF,CAAmBJ,GAAnB,EAAwBuD,WAAxB,EAAqC,IAArC,CAA5B,EAAwEC,WAAxE,CAAtB,CADF;AAGD,KAZD,MAYO;AACL;AACA,UAAIhB,cAAc,GAAG,KAAKzC,cAAL,CAAoBmC,IAApB,CAArB;AACA,UAAIxB,UAAU,GAAGqB,MAAM,CAACC,IAAP,CAAY,CAAZ,CAAjB;AACA,UAAIS,eAAe,GAAG,IAAInJ,GAAJ,EAAtB;AACA,UAAIoJ,mBAAJ;AACA,UAAIC,kBAAJ;;AAEA,UAAIjC,UAAU,YAAYe,qBAA1B,EAAyC;AACvC,YAAImB,OAAO,GAAG,KAAKpH,OAAL,CAAaqH,aAAb,CACZ,YADY,EAEZ;AACEjM,UAAAA,IAAI,EAAE,6BADR;AAEEkM,UAAAA,UAAU,EAAE5I,SAFd;AAGE6I,UAAAA,OAAO,EAAE,EAHX;AAIEC,UAAAA,IAAI,EAAE;AAJR,SAFY;AAQZ;AAAY,YARA,CAAd;;AAUA,aAAKT,gCAAL,CAAsC/E,GAAtC,EAA2CkD,UAA3C;;AACA,YAAIuC,cAAc,GAAG,KAAKzH,OAAL,CAAa0H,WAAb,CAAyB,YAAzB,EAAuCN,OAAvC,EAAgDH,eAAhD;AAAiE;AAAY,YAA7E,CAArB;AACAC,QAAAA,mBAAmB,GAAGjM,CAAC,CAAC0E,cAAF,CAAiB8H,cAAc,CAACF,OAAhC,CAAtB;AACD;;AACD,UAAIT,SAAS,GAAGP,MAAM,CAACC,IAAP,CAAY,CAAZ,CAAhB;;AACA,UAAIM,SAAS,YAAYb,qBAAzB,EAAwC;AACtC,YAAImB,OAAO,GAAG,KAAKpH,OAAL,CAAaqH,aAAb,CACZ,WADY,EAEZ;AACEjM,UAAAA,IAAI,EAAE,6BADR;AAEEkM,UAAAA,UAAU,EAAE5I,SAFd;AAGE6I,UAAAA,OAAO,EAAE,EAHX;AAIEC,UAAAA,IAAI,EAAE;AAJR,SAFY;AAQZ;AAAY,YARA,CAAd;;AAUA,aAAKT,gCAAL,CAAsC/E,GAAtC,EAA2C8E,SAA3C;;AACA,YAAIa,aAAa,GAAG,KAAK3H,OAAL,CAAa0H,WAAb,CAAyB,WAAzB,EAAsCN,OAAtC,EAA+CH,eAA/C;AAAgE;AAAY,YAA5E,CAApB;AACAE,QAAAA,kBAAkB,GAAGlM,CAAC,CAAC0E,cAAF,CAAiBgI,aAAa,CAACJ,OAA/B,CAArB;AACD;;AACD,UAAIL,mBAAJ,EAAyB;AACvB,aAAKlH,OAAL,CAAaqF,IAAb,CAAkBpK,CAAC,CAACqK,WAAF,CAAc0B,cAAd,EAA8BE,mBAA9B,EAAmDC,kBAAnD,CAAlB;AACD,OAFD,MAEO,IAAIA,kBAAJ,EAAwB;AAC7B,aAAKnH,OAAL,CAAaqF,IAAb,CAAkBpK,CAAC,CAACqK,WAAF,CAAcrK,CAAC,CAAC2M,eAAF,CAAkB,GAAlB,EAAuBZ,cAAvB,CAAd,EAAsDG,kBAAtD,CAAlB;AACD;;AACD,WAAKnH,OAAL,CAAa6H,aAAb,CAA2BZ,eAA3B;AACD;AACF,GA1fiC,CA4flC;;;AACApI,EAAAA,4BAA4B,CAACmH,GAAD,EAAkC;AAC5D,WAAO,KAAK/J,4BAAL,CAAkCgM,uCAAlC,CAA0EjC,GAA1E,CAAP;AACD;;AAEDnD,EAAAA,aAAa,CACXmD,GADW,EAEX7C,GAFW,EAGXX,IAHW,EAIX0F,4BAAqC,GAAG,KAJ7B,EAKL;AACN;AACA,QAAIC,gBAAgB,GAAG,MAAM;AAC3B,UAAIC,aAAa,GACfjF,GAAG,YAAYkF,mBAAf,IAA8BlF,GAAG,YAAY8C,qBAA7C,GACI,KAAK1B,cAAL,CAAoBpB,GAApB,CADJ,GAEI,+CAA4BA,GAA5B,CAHN;AAIA,UAAImF,QAAQ,GAAGnF,GAAG,YAAYkF,mBAAf,IAA8BlF,GAAG,YAAY8C,qBAA7C,IAA8D,CAAChL,CAAC,CAACsN,YAAF,CAAeH,aAAf,CAA9E;AACA,aAAOnN,CAAC,CAAC2J,gBAAF,CAAmB,KAAK/F,4BAAL,CAAkCmH,GAAlC,CAAnB,EAA2DoC,aAA3D,EAA0EE,QAA1E,CAAP;AACD,KAPD;;AAQA,QAAI9F,IAAI,KAAK9D,SAAb,EAAwB;AACtB,WAAK8J,eAAL,CAAqBL,gBAAgB,EAArC;AACD,KAFD,MAEO;AACL,WAAKnI,OAAL,CAAaqF,IAAb,CAAkB,KAAKoD,sBAAL,CAA4BP,4BAA5B,EAA0DC,gBAA1D,EAA4EnC,GAA5E,EAAiF7C,GAAjF,EAAsFX,IAAtF,CAAlB;AACD;AACF;;AAEDiG,EAAAA,sBAAsB,CACpBP,4BADoB,EAEpBC,gBAFoB,EAGpBnC,GAHoB,EAIpB7C,GAJoB,EAKpBX,IALoB,EAMA;AACpB,QAAIA,IAAI,YAAY2D,qCAApB,EAA8C;AAC5C,UAAIO,IAAI,GAAG,KAAKnC,cAAL,CAAoB/B,IAAI,CAAC4D,aAAzB,CAAX;AACA,8BAAUM,IAAI,KAAKhI,SAAnB;AACA,UAAIgK,QAAJ;AACA,UAAIC,SAAJ;AACA,UAAInG,IAAI,CAAC6D,WAAT,EACEqC,QAAQ,GAAG,KAAKD,sBAAL,CACTP,4BADS,EAETC,gBAFS,EAGTnC,GAHS,EAIT7C,GAJS,EAKTX,IAAI,CAAC6D,WALI,CAAX;AAOF,UAAI7D,IAAI,CAAC8D,WAAT,EACEqC,SAAS,GAAG,KAAKF,sBAAL,CACVP,4BADU,EAEVC,gBAFU,EAGVnC,GAHU,EAIV7C,GAJU,EAKVX,IAAI,CAAC8D,WALK,CAAZ;AAOF,UAAIoC,QAAQ,IAAIC,SAAhB,EAA2B,OAAO1N,CAAC,CAACqK,WAAF,CAAcoB,IAAd,EAAoBgC,QAApB,EAA8BC,SAA9B,CAAP;AAC3B,UAAID,QAAJ,EAAc,OAAOzN,CAAC,CAACqK,WAAF,CAAcoB,IAAd,EAAoBgC,QAApB,CAAP;AACd,UAAIC,SAAJ,EAAe,OAAO1N,CAAC,CAACqK,WAAF,CAAcrK,CAAC,CAAC2M,eAAF,CAAkB,GAAlB,EAAuBlB,IAAvB,CAAd,EAA4CiC,SAA5C,CAAP;AACf,8BAAU,KAAV;AACD;;AACD,4BAAUnG,IAAI,YAAYS,+BAA1B;;AACA,QAAIkF,gBAAgB,KAAKzJ,SAArB,IAAkC,KAAKkK,iBAAL,CAAuB5C,GAAvB,EAA4B7C,GAA5B,EAAiCX,IAAjC,CAAtC,EAA8E;AAC5E,UAAIqG,SAAS,GAAGrG,IAAI,CAACnH,KAArB;AACA,8BAAUwN,SAAS,YAAY9C,aAA/B;AACA,8BAAU,CAAC,KAAK/F,OAAL,CAAa8I,8BAAb,CAA4C,CAACD,SAAD,EAAY7C,GAAZ,CAA5C,CAAX,EAA0E,+BAA1E;AACA,UAAI+C,oBAAoB,GAAGF,SAAS,CAACE,oBAAV,EAA3B,CAJ4E,CAK5E;;AACA,aAAO,KAAKC,+BAAL,CACLb,gBAAgB,EADX,EAELU,SAFK,EAGLE,oBAHK,EAILb,4BAJK,CAAP;AAMD;;AACD,QAAI5E,IAAI,GAAG,EAAX;AACA,QAAI2F,SAAS,GAAG,EAAhB;AACA,QAAIC,QAAQ,GAAG,CAAC,YAAD,EAAe,cAAf,CAAf;AACA,QAAIC,OAAO,GAAG,EAAd;;AAEA,QAAI,CAAC3G,IAAI,CAAC/D,GAAN,IAAa,CAAC+D,IAAI,CAACU,GAAvB,EAA4B;AAC1BgG,MAAAA,QAAQ,CAAC5J,IAAT,CAAc,UAAd;AACA6J,MAAAA,OAAO,CAAC7J,IAAR,CAAa,OAAb;AACD,KAHD,MAGO;AACL6J,MAAAA,OAAO,CAAC7J,IAAR,CAAa,KAAb,EAAoB,KAApB;AACD;;AAED,QAAI8J,cAAc,GAAG,EAArB;;AACA,SAAK,IAAIC,OAAT,IAAoBH,QAApB,EAA8B;AAC5B,UAAK1G,IAAD,CAAY6G,OAAZ,MAAyB3K,SAA7B,EAAwC;AACtC,YAAI4K,CAAU,GAAI9G,IAAD,CAAY6G,OAAZ,CAAjB;AACA,gCAAUC,CAAC,KAAK5K,SAAhB;AACAuK,QAAAA,SAAS,CAAC3J,IAAV,CAAerE,CAAC,CAACsO,cAAF,CAAiBtO,CAAC,CAAC+D,UAAF,CAAaqK,OAAb,CAAjB,EAAwCpO,CAAC,CAACuO,cAAF,CAAiBF,CAAjB,CAAxC,CAAf;AACAF,QAAAA,cAAc,CAAC9J,IAAf,CAAqB,GAAE+J,OAAQ,IAAGC,CAAC,CAACG,QAAF,EAAa,EAA/C;AACD;AACF;;AAEDL,IAAAA,cAAc,GAAGA,cAAc,CAACM,IAAf,CAAoB,GAApB,CAAjB;;AACA,QAAIC,YAAY,GAAG,KAAK1M,YAAL,CAAkBwB,GAAlB,CAAsB2K,cAAtB,CAAnB;;AACA,QAAIO,YAAY,KAAKjL,SAArB,EAAgC;AAC9BiL,MAAAA,YAAY,GAAG1O,CAAC,CAAC+D,UAAF,CAAa,KAAK3B,uBAAL,CAA6B4B,QAA7B,CAAsCmK,cAAtC,CAAb,CAAf;AACA,UAAIlK,MAAM,GAAGjE,CAAC,CAACkE,mBAAF,CAAsB,KAAtB,EAA6B,CAAClE,CAAC,CAACmE,kBAAF,CAAqBuK,YAArB,EAAmC1O,CAAC,CAAC2O,gBAAF,CAAmBX,SAAnB,CAAnC,CAAD,CAA7B,CAAb,CAF8B,CAG9B;;AACA,WAAKjM,OAAL,CAAasC,IAAb,CAAkBJ,MAAlB;;AACA,WAAKjC,YAAL,CAAkBiG,GAAlB,CAAsBkG,cAAtB,EAAsCO,YAAtC;AACD;;AACD,4BAAUA,YAAY,KAAKjL,SAA3B;;AAEA,SAAK,IAAImL,OAAT,IAAoBV,OAApB,EAA6B;AAC3B,UAAK3G,IAAD,CAAYqH,OAAZ,MAAyBnL,SAA7B,EAAwC;AACtC,YAAImK,SAAgB,GAAIrG,IAAD,CAAYqH,OAAZ,CAAvB;AACA,gCAAUhB,SAAS,YAAY9C,aAA/B;;AACA,YAAI8C,SAAS,YAAYiB,sBAAzB,EAAyC;AACvC,eAAKvF,cAAL,CAAoBsE,SAApB;AACA;AACD;;AACD,gCAAU,CAAC,KAAK7I,OAAL,CAAa8I,8BAAb,CAA4C,CAACD,SAAD,CAA5C,CAAX,EAAqE,+BAArE;AACAvF,QAAAA,IAAI,CAAChE,IAAL,CACErE,CAAC,CAACwK,oBAAF,CACE,GADF,EAEExK,CAAC,CAAC2J,gBAAF,CAAmB+E,YAAnB,EAAiC1O,CAAC,CAAC+D,UAAF,CAAa6K,OAAb,CAAjC,CAFF,EAGE,KAAKtF,cAAL,CAAoBsE,SAApB,CAHF,CADF;AAOD;AACF;;AACD,QAAIT,aAAa,GACfjF,GAAG,YAAYkF,mBAAf,IAA8BlF,GAAG,YAAY8C,qBAA7C,GACI,KAAK1B,cAAL,CAAoBpB,GAApB,CADJ,GAEI,+CAA4BA,GAA5B;AAAiC;AAAoB,SAArD,CAHN;AAIA,4BAAU,CAAC,KAAKnD,OAAL,CAAa8I,8BAAb,CAA4C,CAAC9C,GAAD,CAA5C,CAAX,EAA+D,+BAA/D;AACA1C,IAAAA,IAAI,CAAChE,IAAL,CACErE,CAAC,CAAC6J,cAAF,CAAiB,KAAKjI,gBAAL,CAAsBkI,gBAAtB,CAAuC,uBAAvC,CAAjB,EAAkF,CAChF,KAAKlG,4BAAL,CAAkCmH,GAAlC,CADgF,EAEhFoC,aAFgF,EAGhFuB,YAHgF,CAAlF,CADF;AAOA,WAAO1O,CAAC,CAACuK,mBAAF,CAAsBvK,CAAC,CAAC8O,kBAAF,CAAqBzG,IAArB,CAAtB,CAAP;AACD;;AAED0G,EAAAA,6CAA6C,CAACC,uBAAD,EAAyD;AACpG,QAAI,CAACA,uBAAuB,CAACC,eAA7B,EAA8C;AAC5C,UAAI7O,KAAK,GAAG4O,uBAAuB,CAAC5O,KAApC;AACA,8BAAU4O,uBAAuB,CAACE,4BAAlC;;AAEA,UAAIF,uBAAuB,CAACG,SAA5B,EAAuC;AACrC,aAAK9N,eAAL,CAAqB+N,2BAArB,CAAiDJ,uBAAjD;AACD,OAFD,MAEO;AACLA,QAAAA,uBAAuB,CAACC,eAAxB,GAA0C7O,KAAK,KAAKqD,SAAV,GAAsB,KAAK6F,cAAL,CAAoBlJ,KAApB,CAAtB,GAAmDiP,4BAA7F;;AACA,YAAIL,uBAAuB,CAACM,QAA5B,EAAsC;AACpC,eAAKjO,eAAL,CAAqBkO,6BAArB,CAAmDP,uBAAnD;AACD;AACF;;AAED,UAAI5O,KAAK,KAAKqD,SAAV,IAAuBrD,KAAK,CAACoP,aAAN,EAA3B,EAAkD;AAChD;AACA;AACA,aAAKxO,4BAAL,CAAkCyO,uBAAlC,CAA0DrP,KAA1D;AACD;AACF;AACF,GA5pBiC,CA8pBlC;AACA;;;AACAsP,EAAAA,yBAAyB,CACvBC,iBADuB,EAEvBC,cAFuB,EAGvBC,gCAHuB,EAIL;AAClB,QAAIC,MAAM,GAAG,IAAIjN,GAAJ,CAAQ8M,iBAAR,CAAb;AACA,QAAII,eAAe,GAAGH,cAAc,CAACI,KAAf,EAAtB;AACA,QAAIC,gBAAgB,GAAG,IAAIpN,GAAJ,EAAvB;;AAEA,WAAOkN,eAAe,CAACvE,MAAhB,GAAyB,CAAhC,EAAmC;AACjC,UAAI0E,CAAC,GAAGH,eAAe,CAACI,GAAhB,EAAR;AACA,UAAIF,gBAAgB,CAAC3H,GAAjB,CAAqB4H,CAArB,CAAJ,EAA6B;AAC7BD,MAAAA,gBAAgB,CAACG,GAAjB,CAAqBF,CAArB;;AAEA,UAAIA,CAAC,KAAKL,gCAAV,EAA4C;AAC1C,YAAIQ,CAAC,GAAG,KAAKtK,4BAAL,CAAkCvC,GAAlC,CAAsC0M,CAAtC,CAAR;AACA,gCAAUG,CAAC,KAAK5M,SAAhB;AACAqM,QAAAA,MAAM,CAACM,GAAP,CAAWC,CAAX;AACD,OAJD,MAIO;AACL,YAAIC,MAAM,GAAG,KAAKhL,cAAL,CAAoB9B,GAApB,CAAwB0M,CAAxB,CAAb;AACA,gCAAUI,MAAV;;AACA,aAAK,IAAIC,KAAT,IAAkBD,MAAlB,EACE,IAAIC,KAAK,YAAY5H,qBAArB,EAAoC;AAClCoH,UAAAA,eAAe,CAAC1L,IAAhB,CAAqBkM,KAArB;AACD,SAFD,MAEO;AACL,kCAAUA,KAAK,YAAYC,oBAA3B;AACAV,UAAAA,MAAM,CAACM,GAAP,CAAWG,KAAX;AACD;AACJ;AACF;;AACD,WAAOE,KAAK,CAACC,IAAN,CAAWZ,MAAX,CAAP;AACD;;AAEDa,EAAAA,yBAAyB,CAACjP,SAAD,EAA8C;AACrE,WAAOA,SAAS,KAAK,KAAKA,SAAnB,GAA+B,KAAK0D,QAApC,GAA+C,KAAKO,qBAAL,CAA2BnC,GAA3B,CAA+B9B,SAA/B,CAAtD;AACD,GAnsBiC,CAqsBlC;;;AACAkP,EAAAA,UAAU,CACR7F,GADQ,EAER8F,KAFQ,EASR;AACA,QAAIP,MAAM,GAAG,KAAKhL,cAAL,CAAoB9B,GAApB,CAAwBuH,GAAxB,CAAb;AACA,4BAAUuF,MAAM,KAAK7M,SAArB,EAAgC,8BAAhC,EAFA,CAIA;;AACA,4BAAU6M,MAAM,CAACvH,IAAP,IAAe,CAAzB;AACA,QAAI8H,KAAJ,EAAW,KAAKC,UAAL,CAAgBR,MAAhB,EANX,CAQA;;AACA,QAAIA,MAAM,CAACvH,IAAP,GAAc,CAAlB,EAAqB,KAAK/H,4BAAL,CAAkCyO,uBAAlC,CAA0D1E,GAA1D,EATrB,CAWA;;AACA,QAAI6E,cAAc,GAAG,EAArB;AACA,QAAImB,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIR,KAAT,IAAkBD,MAAlB,EAA0B;AACxB,UAAIC,KAAK,YAAY5H,qBAArB,EAAoC;AAClCiH,QAAAA,cAAc,CAACvL,IAAf,CAAoBkM,KAApB;AACD,OAFD,MAEO;AACL,gCAAUA,KAAK,YAAYC,oBAA3B,EAAsC,kDAAtC;AACAO,QAAAA,UAAU,CAAC1M,IAAX,CAAgBkM,KAAhB;AACD;AACF;;AAED,QAAIS,qBAAqB,GAAG,KAAKxP,2BAAL,CAAiCyP,2BAAjC,CAA6DlG,GAA7D,CAA5B;;AACA,QAAIgG,UAAU,CAACvF,MAAX,KAAsB,CAA1B,EAA6B;AAC3B;AACA,UACE,KAAK9F,QAAL,CAAcwL,oBAAd,KACCF,qBAAqB,KAAKvN,SAA1B,IAAuC,CAACmM,cAAc,CAACuB,QAAf,CAAwBH,qBAAxB,CADzC,CADF,EAGE;AACA;AACA,YAAI3I,IAAI,GAAG,KAAKnF,iBAAL,CAAuBkO,4BAAvB,CAAoDC,8CAApD,CACTzB,cADS,EAET7E,GAFS,CAAX;AAKA,eAAO;AACL1C,UAAAA,IADK;AAELiJ,UAAAA,2BAA2B,EAAE,IAFxB;AAGLN,UAAAA,qBAHK;AAILO,UAAAA,WAAW,EAAE;AAJR,SAAP;AAMD;AACF;;AAED,QAAIV,KAAJ,EAAWW,OAAO,CAACC,GAAR,CAAa,kCAAiCT,qBAAqB,KAAKvN,SAA1B,GAAsC,KAAtC,GAA8C,IAAK,EAAjG,EA7CX,CA+CA;;AACAsN,IAAAA,UAAU,GAAG,KAAKrB,yBAAL,CAA+BqB,UAA/B,EAA2CnB,cAA3C,EAA2DoB,qBAA3D,CAAb;;AAEA,QAAIA,qBAAqB,KAAKvN,SAA9B,EAAyC;AACvC;AACA;AACA;AACAsN,MAAAA,UAAU,GAAGA,UAAU,CAACW,MAAX,CAAkBhQ,SAAS,IAAI;AAC1C,YAAI3B,CAAC,GAAG2B,SAAR;;AACA,eAAO3B,CAAC,YAAYyQ,oBAApB,EAA+B;AAC7BzQ,UAAAA,CAAC,GAAG,KAAKuB,aAAL,CAAmBqQ,SAAnB,CAA6B5R,CAA7B,CAAJ;AACD;;AACD,eAAOA,CAAC,KAAK,QAAb;AACD,OANY,CAAb;;AAOA,UAAIgR,UAAU,CAACvF,MAAX,KAAsB,CAA1B,EAA6B;AAC3B;AACA;AACA;AAEA,YAAIqF,KAAJ,EAAWW,OAAO,CAACC,GAAR,CAAa,0BAAb,EALgB,CAM3B;;AACA,eAAO;AAAEpJ,UAAAA,IAAI,EAAE,KAAKjD;AAAb,SAAP;AACD;AACF;;AAED,UAAMwM,kBAAkB,GAAGvB,CAAC,IAAI;AAC9B,UAAItQ,CAAC,GAAG,KAAKuB,aAAL,CAAmBqQ,SAAnB,CAA6BtB,CAA7B,CAAR;AACA,aAAOtQ,CAAC,YAAYyQ,oBAAb,GAAyBzQ,CAAzB,GAA6B0D,SAApC;AACD,KAHD,CAxEA,CA4EA;AACA;;;AACA,QAAIoO,cAAc,GAAGpB,KAAK,CAACC,IAAN,CAAWK,UAAX,EAAuBe,MAAvB,CACnB,CAACC,CAAD,EAAIC,CAAJ,KAAU,6BAAiBD,CAAjB,EAAoBC,CAApB,EAAuBJ,kBAAvB,CADS,EAEnBb,UAAU,CAAC,CAAD,CAFS,CAArB,CA9EA,CAkFA;AACA;;AACA,QAAIc,cAAc,KAAKpO,SAAnB,IAAgCuN,qBAAqB,KAAKvN,SAA9D,EAAyE;AACvEoO,MAAAA,cAAc,GAAG,KAAK9L,4BAAL,CAAkCvC,GAAlC,CAAsCwN,qBAAtC,CAAjB;AACD;;AACD,4BAAUa,cAAc,KAAKpO,SAA7B,EAAwC,kDAAxC;AACA,QAAIoN,KAAJ,EAAWW,OAAO,CAACC,GAAR,CAAa,sBAAqBI,cAAc,CAACI,OAAf,EAAyB,EAA3D;AAEX,QAAI5J,IAAJ;;AACA,WAAO,IAAP,EAAa;AACXA,MAAAA,IAAI,GAAG,KAAKsI,yBAAL,CAA+BkB,cAA/B,CAAP;AACA,UAAIxJ,IAAI,KAAK5E,SAAb,EAAwB;AACxBoO,MAAAA,cAAc,GAAGD,kBAAkB,CAACC,cAAD,CAAnC;AACA,8BAAUA,cAAc,KAAKpO,SAA7B,EAAwC,uEAAxC;AACD,KAhGD,CAkGA;;;AACA,4BAAU4E,IAAI,KAAK5E,SAAnB,EAA8B,qCAA9B,EAnGA,CAqGA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIyO,gBAAgB,GAAG,IAAIrP,GAAJ,EAAvB;AACA,SAAKkC,OAAL,CAAaoN,mBAAb,CAAiCpH,GAAjC,EAAsC;AACpCqH,MAAAA,wBAAwB,EAAEC,UAAU,IAAI;AACtC,YAAIxB,KAAJ,EAAW;AACTW,UAAAA,OAAO,CAACC,GAAR,CAAa,6DAA4DY,UAAU,CAACC,aAAX,IAA4B,GAAI,EAAzG;AACD;;AACD,gCACEtB,qBAAqB,KAAKvN,SAA1B,IAAuC,CAAC,CAAC,KAAKsB,OAAL,CAAawN,0BAAb,EAD3C,EAEE,kCAFF;AAIA,YAAIC,eAAe,GAAG,KAAKzN,OAAL,CAAa0N,kBAAb,CAAgCJ,UAAhC,CAAtB;;AACA,YAAIG,eAAe,KAAK/O,SAAxB,EAAmC;AACjC,cAAIoN,KAAJ,EAAWW,OAAO,CAACC,GAAR,CAAa,0BAAb;;AACX,eAAK,IAAIpD,CAAC,GAAGmE,eAAb,EAA8BnE,CAAC,KAAK5K,SAApC,EAA+C4K,CAAC,GAAGA,CAAC,CAAChC,UAArD,EAAiE;AAC/D,gBAAI6F,gBAAgB,CAAC5J,GAAjB,CAAqB+F,CAArB,CAAJ,EAA6B;AAC7B6D,YAAAA,gBAAgB,CAAC9B,GAAjB,CAAqB/B,CAArB;AACD;AACF;AACF,OAjBmC;AAkBpCqE,MAAAA,6BAA6B,EAAEL,UAAU,IAAI;AAC3C,YAAIxB,KAAJ,EAAWW,OAAO,CAACC,GAAR,CAAa,iDAAgDY,UAAU,CAACC,aAAX,IAA4B,GAAI,EAA7F;AACX,gCACEtB,qBAAqB,KAAKvN,SAA1B,IAAuC,CAAC,CAAC,KAAKsB,OAAL,CAAawN,0BAAb,EAD3C,EAEE,kCAFF;AAIA,YAAIC,eAAe,GAAG,KAAKzN,OAAL,CAAa0N,kBAAb,CAAgCJ,UAAhC,CAAtB;;AACA,YAAIG,eAAe,KAAK/O,SAAxB,EAAmC;AACjC,cAAIoN,KAAJ,EAAWW,OAAO,CAACC,GAAR,CAAa,0BAAb;;AACX,eAAK,IAAIpD,CAAC,GAAGmE,eAAb,EAA8BnE,CAAC,KAAK5K,SAApC,EAA+C4K,CAAC,GAAGA,CAAC,CAAChC,UAArD,EAAiE;AAC/D,gBAAI6F,gBAAgB,CAAC5J,GAAjB,CAAqB+F,CAArB,CAAJ,EAA6B;AAC7B6D,YAAAA,gBAAgB,CAAC9B,GAAjB,CAAqB/B,CAArB;AACD;AACF;AACF;AAhCmC,KAAtC;AAkCA,QAAIwC,KAAJ,EAAWW,OAAO,CAACC,GAAR,CAAa,SAAQS,gBAAgB,CAACnJ,IAAK,sBAA3C;;AACX,SAAK,IAAIhJ,CAAT,IAAcgR,UAAd,EACE,KAAK,IAAIV,CAAC,GAAGtQ,CAAb,EAAgBsQ,CAAC,KAAK5M,SAAtB,EAAiC4M,CAAC,GAAGuB,kBAAkB,CAACvB,CAAD,CAAvD,EAA4D;AAC1D,UAAIsC,SAAS,GAAG,KAAKhC,yBAAL,CAA+BN,CAA/B,CAAhB;;AACA,UACEsC,SAAS,KAAKlP,SAAd,IACA,CAACkP,SAAS,CAACC,YAAV,IAA0B,CAA3B,KAAiCvK,IAAI,CAACuK,YAAL,IAAqB,CAAtD,CADA,IAEAV,gBAAgB,CAAC5J,GAAjB,CAAqBqK,SAArB,CAHF,EAIE;AACA;AACAtK,QAAAA,IAAI,GAAGsK,SAAP;AACA;AACD;AACF;;AAEH,WAAO;AAAEtK,MAAAA,IAAF;AAAQwJ,MAAAA;AAAR,KAAP;AACD;;AAEDgB,EAAAA,kBAAkB,CAAC9H,GAAD,EAAqB;AACrC,QAAI+H,IAAJ;;AACA,QAAI/H,GAAG,YAAYpC,qBAAnB,EAAkC;AAChCmK,MAAAA,IAAI,GAAG/H,GAAG,CAACkH,OAAJ,EAAP;AACD,KAFD,MAEO;AACL,YAAMzN,EAAE,GAAG,KAAKxD,4BAAL,CAAkC+R,aAAlC,CAAgDhI,GAAhD,CAAX;AACA,8BAAUvG,EAAV;AACAsO,MAAAA,IAAI,GAAGtO,EAAE,CAACsO,IAAV;AACD;;AACD,WAAOA,IAAP;AACD;;AAEDE,EAAAA,2BAA2B,CAACC,OAAD,EAAmD;AAC5E,QAAI9M,WAAW,GAAG8M,OAAO,CAAC9M,WAA1B;AACA,QAAIA,WAAW,KAAK,KAAKI,uBAAL,CAA6B2M,kBAAjD,EAAqE/M,WAAW,GAAG,KAAKI,uBAAnB;;AAErE,QAAIJ,WAAW,KAAK,KAAKI,uBAAzB,EAAkD;AAChD,aAAO,KAAKT,cAAL,CAAoBtC,GAApB,CAAwByP,OAAO,CAACH,IAAhC,CAAP;AACD;;AAED,4BAAU3M,WAAW,YAAYgN,yCAAjC,EAA+D,6CAA/D;AACA,QAAIC,wBAAwB,GAAG,KAAKvN,qCAAL,CAA2CrC,GAA3C,CAA+C2C,WAA/C,CAA/B;AACA,QAAIiN,wBAAwB,KAAK3P,SAAjC,EAA4C,OAAOA,SAAP;AAC5C,WAAO2P,wBAAwB,CAAC5P,GAAzB,CAA6ByP,OAAO,CAACH,IAArC,CAAP;AACD;;AAEDO,EAAAA,gBAAgB,CAACJ,OAAD,EAAoE;AAClF,QAAIK,eAAe,GAAG,KAAKN,2BAAL,CAAiCC,OAAjC,CAAtB;;AACA,4BAAUK,eAAe,KAAK7P,SAA9B,EAAyC,0DAAzC;;AAEA,SAAKsL,6CAAL,CAAmDuE,eAAnD;;AAEA,QAAIxP,QAAQ,GAAGwP,eAAe,CAACC,0BAA/B;AACA,4BAAUzP,QAAQ,KAAKL,SAAvB;AACA,WAAOK,QAAP;AACD;;AAEDM,EAAAA,UAAU,CAACoP,iBAAD,EAAqE;AAC7E,QAAIA,iBAAiB,KAAK/P,SAA1B,EAAqC;AACnC,UAAI4E,IAAI,GAAG,KAAKnF,iBAAL,CAAuBuQ,0BAAvB,CAAkDjQ,GAAlD,CAAsDgQ,iBAAtD,CAAX;AACA,8BAAUnL,IAAI,KAAK5E,SAAnB;AACA,aAAO4E,IAAP;AACD,KAJD,MAIO;AACL,aAAO,KAAKtG,OAAZ;AACD;AACF;;AAED2R,EAAAA,QAAQ,CACNC,0BADM,EAEN3C,qBAFM,EAGN4C,WAHM,EAINpP,EAJM,EAKNqP,IALM,EAMA;AACN,QAAIF,0BAAJ,EAAgC;AAC9B,UAAI1P,MAAM,GAAGjE,CAAC,CAACkE,mBAAF,CAAsB0P,WAAtB,EAAmC,CAAC5T,CAAC,CAACmE,kBAAF,CAAqBK,EAArB,CAAD,CAAnC,CAAb;AACA,WAAKJ,UAAL,CAAgB4M,qBAAhB,EAAuC3M,IAAvC,CAA4CJ,MAA5C;AACA,UAAI6P,UAAU,GAAG9T,CAAC,CAACuK,mBAAF,CAAsBvK,CAAC,CAACwK,oBAAF,CAAuB,GAAvB,EAA4BhG,EAA5B,EAAgCqP,IAAhC,CAAtB,CAAjB;AACA,WAAK9O,OAAL,CAAaqF,IAAb,CAAkB0J,UAAlB;AACD,KALD,MAKO;AACL,UAAI7P,MAAM,GAAGjE,CAAC,CAACkE,mBAAF,CAAsB0P,WAAtB,EAAmC,CAAC5T,CAAC,CAACmE,kBAAF,CAAqBK,EAArB,EAAyBqP,IAAzB,CAAD,CAAnC,CAAb;AACA,WAAK9O,OAAL,CAAaqF,IAAb,CAAkBnG,MAAlB;AACD;AACF;;AAEDqF,EAAAA,cAAc,CAACyB,GAAD,EAAagJ,aAAb,EAAsCH,WAAtC,EAA4F;AACxG,4BAAU,EAAE7I,GAAG,YAAYF,mBAAf,IAA8BE,GAAG,CAACiJ,mBAApC,CAAV;;AACA,QAAIjJ,GAAG,YAAYC,qBAAnB,EAAkC;AAChC,UAAID,GAAG,CAAC/B,IAAJ,KAAa,SAAjB,EAA4B;AAC1B,aAAKpG,gBAAL,CAAsBwN,GAAtB,CAA0BrF,GAA1B;AACA,YAAI+H,IAAI,GAAG/H,GAAG,CAACuH,aAAf;AACA,gCAAUQ,IAAI,KAAKrP,SAAnB;AACA,eAAOzD,CAAC,CAAC+D,UAAF,CAAa+O,IAAb,CAAP;AACD,OALD,MAKO,IAAI/H,GAAG,CAAC/B,IAAJ,KAAa,kBAAjB,EAAqC;AAC1C,aAAKpG,gBAAL,CAAsBwN,GAAtB,CAA0BrF,GAA1B;AACA,eAAO,KAAKkJ,6BAAL,CAAmClJ,GAAnC,CAAP;AACD;AACF,KAZuG,CAcxG;;;AACA,QAAIA,GAAG,YAAYmJ,qCAAf,IAAgD,KAAK1O,4BAAL,CAAkC8C,GAAlC,CAAsCyC,GAAtC,CAApD,EAAgG;AAC9F,UAAIoJ,mBAAmB,GAAG,KAAK3O,4BAAL,CAAkChC,GAAlC,CAAsCuH,GAAtC,CAA1B;AACA,8BAAUoJ,mBAAV,EAF8F,CAG9F;AACA;;AACA,UAAIA,mBAAmB,CAACC,UAApB,KAAmC,aAAvC,EAAsD;AACpD,YAAIC,KAAK,GAAG,IAAIC,0BAAJ,CACV,wEADU,EAEVvJ,GAAG,CAACwJ,eAAJ,CAAoBC,GAFV,EAGV,QAHU,EAIV,YAJU,CAAZ;AAMA,aAAK3T,KAAL,CAAW4T,WAAX,CAAuBJ,KAAvB;AACA,cAAM,IAAIK,kBAAJ,EAAN;AACD;AACF;;AAED,QAAI,KAAK5R,+BAAL,CAAqCwF,GAArC,CAAyCyC,GAAzC,CAAJ,EAAmD;AACjD,aAAO,KAAKnH,4BAAL,CAAkCmH,GAAlC,CAAP;AACD;;AAED,SAAKnI,gBAAL,CAAsBwN,GAAtB,CAA0BrF,GAA1B;;AACA,QAAI,CAACgJ,aAAD,IAAkBpJ,6BAAcgK,MAAd,CAAqB5J,GAArB,CAAtB,EAAiD;AAC/C,UAAI6J,GAAG,GAAG,KAAKC,eAAL,CAAqB9J,GAArB,CAAV;;AACA,8BAAU6J,GAAG,KAAKnR,SAAlB;AACA,aAAOmR,GAAP;AACD;;AACD,SAAK9R,+BAAL,CAAqCsN,GAArC,CAAyCrF,GAAzC;;AAEA,QAAI+J,MAAM,GAAG,KAAKlE,UAAL,CAAgB7F,GAAhB,CAAb;;AACA,QAAIoB,OAAO,GAAG,KAAKpH,OAAL,CAAaqH,aAAb,CAA2BrB,GAA3B,EAAgC+J,MAAM,CAACzM,IAAvC,CAAd;;AACA,QAAIwL,IAAI,GAAG,KAAKgB,eAAL,CAAqB9J,GAArB,CAAX;;AAEA,QAAIvG,EAAE,GAAG,KAAKxD,4BAAL,CAAkC+R,aAAlC,CAAgDhI,GAAhD,CAAT;;AACA,QAAI,KAAKrF,QAAL,CAAcqP,gBAAd,KAAmCtR,SAAnC,IAAgD,KAAKiC,QAAL,CAAcqP,gBAAd,CAA+B5D,QAA/B,CAAwC3M,EAAE,CAACsO,IAA3C,CAApD,EAAsG;AACpGtB,MAAAA,OAAO,CAACC,GAAR,CAAa,iCAAgCjN,EAAE,CAACsO,IAAK,KAAI/H,GAAG,CAACzK,WAAJ,CAAgBwS,IAAK,gBAAegC,MAAM,CAACzM,IAAP,CAAYlI,IAAK,EAA9G;;AACA,WAAKyQ,UAAL,CAAgB7F,GAAhB,EAAqB,IAArB;AACD;;AACD,QAAI+E,MAAM,GAAGtL,EAAb;AACA,SAAKxD,4BAAL,CAAkCyO,uBAAlC,CAA0D1E,GAA1D;;AAEA,QAAI,KAAK/J,4BAAL,CAAkCgU,eAAlC,CAAkDjK,GAAlD,CAAJ,EAA4D;AAC1D,UAAI8I,IAAJ,EAAU;AACR,YAAI,KAAKnO,QAAL,CAAcuP,WAAlB,EAA+B;AAC7B,cAAI3E,MAAM,GAAG,KAAKhL,cAAL,CAAoB9B,GAApB,CAAwBuH,GAAxB,CAAb;AACA,kCAAUuF,MAAM,KAAK7M,SAArB;AACA,gBAAMyR,SAAS,GAAGzE,KAAK,CAACC,IAAN,CAAWJ,MAAX,EACf6E,GADe,CACXpV,CAAC,IAAK,IAAGA,CAAC,CAACkS,OAAF,EAAY,GADV,EAEfxD,IAFe,CAEV,GAFU,CAAlB;AAGA,cAAI2G,OAAO,GAAI,GAAE,KAAKvC,kBAAL,CAAwB9H,GAAxB,CAA6B,4BAA2BmK,SAAU,GAAnF;AACA,cAAIJ,MAAM,CAACjD,cAAP,KAA0BpO,SAA9B,EACE2R,OAAO,GAAI,GAAEA,OAAQ,0BAAyBN,MAAM,CAACjD,cAAP,CAAsBI,OAAtB,EAAgC,EAA9E;AACF,cAAI6C,MAAM,CAACvD,WAAP,KAAuB9N,SAA3B,EAAsC2R,OAAO,GAAI,GAAEA,OAAQ,OAAMN,MAAM,CAACvD,WAAY,GAA9C;AACtC,eAAKxM,OAAL,CAAaqF,IAAb,CAAkBvK,gBAAgB,CAACuV,OAAD,CAAlC;AACD;;AACD,YAAIvB,IAAI,KAAKrP,EAAb,EAAiB;AACf,eAAKkP,QAAL,CACE,CAAC,CAACoB,MAAM,CAACxD,2BADX,EAEEwD,MAAM,CAAC9D,qBAFT,EAGE4C,WAAW,IAAI,KAHjB,EAIEpP,EAJF,EAKEqP,IALF;AAOD;;AACD,aAAKrN,aAAL,GAAqB6O,QAArB;AACA,YAAIP,MAAM,CAACxD,2BAAX,EAAwC,KAAK9K,aAAL,GAAqB8O,aAArB;AACzC;AACF,KA1BD,MA0BO;AACL,UAAIzB,IAAJ,EAAU;AACR,aAAK7S,4BAAL,CAAkCuU,gBAAlC,CAAmDxK,GAAnD;AACA+E,QAAAA,MAAM,GAAG+D,IAAT;AACA,aAAKrN,aAAL,GAAqBgP,aAArB;AACD;AACF;;AAED,SAAKzQ,OAAL,CAAa0H,WAAb,CAAyB1B,GAAzB,EAA8BoB,OAA9B;AACA,WAAO2D,MAAP;AACD;;AAED2F,EAAAA,wBAAwB,CAAC1K,GAAD,EAAkC;AACxD,QAAIuH,aAAa,GAAGvH,GAAG,CAACuH,aAAxB;AACA,4BAAUA,aAAV;;AACA,QAAIvH,GAAG,YAAYF,mBAAf,IAA8BE,GAAG,CAAC2K,sBAAtC,EAA8D;AAC5D;AACA,aAAO,KAAK9T,gBAAL,CAAsB+T,qBAAtB,CAA4CrD,aAA5C,CAAP;AACD,KAHD,MAGO;AACL;AACA,8BACE,KAAKvN,OAAL,CAAaM,OAAb,GAAuBlF,IAAvB,KAAgC,eAAhC,IACE,KAAK4E,OAAL,CAAaM,OAAb,GAAuBlF,IAAvB,KAAgC,mBADlC,IAEE,KAAK4E,OAAL,CAAaM,OAAb,GAAuBlF,IAAvB,KAAgC,sBAHpC;AAKA,aAAO,KAAKyB,gBAAL,CAAsBkI,gBAAtB,CAAuCwI,aAAvC,CAAP;AACD;AACF;;AAED5K,EAAAA,oBAAoB,CAACH,IAAD,EAAwC;AAC1D,QAAIA,IAAI,KAAK9D,SAAb,EAAwB;AACtB,aAAO,EAAP;AACD,KAFD,MAEO,IAAI8D,IAAI,YAAYS,+BAApB,EAAwC;AAC7C,8BAAUT,IAAI,CAACnH,KAAL,KAAeqD,SAAf,IAA4B8D,IAAI,CAACnH,KAAL,YAAsB0K,aAA5D;AACA,UAAIvD,IAAI,CAACnH,KAAL,KAAeqD,SAAnB,EAA8B,OAAO,CAAC8D,IAAI,CAACnH,KAAN,CAAP;AAC9B,8BAAUmH,IAAI,CAAC/D,GAAL,KAAaC,SAAvB;AACA,8BAAU8D,IAAI,CAACU,GAAL,KAAaxE,SAAvB;AACA,aAAO,CAAC8D,IAAI,CAAC/D,GAAN,EAAW+D,IAAI,CAACU,GAAhB,CAAP;AACD,KANM,MAMA,IAAIV,IAAI,YAAY2D,qCAApB,EAA8C;AACnD,aAAO,CACL3D,IAAI,CAAC4D,aADA,EAEL,GAAG,KAAKzD,oBAAL,CAA0BH,IAAI,CAAC6D,WAA/B,CAFE,EAGL,GAAG,KAAK1D,oBAAL,CAA0BH,IAAI,CAAC8D,WAA/B,CAHE,CAAP;AAKD,KANM,MAMA;AACL,8BAAU,KAAV,EAAiB,oBAAjB;AACD;AACF;;AAEDkC,EAAAA,eAAe,CAACzJ,QAAD,EAAgC;AAC7C,4BAAUA,QAAQ,CAAC3D,IAAT,KAAkB,kBAA5B;AACA,SAAK4E,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACuK,mBAAF,CAAsBvK,CAAC,CAAC2M,eAAF,CAAkB,QAAlB,EAA8B7I,QAA9B,EAA0E,IAA1E,CAAtB,CADF;AAGD;;AAED8R,EAAAA,eAAe,CACb9R,QADa,EAEb1D,KAFa,EAGb0N,oBAHa,EAIbb,4BAAqC,GAAG,KAJ3B,EAKP;AACN,SAAKlI,OAAL,CAAaqF,IAAb,CACE,KAAK2D,+BAAL,CAAqCjK,QAArC,EAA+C1D,KAA/C,EAAsD0N,oBAAtD,EAA4Eb,4BAA5E,CADF;AAGD;;AAEDc,EAAAA,+BAA+B,CAC7BjK,QAD6B,EAE7B1D,KAF6B,EAG7B0N,oBAH6B,EAI7Bb,4BAAqC,GAAG,KAJX,EAKT;AACpB,QAAIa,oBAAJ,EAA0B;AACxB;AACA,UAAImB,eAAe,GAAG,KAAK3F,cAAL,CAAoBlJ,KAApB,CAAtB;AACA,UAAI2J,SAAJ;;AACA,UAAI3J,KAAK,YAAY4K,qBAAjB,IAAkC5K,KAAK,CAAC4I,IAAN,KAAe,aAArD,EAAoE;AAClE,YAAI,CAAC6M,CAAD,EAAI9D,CAAJ,EAAOC,CAAP,IAAY5R,KAAK,CAACmL,IAAtB;;AACA,YAAIwG,CAAC,YAAY+D,kBAAjB,EAA6B;AAC3B,cAAID,CAAC,YAAY7K,qBAAb,IAA8B6K,CAAC,CAAC7M,IAAF,KAAW,GAA7C,EAAkDe,SAAS,GAAG,KAAKT,cAAL,CAAoBuM,CAAC,CAACtK,IAAF,CAAO,CAAP,CAApB,CAAZ,CAAlD,KACKxB,SAAS,GAAG/J,CAAC,CAAC2M,eAAF,CAAkB,GAAlB,EAAuB,KAAKrD,cAAL,CAAoBuM,CAApB,CAAvB,CAAZ;AACL5G,UAAAA,eAAe,GAAG,KAAK3F,cAAL,CAAoB0I,CAApB,CAAlB;AACD,SAJD,MAIO,IAAIA,CAAC,YAAY8D,kBAAjB,EAA6B;AAClC/L,UAAAA,SAAS,GAAG,KAAKT,cAAL,CAAoBuM,CAApB,CAAZ;AACA5G,UAAAA,eAAe,GAAG,KAAK3F,cAAL,CAAoByI,CAApB,CAAlB;AACD;AACF;;AACD,UAAIhI,SAAS,KAAKtG,SAAlB,EAA6B;AAC3BsG,QAAAA,SAAS,GAAG/J,CAAC,CAACgK,gBAAF,CAAmB,KAAnB,EAA0B,KAAKV,cAAL,CAAoBlJ,KAApB,CAA1B,EAAsD,KAAK2V,oBAAL,EAAtD,CAAZ;AACD;;AACD,UAAIjC,UAAU,GAAG9T,CAAC,CAACuK,mBAAF,CAAsBvK,CAAC,CAACwK,oBAAF,CAAuB,GAAvB,EAA4B1G,QAA5B,EAAsCmL,eAAtC,CAAtB,CAAjB;AACA,UAAI+G,QAAQ,GAAG,IAAf;;AACA,UAAI/I,4BAAJ,EAAkC;AAChC,gCAAUnJ,QAAQ,CAAC3D,IAAT,KAAkB,kBAA5B;AACA6V,QAAAA,QAAQ,GAAGhW,CAAC,CAACuK,mBAAF,CACTvK,CAAC,CAAC2M,eAAF,CAAkB,QAAlB,EAA8B7I,QAA9B,EAA0E,IAA1E,CADS,CAAX;AAGD;;AACD,aAAO9D,CAAC,CAACqK,WAAF,CAAcN,SAAd,EAAyB+J,UAAzB,EAAqCkC,QAArC,CAAP;AACD,KA3BD,MA2BO;AACL,aAAOhW,CAAC,CAACuK,mBAAF,CAAsBvK,CAAC,CAACwK,oBAAF,CAAuB,GAAvB,EAA4B1G,QAA5B,EAAsC,KAAKwF,cAAL,CAAoBlJ,KAApB,CAAtC,CAAtB,CAAP;AACD;AACF;;AAED6V,EAAAA,8BAA8B,CAC5BC,KAD4B,EAE5BC,mBAF4B,EAG5BC,mBAH4B,EAIgC;AAC5D,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,mBAApB,EAAyCG,CAAC,EAA1C,EAA8C;AAC5C,UAAIpO,GAAG,GAAGoO,CAAC,GAAG,EAAd;AACA,UAAIjP,eAAe,GAAG+O,mBAAmB,CAAC5S,GAApB,CAAwB0E,GAAxB,CAAtB;AACA,UAAIqO,IAAI,GAAG,IAAX,CAH4C,CAI5C;;AACA,UAAIlP,eAAe,KAAK5D,SAAxB,EAAmC;AACjC,YAAI+D,UAAU,GAAGH,eAAe,CAACG,UAAjC,CADiC,CAEjC;;AACA,gCAAUA,UAAU,KAAK/D,SAAf,IAA4B+D,UAAU,YAAYQ,+BAA5D;;AACA,YACER,UAAU,KAAK/D,SAAf,IACA+D,UAAU,CAACpH,KAAX,KAAqBqD,SADrB,IAEA,KAAKkK,iBAAL,CAAuBuI,KAAvB,EAA8BhO,GAA9B,EAAmCV,UAAnC,CAHF,EAIE;AACA,cAAIgP,OAAO,GAAGhP,UAAU,CAACpH,KAAzB;AACA,kCAAUoW,OAAO,YAAY1L,aAA7B;AACA,cAAIgD,oBAAoB,GAAG0I,OAAO,CAAC1I,oBAAR,EAA3B;AACA,cAAI2I,iBAAiB,GAAG,KAAK5V,KAAL,CAAW6V,aAAX,CAAyBC,OAAjD;AAEA,cAAIC,WAAJ;AACA;;;AAEA,cAAIH,iBAAJ,EAAuB;AACrB,gBAAI,KAAK1R,OAAL,CAAa8I,8BAAb,CAA4C2I,OAA5C,CAAJ,EAA0D;AACxD,mBAAK3V,KAAL,CAAWgW,oBAAX,CACE,+DADF,EAEEX,KAAK,CAACY,kBAFR;AAID;;AACDF,YAAAA,WAAW,GAAGnT,SAAd;AACD,WARD,MAQO;AACLmT,YAAAA,WAAW,GACT,KAAK7R,OAAL,CAAa8I,8BAAb,CAA4C2I,OAA5C,KACA,KAAKzR,OAAL,CAAagS,6BAAb,CAA2Cb,KAA3C,EAAkDpI,oBAAlD,CAFF;AAGD;;AACD,cAAI,CAAC8I,WAAL,EAAkB;AAChBL,YAAAA,IAAI,GAAG,KAAKjN,cAAL,CAAoBkN,OAApB,CAAP;AACAJ,YAAAA,mBAAmB,CAACY,MAApB,CAA2B9O,GAA3B;AACD;AACF;AACF;;AACDmO,MAAAA,KAAK,CAAChS,IAAN,CAAWkS,IAAX;AACD;;AACD,WAAOF,KAAP;AACD;;AAEDY,EAAAA,6BAA6B,CAC3BlM,GAD2B,EAE3BmM,uBAF2B,EAG3Bd,mBAH2B,EAIrB;AACN,UAAMvV,KAAK,GAAG,KAAKA,KAAnB;AACA,QAAIsW,WAAJ;;AACA,QAAIpM,GAAG,CAACqM,mBAAJ,EAAJ,EAA+B;AAC7BD,MAAAA,WAAW,GAAG,KAAKtW,KAAL,CAAWwW,wBAAX,CAAoC,MAAM,gBAAIxW,KAAJ,EAAWkK,GAAX,EAAgB,QAAhB,CAA1C,CAAd;AACD,KAFD,MAEO;AACLoM,MAAAA,WAAW,GAAG,gBAAItW,KAAJ,EAAWkK,GAAX,EAAgB,QAAhB,CAAd;AACD,KAPK,CAQN;AACA;AACA;AACA;;;AACA,QAAIoM,WAAW,YAAYnM,qBAAvB,IAAwCsM,eAAGC,QAAH,CAAY1W,KAAZ,EAAmBsW,WAAnB,MAAoCD,uBAAhF,EAAyG;AACvG,UAAI,EAAEC,WAAW,YAAYnM,qBAAzB,KAA2CmM,WAAW,CAACnO,IAAZ,KAAqB,kBAApE,EAAwF;AACtF,YAAInC,SAAS,GAAG,KAAKF,0BAAL,CAAgCoE,GAAhC,CAAhB;;AACA,aAAKhG,OAAL,CAAa0C,oCAAb,CACE,CAACsD,GAAD,EAAMoM,WAAN,CADF,EAEE,MAAM;AACJ,eAAKvB,eAAL,CACE5V,CAAC,CAAC2J,gBAAF,CAAmB,KAAK/F,4BAAL,CAAkCmH,GAAlC,CAAnB,EAA2D/K,CAAC,CAAC+D,UAAF,CAAa,QAAb,CAA3D,CADF,EAEEoT,WAFF,EAGE;AAAM;AAHR;;AAKA,cAAItQ,SAAS,KAAKpD,SAAlB,EAA6BoD,SAAS,CAAClG,UAAV;AAC9B,SATH,EAUE,KAAKoE,OAAL,CAAaM,OAAb,EAVF;AAYD;;AACD+Q,MAAAA,mBAAmB,CAACY,MAApB,CAA2B,QAA3B;AACD;AACF;;AAEDQ,EAAAA,oBAAoB,CAACzM,GAAD,EAAwC;AAC1D,QAAIqL,mBAAmB,GAAG,IAAInU,GAAJ,CAAQ8I,GAAG,CAAC/D,UAAZ,CAA1B;AAEA,QAAI,CAACyQ,mBAAD,EAAsBC,mBAAtB,IAA6C,2CAA+B,KAAK7W,KAApC,EAA2CkK,GAA3C,CAAjD,CAH0D,CAI1D;;AACA,UAAM4M,cAAc,GAAG,KAAK1B,8BAAL,CAAoClL,GAApC,EAAyC0M,mBAAzC,EAA8DrB,mBAA9D,CAAvB;;AACA,QAAI,CAACsB,mBAAL,EAA0B,KAAKT,6BAAL,CAAmClM,GAAnC,EAAwC0M,mBAAxC,EAA6DrB,mBAA7D;;AAC1B,SAAKtP,qBAAL,CAA2BiE,GAA3B,EAAgCqL,mBAAhC;;AACA,WAAOpW,CAAC,CAAC4X,eAAF,CAAkBD,cAAlB,CAAP;AACD;;AAEDE,EAAAA,kBAAkB,CAAC9M,GAAD,EAAwC;AACxD,QAAI/B,IAAI,GAAG+B,GAAG,CAAC9B,OAAJ,EAAX;AACA,QAAIoN,KAAK,GAAG,EAAZ;AAEA,QAAI/J,OAAJ;AACA,QAAIwL,eAAJ;;AAEA,QAAI9O,IAAI,KAAK,KAAb,EAAoB;AAClBsD,MAAAA,OAAO,GAAGvB,GAAG,CAACgN,QAAd;AACAD,MAAAA,eAAe,GAAG,KAAlB;AACD,KAHD,MAGO;AACL,8BAAU9O,IAAI,KAAK,SAAnB;AACAsD,MAAAA,OAAO,GAAGvB,GAAG,CAACiN,YAAd;AACAF,MAAAA,eAAe,GAAG,IAAlB;AACD;;AACD,4BAAUxL,OAAO,KAAK7I,SAAtB;AACA,QAAIwU,GAAG,GAAG3L,OAAO,CAACd,MAAlB;AACA,QAAI0M,iCAAiC,GAAG,KAAKrX,KAAL,CAAW4I,gBAAX,CAA4B,KAAK5I,KAAL,CAAW6I,kBAAvC,CAAxC;;AAEA,SAAK,IAAI4M,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2B,GAApB,EAAyB3B,CAAC,EAA1B,EAA8B;AAC5B,UAAI6B,KAAK,GAAG7L,OAAO,CAACgK,CAAD,CAAnB;AACA,UAAIpO,GAAG,GAAGiQ,KAAK,CAACC,IAAhB;AACA,UAAIhY,KAAK,GAAG+X,KAAK,CAACE,MAAlB;AACA,UAAInQ,GAAG,KAAKzE,SAAR,IAAqBrD,KAAK,KAAKqD,SAA/B,IAA6CqU,eAAe,IAAI,CAAC,KAAKxS,cAAL,CAAoBgD,GAApB,CAAwBJ,GAAxB,CAArE,EAAoG;AACpG,UAAI4F,oBAAoB,GAAG5F,GAAG,CAAC4F,oBAAJ,EAA3B;AACA,UAAI8I,WAAW,GACb,KAAK7R,OAAL,CAAa8I,8BAAb,CAA4C3F,GAA5C,KACA,KAAKnD,OAAL,CAAa8I,8BAAb,CAA4CzN,KAA5C,CADA,IAEA,KAAK2E,OAAL,CAAagS,6BAAb,CAA2ChM,GAA3C,EAAgD+C,oBAAoB,IAAIoK,iCAAxE,CAHF;;AAIA,UAAItB,WAAJ,EAAiB;AACf,aAAK7R,OAAL,CAAauT,gBAAb,CACE1B,WADF,EAEE,CAAC1O,GAAD,EAAM9H,KAAN,EAAa2K,GAAb,CAFF,EAGE,MAAM;AACJ,kCAAU7C,GAAG,KAAKzE,SAAlB;AACA,kCAAUrD,KAAK,KAAKqD,SAApB;AACA,eAAKsB,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACuK,mBAAF,CACEvK,CAAC,CAAC6J,cAAF,CACE7J,CAAC,CAAC2J,gBAAF,CACE,KAAK3I,4BAAL,CAAkCgM,uCAAlC,CAA0EjC,GAA1E,CADF,EAEE/K,CAAC,CAAC+D,UAAF,CAAa,KAAb,CAFF,CADF,EAKE,CAAC,KAAKuF,cAAL,CAAoBpB,GAApB,CAAD,EAA2B,KAAKoB,cAAL,CAAoBlJ,KAApB,CAA3B,CALF,CADF,CADF;AAWD,SAjBH,EAkBE,KAAK2E,OAAL,CAAaM,OAAb,EAlBF;AAoBD,OArBD,MAqBO;AACL,YAAI8H,aAAa,GAAG,KAAK7D,cAAL,CAAoBpB,GAApB,CAApB;AACA,YAAI+G,eAAe,GAAG,KAAK3F,cAAL,CAAoBlJ,KAApB,CAAtB;AACA,YAAImW,IAAI,GAAGvW,CAAC,CAAC4X,eAAF,CAAkB,CAACzK,aAAD,EAAgB8B,eAAhB,CAAlB,CAAX;AACAoH,QAAAA,KAAK,CAAChS,IAAN,CAAWkS,IAAX;AACD;AACF;;AAED,SAAKzP,qBAAL,CAA2BiE,GAA3B;;AACA,QAAIQ,IAAI,GAAG8K,KAAK,CAAC7K,MAAN,GAAe,CAAf,GAAmB,CAACxL,CAAC,CAAC4X,eAAF,CAAkBvB,KAAlB,CAAD,CAAnB,GAAgD,EAA3D;AACA,WAAOrW,CAAC,CAACuY,aAAF,CAAgB,KAAK3W,gBAAL,CAAsBkI,gBAAtB,CAAuCd,IAAvC,CAAhB,EAA8DuC,IAA9D,CAAP;AACD;;AAEDiN,EAAAA,kBAAkB,CAACzN,GAAD,EAAwC;AACxD,QAAI/B,IAAI,GAAG+B,GAAG,CAAC9B,OAAJ,EAAX;AACA,QAAIoN,KAAK,GAAG,EAAZ;AAEA,QAAI/J,OAAJ;AACA,QAAIwL,eAAJ;;AAEA,QAAI9O,IAAI,KAAK,KAAb,EAAoB;AAClBsD,MAAAA,OAAO,GAAGvB,GAAG,CAAC0N,QAAd;AACAX,MAAAA,eAAe,GAAG,KAAlB;AACD,KAHD,MAGO;AACL,8BAAU9O,IAAI,KAAK,SAAnB;AACAsD,MAAAA,OAAO,GAAGvB,GAAG,CAAC2N,YAAd;AACAZ,MAAAA,eAAe,GAAG,IAAlB;AACD;;AAED,4BAAUxL,OAAO,KAAK7I,SAAtB;AACA,QAAIwU,GAAG,GAAG3L,OAAO,CAACd,MAAlB;AACA,QAAImN,iCAAiC,GAAG,KAAK9X,KAAL,CAAW4I,gBAAX,CAA4B,KAAK5I,KAAL,CAAW6I,kBAAvC,CAAxC;;AAEA,SAAK,IAAI4M,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2B,GAApB,EAAyB3B,CAAC,EAA1B,EAA8B;AAC5B,UAAI6B,KAAK,GAAG7L,OAAO,CAACgK,CAAD,CAAnB;AACA,UAAI6B,KAAK,KAAK1U,SAAV,IAAwBqU,eAAe,IAAI,CAAC,KAAKxS,cAAL,CAAoBgD,GAApB,CAAwB6P,KAAxB,CAAhD,EAAiF;AACjF,UAAIrK,oBAAoB,GAAGqK,KAAK,CAACrK,oBAAN,EAA3B;AACA,UAAI8I,WAAW,GACb,KAAK7R,OAAL,CAAa8I,8BAAb,CAA4CsK,KAA5C,KACA,KAAKpT,OAAL,CAAagS,6BAAb,CAA2ChM,GAA3C,EAAgD+C,oBAAoB,IAAI6K,iCAAxE,CAFF;;AAGA,UAAI/B,WAAJ,EAAiB;AACf,aAAK7R,OAAL,CAAauT,gBAAb,CACE1B,WADF,EAEE,CAACuB,KAAD,EAAQpN,GAAR,CAFF,EAGE,MAAM;AACJ,kCAAUoN,KAAK,KAAK1U,SAApB;AACA,eAAKsB,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACuK,mBAAF,CACEvK,CAAC,CAAC6J,cAAF,CACE7J,CAAC,CAAC2J,gBAAF,CACE,KAAK3I,4BAAL,CAAkCgM,uCAAlC,CAA0EjC,GAA1E,CADF,EAEE/K,CAAC,CAAC+D,UAAF,CAAa,KAAb,CAFF,CADF,EAKE,CAAC,KAAKuF,cAAL,CAAoB6O,KAApB,CAAD,CALF,CADF,CADF;AAWD,SAhBH,EAiBE,KAAKpT,OAAL,CAAaM,OAAb,EAjBF;AAmBD,OApBD,MAoBO;AACL,YAAIkR,IAAI,GAAG,KAAKjN,cAAL,CAAoB6O,KAApB,CAAX;AACA9B,QAAAA,KAAK,CAAChS,IAAN,CAAWkS,IAAX;AACD;AACF;;AAED,SAAKzP,qBAAL,CAA2BiE,GAA3B;;AACA,QAAIQ,IAAI,GAAG8K,KAAK,CAAC7K,MAAN,GAAe,CAAf,GAAmB,CAACxL,CAAC,CAAC4X,eAAF,CAAkBvB,KAAlB,CAAD,CAAnB,GAAgD,EAA3D;AACA,WAAOrW,CAAC,CAACuY,aAAF,CAAgB,KAAK3W,gBAAL,CAAsBkI,gBAAtB,CAAuCd,IAAvC,CAAhB,EAA8DuC,IAA9D,CAAP;AACD;;AAEDqN,EAAAA,mCAAmC,CAAC7N,GAAD,EAAwC;AACzE,QAAI8N,GAAG,GAAG9N,GAAG,CAAC+N,kBAAd;AACA,4BAAUD,GAAG,KAAKpV,SAAlB;AACA,QAAIsV,mBAAmB,GAAG,KAAKzP,cAAL,CAAoBuP,GAApB,EAAyB,IAAzB,CAA1B;;AACA,SAAK/R,qBAAL,CAA2BiE,GAA3B;;AACA,WAAO/K,CAAC,CAACuY,aAAF,CAAgB,KAAK3W,gBAAL,CAAsBkI,gBAAtB,CAAuCiB,GAAG,CAAC9B,OAAJ,EAAvC,CAAhB,EAAuE,CAAC8P,mBAAD,CAAvE,CAAP;AACD;;AAEDC,EAAAA,0BAA0B,CAACjO,GAAD,EAAwC;AAChE,QAAIsL,KAAK,GAAG,EAAZ;AAEA,QAAI4B,GAAG,GAAGlN,GAAG,CAACkO,sBAAd;AACA,QAAIC,EAAE,GAAGnO,GAAG,CAACoO,gBAAb;AACA,4BAAUlB,GAAG,KAAKxU,SAAlB;AACA,4BAAUyV,EAAV;AACA,QAAIE,OAAO,GAAG,IAAd;;AACA,SAAK,IAAI9C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2B,GAApB,EAAyB3B,CAAC,EAA1B,EAA8B;AAC5B,UAAI4C,EAAE,CAAC5C,CAAD,CAAF,KAAU,CAAd,EAAiB;AACf8C,QAAAA,OAAO,GAAG,KAAV;AACD;;AACD,UAAI7C,IAAI,GAAGvW,CAAC,CAACqZ,cAAF,CAAiBH,EAAE,CAAC5C,CAAD,CAAnB,CAAX;AACAD,MAAAA,KAAK,CAAChS,IAAN,CAAWkS,IAAX;AACD;;AAED,SAAKzP,qBAAL,CAA2BiE,GAA3B;;AACA,QAAIqO,OAAJ,EAAa;AACX;AACA,aAAOpZ,CAAC,CAACuY,aAAF,CAAgB,KAAK3W,gBAAL,CAAsBkI,gBAAtB,CAAuCiB,GAAG,CAAC9B,OAAJ,EAAvC,CAAhB,EAAuE,CAACjJ,CAAC,CAACqZ,cAAF,CAAiBpB,GAAjB,CAAD,CAAvE,CAAP;AACD,KAHD,MAGO;AACL;AACA,UAAIqB,UAAU,GAAGtZ,CAAC,CAAC4X,eAAF,CAAkBvB,KAAlB,CAAjB;AACA,UAAIkD,QAAQ,GAAGvZ,CAAC,CAACuY,aAAF,CAAgB,KAAK3W,gBAAL,CAAsBkI,gBAAtB,CAAuC,YAAvC,CAAhB,EAAsE,CAACwP,UAAD,CAAtE,CAAf,CAHK,CAIL;;AACA,aAAOtZ,CAAC,CAAC2J,gBAAF,CAAmB4P,QAAnB,EAA6BvZ,CAAC,CAAC+D,UAAF,CAAa,QAAb,CAA7B,CAAP;AACD;AACF;;AAEDyV,EAAAA,uBAAuB,CAACzO,GAAD,EAAiD;AACtE,QAAIA,GAAG,YAAY0O,0BAAnB,EAAuC;AACrC,WAAK3S,qBAAL,CAA2BiE,GAA3B;;AACA,aAAO/K,CAAC,CAAC6J,cAAF,CACL7J,CAAC,CAAC2J,gBAAF,CAAmB,KAAKL,cAAL,CAAoByB,GAAG,CAAC2O,oBAAxB,CAAnB,EAAkE1Z,CAAC,CAAC+D,UAAF,CAAa,MAAb,CAAlE,CADK,EAEL,GAAG4D,MAAH,CACE,KAAK2B,cAAL,CAAoByB,GAAG,CAAC4O,UAAxB,CADF,EAEE5O,GAAG,CAAC6O,eAAJ,CAAoBzE,GAApB,CAAwB,CAAC0E,QAAD,EAAWvD,CAAX,KAAiB,KAAKhN,cAAL,CAAoBuQ,QAApB,CAAzC,CAFF,CAFK,CAAP;AAOD;;AAED,4BAAU,EAAE9O,GAAG,YAAY+O,2BAAjB,CAAV,EAAiD,iDAAjD;AACA,4BAAU/O,GAAG,YAAYmJ,qCAAzB;AAEA,QAAI5Q,QAAQ,GAAG,KAAKC,yBAAL,CAA+BC,GAA/B,CAAmCuH,GAAnC,CAAf;AACA,4BAAUzH,QAAQ,KAAKG,SAAvB;AACA,QAAIsW,gBAAgB,GAAGzW,QAAQ,CAAC8P,wBAAhC;;AAEA,QAAI4G,mBAAmB,GAAG,KAAKxY,2BAAL,CAAiCyP,2BAAjC,CAA6DlG,GAA7D,CAA1B;;AACA,QAAIiP,mBAAmB,KAAKvW,SAA5B,EAAuCH,QAAQ,CAACI,4BAAT,GAAwCsW,mBAAxC;AACvC,QAAIC,wBAAwB,GAAG,IAAI5Z,iBAAJ,CAAsB,MAAM;AACzD,8BAAUiD,QAAV,EADyD,CAEzD;;AACA,UAAI0W,mBAAmB,KAAKvW,SAAxB,IAAqC,gCAAiB,KAAK5C,KAAtB,EAA6BkK,GAA7B,EAAkCtH,SAAlC,EAA6C,IAAIZ,GAAJ,EAA7C,CAAzC,EAAkG;AAChGS,QAAAA,QAAQ,CAAC4W,cAAT,GAA0B,IAAIC,qBAAJ,CAAkB,KAAK/U,QAAvB,EAAiC,KAAKA,QAAL,CAAckH,OAAd,CAAsBd,MAAvD,CAA1B;AACAlI,QAAAA,QAAQ,CAACI,4BAAT,GAAwCD,SAAxC;AACD,OAHD,MAGO;AACLH,QAAAA,QAAQ,CAAC4W,cAAT,GAA0B,KAAKnV,OAAL,CAAaqV,gBAAb,EAA1B;AACD;AACF,KAT8B,CAA/B;;AAWA,SAAK,IAAI,CAACC,SAAD,EAAY/G,eAAZ,CAAT,IAAyCyG,gBAAzC,EAA2D;AACzD,UAAIO,gBAAgB,GAAG,EAAvB;AACA,UAAIC,oBAAJ;;AACA,UAAI,CAACjH,eAAe,CAACpE,4BAArB,EAAmD;AACjDqL,QAAAA,oBAAoB,GAAG,MAAM,KAAKC,uBAAL,CAA6BH,SAA7B,EAAwC/G,eAAxC,CAA7B;AACD,OAFD,MAEO;AACLiH,QAAAA,oBAAoB,GAAG,MAAM,KAAKxL,6CAAL,CAAmDuE,eAAnD,CAA7B;;AACA,YAAIA,eAAe,CAAClT,KAAhB,KAA0BqD,SAA9B,EAAyC6W,gBAAgB,CAACjW,IAAjB,CAAsBiP,eAAe,CAAClT,KAAtC;AAC1C;;AACD6Z,MAAAA,wBAAwB,CAACvZ,UAAzB;AACA,WAAKqE,OAAL,CAAa0C,oCAAb,CACE6S,gBADF,EAEE,MAAM;AACJC,QAAAA,oBAAoB;AACpBN,QAAAA,wBAAwB,CAACtZ,UAAzB;AACD,OALH,EAME,KAAKoE,OAAL,CAAaM,OAAb,EANF;AAQD;;AACD,QAAI0F,GAAG,CAAC0P,aAAJ,KAAsB,kBAA1B,EAA8C;AAC5C,UAAIC,UAAU,GAAG3P,GAAG,CAAC4P,WAArB;;AACA,UAAID,UAAU,YAAY7P,mBAAtB,IAAqC6P,UAAU,CAACE,iBAApD,EAAuE;AACrE,aAAKC,eAAL,CAAqB9P,GAArB,EAA0B2P,UAA1B,EAAsCT,wBAAtC;;AACA;AACD;AACF;;AACDA,IAAAA,wBAAwB,CAACtZ,UAAzB;;AACA,SAAKmG,qBAAL,CAA2BiE,GAA3B;;AACA,QAAI+P,iBAAiB,GAAG,KAAK1Z,kCAAL,CAAwCoC,GAAxC,CAA4CuH,GAA5C,CAAxB;AACA,QAAI+P,iBAAJ,EAAuB,KAAKC,4BAAL,CAAkChQ,GAAlC,EAAuC+P,iBAAvC;AACxB;;AAEDD,EAAAA,eAAe,CACbG,SADa,EAEbC,cAFa,EAGbhB,wBAHa,EAIP;AACN,QAAI9F,mBAAmB,GAAG,KAAK3O,4BAAL,CAAkChC,GAAlC,CAAsCwX,SAAtC,CAA1B;AAEA,4BAAU7G,mBAAmB,KAAK1Q,SAAlC;AAEA,QAAIyX,YAAJ;AACA,QAAIC,yBAAyB,GAAG,KAAhC;AACA,QAAIC,qBAAqB,GAAG,IAAInZ,GAAJ,EAA5B,CAPM,CASN;;AACA,QAAI,EAAE+Y,SAAS,CAAC7R,UAAV,YAAgC2Q,2BAAlC,CAAJ,EAA4D;AAC1D3F,MAAAA,mBAAmB,CAACkH,cAApB,GAAqC,KAAK/R,cAAL,CAAoB0R,SAAS,CAAC7R,UAA9B,CAArC;AACD;;AAED,QAAImS,yBAAyB,GAAG,MAAM;AACpC,UAAI,CAACH,yBAAL,EAAgC;AAC9B,YAAII,OAAO,GAAG,KAAK3X,4BAAL,CAAkCoX,SAAlC,CAAd;AACAE,QAAAA,YAAY,GAAGlb,CAAC,CAAC+D,UAAF,CAAa,KAAKxB,sBAAL,CAA4ByB,QAA5B,EAAb,CAAf;AACAmX,QAAAA,yBAAyB,GAAG,IAA5B;AACA,aAAKpW,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACkE,mBAAF,CAAsB,KAAtB,EAA6B,CAC3BlE,CAAC,CAACmE,kBAAF,CAAqB+W,YAArB,EAAmClb,CAAC,CAAC2J,gBAAF,CAAmB4R,OAAnB,EAA4Bvb,CAAC,CAAC+D,UAAF,CAAa,WAAb,CAA5B,CAAnC,CAD2B,CAA7B,CADF;AAKD;AACF,KAXD;;AAaA,QAAIyX,8BAA8B,GAAG,CAACC,oBAAD,EAAuBC,oBAAvB,KAAgD;AACnF,YAAMC,kBAAkB,GAAG,MAAM;AAC/B,YAAIC,sBAAsB,GAAG,KAAKtS,cAAL,CAAoBoS,oBAApB,CAA7B;AACA,YAAI5I,IAAJ;;AAEA,YAAI,OAAO2I,oBAAP,KAAgC,QAApC,EAA8C;AAC5C3I,UAAAA,IAAI,GAAG9S,CAAC,CAAC+D,UAAF,CAAa0X,oBAAb,CAAP;AACD,SAFD,MAEO;AACL3I,UAAAA,IAAI,GAAG,KAAKxJ,cAAL,CAAoBmS,oBAApB,CAAP;AACD;;AACD,eAAO;AAAE3I,UAAAA,IAAF;AAAQ8I,UAAAA;AAAR,SAAP;AACD,OAVD;;AAYA,UAAIF,oBAAoB,YAAYxH,qCAApC,EAAmE;AACjE,YAAIwH,oBAAoB,KAAKV,SAA7B,EAAwC;AACtC;AACA,cAAIU,oBAAoB,CAACf,WAArB,KAAqClX,SAAzC,EAAoD;AAClD,iBAAKb,gBAAL,CAAsBwN,GAAtB,CAA0BsL,oBAA1B;;AACA,iBAAKG,qBAAL,CAA2BJ,oBAA3B,EAAiDC,oBAAjD;AACD,WAHD,MAGO;AACL;AACA;AACA;AACAJ,YAAAA,yBAAyB;AACzB,oCAAUJ,YAAY,KAAKzX,SAA3B;AACA,gBAAI;AAAEqP,cAAAA,IAAF;AAAQ8I,cAAAA;AAAR,gBAAmCD,kBAAkB,EAAzD;AACA,iBAAK5W,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACuK,mBAAF,CACEvK,CAAC,CAACwK,oBAAF,CAAuB,GAAvB,EAA4BxK,CAAC,CAAC2J,gBAAF,CAAmBuR,YAAnB,EAAiCpI,IAAjC,CAA5B,EAAoE8I,sBAApE,CADF,CADF;AAKD;AACF;AACF,OApBD,MAoBO;AACL,YAAIE,WAAW,GAAG9b,CAAC,CAAC2J,gBAAF,CAAmB,KAAK/F,4BAAL,CAAkCoX,SAAlC,CAAnB,EAAiEhb,CAAC,CAAC+D,UAAF,CAAa,WAAb,CAAjE,CAAlB;AACA,YAAI;AAAE+O,UAAAA,IAAF;AAAQ8I,UAAAA;AAAR,YAAmCD,kBAAkB,EAAzD;AACA,aAAK5W,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACuK,mBAAF,CACEvK,CAAC,CAACwK,oBAAF,CAAuB,GAAvB,EAA4BxK,CAAC,CAAC2J,gBAAF,CAAmBmS,WAAnB,EAAgChJ,IAAhC,CAA5B,EAAmE8I,sBAAnE,CADF,CADF;AAKD;AACF,KA1CD;;AA4CA,QAAIG,sBAAsB,GAAG,CAACN,oBAAD,EAAuBO,aAAvB,KAAyC;AACpE;AACA,UAAIP,oBAAoB,KAAK,WAA7B,EAA0C;AACxC,aAAK7Y,gBAAL,CAAsBwN,GAAtB,CAA0B4L,aAA1B;AACD,OAFD,MAEO,IAAIA,aAAa,YAAY9H,qCAAzB,IAA0D8H,aAAa,CAACrB,WAAd,KAA8BK,SAA5F,EAAuG;AAC5GQ,QAAAA,8BAA8B,CAACC,oBAAD,EAAuBO,aAAvB,CAA9B;AACD,OAFM,MAEA;AACL,YAAIC,IAAI,GAAGjB,SAAS,CAAChU,UAAV,CAAqBxD,GAArB,CAAyBiY,oBAAzB,CAAX;AACA,gCAAUQ,IAAV;AACAb,QAAAA,qBAAqB,CAACnT,GAAtB,CAA0BwT,oBAA1B,EAAgDQ,IAAhD;AACD;AACF,KAXD,CAvEM,CAoFN;;;AACA,SAAK,IAAI,CAACC,YAAD,EAAeC,MAAf,CAAT,IAAmCnB,SAAS,CAAChU,UAA7C,EAAyD;AACvD,UACE,CAAC,KAAK/F,qBAAL,CAA2BmH,iBAA3B,CAA6C4S,SAA7C,EAAwDkB,YAAxD,CAAD,IACA,CAACE,+BAAwB9T,GAAxB,CAA4B4T,YAA5B,CADD,IAEAC,MAAM,CAAC3U,UAAP,KAAsB/D,SAFtB,IAGA,EAAEyY,YAAY,KAAK,QAAjB,IAA6B,yCAA6BlB,SAA7B,EAAwCmB,MAAM,CAAC3U,UAA/C,EAA2D,KAAK1G,MAAhE,CAA/B,CAJF,EAKE;AACA,wCAAoBob,YAApB,EAAkCC,MAAM,CAAC3U,UAAzC,EAAqDuU,sBAArD;AACD;AACF,KA9FK,CA+FN;;;AACA9B,IAAAA,wBAAwB,CAACtZ,UAAzB;;AACA,SAAKmG,qBAAL,CAA2BkU,SAA3B,EAAsCI,qBAAtC,EAA6D3X,SAA7D,EAAwEA,SAAxE,EAAmF,IAAnF,EAjGM,CAmGN;;;AACA,SAAK,IAAI,CAACyY,YAAD,EAAeC,MAAf,CAAT,IAAmClB,cAAc,CAACjU,UAAlD,EAA8D;AAC5D,sCAAoBkV,YAApB,EAAkCC,MAAM,CAAC3U,UAAzC,EAAqDgU,8BAArD;AACD,KAtGK,CAuGN;;;AACA,SAAK,IAAI,CAACpU,MAAD,EAAS+U,MAAT,CAAT,IAA6BlB,cAAc,CAAC3T,OAA5C,EAAqD;AACnD,sCAAoBF,MAApB,EAA4B+U,MAAM,CAAC3U,UAAnC,EAA+CgU,8BAA/C;AACD,KA1GK,CA2GN;;;AACArH,IAAAA,mBAAmB,CAACkI,kBAApB,GAAyCrc,CAAC,CAAC+D,UAAF,CAAa,aAAb,CAAzC;AACD;;AAED8X,EAAAA,qBAAqB,CAAC3T,GAAD,EAA4BoU,UAA5B,EAA6E;AAChG,QAAInI,mBAAmB,GAAG,KAAK3O,4BAAL,CAAkChC,GAAlC,CAAsC8Y,UAAtC,CAA1B;AAEA,4BAAUnI,mBAAmB,KAAK1Q,SAAlC;;AACA,QAAI,OAAOyE,GAAP,KAAe,QAAnB,EAA6B;AAC3BiM,MAAAA,mBAAmB,CAACkI,kBAApB,GAAyCrc,CAAC,CAAC+D,UAAF,CAAamE,GAAb,CAAzC,CAD2B,CAE3B;;AACAiM,MAAAA,mBAAmB,CAACoI,mBAApB,GAA0C,KAA1C;AACD,KAJD,MAIO,IAAIrU,GAAG,YAAYkF,mBAAnB,EAAgC;AACrC+G,MAAAA,mBAAmB,CAACkI,kBAApB,GAAyC,KAAK/S,cAAL,CAAoBpB,GAApB,CAAzC;AACD,KAFM,MAEA;AACL,8BAAU,KAAV,EAAiB,yBAAjB;AACD;;AACD,SAAKsR,uBAAL,CAA6B8C,UAA7B;AACD,GA7iDiC,CA+iDlC;;;AACA3O,EAAAA,iBAAiB,CAAC5G,GAAD,EAAmBmB,GAAnB,EAA8D+T,IAA9D,EAAyF;AACxG,QAAI,EAAEA,IAAI,YAAYjU,+BAAlB,CAAJ,EAA2C,OAAO,KAAP;AAE3C,QAAIwU,gBAAgB,GAAG,KAAKvb,qBAAL,CAA2Bwb,4BAA3B,CAAwD1V,GAAxD,CAAvB;AAEA,QAAKA,GAAG,YAAY4B,qBAAf,IAAgCT,GAAG,KAAK,WAAzC,IAA0DnB,GAAG,CAACkC,OAAJ,OAAkB,QAAlB,IAA8Bf,GAAG,KAAK,WAApG,EACE,OACE+T,IAAI,CAACS,QAAL,KAAkBF,gBAAgB,CAACE,QAAnC,IAA+C,CAACT,IAAI,CAACU,YAArD,IAAqE,CAACV,IAAI,CAACW,UAA3E,IAAyF,CAACX,IAAI,CAAChU,GAA/F,IAAsG,CAACgU,IAAI,CAACzY,GAD9G,CADF,KAIK,IACHyY,IAAI,CAACS,QAAL,KAAkBF,gBAAgB,CAACE,QAAnC,IACAT,IAAI,CAACU,YAAL,KAAsBH,gBAAgB,CAACG,YADvC,IAEA,CAAC,CAACV,IAAI,CAACW,UAFP,IAGA,CAACX,IAAI,CAAChU,GAHN,IAIA,CAACgU,IAAI,CAACzY,GALH,EAMH;AACA,aAAO,EAAEyY,IAAI,CAAC7b,KAAL,YAAsB4K,qBAAtB,IAAuCiR,IAAI,CAAC7b,KAAL,CAAW4I,IAAX,KAAoB,kBAA7D,CAAP;AACD,KARI,MAQE;AACL,aAAO,KAAP;AACD;AACF;;AAED6T,EAAAA,wBAAwB,CAAC9V,GAAD,EAAgC;AACtD,WAAOA,GAAG,CAACoC,UAAJ,YAA0B0B,mBAAjC,EAA8C9D,GAAG,GAAGA,GAAG,CAACoC,UAAV;;AAC9C,WAAOpC,GAAP;AACD;;AAED+V,EAAAA,2BAA2B,CAAC/R,GAAD,EAAwC;AACjE,QAAIgS,MAAM,GAAGhS,GAAG,CAACiS,eAAjB;AACA,QAAIC,KAAK,GAAGlS,GAAG,CAACmS,cAAhB;AACA,4BAAU,OAAOH,MAAP,KAAkB,QAA5B;AACA,4BAAU,OAAOE,KAAP,KAAiB,QAA3B;;AACA,SAAKnW,qBAAL,CAA2BiE,GAA3B;;AACAgS,IAAAA,MAAM,GAAG,IAAII,MAAJ,CAAWJ,MAAX,EAAmBA,MAA5B,CANiE,CAM7B;;AACpC,WAAO/c,CAAC,CAACod,aAAF,CAAgBL,MAAhB,EAAwBE,KAAxB,CAAP;AACD,GAnlDiC,CAqlDlC;;;AACAI,EAAAA,uBAAuB,CACrBtS,GADqB,EAErB5D,aAFqB,EAGrBmW,oBAHqB,EAIA;AACrB,QAAIlH,mBAAmB,GAAG,IAAInU,GAAJ,CAAQ8I,GAAG,CAAC/D,UAAZ,CAA1B;AACA,UAAMuW,eAAe,GAAG,IAAI1a,GAAJ,EAAxB;AACA,QAAI2a,KAAK,GAAG,EAAZ;AACA,QAAI3V,iBAAiB,GAAG,CAACkD,GAAG,CAACjD,sBAAJ,EAAzB,CAJqB,CAMrB;;AACA,QAAIC,wBAAwB,GAAIP,UAAD,IAC7BK,iBAAiB,IAChBL,UAAU,YAAYQ,+BAAtB,IAA6CR,UAAU,CAAChE,GAAX,KAAmBC,SAAnB,IAAgC+D,UAAU,CAACS,GAAX,KAAmBxE,SAFnG;;AAIA,QAAIsH,GAAG,CAAC0S,aAAJ,KAAsBha,SAA1B,EAAqC;AACnC,aAAOzD,CAAC,CAAC2O,gBAAF,CAAmB6O,KAAnB,CAAP;AACD,KAFD,MAEO;AACL,WAAK,IAAI,CAACtV,GAAD,EAAMb,eAAN,CAAT,IAAmC0D,GAAG,CAAC/D,UAAvC,EAAmD;AACjD,YAAIK,eAAe,CAACG,UAAhB,KAA+B/D,SAA/B,IAA4CsE,wBAAwB,CAACV,eAAe,CAACG,UAAjB,CAAxE,EAAsG;AACpG4O,UAAAA,mBAAmB,CAACY,MAApB,CAA2B9O,GAA3B;AACA;AACD;;AAED,YAAIb,eAAe,CAACc,QAAhB,KAA6B1E,SAAjC,EAA4C,SANK,CAMK;;AACtD,YAAI+D,UAAU,GAAGH,eAAe,CAACG,UAAjC;AACA,YAAIA,UAAU,KAAK/D,SAAf,IAA4B,EAAE+D,UAAU,YAAYQ,+BAAxB,CAA5B,IAA2ER,UAAU,CAACpH,KAAX,KAAqBqD,SAApG,EACE,SAT+C,CASrC;;AAEZ,YAAI0J,aAAa,GAAG,+CAA4BjF,GAA5B,CAApB;;AACA,YAAI,KAAKyF,iBAAL,CAAuB5C,GAAvB,EAA4B7C,GAA5B,EAAiCV,UAAjC,CAAJ,EAAkD;AAChD,cAAIkW,SAAS,GAAGlW,UAAU,CAACpH,KAA3B;AACA,kCAAUsd,SAAS,YAAY5S,aAA/B;AACA,cAAI,KAAK7J,qBAAL,CAA2BmH,iBAA3B,CAA6C2C,GAA7C,EAAkD7C,GAAlD,CAAJ,EAA4D;AAC5D,cAAI4F,oBAAoB,GAAG4P,SAAS,CAAC5P,oBAAV,EAA3B;AAEA,cAAI2I,iBAAiB,GAAG,KAAK5V,KAAL,CAAW6V,aAAX,CAAyBC,OAAjD;AAEA,cAAIC,WAAJ;;AACA,cAAIH,iBAAJ,EAAuB;AACrB,gBAAI,KAAK1R,OAAL,CAAa8I,8BAAb,CAA4C6P,SAA5C,CAAJ,EAA4D;AAC1D,mBAAK7c,KAAL,CAAWgW,oBAAX,CACE,+DADF,EAEE9L,GAAG,CAAC+L,kBAFN;AAID;;AACDF,YAAAA,WAAW,GAAGnT,SAAd;AACD,WARD,MAQO;AACLmT,YAAAA,WAAW,GACT,KAAK7R,OAAL,CAAa8I,8BAAb,CAA4C6P,SAA5C,KACA,KAAK3Y,OAAL,CAAagS,6BAAb,CAA2ChM,GAA3C,EAAgD+C,oBAAhD,CAFF;AAGD,WArB+C,CAuBhD;AACA;;;AACA,cAAImB,eAAe,GAAG,CAACwH,iBAAD,GAAqBpH,4BAArB,GAAsCsO,6BAA5D;;AACA,cAAI/G,WAAJ,EAAiB;AACf;AACA2G,YAAAA,eAAe,CAACnN,GAAhB,CAAoBlI,GAApB;AACD,WAHD,MAGO;AACLkO,YAAAA,mBAAmB,CAACY,MAApB,CAA2B9O,GAA3B;AACA+G,YAAAA,eAAe,GAAG,KAAK3F,cAAL,CAAoBoU,SAApB,CAAlB;AACD;;AACDF,UAAAA,KAAK,CAACnZ,IAAN,CAAWrE,CAAC,CAACsO,cAAF,CAAiBnB,aAAjB,EAAgC8B,eAAhC,CAAX;AACD,SAlCD,MAkCO,IAAIzH,UAAU,CAACpH,KAAX,YAA4B0K,aAA5B,IAAqCtD,UAAU,CAACpH,KAAX,CAAiB0N,oBAAjB,EAAzC,EAAkF;AACvFyP,UAAAA,eAAe,CAACnN,GAAhB,CAAoBlI,GAApB;AACAsV,UAAAA,KAAK,CAACnZ,IAAN,CAAWrE,CAAC,CAACsO,cAAF,CAAiBnB,aAAjB,EAAgCkC,4BAAhC,CAAX;AACD;AACF;AACF;;AAED,SAAKvI,qBAAL,CACEiE,GADF,EAEEqL,mBAFF;AAGE;AAAsC,SAHxC,EAIEmH,eAJF,EAKEpW,aALF;;AAQA,WAAOnH,CAAC,CAAC2O,gBAAF,CAAmB6O,KAAnB,CAAP;AACD;;AAEDI,EAAAA,mCAAmC,CACjC7S,GADiC,EAEjC5D,aAFiC,EAGjC0W,gBAHiC,EAIZ;AACrB,QAAI3U,KAAK,GAAG6B,GAAG,CAAC5B,UAAhB;;AACA,SAAKrC,qBAAL,CACEiE,GADF,EAEEA,GAAG,CAAC/D,UAFN;AAGE;AAAsC,QAHxC,EAIEvD,SAJF,EAKE0D,aALF;;AAOA,QAAIkC,eAAe,GAAG,KAAKC,cAAL,CAAoBuU,gBAAgB,GAAGA,gBAAH,GAAsB3U,KAA1D,CAAtB;;AACA,QAAI6B,GAAG,CAAC0S,aAAJ,KAAsBha,SAA1B,EAAqC;AACnC,WAAKtB,yBAAL,GAAiC,IAAjC;AACA,aAAOnC,CAAC,CAAC8O,kBAAF,CAAqB,CAC1B9O,CAAC,CAACwK,oBAAF,CACE,GADF,EAEExK,CAAC,CAAC2J,gBAAF,CAAmBmU,mCAAnB,EAA0C9d,CAAC,CAAC+D,UAAF,CAAa,WAAb,CAA1C,CAFF,EAGE8Z,gBAAgB,GAAG7d,CAAC,CAAC2J,gBAAF,CAAmBN,eAAnB,EAAoCrJ,CAAC,CAAC+D,UAAF,CAAa,WAAb,CAApC,CAAH,GAAoEsF,eAHtF,CAD0B,EAM1BrJ,CAAC,CAACuY,aAAF,CAAgBuF,mCAAhB,EAAuC,EAAvC,CAN0B,CAArB,CAAP;AAQD,KAVD,MAUO;AACL,WAAK/Y,OAAL,CAAauT,gBAAb,CACEvN,GAAG,CAAC0S,aADN,EAEE,EAFF,EAGE,MAAM;AACJ,gCAAU1S,GAAG,CAAC0S,aAAJ,KAAsBha,SAAhC;AACA,YAAI8F,GAAG,GAAG,KAAKD,cAAL,CAAoByB,GAAG,CAAC0S,aAAxB,CAAV;AACA,aAAK1Y,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACuK,mBAAF,CACEvK,CAAC,CAAC6J,cAAF,CAAiB,KAAKjI,gBAAL,CAAsBkI,gBAAtB,CAAuC,uBAAvC,CAAjB,EAAkF,CAACP,GAAD,EAAMF,eAAN,CAAlF,CADF,CADF;AAKD,OAXH,EAYE,KAAKtE,OAAL,CAAaM,OAAb,EAZF;AAcA,aAAOrF,CAAC,CAAC2O,gBAAF,CAAmB,EAAnB,CAAP;AACD;AACF;;AAEDoP,EAAAA,oBAAoB,CAClBhT,GADkB,EAElBuS,oBAFkB,EAGU;AAC5B;AACA;AACA;AACA,QAAIhd,WAAW,GAAGyK,GAAG,CAACiT,mBAAtB;;AACA,QAAI1d,WAAW,KAAKmD,SAApB,EAA+B;AAC7B,UAAIqY,WAAW,GAAG,KAAK9a,4BAAL,CAAkC+R,aAAlC,CAAgDhI,GAAhD,CAAlB;AACA,WAAKhG,OAAL,CAAa0C,oCAAb,CACE,CAACnH,WAAD,CADF,EAEE,MAAM;AACJ,gCAAUA,WAAW,KAAKmD,SAA1B;AACA,gCAAUqY,WAAW,KAAKrY,SAA1B;AACA,aAAK6F,cAAL,CAAoBhJ,WAApB;;AACA,aAAKwG,qBAAL,CAA2BiE,GAA3B;;AACA,gCAAU+Q,WAAW,CAAC3b,IAAZ,KAAqB,YAA/B;AACA,aAAK+C,iBAAL,CAAuB+a,oBAAvB,CAA4C3d,WAA5C,EAAyDwb,WAAzD;AACD,OATH,EAUE,KAAK/W,OAAL,CAAaM,OAAb,EAVF;AAYA,aAAOyW,WAAP;AACD;;AAED,QAAI9S,IAAI,GAAG+B,GAAG,CAAC9B,OAAJ,EAAX;;AACA,YAAQD,IAAR;AACE,WAAK,QAAL;AACE,eAAO,KAAK8T,2BAAL,CAAiC/R,GAAjC,CAAP;;AACF,WAAK,QAAL;AACE,YAAImT,UAAU,GAAGnT,GAAG,CAACoT,WAArB;AACA,gCAAUD,UAAU,KAAKza,SAAzB;AACAya,QAAAA,UAAU,CAACE,wBAAX;AACA,gCAAUF,UAAU,YAAYG,mBAAhC,EAA6C,yDAA7C;;AACA,aAAKvX,qBAAL,CAA2BiE,GAA3B;;AACA,eAAO/K,CAAC,CAACuY,aAAF,CAAgB,KAAK3W,gBAAL,CAAsBkI,gBAAtB,CAAuC,QAAvC,CAAhB,EAAkE,CAAC9J,CAAC,CAACqZ,cAAF,CAAiB6E,UAAU,CAAC9d,KAA5B,CAAD,CAAlE,CAAP;;AACF,WAAK,QAAL;AACE,YAAIke,UAAU,GAAGvT,GAAG,CAACwT,WAArB;AACA,gCAAUD,UAAU,KAAK7a,SAAzB;AACA6a,QAAAA,UAAU,CAACE,wBAAX;AACA,gCAAUF,UAAU,YAAYG,mBAAhC,EAA6C,yDAA7C;;AACA,aAAK3X,qBAAL,CAA2BiE,GAA3B;;AACA,eAAO/K,CAAC,CAACuY,aAAF,CAAgB,KAAK3W,gBAAL,CAAsBkI,gBAAtB,CAAuC,QAAvC,CAAhB,EAAkE,CAAC9J,CAAC,CAACmK,aAAF,CAAgBmU,UAAU,CAACle,KAA3B,CAAD,CAAlE,CAAP;;AACF,WAAK,SAAL;AACE,YAAIse,WAAW,GAAG3T,GAAG,CAAC4T,YAAtB;AACA,gCAAUD,WAAW,KAAKjb,SAA1B;AACAib,QAAAA,WAAW,CAACE,yBAAZ;AACA,gCAAUF,WAAW,YAAYG,oBAAjC,EAA+C,2DAA/C;;AACA,aAAK/X,qBAAL,CAA2BiE,GAA3B;;AACA,eAAO/K,CAAC,CAACuY,aAAF,CAAgB,KAAK3W,gBAAL,CAAsBkI,gBAAtB,CAAuC,SAAvC,CAAhB,EAAmE,CACxE9J,CAAC,CAACuO,cAAF,CAAiBmQ,WAAW,CAACte,KAA7B,CADwE,CAAnE,CAAP;;AAGF,WAAK,MAAL;AACE,YAAI0e,SAAS,GAAG/T,GAAG,CAACgU,UAApB;AACA,gCAAUD,SAAS,KAAKrb,SAAxB;AACA,YAAIub,mBAAmB,GAAG,KAAK1V,cAAL,CAAoBwV,SAApB,CAA1B;;AACA,aAAKhY,qBAAL,CAA2BiE,GAA3B;;AACA,eAAO/K,CAAC,CAACuY,aAAF,CAAgB,KAAK3W,gBAAL,CAAsBkI,gBAAtB,CAAuC,MAAvC,CAAhB,EAAgE,CAACkV,mBAAD,CAAhE,CAAP;;AACF,WAAK,cAAL;AACA,WAAK,cAAL;AACA,WAAK,WAAL;AACA,WAAK,YAAL;AACA,WAAK,YAAL;AACA,WAAK,YAAL;AACA,WAAK,aAAL;AACA,WAAK,aAAL;AACA,WAAK,mBAAL;AACA,WAAK,UAAL;AACE,eAAO,KAAKpG,mCAAL,CAAyC7N,GAAzC,CAAP;;AACF,WAAK,aAAL;AACE,eAAO,KAAKiO,0BAAL,CAAgCjO,GAAhC,CAAP;;AACF,WAAK,cAAL;AACE,aAAK/H,8BAAL,CAAoCic,qBAApC,CAA0DlU,GAA1D;AACA;;AACF,WAAK,KAAL;AACA,WAAK,SAAL;AACE,eAAO,KAAK8M,kBAAL,CAAwB9M,GAAxB,CAAP;;AACF,WAAK,KAAL;AACA,WAAK,SAAL;AACE,eAAO,KAAKyN,kBAAL,CAAwBzN,GAAxB,CAAP;;AACF;AACE,gCAAU/B,IAAI,KAAK,QAAnB,EAA6B,kCAA7B;AAEA,YAAIE,KAAK,GAAG6B,GAAG,CAAC5B,UAAhB;AACA,YAAI;AAAEhC,UAAAA,aAAF;AAAiB7G,UAAAA,WAAW,EAAE4e;AAA9B,YAA+C,uCAA2B,KAAKre,KAAhC,EAAuCkK,GAAvC,CAAnD;AACA,YAAIoU,6BAA6B,GAC/BpU,GAAG,CAAC0S,aAAJ,KAAsBha,SAAtB,IACAyF,KAAK,KAAK,KAAKrI,KAAL,CAAWyJ,UAAX,CAAsB8U,eADhC,IAEA,KAAKvC,wBAAL,CAA8B9R,GAA9B,MAAuC,KAAKlK,KAAL,CAAWyJ,UAAX,CAAsB8U,eAF7D,IAGAlW,KAAK,YAAY2B,mBAHjB,IAIA,CAAC1D,aALH;AAOA,eAAOgY,6BAA6B,IAAID,YAAjC,GACH,KAAKtB,mCAAL,CAAyC7S,GAAzC,EAA8C5D,aAA9C,EAA6D+X,YAA7D,CADG,GAEH,KAAK7B,uBAAL,CAA6BtS,GAA7B,EAAkC5D,aAAlC,EAAiDmW,oBAAjD,CAFJ;AAlEJ;AAsED;;AAED+B,EAAAA,qBAAqB,CAACtU,GAAD,EAAwC;AAC3D,QAAIQ,IAAI,GAAG,EAAX;;AACA,QAAIR,GAAG,CAACuU,YAAJ,YAA4BxU,aAAhC,EAAuC;AACrC,UAAIyU,aAAa,GAAG,KAAKjW,cAAL,CAAoByB,GAAG,CAACuU,YAAxB,CAApB;AACA,8BAAUC,aAAV;AACAhU,MAAAA,IAAI,CAAClH,IAAL,CAAUkb,aAAV;AACD,KAN0D,CAO3D;AACA;;;AACA,QAAIC,SAAS,GAAG,KAAK3e,KAAL,CAAW4e,oBAAX,CAAgCC,IAAhC,CAAqCC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAc7U,GAAxD,MAAiEtH,SAAjF;;AACA,QAAI+b,SAAJ,EAAe;AACb,aAAOxf,CAAC,CAAC6J,cAAF,CAAiB,KAAKjI,gBAAL,CAAsBkI,gBAAtB,CAAuC,YAAvC,CAAjB,EAAuEyB,IAAvE,CAAP;AACD,KAFD,MAEO;AACL,aAAOvL,CAAC,CAAC6J,cAAF,CAAiB,KAAKjI,gBAAL,CAAsBkI,gBAAtB,CAAuC,QAAvC,CAAjB,EAAmEyB,IAAnE,CAAP;AACD;AACF;;AAEDsU,EAAAA,oBAAoB,CAAC9U,GAAD,EAAuC;AACzD,WAAO/K,CAAC,CAACuY,aAAF,CAAgB,KAAK3W,gBAAL,CAAsBkI,gBAAtB,CAAuC,OAAvC,CAAhB,EAAiE,CACtE,KAAKR,cAAL,CAAoByB,GAAG,CAAC+U,YAAxB,CADsE,EAEtE,KAAKxW,cAAL,CAAoByB,GAAG,CAACgV,aAAxB,CAFsE,CAAjE,CAAP;AAID;;AAED9L,EAAAA,6BAA6B,CAAClJ,GAAD,EAA0C;AACrE,QAAIiV,cAAc,GAAGjV,GAAG,CAACQ,IAAJ,CAAS4J,GAAT,CAAa,CAAC8K,WAAD,EAAc3J,CAAd,KAAoB,KAAKhN,cAAL,CAAoB2W,WAApB,CAAjC,CAArB;;AACA,QAAIlV,GAAG,CAAC/B,IAAJ,KAAa,uBAAjB,EAA0C;AACxC,8BAAU+B,GAAG,CAACQ,IAAJ,CAASC,MAAT,IAAmB,CAA7B;AACA,8BAAUT,GAAG,CAACQ,IAAJ,CAAS,CAAT,aAAuBP,qBAAjC;AACA,aAAOgV,cAAc,CAAC,CAAD,CAArB;AACD;;AACD,QAAIjV,GAAG,CAAC/B,IAAJ,KAAa,+BAAjB,EAAkD;AAChD,UAAIkX,EAAE,GAAGF,cAAc,CAAC,CAAD,CAAvB;AACA,8BAAUE,EAAE,KAAKzc,SAAjB;AACA,aAAOzD,CAAC,CAAC6J,cAAF,CAAiB,KAAKjI,gBAAL,CAAsBkI,gBAAtB,CAAuC,eAAvC,CAAjB,EAA0E,CAACoW,EAAD,CAA1E,CAAP;AACD,KAJD,MAIO,IAAInV,GAAG,CAAC/B,IAAJ,KAAa,0CAAjB,EAA6D;AAClE,UAAIjC,GAAG,GAAG,KAAKuC,cAAL,CAAoByB,GAAG,CAACQ,IAAJ,CAAS,CAAT,CAApB,CAAV;AACA,UAAI0Q,IAAI,GAAG,KAAK3S,cAAL,CAAoByB,GAAG,CAACQ,IAAJ,CAAS,CAAT,CAApB,CAAX;AACA,aAAOvL,CAAC,CAAC2J,gBAAF,CAAmB5C,GAAnB,EAAwBkV,IAAxB,EAA8B,IAA9B,CAAP;AACD;;AACD,4BAAUlR,GAAG,CAACoV,mBAAJ,KAA4B1c,SAAtC;AACA,QAAIwL,eAAe,GAAG,KAAKpN,2BAAL,CAAiCue,mBAAjC,CAAqDrV,GAAG,CAACoV,mBAAzD,EAA8EH,cAA9E,CAAtB;;AACA,QAAI/Q,eAAe,CAAC9O,IAAhB,KAAyB,YAA7B,EAA2C;AACzC,UAAIqE,EAAE,GAAKyK,eAAX;AACA,8BACE,CAAC,KAAKpO,KAAL,CAAWsE,UAAX,CAAsBmD,GAAtB,CAA0B9D,EAAE,CAACsO,IAA7B,CAAD,IACE,KAAK/N,OAAL,CAAasb,aAAb,EADF,IAEE,KAAKtb,OAAL,CAAaub,eAAb,CAA6BvV,GAA7B,CAFF,IAGE,CAAC,CAAC,KAAKhG,OAAL,CAAawN,0BAAb,EAJN,EAKG,yCAAwC/N,EAAE,CAACsO,IAAK,wCALnD;AAOD;;AACD,WAAO7D,eAAP;AACD;;AAEDsR,EAAAA,uBAAuB,CAACxV,GAAD,EAAiD;AACtE,4BAAUA,GAAG,CAAC/B,IAAJ,KAAa,4BAAvB,EAAqD,kCAArD;;AACA,QAAI+B,GAAG,CAAC/B,IAAJ,KAAa,aAAjB,EAAgC;AAC9B,UAAIwX,EAAE,GAAG,KAAKtb,sBAAL,CAA4B1B,GAA5B,CAAgCuH,GAAhC,CAAT;AACA,8BAAUyV,EAAE,KAAK/c,SAAjB;AACA,UAAI+c,EAAE,CAACxgB,CAAH,IAAQ,CAACwgB,EAAE,CAACtQ,CAAhB,EAAmB,OAAO,KAAK5G,cAAL,CAAoByB,GAAG,CAACQ,IAAJ,CAAS,CAAT,CAApB,CAAP,CAAnB,KACK,IAAI,CAACiV,EAAE,CAACxgB,CAAJ,IAASwgB,EAAE,CAACtQ,CAAhB,EAAmB,OAAO,KAAK5G,cAAL,CAAoByB,GAAG,CAACQ,IAAJ,CAAS,CAAT,CAApB,CAAP,CAAnB,KACA,wBAAUiV,EAAE,CAACxgB,CAAH,IAAQwgB,EAAE,CAACtQ,CAArB;AACN;;AACD,QAAInF,GAAG,CAAC0V,aAAJ,EAAJ,EAAyB;AACvB,aAAO,KAAKxM,6BAAL,CAAmClJ,GAAnC,CAAP;AACD,KAFD,MAEO;AACL;AACA;AACA,UAAI2V,MAAM,GAAG,KAAK3b,OAAL,CAAa8I,8BAAb,CAA4C9C,GAAG,CAACQ,IAAhD,CAAb;;AACA,UAAImV,MAAM,KAAKjd,SAAf,EAA0B;AACxB,eAAO,KAAKwQ,6BAAL,CAAmClJ,GAAnC,CAAP;AACD,OAFD,MAEO;AACL,aAAKhG,OAAL,CAAauT,gBAAb,CACEoI,MADF,EAEE3V,GAAG,CAACQ,IAFN,EAGE,MAAM;AACJ,gBAAM0D,eAAe,GAAG,KAAKgF,6BAAL,CAAmClJ,GAAnC,CAAxB;;AACA,cAAIxB,GAAG,GAAG,KAAK3F,4BAAL,CAAkCmH,GAAlC,CAAV;;AACA,eAAK2I,QAAL,CAAc,KAAK3O,OAAL,CAAasb,aAAb,EAAd,EAA4C5c,SAA5C,EAAuD,KAAvD,EAA8D8F,GAA9D,EAAmE0F,eAAnE;AACD,SAPH,EAQE,KAAKlK,OAAL,CAAaM,OAAb,EARF;AAUD;AACF;AACF;;AAED0Q,EAAAA,oBAAoB,GAAwB;AAC1C,SAAK7T,aAAL,GAAqB,CAAC,KAAKrB,KAAL,CAAW6V,aAAX,CAAyBC,OAA/C;AACA,WAAOgH,6BAAP;AACD;;AAED9I,EAAAA,eAAe,CAAC9J,GAAD,EAAyC;AACtD,QAAIA,GAAG,YAAYC,qBAAnB,EAAkC;AAChC,aAAO,KAAKuV,uBAAL,CAA6BxV,GAA7B,CAAP;AACD,KAFD,MAEO,IAAIA,GAAG,CAAC4V,WAAJ,EAAJ,EAAuB;AAC5B,aAAO,KAAKlL,wBAAL,CAA8B1K,GAA9B,CAAP;AACD,KAFM,MAEA,IAAIA,GAAG,YAAY+K,kBAAnB,EAA+B;AACpC,aAAO,KAAKC,oBAAL,EAAP;AACD,KAFM,MAEA,IAAIhL,GAAG,YAAY8D,sBAAnB,EAAmC;AACxC,aAAOQ,4BAAP;AACD,KAFM,MAEA,IAAI1E,6BAAcgK,MAAd,CAAqB5J,GAArB,CAAJ,EAA+B;AACpC,aAAO/K,CAAC,CAAC4gB,WAAF,CAAc7V,GAAG,CAAC8V,SAAJ,EAAd,CAAP;AACD,KAFM,MAEA,IAAI9V,GAAG,YAAYF,mBAAnB,EAAgC;AACrC,aAAO,KAAKiW,yBAAL,CAA+B/V,GAA/B,CAAP;AACD,KAFM,MAEA;AACL,8BAAUA,GAAG,YAAYqC,mBAAzB;AACA,aAAO,KAAKiS,qBAAL,CAA2BtU,GAA3B,CAAP;AACD;AACF;;AAED+V,EAAAA,yBAAyB,CAAC/Z,GAAD,EAA+C;AACtE,QAAIA,GAAG,YAAYga,kBAAnB,EAA+B;AAC7B,aAAO,KAAKlB,oBAAL,CAA0B9Y,GAA1B,CAAP;AACD;;AAED,QAAIia,eAAJ;AACA,QAAIC,aAAa,GAAG,KAAKhgB,qBAAL,CAA2BigB,yBAA3B,CAAqDna,GAArD,CAApB;AACA,QAAIuW,oBAAJ;;AACA,QAAI2D,aAAJ,EAAmB;AACjB,UAAI5Y,IAAI,GAAG,KAAKtD,OAAL,CAAaM,OAAb,EAAX;AACA2b,MAAAA,eAAe,GAAG,IAAI3gB,iBAAJ,CAAsB,MAAM;AAC5C,aAAK0E,OAAL,CAAa0C,oCAAb,CACE,CAACV,GAAD,CADF,EAEE,MAAM;AACJ,cAAIwC,GAAG,GAAG,KAAK3F,4BAAL,CAAkCmD,GAAlC,CAAV;AACA,eAAKhC,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACuK,mBAAF,CACEvK,CAAC,CAAC6J,cAAF,CAAiB,KAAKjI,gBAAL,CAAsBkI,gBAAtB,CAAuC,YAAYmX,aAAnD,CAAjB,EAAoF,CAAC1X,GAAD,CAApF,CADF,CADF;AAKD,SATH,EAUElB,IAVF;AAYD,OAbiB,CAAlB;;AAcA,WAAKpC,iBAAL,CAAuBgC,GAAvB,CAA2BlB,GAA3B,EAAgCia,eAAhC;;AACA1D,MAAAA,oBAAoB,GAAG5Q,aAAa,IAAI;AACtC,YAAIsU,eAAe,KAAKvd,SAAxB,EAAmC;AACjC,cAAIiJ,aAAa,KAAKjJ,SAAtB,EAAiC4E,IAAI,GAAGqE,aAAP;AACjCsU,UAAAA,eAAe,CAACrgB,UAAhB;;AACA,eAAKsF,iBAAL,CAAuB+Q,MAAvB,CAA8BjQ,GAA9B;AACD;;AACDia,QAAAA,eAAe,GAAGvd,SAAlB;AACD,OAPD;AAQD;;AACD,QAAImR,GAAJ;;AACA,QAAI,oBAAQ,KAAK/T,KAAb,EAAoBkG,GAApB,CAAJ,EAA8B;AAC5B6N,MAAAA,GAAG,GAAG,KAAK4C,oBAAL,CAA0BzQ,GAA1B,CAAN;AACD,KAFD,MAEO,IAAIA,GAAG,YAAY4B,qBAAnB,EAAkC;AACvCiM,MAAAA,GAAG,GAAG,KAAK4E,uBAAL,CAA6BzS,GAA7B,CAAN;AACD,KAFM,MAEA;AACL6N,MAAAA,GAAG,GAAG,KAAKmJ,oBAAL,CAA0BhX,GAA1B,EAA+BuW,oBAA/B,CAAN;AACD;;AACD,QAAIA,oBAAoB,KAAK7Z,SAA7B,EAAwC6Z,oBAAoB;AAC5D,WAAO1I,GAAP;AACD;;AAED4F,EAAAA,uBAAuB,CAACH,SAAD,EAAoBpH,OAApB,EAA4D;AACjF,4BAAU,CAACA,OAAO,CAAC/D,4BAAnB;;AACA,QAAI,CAAC+D,OAAO,CAAChE,eAAb,EAA8B;AAC5BgE,MAAAA,OAAO,CAACkO,eAAR,GAA0B,IAA1B;;AACA,UAAI9G,SAAS,KAAK,WAAlB,EAA+B;AAC7BpH,QAAAA,OAAO,CAAChE,eAAR,GAA0BI,4BAA1B;AACD,OAFD,MAEO,IAAI4D,OAAO,CAAC7S,KAAR,KAAkBqD,SAAtB,EAAiC;AACtCwP,QAAAA,OAAO,CAAChE,eAAR,GAA0BjP,CAAC,CAAC+D,UAAF,CAAasW,SAAb,CAA1B;AACA,gCAAUpH,OAAO,CAAC7S,KAAR,KAAkBqD,SAA5B;AACA,aAAKuC,kBAAL,CAAwBiC,GAAxB,CAA4BoS,SAA5B,EAAuCpH,OAAO,CAAC7S,KAA/C;AACD;AACF;AACF;;AAEDghB,EAAAA,4BAA4B,CAAC1f,SAAD,EAAuB6C,UAAvB,EAAoE;AAC9F,QAAI6Q,OAAO,GAAI,cAAa1T,SAAS,CAACuQ,OAAV,EAAoB,GAAhD;AACA,QAAIoP,MAAM,GAAG,KAAK/f,aAAL,CAAmBqQ,SAAnB,CAA6BjQ,SAA7B,CAAb;;AACA,QAAI2f,MAAM,YAAY7Q,oBAAtB,EAAiC;AAC/B4E,MAAAA,OAAO,GAAI,GAAEA,OAAQ,iBAAgBiM,MAAM,CAACpP,OAAP,EAAiB,GAAtD;AACD,KAFD,MAEO,IAAIoP,MAAM,YAAY1Y,qBAAtB,EAAqC;AAC1CyM,MAAAA,OAAO,GAAI,GAAEA,OAAQ,uBAArB;AACD,KAFM,MAEA;AACL,8BAAUiM,MAAM,KAAK,QAArB;AACAjM,MAAAA,OAAO,GAAI,GAAEA,OAAQ,qBAArB;AACD;;AACD,QAAIkM,aAAa,GAAG,CAACzhB,gBAAgB,CAAC,WAAWuV,OAAZ,CAAjB,CAApB;AACA,QAAImM,OAAO,GAAG7f,SAAS,CAAC8f,cAAxB;;AACA,QAAID,OAAJ,EAAa;AACX,UAAIE,aAAa,GAAGrhB,KAAK,IACvB,KAAKY,4BAAL,CAAkCyf,aAAlC,CAAgDrgB,KAAhD,IACI,KAAKY,4BAAL,CAAkC+R,aAAlC,CAAgD3S,KAAhD,EAAuD0S,IAD3D,GAEI,GAHN;;AAIA,UAAI4O,WAAW,GAAGxZ,GAAG,IAAK,OAAOA,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCA,GAAG,YAAY4C,aAAf,GAAuB2W,aAAa,CAACvZ,GAAD,CAApC,GAA4C,GAAtG;;AAEAoZ,MAAAA,aAAa,CAACjd,IAAd,CACExE,gBAAgB,CACb,kBAAiB0hB,OAAO,CAACI,cAAR,CAAuB5Y,IAAK,qBAC5CwY,OAAO,CAACK,gBAAR,CAAyB7Y,IAC1B,uBAAsBwY,OAAO,CAACM,kBAAR,CAA2B9Y,IAAK,sBAHzC,CADlB;AAOA,UAAIwY,OAAO,CAACI,cAAR,CAAuB5Y,IAAvB,GAA8B,CAAlC,EACEuY,aAAa,CAACjd,IAAd,CACExE,gBAAgB,CACb,wBAAuB4Q,KAAK,CAACC,IAAN,CAAW6Q,OAAO,CAACI,cAAnB,EACrBxM,GADqB,CACjBsM,aADiB,EAErBhT,IAFqB,CAEhB,IAFgB,CAEV,EAHA,CADlB;AAOF,UAAI8S,OAAO,CAACK,gBAAR,CAAyB7Y,IAAzB,GAAgC,CAApC,EACEuY,aAAa,CAACjd,IAAd,CACExE,gBAAgB,CACb,0BAAyB4Q,KAAK,CAACC,IAAN,CAAW6Q,OAAO,CAACK,gBAAR,CAAyBE,IAAzB,EAAX,EACvB3M,GADuB,CACnB9G,CAAC,IAAIA,CAAC,CAACyE,IADY,EAEvBrE,IAFuB,CAElB,IAFkB,CAEZ,EAHA,CADlB;AAOF,UAAI8S,OAAO,CAACM,kBAAR,CAA2B9Y,IAA3B,GAAkC,CAAtC,EACEuY,aAAa,CAACjd,IAAd,CACExE,gBAAgB,CACb,4BAA2B4Q,KAAK,CAACC,IAAN,CAAW6Q,OAAO,CAACM,kBAAR,CAA2BC,IAA3B,EAAX,EACzB3M,GADyB,CACrB9G,CAAC,IAAK,GAAEoT,aAAa,CAACpT,CAAC,CAACzH,MAAH,CAAW,IAAG8a,WAAW,CAACrT,CAAC,CAACnG,GAAH,CAAQ,EADjC,EAEzBuG,IAFyB,CAEpB,IAFoB,CAEd,EAHA,CADlB;AAOH;;AACDlK,IAAAA,UAAU,CAACwd,OAAX,CAAmB,GAAGT,aAAtB;AACA/c,IAAAA,UAAU,CAACF,IAAX,CAAgBxE,gBAAgB,CAAC,SAASuV,OAAV,CAAhC;AACD;;AAED4M,EAAAA,mBAAmB,CACjB7hB,IADiB,EAEjBuB,SAFiB,EAGjBsK,eAHiB,EAIjBiW,QAJiB,EAKjBzO,iBALiB,EAMU;AAC3B,QAAI0O,OAAO,GAAG;AAAE/hB,MAAAA,IAAF;AAAQkM,MAAAA,UAAU,EAAE5I,SAApB;AAA+B6I,MAAAA,OAAO,EAAE,EAAxC;AAA4CC,MAAAA,IAAI,EAAE,KAAlD;AAAyDiH,MAAAA;AAAzD,KAAd;AACA,QAAIxC,qBAAqB,GACvBwC,iBAAiB,KAAK/P,SAAtB,GACIA,SADJ,GAEI,KAAKjC,2BAAL,CAAiCyP,2BAAjC,CAA6DuC,iBAA7D,CAHN;AAIA,QAAI2O,OAAO,GAAG,CAAC,CAACnR,qBAAF,IAA2B7Q,IAAI,KAAK,WAAlD;AACA,QAAIgM,OAAO,GAAG,KAAKpH,OAAL,CAAaqH,aAAb,CAA2B1K,SAA3B,EAAsCwgB,OAAtC;AAA+C;AAAYC,IAAAA,OAA3D,CAAd;AACA,4BAAU,CAAC,KAAKxc,qBAAL,CAA2B2C,GAA3B,CAA+B5G,SAA/B,CAAX;AACA,SAAKiE,qBAAL,CAA2BsC,GAA3B,CAA+BvG,SAA/B,EAA0CwgB,OAA1C;AACAD,IAAAA,QAAQ,CAACC,OAAD,CAAR;AACA,4BAAU,KAAKvc,qBAAL,CAA2B2C,GAA3B,CAA+B5G,SAA/B,CAAV;AACA,SAAKiE,qBAAL,CAA2BqR,MAA3B,CAAkCtV,SAAlC;AACA,UAAM6C,UAAU,GAAG,KAAKQ,OAAL,CAAa0H,WAAb,CAAyB/K,SAAzB,EAAoCyK,OAApC,EAA6CH,eAA7C;AAA8D;AAAYmW,IAAAA,OAA1E,EAAmF7V,OAAtG;AACA,QAAI,KAAK5G,QAAL,CAAcuP,WAAlB,EAA+B,KAAKmM,4BAAL,CAAkC1f,SAAlC,EAA6C6C,UAA7C;AAC/B,SAAKiC,aAAL,GAAqBuK,UAArB;AACA,WAAOxM,UAAP;AACD;;AAED6d,EAAAA,WAAW,GAAyB;AAClC,QAAIC,OAAO,GAAG;AACZC,MAAAA,4BAA4B,EAAE,KAAKzgB,2BAAL,CAAiC0gB,kBAAjC,CAAoDC,IAApD,CAC5B,KAAK3gB,2BADuB,CADlB;AAIZwR,MAAAA,gBAAgB,EAAE,KAAKA,gBAAL,CAAsBmP,IAAtB,CAA2B,IAA3B,CAJN;AAKZC,MAAAA,0BAA0B,EAAE,CAACxP,OAAD,EAAmByP,YAAnB,KAA2C;AACrE,YAAIrP,gBAAgB,GAAG,KAAKA,gBAAL,CAAsBJ,OAAtB,CAAvB;AACA,YAAIhE,eAAe,GAAGoT,OAAO,CAAC/Y,cAAR,CAAuBoZ,YAAvB,CAAtB;AACA,eAAO1iB,CAAC,CAACuK,mBAAF,CAAsBvK,CAAC,CAACwK,oBAAF,CAAuB,GAAvB,EAA4B6I,gBAA5B,EAA8CpE,eAA9C,CAAtB,CAAP;AACD,OATW;AAUZ0T,MAAAA,kBAAkB,EAAE,CAClB5Y,SADkB,EAElB6Y,mBAFkB,EAGlBC,kBAHkB,EAIlB7W,eAJkB,KAKf;AACH,YAAI8W,mBAAmB,GAAG,KAAKxZ,cAAL,CAAoBS,SAApB,CAA1B;AACA,YAAIyC,cAAc,GAAG6V,OAAO,CAACU,kBAAR,CAA2BH,mBAA3B,EAAgD5W,eAAhD,CAArB;AACA,YAAIU,aAAa,GAAG2V,OAAO,CAACU,kBAAR,CAA2BF,kBAA3B,EAA+C7W,eAA/C,CAApB;AACA,eAAOhM,CAAC,CAACqK,WAAF,CAAcyY,mBAAd,EAAmC9iB,CAAC,CAAC0E,cAAF,CAAiB8H,cAAjB,CAAnC,EAAqExM,CAAC,CAAC0E,cAAF,CAAiBgI,aAAjB,CAArE,CAAP;AACD,OApBW;;AAqBZsW,MAAAA,0BAA0B,CAACC,QAAD,EAAwC;AAChE,YAAIljB,CAAC,GAAGC,CAAC,CAACC,cAAF,EAAR;AACAF,QAAAA,CAAC,CAACG,eAAF,GAAoB,CAAE;AAAEC,UAAAA,IAAI,EAAE,cAAR;AAAwBC,UAAAA,KAAK,EAAG,aAAY6iB,QAAQ,CAAC3Q,aAAT,IAA0B,GAAI;AAA1E,SAAF,CAApB;AACA,eAAOvS,CAAP;AACD,OAzBW;;AA0BZmjB,MAAAA,oBAAoB,EAAGnY,GAAD,IAAgB;AACpC,eAAO/K,CAAC,CAACmjB,eAAF,CAAkB,KAAK7Z,cAAL,CAAoByB,GAApB,CAAlB,CAAP;AACD,OA5BW;AA6BZgY,MAAAA,kBAAkB,EAAE,CAClBrhB,SADkB,EAElBsK,eAFkB,KAIlB,KAAKgW,mBAAL,CAAyB,WAAzB,EAAsCtgB,SAAtC,EAAiDsK,eAAjD,EAAkE,MAChEtK,SAAS,CAACmf,SAAV,CAAsBwB,OAAtB,CADF,CAjCU;AAoCZ/Y,MAAAA,cAAc,EAAE,KAAKA,cAAL,CAAoBkZ,IAApB,CAAyB,IAAzB,CApCJ;AAqCZY,MAAAA,aAAa,EAAG1hB,SAAD,IAA0B;AACvC,YAAI2hB,mBAAmB,GAAG,KAAK1S,yBAAL,CAA+BjP,SAA/B,CAA1B;;AACA,gCAAU2hB,mBAAmB,KAAK,KAAKte,OAAL,CAAaM,OAAb,EAAlC,EAA0D,gDAA1D;AACA,YAAItF,CAAC,GAAG,KAAKmG,wBAAL,CAA8B1C,GAA9B,CAAkC9B,SAAlC,CAAR;AACA,YAAI3B,CAAC,KAAK0D,SAAV,EAAqB,KAAK,IAAIrD,KAAT,IAAkBL,CAAlB,EAAqB,KAAKuJ,cAAL,CAAoBlJ,KAApB;AAC3C,OA1CW;AA2CZkjB,MAAAA,iBAAiB,EAAG5hB,SAAD,IAA0B;AAC3C,YAAI2hB,mBAAmB,GAAG,KAAK1S,yBAAL,CAA+BjP,SAA/B,CAA1B;;AACA,gCAAU2hB,mBAAmB,KAAK,KAAKte,OAAL,CAAaM,OAAb,EAAlC,EAA0D,oDAA1D;AACA,aAAKN,OAAL,CAAawe,mBAAb;AACD,OA/CW;AAgDZnZ,MAAAA,IAAI,EAAGoZ,SAAD,IAAmC;AACvC,aAAKze,OAAL,CAAaqF,IAAb,CAAkBoZ,SAAlB;AACD,OAlDW;AAmDZ5W,MAAAA,aAAa,EAAGZ,eAAD,IAAuD;AACpE,aAAKjH,OAAL,CAAa6H,aAAb,CAA2BZ,eAA3B;AACD,OArDW;AAsDZyX,MAAAA,8BAA8B,EAAE,KAAK1V,+BAAL,CAAqCyU,IAArC,CAA0C,IAA1C,CAtDpB;AAuDZhV,MAAAA,sBAAsB,EAAE,KAAKA,sBAAL,CAA4BgV,IAA5B,CAAiC,IAAjC,EAAuC,KAAvC,EAA8C/e,SAA9C,CAvDZ;AAwDZigB,MAAAA,OAAO,EAAGtjB,KAAD,IAAkB;AACzB,YAAIsjB,OAAO,GAAG,CAAC,KAAKze,wBAAL,CAA8BqD,GAA9B,CAAkClI,KAAlC,CAAD,IAA6C,CAAC,KAAKkF,cAAL,CAAoBgD,GAApB,CAAwBlI,KAAxB,CAA5D;;AACA,YAAI,CAACsjB,OAAL,EAAc;AACZ,iBAAO,KAAP;AACD;;AACD,YAAItjB,KAAK,YAAYyK,mBAAjB,IAAgCzK,KAAK,CAACqd,aAAN,KAAwBha,SAA5D,EAAuE;AACrE,cAAIga,aAAa,GAAGrd,KAAK,CAACqd,aAA1B;AACA,iBAAO,CAAC,KAAKxY,wBAAL,CAA8BqD,GAA9B,CAAkCmV,aAAlC,CAAD,IAAqD,CAAC,KAAKnY,cAAL,CAAoBgD,GAApB,CAAwBmV,aAAxB,CAA7D;AACD;;AACD,eAAOiG,OAAP;AACD,OAlEW;AAmEZC,MAAAA,OAAO,EAAGvjB,KAAD,IAAwC;AAC/C,aAAK2E,OAAL,CAAa4e,OAAb,CAAqBvjB,KAArB;AACD,OArEW;AAsEZwjB,MAAAA,uBAAuB,EAAG3Q,OAAD,IAAsB;AAC7C,YAAIjE,uBAAuB,GAAG,KAAKgE,2BAAL,CAAiCC,OAAjC,CAA9B;;AACA,YAAIjE,uBAAuB,KAAKvL,SAAhC,EAA2C;AACzC,kCAAUuL,uBAAuB,CAACmS,eAAlC;AACA,kCACEnS,uBAAuB,CAACC,eAD1B,EAEE,sFAFF;AAIA,cAAI4U,QAAQ,GAAG5Q,OAAO,CAAC7S,KAAvB;AACA,kCAAUyjB,QAAV;AACA,cAAIC,gBAAgB,GAAK9U,uBAAuB,CAACC,eAAjD;AACA,kCACEjP,CAAC,CAAC+jB,MAAF,CAASD,gBAAT,CADF,EAEE,yFAFF;AAIA,cAAIE,kBAAkB,GAAG,KAAK1a,cAAL,CAAoBua,QAApB,CAAzB;AACA,eAAK9e,OAAL,CAAaqF,IAAb,CAAkBpK,CAAC,CAACuK,mBAAF,CAAsBvK,CAAC,CAACwK,oBAAF,CAAuB,GAAvB,EAA4BsZ,gBAA5B,EAA8CE,kBAA9C,CAAtB,CAAlB;AACD;AACF,OAxFW;AAyFZC,MAAAA,wBAAwB,EAAG5c,eAAD,IAAsC;AAC9D,YAAIE,IAAI,GAAGF,eAAe,CAACG,UAA3B;AACA,YAAIZ,MAAM,GAAGS,eAAe,CAACT,MAA7B;AACA,gCAAUA,MAAM,YAAYiE,mBAA5B;;AACA,YAAI,KAAKvF,cAAL,CAAoBgD,GAApB,CAAwB1B,MAAxB,CAAJ,EAAqC;AACnC,cAAIsB,GAAG,GAAGb,eAAe,CAACa,GAA1B;AACA,kCAAUA,GAAG,KAAKzE,SAAlB,EAA6B,wBAA7B;AACA,cAAIygB,YAAY,GAAG,EAAnB;AACA,cAAI3c,IAAI,KAAK9D,SAAb,EAAwBygB,YAAY,CAAC7f,IAAb,CAAkB,GAAG,KAAKqD,oBAAL,CAA0BH,IAA1B,CAArB;AACxB2c,UAAAA,YAAY,CAAC7f,IAAb,CAAkBuC,MAAlB;AACA,cAAIsB,GAAG,YAAY4C,aAAnB,EAA0BoZ,YAAY,CAAC7f,IAAb,CAAkB6D,GAAlB;AAC1B,eAAKnD,OAAL,CAAa0C,oCAAb,CACEyc,YADF,EAEE,MAAM;AACJ;AACA,iBAAK5a,cAAL,CAAoB1C,MAApB;;AACA,iBAAKgB,aAAL,CAAmBhB,MAAnB,EAA2BsB,GAA3B,EAAgCX,IAAhC,EAAsC,IAAtC;AACD,WANH,EAOE,KAAKxC,OAAL,CAAaM,OAAb,EAPF;AASD;AACF,OA9GW;AA+GZlE,MAAAA,OAAO,EAAE,KAAKuE;AA/GF,KAAd;AAiHA,WAAO2c,OAAP;AACD;;AAED8B,EAAAA,gBAAgB,CAAC9b,IAAD,EAA4B;AAC1C,SAAK,IAAIiO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjO,IAAI,CAACmD,MAAzB,EAAiC8K,CAAC,EAAlC,EAAsC;AACpC,UAAI8N,IAAI,GAAG/b,IAAI,CAACiO,CAAD,CAAf;;AACA,UAAI8N,IAAI,CAACjkB,IAAL,KAAc,qBAAlB,EAAyC;AACvC;AACD,OAFD,MAEO,IAAIikB,IAAI,CAACjkB,IAAL,KAAc,qBAAd,IAAuCikB,IAAI,CAACjkB,IAAL,KAAc,qBAAzD,EAAgF;AACrF,eAAO,IAAP;AACD,OAFM,MAEA,IAAIikB,IAAI,CAACjkB,IAAL,KAAc,gBAAlB,EAAoC;AACzC,YAAI,KAAKgkB,gBAAL,CAAsBC,IAAI,CAAC/b,IAA3B,CAAJ,EAAsC;AACpC,iBAAO,IAAP;AACD;AACF,OAJM,MAIA,IAAI+b,IAAI,CAACjkB,IAAL,KAAc,aAAlB,EAAiC;AACtC,YAAIikB,IAAI,CAACvY,SAAT,EAAoB;AAClB,cAAI,KAAKsY,gBAAL,CAAsBC,IAAI,CAACvY,SAAL,CAAexD,IAArC,CAAJ,EAAgD;AAC9C,mBAAO,IAAP;AACD;AACF;;AACD,YAAI+b,IAAI,CAACna,UAAT,EAAqB;AACnB,cAAI,KAAKka,gBAAL,CAAsBC,IAAI,CAACna,UAAL,CAAgB5B,IAAtC,CAAJ,EAAiD;AAC/C,mBAAO,IAAP;AACD;AACF;AACF;AACF;;AACD,WAAO,KAAP;AACD;;AAEDgc,EAAAA,+CAA+C,CAC7C3iB,SAD6C,EAE7C2B,aAF6C,EAG7CyX,iBAH6C,EAIlB;AAC3B,WAAO,KAAKkH,mBAAL,CACL,mBADK,EAELtgB,SAFK;AAGL;AAAoB+B,IAAAA,SAHf,EAILye,OAAO,IAAI;AACT,UAAIoC,gBAAgB,GAAGxJ,iBAAiB,CAACpZ,SAAzC;AACA,8BAAU4iB,gBAAgB,KAAK5iB,SAA/B;AACA4iB,MAAAA,gBAAgB,CAACzD,SAAjB,CAA2B,KAAKuB,WAAL,EAA3B;AACA,WAAKvhB,KAAL,CAAW0jB,6BAAX,CAAyC,MAAM;AAC7C,cAAMC,qBAAqB,GAAG,KAAKxhB,8BAAL,CAAoCyhB,yBAApC,CAA8DphB,aAA9D,CAA9B;AACA,aAAK+B,QAAL,CAAckH,OAAd,CAAsBjI,IAAtB,CAA2B,GAAGmgB,qBAA9B;AACA,eAAO,IAAP;AACD,OAJD,EAIG1J,iBAAiB,CAACyG,OAJrB;AAKD,KAbI,EAcLle,aAdK,CAAP;AAgBD,GAttEiC,CAwtElC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA0X,EAAAA,4BAA4B,CAC1B2J,uBAD0B,EAE1B5J,iBAF0B,EAGpB;AACN,QAAI;AAAEyG,MAAAA,OAAF;AAAWoD,MAAAA,UAAX;AAAuBjjB,MAAAA,SAAvB;AAAkCkjB,MAAAA;AAAlC,QAAsD9J,iBAA1D,CADM,CAEN;AACA;;AACA,QACE,CAAC,KAAKhW,4BAAL,CAAkCwD,GAAlC,CAAsCoc,uBAAtC,CAAD,IACA,KAAK9e,4BAAL,CAAkC0C,GAAlC,CAAsCoc,uBAAtC,CAFF,EAGE;AACA;AACD;;AACD,SAAK9e,4BAAL,CAAkCqC,GAAlC,CAAsCyc,uBAAtC,EAA+D,EAA/D,EAVM,CAYN;AACA;AACA;;AACA,SAAK,IAAIG,cAAT,IAA2BD,eAA3B,EAA4C,KAAKtb,cAAL,CAAoBub,cAApB;;AAE5C,QAAIlD,cAAc,GAAGJ,OAAO,CAACI,cAA7B;AACA,QAAImD,eAAe,GAAG,IAAIjiB,GAAJ,CAAQ,CAAC,GAAG8e,cAAJ,EAAoBjQ,MAApB,CAA2B9K,MAAM,IAAIA,MAAM,YAAY+B,qBAAvD,CAAR,CAAtB,CAlBM,CAmBN;AACA;AACA;;AACEmc,IAAAA,eAAF,CAA6CC,OAA7C,CAAqDha,GAAG,IAAI,KAAKhI,sCAAL,CAA4CqN,GAA5C,CAAgDrF,GAAhD,CAA5D;;AACA,QAAI1C,IAAI,GAAG,KAAKgc,+CAAL,CACT3iB,SADS,EAETgjB,uBAFS,EAGT5J,iBAHS,CAAX;;AAKA,4BAAU4J,uBAAuB,YAAYxQ,qCAA7C;;AACA,SAAK,IAAI8Q,SAAT,IAAsBL,UAAtB,EAAkC;AAChCK,MAAAA,SAAS,CAAC3c,IAAD,CAAT;AACD;;AACD,SAAKzC,4BAAL,CAAkCqC,GAAlC,CAAsCyc,uBAAtC,EAA+Drc,IAA/D;AACD;;AAED4c,EAAAA,+BAA+B,GAAS;AACtC,SAAK,IAAI,CAACP,uBAAD,EAA0B;AAAEhjB,MAAAA;AAAF,KAA1B,CAAT,IAAqD,KAAKN,kCAAL,CAAwCkL,OAAxC,EAArD,EAAwG;AACtG,8BAAU,CAAC,KAAKvG,4BAAL,CAAkCuC,GAAlC,CAAsCoc,uBAAtC,CAAX;AACA,WAAK3e,4BAAL,CAAkCkC,GAAlC,CAAsCyc,uBAAtC,EAA+DhjB,SAA/D;AACD;AACF,GA1wEiC,CA4wElC;;;AACAwjB,EAAAA,0BAA0B,GAAS,CACjC;AACD;;AAEDrE,EAAAA,SAAS,GAAkB;AACzB,SAAKoE,+BAAL;AAEA,SAAKvjB,SAAL,CAAemf,SAAf,CAAyB,KAAKuB,WAAL,EAAzB;AACA,SAAK5b,aAAL,GAAqBuK,UAArB;AACA,4BAAU,KAAKhM,OAAL,CAAaogB,aAAb,MAAgC,KAAKtkB,KAAL,CAAWsE,UAAX,CAAsB4D,IAAhE,EALyB,CAOzB;AAEA;;AAEA,SAAK,IAAI,CAACqc,QAAD,EAAWC,WAAX,CAAT,IAAoC,KAAKtkB,OAAL,CAAaukB,kBAAjD,EACE,KAAK3iB,cAAL,CAAoBsF,GAApB,CAAwBmd,QAAxB,EAAkC,kDAAe,KAAK9b,cAAL,CAAoB+b,WAApB,CAAf,EAAiDA,WAAjD,CAAlC;;AAEF,SAAK,IAAI,CAACvS,IAAD,EAAO1S,KAAP,CAAT,IAA0B,KAAK4F,kBAA/B,EAAmD;AACjD,WAAKjB,OAAL,CAAaqF,IAAb,CACEpK,CAAC,CAACuK,mBAAF,CAAsBvK,CAAC,CAACwK,oBAAF,CAAuB,GAAvB,EAA4BxK,CAAC,CAAC+D,UAAF,CAAa+O,IAAb,CAA5B,EAAgD,KAAKxJ,cAAL,CAAoBlJ,KAApB,CAAhD,CAAtB,CADF;AAGD;;AAED,SAAK8kB,0BAAL;AAEAzU,IAAAA,KAAK,CAAC/F,SAAN,CAAgBrG,IAAhB,CAAqBkhB,KAArB,CAA2B,KAAKxjB,OAAhC,EAAyC,KAAKH,gBAAL,CAAsBG,OAA/D;AAEA,SAAKgD,OAAL,CAAaygB,QAAb;AAEA,SAAKtiB,iBAAL,CAAuBkO,4BAAvB,CAAoDqU,qBAApD,CAA0E,KAAKnjB,oBAA/E;AACA,QAAI;AAAEojB,MAAAA,sBAAF;AAA0BC,MAAAA;AAA1B,QAAmD,KAAKziB,iBAAL,CAAuB0iB,eAAvB,CACrD,KAAKhgB,4BADgD,CAAvD,CA3ByB,CA+BzB;;AACA,QAAIigB,eAAe,GAAG7lB,CAAC,CAAC8lB,SAAF,CAAY9lB,CAAC,CAAC+lB,gBAAF,CAAmB,YAAnB,CAAZ,CAAtB;AACA,QAAIC,gBAAgB,GAAG,EAAvB;;AACA,QAAI,CAAC,KAAKnlB,KAAL,CAAWolB,QAAZ,IAAwB,CAACP,sBAAsB,CAACla,MAAhD,IAA0Dma,oBAAoB,CAACna,MAAnF,EAA2F;AACzF;AACAwa,MAAAA,gBAAgB,CAAC3hB,IAAjB,CAAsBwhB,eAAtB;AACD,KAHD,MAGO,IAAIH,sBAAsB,CAACla,MAAvB,IAAiCma,oBAAoB,CAACna,MAA1D,EAAkE;AACvE;AACA0a,MAAAA,QAAQ,EAAE,KAAK,IAAIC,IAAT,IAAiBR,oBAAjB,EAAuC;AAC/C,YAAI3lB,CAAC,CAAComB,oBAAF,CAAuBD,IAAvB,CAAJ,EAAkC;AAChC,cAAI1b,IAAI,GAAK0b,IAAb;;AACA,cAAI1b,IAAI,CAACpC,IAAL,CAAUge,UAAd,EAA0B;AACxB,iBAAK,IAAIP,SAAT,IAAsBrb,IAAI,CAACpC,IAAL,CAAUge,UAAhC,EAA4C;AAC1C,kBAAIP,SAAS,CAAC1lB,KAAV,CAAgBA,KAAhB,KAA0B,YAA9B,EAA4C;AAC1C;AACA,yBAAS8lB,QAAT;AACD;AACF;AACF,WAPD,MAOOzb,IAAI,CAACpC,IAAL,CAAUge,UAAV,GAAuB,EAAvB;;AAEP5b,UAAAA,IAAI,CAACpC,IAAL,CAAUge,UAAV,CAAqBtE,OAArB,CAA6B8D,eAA7B;AACD;AACF;AACF,KAtDwB,CAwDzB;;;AACA,QAAI,KAAK3jB,aAAT,EAAwB;AACtB,WAAKH,OAAL,CAAasC,IAAb,CAAkBrE,CAAC,CAACkE,mBAAF,CAAsB,KAAtB,EAA6B,CAAClE,CAAC,CAACmE,kBAAF,CAAqBwZ,6BAArB,EAAsC3d,CAAC,CAAC2O,gBAAF,CAAmB,EAAnB,CAAtC,CAAD,CAA7B,CAAlB;AACD;;AACD,QAAI,KAAKxM,yBAAT,EAAoC;AAClC,WAAKJ,OAAL,CAAasC,IAAb,CACErE,CAAC,CAACkE,mBAAF,CAAsB,KAAtB,EAA6B,CAC3BlE,CAAC,CAACmE,kBAAF,CAAqB2Z,mCAArB,EAA4C9d,CAAC,CAACsmB,kBAAF,CAAqB,IAArB,EAA2B,EAA3B,EAA+BtmB,CAAC,CAAC0E,cAAF,CAAiB,EAAjB,CAA/B,CAA5C,CAD2B,CAA7B,CADF;AAKD;;AAED,QAAI2D,IAAI,GAAG,KAAKtG,OAAL,CAAa4F,MAAb,CAAoB,KAAK5C,OAAL,CAAaM,OAAb,GAAuBiH,OAA3C,CAAX;AACA,qCAAiBjE,IAAjB,EAAuB,KAAK/F,oBAA5B;AAEA,QAAIikB,QAAQ,GAAG,EAAf;AACA,QAAI,KAAK3kB,gBAAL,CAAsB4kB,eAAtB,CAAsCzd,IAAtC,GAA6C,CAAjD,EACEwd,QAAQ,CAACliB,IAAT,CACErE,CAAC,CAACkE,mBAAF,CACE,KADF,EAEEuM,KAAK,CAACC,IAAN,CAAW,KAAK9O,gBAAL,CAAsB4kB,eAAjC,EAAkDrR,GAAlD,CAAsDjN,GAAG,IAAIlI,CAAC,CAACmE,kBAAF,CAAqBnE,CAAC,CAAC+D,UAAF,CAAamE,GAAb,CAArB,CAA7D,CAFF,CADF;AAMF,QAAI,KAAKlC,kBAAL,CAAwB+C,IAAxB,GAA+B,CAAnC,EACEwd,QAAQ,CAACliB,IAAT,CACErE,CAAC,CAACkE,mBAAF,CACE,KADF,EAEEuM,KAAK,CAACC,IAAN,CAAW,KAAK1K,kBAAL,CAAwB8b,IAAxB,EAAX,EAA2C3M,GAA3C,CAA+CjN,GAAG,IAAIlI,CAAC,CAACmE,kBAAF,CAAqBnE,CAAC,CAAC+D,UAAF,CAAamE,GAAb,CAArB,CAAtD,CAFF,CADF;;AAMF,QAAIG,IAAI,CAACmD,MAAT,EAAiB;AACf,UAAI,KAAK3K,KAAL,CAAW4I,gBAAX,CAA4B,kBAA5B,CAAJ,EAAqD;AACnD8c,QAAAA,QAAQ,CAACliB,IAAT,CACErE,CAAC,CAACuK,mBAAF,CACEvK,CAAC,CAAC6J,cAAF,CACE7J,CAAC,CAAC2J,gBAAF,CACE3J,CAAC,CAAC6J,cAAF,CAAiB7J,CAAC,CAAC+D,UAAF,CAAa,SAAb,CAAjB,EAA0C,CAAC/D,CAAC,CAACmK,aAAF,CAAgB,oBAAhB,CAAD,CAA1C,CADF,EAEEnK,CAAC,CAAC+D,UAAF,CAAa,SAAb,CAFF,CADF,EAKE,EALF,CADF,CADF;AAWD;;AAED,UAAI,KAAKogB,gBAAL,CAAsB9b,IAAtB,CAAJ,EAAiC;AAC/B,YAAIoe,gBAAgB,GAAGzmB,CAAC,CAAC0mB,cAAF,EAAvB;AAEA,YAAIJ,kBAAkB,GAAGtmB,CAAC,CAACsmB,kBAAF,CAAqB,IAArB,EAA2B,EAA3B,EAA+BtmB,CAAC,CAAC0E,cAAF,CAAiB2D,IAAjB,EAAuB2d,gBAAvB,CAA/B,CAAzB;AACA,YAAInc,cAAc,GAAG,KAAKjI,gBAAL,CAAsB+kB,QAAtB,GACjB3mB,CAAC,CAAC6J,cAAF,CAAiB7J,CAAC,CAAC2J,gBAAF,CAAmB2c,kBAAnB,EAAuCtmB,CAAC,CAAC+D,UAAF,CAAa,MAAb,CAAvC,CAAjB,EAA+E,CAAC0iB,gBAAD,CAA/E,CADiB,GAEjBzmB,CAAC,CAAC6J,cAAF,CAAiByc,kBAAjB,EAAqC,EAArC,CAFJ;AAGAC,QAAAA,QAAQ,CAACliB,IAAT,CAAcrE,CAAC,CAACuK,mBAAF,CAAsBV,cAAtB,CAAd;AACD,OARD,MAQO;AACL4G,QAAAA,KAAK,CAAC/F,SAAN,CAAgBrG,IAAhB,CAAqBkhB,KAArB,CAA2BgB,QAA3B,EAAqCle,IAArC;AACD;AACF,KAhHwB,CAkHzB;;;AACA,QACE,KAAKzF,gBAAL,CAAsBmG,IAAtB,KAA+B,KAAKzD,cAAL,CAAoByD,IAAnD,IACA,CAAC0H,KAAK,CAACC,IAAN,CAAW,KAAK9N,gBAAhB,EAAkCgkB,KAAlC,CAAwC7b,GAAG,IAAI,KAAKzF,cAAL,CAAoBgD,GAApB,CAAwByC,GAAxB,CAA/C,CAFH,EAGE;AACA,WAAK8b,gCAAL;;AACA,8BAAU,KAAV,EAAiB,gBAAgB,KAAKjkB,gBAAL,CAAsBmG,IAAtC,GAA6C,MAA7C,GAAsD,KAAKzD,cAAL,CAAoByD,IAA3F;AACD,KAzHwB,CA2HzB;AACA;;;AACA,SAAK,IAAIzF,QAAT,IAAqB,KAAKC,yBAAL,CAA+BgC,MAA/B,EAArB,EAA8D;AAC5D,WAAKlE,eAAL,CAAqBylB,aAArB,CAAmCxjB,QAAnC;AACD;;AAED,QAAIyjB,kBAAkB,GAAG,EAAzB;AACA,QAAI,KAAKlmB,KAAL,CAAWolB,QAAf,EAAyBc,kBAAkB,CAAC1iB,IAAnB,CAAwBwhB,eAAxB;AACzB,WAAO7lB,CAAC,CAACgnB,IAAF,CAAOhnB,CAAC,CAACinB,OAAF,CAAUV,QAAV,EAAoBQ,kBAApB,CAAP,CAAP;AACD;;AAEDjW,EAAAA,UAAU,CAACR,MAAD,EAA2B;AACnCkB,IAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBnB,MAAM,CAACvH,IAAK,SAA3C;;AACA,SAAK,IAAIhJ,CAAT,IAAcuQ,MAAd,EACE,IAAIvQ,CAAC,YAAYyQ,oBAAjB,EAA4B;AAC1B,UAAI1Q,IAAI,GAAG,EAAX;;AACA,aAAOC,CAAC,YAAYyQ,oBAApB,EAA+BzQ,CAAC,GAAG,KAAKuB,aAAL,CAAmBqQ,SAAnB,CAA6B5R,CAA7B,CAAnC,EAAoED,IAAI,IAAI,OAAOC,CAAC,CAACkS,OAAF,EAAf;;AACpET,MAAAA,OAAO,CAACC,GAAR,CAAa,SAAQ3R,IAAK,EAA1B;AACD,KAJD,MAIO;AACL,8BAAUC,CAAC,YAAY4I,qBAAvB;AACA6I,MAAAA,OAAO,CAACC,GAAR,CAAa,SAAQ1R,CAAC,CAACmnB,cAAF,IAAoBC,IAAI,CAACC,SAAL,CAAernB,CAAC,CAAC+W,kBAAjB,CAApB,IAA4D/W,CAAC,CAACO,WAAF,CAAcwS,IAAK,EAApG;AACD;AACJ;;AAED+T,EAAAA,gCAAgC,GAAS;AACvC,QAAIQ,QAAQ,GAAGjnB,KAAK,IAAI;AACtBoR,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAcrR,KAAd,CAAZ;AACA,UAAIkQ,MAAM,GAAG,KAAKhL,cAAL,CAAoB9B,GAApB,CAAwBpD,KAAxB,CAAb;AACA,UAAIkQ,MAAM,KAAK7M,SAAf,EAA0B,KAAKqN,UAAL,CAAgBR,MAAhB;AAC3B,KAJD;;AAKAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;;AACA,SAAK,IAAIrR,KAAT,IAAkB,KAAKwC,gBAAvB,EAAyC,IAAI,CAAC,KAAK0C,cAAL,CAAoBgD,GAApB,CAAwBlI,KAAxB,CAAL,EAAqCinB,QAAQ,CAACjnB,KAAD,CAAR;;AAC9EoR,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;;AACA,SAAK,IAAIrR,KAAT,IAAkB,KAAKkF,cAAL,CAAoBwc,IAApB,EAAlB,EAA8C,IAAI,CAAC,KAAKlf,gBAAL,CAAsB0F,GAAtB,CAA0BlI,KAA1B,CAAL,EAAuCinB,QAAQ,CAACjnB,KAAD,CAAR;AACtF;;AA96EiC","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyBinding } from \"../types.js\";\nimport { IsArray, Get } from \"../methods/index.js\";\nimport {\n  AbstractValue,\n  BooleanValue,\n  BoundFunctionValue,\n  ECMAScriptSourceFunctionValue,\n  EmptyValue,\n  FunctionValue,\n  NativeFunctionValue,\n  NumberValue,\n  ObjectValue,\n  ProxyValue,\n  StringValue,\n  SymbolValue,\n  Value,\n  UndefinedValue,\n} from \"../values/index.js\";\nimport * as t from \"@babel/types\";\nimport type {\n  BabelNodeExpression,\n  BabelNodeStatement,\n  BabelNodeIdentifier,\n  BabelNodeBlockStatement,\n  BabelNodeLVal,\n  BabelNodeMemberExpression,\n  BabelNodeSpreadElement,\n  BabelVariableKind,\n  BabelNodeFile,\n  BabelNodeFunctionExpression,\n} from \"@babel/types\";\nimport { Generator } from \"../utils/generator.js\";\nimport { PreludeGenerator } from \"../utils/PreludeGenerator.js\";\nimport { NameGenerator } from \"../utils/NameGenerator.js\";\nimport type { SerializationContext } from \"../utils/generator.js\";\nimport invariant from \"../invariant.js\";\nimport type {\n  ResidualFunctionBinding,\n  FunctionInfo,\n  FunctionInstance,\n  AdditionalFunctionInfo,\n  SerializedBody,\n  ClassMethodInstance,\n  AdditionalFunctionEffects,\n} from \"./types.js\";\nimport type { SerializerOptions } from \"../options.js\";\nimport { type Scope, BodyReference, type ResidualHeapInfo } from \"./types.js\";\nimport { SerializerStatistics } from \"./statistics.js\";\nimport { Logger } from \"../utils/logger.js\";\nimport { Modules } from \"../utils/modules.js\";\nimport { HeapInspector } from \"../utils/HeapInspector.js\";\nimport { ResidualFunctions } from \"./ResidualFunctions.js\";\nimport { factorifyObjects } from \"./factorify.js\";\nimport { voidExpression, emptyExpression, constructorExpression, protoExpression } from \"../utils/babelhelpers.js\";\nimport { Emitter } from \"./Emitter.js\";\nimport { ResidualHeapValueIdentifiers } from \"./ResidualHeapValueIdentifiers.js\";\nimport {\n  commonAncestorOf,\n  getSuggestedArrayLiteralLength,\n  withDescriptorValue,\n  ClassPropertiesToIgnore,\n  canIgnoreClassLengthProperty,\n  getObjectPrototypeMetadata,\n} from \"./utils.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport { canHoistFunction } from \"../react/hoisting.js\";\nimport { To } from \"../singletons.js\";\nimport { ResidualReactElementSerializer } from \"./ResidualReactElementSerializer.js\";\nimport type { Binding } from \"../environment.js\";\nimport { GlobalEnvironmentRecord, DeclarativeEnvironmentRecord } from \"../environment.js\";\nimport type { Referentializer } from \"./Referentializer.js\";\nimport { GeneratorTree } from \"./GeneratorTree.js\";\nimport { type Replacement, getReplacement } from \"./ResidualFunctionInstantiator.js\";\nimport { describeValue } from \"../utils.js\";\nimport { getAsPropertyNameExpression } from \"../utils/babelhelpers.js\";\nimport { ResidualOperationSerializer } from \"./ResidualOperationSerializer.js\";\nimport { PropertyDescriptor, AbstractJoinedDescriptor } from \"../descriptors.js\";\nimport type { ResidualOptimizedFunctions } from \"./ResidualOptimizedFunctions\";\n\nfunction commentStatement(text: string) {\n  let s = t.emptyStatement();\n  s.leadingComments = [({ type: \"BlockComment\", value: text }: any)];\n  return s;\n}\n\nclass CountingSemaphore {\n  count: number;\n  action: () => void;\n  constructor(action: () => void, initialCount: number = 1) {\n    invariant(initialCount >= 1);\n    this.count = initialCount;\n    this.action = action;\n  }\n  acquireOne() {\n    this.count++;\n  }\n  releaseOne() {\n    invariant(this.count > 0);\n    if (--this.count === 0) this.action();\n  }\n}\n\nexport class ResidualHeapSerializer {\n  constructor(\n    realm: Realm,\n    logger: Logger,\n    modules: Modules,\n    residualHeapValueIdentifiers: ResidualHeapValueIdentifiers,\n    residualHeapInspector: HeapInspector,\n    residualHeapInfo: ResidualHeapInfo,\n    options: SerializerOptions,\n    additionalFunctionValuesAndEffects: Map<FunctionValue, AdditionalFunctionEffects>,\n    referentializer: Referentializer,\n    generatorTree: GeneratorTree,\n    residualOptimizedFunctions: ResidualOptimizedFunctions\n  ) {\n    this.realm = realm;\n    this.logger = logger;\n    this.modules = modules;\n    this.residualHeapValueIdentifiers = residualHeapValueIdentifiers;\n    this.referentializer = referentializer;\n    this._residualOptimizedFunctions = residualOptimizedFunctions;\n\n    let realmGenerator = this.realm.generator;\n    invariant(realmGenerator);\n    this.generator = realmGenerator;\n    let realmPreludeGenerator = this.realm.preludeGenerator;\n    invariant(realmPreludeGenerator);\n    this.preludeGenerator = realmPreludeGenerator;\n    this.residualOperationSerializer = new ResidualOperationSerializer(realm, realmPreludeGenerator);\n\n    this.prelude = [];\n    this._descriptors = new Map();\n    this.needsEmptyVar = false;\n    this.needsAuxiliaryConstructor = false;\n    this.descriptorNameGenerator = this.preludeGenerator.createNameGenerator(\"$$\");\n    this.factoryNameGenerator = this.preludeGenerator.createNameGenerator(\"$_\");\n    this.intrinsicNameGenerator = this.preludeGenerator.createNameGenerator(\"$i_\");\n    this.functionNameGenerator = this.preludeGenerator.createNameGenerator(\"$f_\");\n    this.initializeConditionNameGenerator = this.preludeGenerator.createNameGenerator(\"_initialized\");\n    this.initializerNameGenerator = this.preludeGenerator.createNameGenerator(\"__init_\");\n    this.requireReturns = new Map();\n    this.serializedValues = new Set();\n    this._serializedValueWithIdentifiers = new Set();\n    this.additionalFunctionValueNestedFunctions = new Set();\n    this.residualReactElementSerializer = new ResidualReactElementSerializer(\n      this.realm,\n      this,\n      residualOptimizedFunctions\n    );\n    this.residualFunctions = new ResidualFunctions(\n      this.realm,\n      options,\n      this.modules,\n      this.requireReturns,\n      {\n        getContainingAdditionalFunction: functionValue => {\n          let instance = this.residualFunctionInstances.get(functionValue);\n          invariant(instance !== undefined);\n          return instance.containingAdditionalFunction;\n        },\n        getLocation: value => this.getSerializeObjectIdentifier(value),\n        createLocation: containingAdditionalFunction => {\n          let location = t.identifier(this.initializeConditionNameGenerator.generate());\n          let declar = t.variableDeclaration(\"var\", [t.variableDeclarator(location)]);\n          this.getPrelude(containingAdditionalFunction).push(declar);\n          return location;\n        },\n        createFunction: (containingAdditionalFunction, statements) => {\n          let id = t.identifier(this.initializerNameGenerator.generate());\n          this.getPrelude(containingAdditionalFunction).push(\n            t.functionDeclaration(id, [], t.blockStatement(statements))\n          );\n          return id;\n        },\n      },\n      this.prelude,\n      this.factoryNameGenerator,\n      residualHeapInfo.functionInfos,\n      residualHeapInfo.functionInstances,\n      residualHeapInfo.classMethodInstances,\n      residualHeapInfo.additionalFunctionValueInfos,\n      this.additionalFunctionValueNestedFunctions,\n      referentializer\n    );\n    this.emitter = new Emitter(\n      this.residualFunctions,\n      residualHeapInfo.referencedDeclaredValues,\n      residualHeapInfo.conditionalFeasibility,\n      this.realm.derivedIds\n    );\n    this.mainBody = this.emitter.getBody();\n    this.residualHeapInspector = residualHeapInspector;\n    this.residualValues = residualHeapInfo.values;\n    this.residualFunctionInstances = residualHeapInfo.functionInstances;\n    this.residualClassMethodInstances = residualHeapInfo.classMethodInstances;\n    this.residualFunctionInfos = residualHeapInfo.functionInfos;\n    this._options = options;\n    this.referencedDeclaredValues = residualHeapInfo.referencedDeclaredValues;\n    this.activeGeneratorBodies = new Map();\n    this.additionalFunctionValuesAndEffects = additionalFunctionValuesAndEffects;\n    this.additionalFunctionValueInfos = residualHeapInfo.additionalFunctionValueInfos;\n    this.rewrittenAdditionalFunctions = new Map();\n    this.declarativeEnvironmentRecordsBindings = residualHeapInfo.declarativeEnvironmentRecordsBindings;\n    this.globalBindings = residualHeapInfo.globalBindings;\n    this.generatorTree = generatorTree;\n    this.conditionalFeasibility = residualHeapInfo.conditionalFeasibility;\n    this.additionalFunctionGenerators = new Map();\n    this.declaredGlobalLets = new Map();\n    this._objectSemaphores = new Map();\n    this.additionalGeneratorRoots = residualHeapInfo.additionalGeneratorRoots;\n    let environment = realm.$GlobalEnv.environmentRecord;\n    invariant(environment instanceof GlobalEnvironmentRecord);\n    this.globalEnvironmentRecord = environment;\n  }\n\n  emitter: Emitter;\n  functions: Map<BabelNodeBlockStatement, Array<FunctionInstance>>;\n  functionInstances: Array<FunctionInstance>;\n  prelude: Array<BabelNodeStatement>;\n  body: Array<BabelNodeStatement>;\n  mainBody: SerializedBody;\n  realm: Realm;\n  residualOperationSerializer: ResidualOperationSerializer;\n  preludeGenerator: PreludeGenerator;\n  generator: Generator;\n  _descriptors: Map<string, BabelNodeIdentifier>;\n  needsEmptyVar: boolean;\n  needsAuxiliaryConstructor: boolean;\n  descriptorNameGenerator: NameGenerator;\n  factoryNameGenerator: NameGenerator;\n  intrinsicNameGenerator: NameGenerator;\n  functionNameGenerator: NameGenerator;\n  initializeConditionNameGenerator: NameGenerator;\n  initializerNameGenerator: NameGenerator;\n  logger: Logger;\n  modules: Modules;\n  residualHeapValueIdentifiers: ResidualHeapValueIdentifiers;\n  requireReturns: Map<number | string, Replacement>;\n  residualHeapInspector: HeapInspector;\n  residualValues: Map<Value, Set<Scope>>;\n  residualFunctionInstances: Map<FunctionValue, FunctionInstance>;\n  residualClassMethodInstances: Map<FunctionValue, ClassMethodInstance>;\n  residualFunctionInfos: Map<BabelNodeBlockStatement, FunctionInfo>;\n  serializedValues: Set<Value>;\n  _serializedValueWithIdentifiers: Set<Value>;\n  residualFunctions: ResidualFunctions;\n  _options: SerializerOptions;\n  referencedDeclaredValues: Map<Value, void | FunctionValue>;\n  activeGeneratorBodies: Map<Generator, SerializedBody>;\n  additionalFunctionValuesAndEffects: Map<FunctionValue, AdditionalFunctionEffects>;\n  additionalFunctionValueInfos: Map<FunctionValue, AdditionalFunctionInfo>;\n  rewrittenAdditionalFunctions: Map<FunctionValue, Array<BabelNodeStatement>>;\n  declarativeEnvironmentRecordsBindings: Map<DeclarativeEnvironmentRecord, Map<string, ResidualFunctionBinding>>;\n  globalBindings: Map<string, ResidualFunctionBinding>;\n  residualReactElementSerializer: ResidualReactElementSerializer;\n  referentializer: Referentializer;\n  additionalFunctionGenerators: Map<FunctionValue, Generator>;\n  _residualOptimizedFunctions: ResidualOptimizedFunctions;\n\n  // function values nested in additional functions can't delay initializations\n  // TODO: revisit this and fix additional functions to be capable of delaying initializations\n  additionalFunctionValueNestedFunctions: Set<FunctionValue>;\n\n  generatorTree: GeneratorTree;\n  conditionalFeasibility: Map<AbstractValue, { t: boolean, f: boolean }>;\n  additionalGeneratorRoots: Map<Generator, Set<ObjectValue>>;\n\n  declaredGlobalLets: Map<string, Value>;\n  globalEnvironmentRecord: GlobalEnvironmentRecord;\n\n  getStatistics(): SerializerStatistics {\n    invariant(this.realm.statistics instanceof SerializerStatistics, \"serialization requires SerializerStatistics\");\n    return this.realm.statistics;\n  }\n\n  _objectSemaphores: Map<ObjectValue, CountingSemaphore>;\n\n  _acquireOneObjectSemaphore(object: ObjectValue): void | CountingSemaphore {\n    let semaphore = this._objectSemaphores.get(object);\n    if (semaphore !== undefined) semaphore.acquireOne();\n    return semaphore;\n  }\n\n  // Configures all mutable aspects of an object, in particular:\n  // symbols, properties, prototype.\n  // For every created object that corresponds to a value,\n  // this function should be invoked once.\n  // Thus, as a side effect, we gather statistics here on all emitted objects.\n  _emitObjectProperties(\n    obj: ObjectValue,\n    properties: Map<string, PropertyBinding> = obj.properties,\n    objectPrototypeAlreadyEstablished: boolean = false,\n    cleanupDummyProperties: ?Set<string>,\n    skipPrototype: boolean = false\n  ): void {\n    //inject symbols\n    for (let [symbol, propertyBinding] of obj.symbols) {\n      invariant(propertyBinding);\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; //deleted\n      let semaphore = this._acquireOneObjectSemaphore(obj);\n      this.emitter.emitNowOrAfterWaitingForDependencies(\n        this._getDescriptorValues(desc).concat([symbol, obj]),\n        () => {\n          invariant(desc !== undefined);\n          this._emitProperty(obj, symbol, desc);\n          if (semaphore !== undefined) semaphore.releaseOne();\n        },\n        this.emitter.getBody()\n      );\n    }\n\n    // TODO #2259: Make deduplication in the face of leaking work for custom accessors\n    let isCertainlyLeaked = !obj.mightNotBeLeakedObject();\n    let shouldDropAsAssignedProp = (descriptor: Descriptor | void) =>\n      isCertainlyLeaked &&\n      (descriptor instanceof PropertyDescriptor && (descriptor.get === undefined && descriptor.set === undefined));\n\n    // inject properties\n    for (let [key, propertyBinding] of properties) {\n      invariant(propertyBinding);\n\n      if (propertyBinding.pathNode !== undefined) continue; // Property is assigned to inside loop\n      let desc = propertyBinding.descriptor;\n\n      if (shouldDropAsAssignedProp(desc)) continue;\n\n      if (desc === undefined) continue; //deleted\n      if (this.residualHeapInspector.canIgnoreProperty(obj, key)) continue;\n      invariant(desc !== undefined);\n      let semaphore = this._acquireOneObjectSemaphore(obj);\n      let body = this.emitter.getBody();\n      this.emitter.emitNowOrAfterWaitingForDependencies(\n        this._getDescriptorValues(desc).concat(obj),\n        () => {\n          invariant(desc !== undefined);\n          this._emitProperty(obj, key, desc, cleanupDummyProperties != null && cleanupDummyProperties.has(key));\n          if (semaphore !== undefined) semaphore.releaseOne();\n        },\n        body\n      );\n    }\n\n    // inject properties with computed names\n    if (obj.unknownProperty !== undefined) {\n      let desc = obj.unknownProperty.descriptor;\n      if (desc !== undefined) {\n        let semaphore = this._acquireOneObjectSemaphore(obj);\n        this.emitter.emitNowOrAfterWaitingForDependencies(\n          this._getNestedValuesFromAbstractDescriptor(desc, [obj]),\n          () => {\n            this._emitPropertiesWithComputedNamesDescriptor(obj, desc);\n            if (semaphore !== undefined) semaphore.releaseOne();\n          },\n          this.emitter.getBody()\n        );\n      }\n    }\n\n    // prototype\n    if (!skipPrototype) {\n      this._emitObjectPrototype(obj, objectPrototypeAlreadyEstablished);\n      if (obj instanceof FunctionValue) this._emitConstructorPrototype(obj);\n    }\n\n    this.getStatistics().objects++;\n    this.getStatistics().objectProperties += obj.properties.size;\n  }\n\n  _emitObjectPrototype(obj: ObjectValue, objectPrototypeAlreadyEstablished: boolean): void {\n    let kind = obj.getKind();\n    let proto = obj.$Prototype;\n    if (objectPrototypeAlreadyEstablished) {\n      if (this.realm.invariantLevel >= 3) {\n        this.emitter.emitNowOrAfterWaitingForDependencies(\n          [proto, obj],\n          () => {\n            invariant(proto);\n            let serializedProto = this.serializeValue(proto);\n            let uid = this.getSerializeObjectIdentifier(obj);\n            const fetchedPrototype =\n              this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION) || this.realm.isCompatibleWith(\"mobile\")\n                ? t.memberExpression(uid, protoExpression)\n                : t.callExpression(this.preludeGenerator.memoizeReference(\"Object.getPrototypeOf\"), [uid]);\n            let condition = t.binaryExpression(\"!==\", fetchedPrototype, serializedProto);\n            let consequent = this.residualOperationSerializer.getErrorStatement(\n              t.stringLiteral(\"unexpected prototype\")\n            );\n            this.emitter.emit(t.ifStatement(condition, consequent));\n          },\n          this.emitter.getBody()\n        );\n      }\n      return;\n    }\n    if (proto === this.realm.intrinsics[kind + \"Prototype\"]) return;\n\n    let semaphore = this._acquireOneObjectSemaphore(obj);\n    this.emitter.emitNowOrAfterWaitingForDependencies(\n      [proto, obj],\n      () => {\n        invariant(proto);\n        let serializedProto = this.serializeValue(proto);\n        let uid = this.getSerializeObjectIdentifier(obj);\n        if (!this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION) && !this.realm.isCompatibleWith(\"mobile\"))\n          this.emitter.emit(\n            t.expressionStatement(\n              t.callExpression(this.preludeGenerator.memoizeReference(\"Object.setPrototypeOf\"), [uid, serializedProto])\n            )\n          );\n        else {\n          this.emitter.emit(\n            t.expressionStatement(\n              t.assignmentExpression(\"=\", t.memberExpression(uid, protoExpression), serializedProto)\n            )\n          );\n        }\n        if (semaphore !== undefined) semaphore.releaseOne();\n      },\n      this.emitter.getBody()\n    );\n  }\n\n  _emitConstructorPrototype(func: FunctionValue): void {\n    // If the original prototype object was mutated,\n    // request its serialization here as this might be observable by\n    // residual code.\n    let prototype = HeapInspector.getPropertyValue(func, \"prototype\");\n    if (prototype instanceof ObjectValue && this.residualValues.has(prototype)) {\n      this.emitter.emitNowOrAfterWaitingForDependencies(\n        [prototype],\n        () => {\n          invariant(prototype instanceof Value);\n          this.serializeValue(prototype);\n        },\n        this.emitter.getBody()\n      );\n    }\n  }\n\n  _getNestedValuesFromAbstractDescriptor(desc: void | Descriptor, values: Array<Value>): Array<Value> {\n    if (desc === undefined) return values;\n    if (desc instanceof PropertyDescriptor) {\n      let val = desc.value;\n      invariant(val instanceof AbstractValue);\n      return this._getNestedValuesFromAbstract(val, values);\n    } else if (desc instanceof AbstractJoinedDescriptor) {\n      values.push(desc.joinCondition);\n      this._getNestedValuesFromAbstractDescriptor(desc.descriptor1, values);\n      this._getNestedValuesFromAbstractDescriptor(desc.descriptor2, values);\n      return values;\n    } else {\n      invariant(false, \"unknown descriptor\");\n    }\n  }\n\n  _getNestedValuesFromAbstract(absVal: AbstractValue, values: Array<Value>): Array<Value> {\n    if (absVal.kind === \"widened property\") return values;\n    if (absVal.kind === \"template for prototype member expression\") return values;\n    invariant(absVal.args.length === 3);\n    let cond = absVal.args[0];\n    invariant(cond instanceof AbstractValue);\n    if (cond.kind === \"template for property name condition\") {\n      let P = cond.args[0];\n      values.push(P);\n      let V = absVal.args[1];\n      values.push(V);\n      let W = absVal.args[2];\n      if (W instanceof AbstractValue) this._getNestedValuesFromAbstract(W, values);\n      else values.push(W);\n    } else {\n      // conditional assignment\n      values.push(cond);\n      let consequent = absVal.args[1];\n      if (consequent instanceof AbstractValue) {\n        this._getNestedValuesFromAbstract(consequent, values);\n      } else {\n        values.push(consequent);\n      }\n      let alternate = absVal.args[2];\n      if (alternate instanceof AbstractValue) {\n        this._getNestedValuesFromAbstract(alternate, values);\n      } else {\n        values.push(alternate);\n      }\n    }\n    return values;\n  }\n\n  _emitPropertiesWithComputedNamesDescriptor(obj: ObjectValue, desc: void | Descriptor): void {\n    if (desc === undefined) return;\n    if (desc instanceof PropertyDescriptor) {\n      let val = desc.value;\n      invariant(val instanceof AbstractValue);\n      this._emitPropertiesWithComputedNames(obj, val);\n    } else if (desc instanceof AbstractJoinedDescriptor) {\n      let serializedCond = this.serializeValue(desc.joinCondition);\n\n      let valuesToProcess = new Set();\n      let consequentStatement;\n      let alternateStatement;\n\n      if (desc.descriptor1) {\n        let oldBody = this.emitter.beginEmitting(\n          \"consequent\",\n          {\n            type: \"ConditionalAssignmentBranch\",\n            parentBody: undefined,\n            entries: [],\n            done: false,\n          },\n          /*isChild*/ true\n        );\n        this._emitPropertiesWithComputedNamesDescriptor(obj, desc.descriptor1);\n        let consequentBody = this.emitter.endEmitting(\"consequent\", oldBody, valuesToProcess, /*isChild*/ true);\n        consequentStatement = t.blockStatement(consequentBody.entries);\n      }\n      if (desc.descriptor2) {\n        let oldBody = this.emitter.beginEmitting(\n          \"alternate\",\n          {\n            type: \"ConditionalAssignmentBranch\",\n            parentBody: undefined,\n            entries: [],\n            done: false,\n          },\n          /*isChild*/ true\n        );\n        this._emitPropertiesWithComputedNamesDescriptor(obj, desc.descriptor2);\n        let alternateBody = this.emitter.endEmitting(\"alternate\", oldBody, valuesToProcess, /*isChild*/ true);\n        alternateStatement = t.blockStatement(alternateBody.entries);\n      }\n      if (consequentStatement) {\n        this.emitter.emit(t.ifStatement(serializedCond, consequentStatement, alternateStatement));\n      } else if (alternateStatement) {\n        this.emitter.emit(t.ifStatement(t.unaryExpression(\"!\", serializedCond), alternateStatement));\n      }\n      this.emitter.processValues(valuesToProcess);\n    } else {\n      invariant(false, \"unknown descriptor\");\n    }\n  }\n\n  _emitPropertiesWithComputedNames(obj: ObjectValue, absVal: AbstractValue): void {\n    if (absVal.kind === \"widened property\") return;\n    if (absVal.kind === \"template for prototype member expression\") return;\n    invariant(absVal.args.length === 3);\n    let cond = absVal.args[0];\n    invariant(cond instanceof AbstractValue);\n    if (cond.kind === \"template for property name condition\") {\n      let P = cond.args[0];\n      invariant(P instanceof AbstractValue);\n      let V = absVal.args[1];\n      let earlier_props = absVal.args[2];\n      if (earlier_props instanceof AbstractValue) this._emitPropertiesWithComputedNames(obj, earlier_props);\n      let uid = this.getSerializeObjectIdentifier(obj);\n      let serializedP = this.serializeValue(P);\n      let serializedV = this.serializeValue(V);\n      this.emitter.emit(\n        t.expressionStatement(t.assignmentExpression(\"=\", t.memberExpression(uid, serializedP, true), serializedV))\n      );\n    } else {\n      // conditional assignment\n      let serializedCond = this.serializeValue(cond);\n      let consequent = absVal.args[1];\n      let valuesToProcess = new Set();\n      let consequentStatement;\n      let alternateStatement;\n\n      if (consequent instanceof AbstractValue) {\n        let oldBody = this.emitter.beginEmitting(\n          \"consequent\",\n          {\n            type: \"ConditionalAssignmentBranch\",\n            parentBody: undefined,\n            entries: [],\n            done: false,\n          },\n          /*isChild*/ true\n        );\n        this._emitPropertiesWithComputedNames(obj, consequent);\n        let consequentBody = this.emitter.endEmitting(\"consequent\", oldBody, valuesToProcess, /*isChild*/ true);\n        consequentStatement = t.blockStatement(consequentBody.entries);\n      }\n      let alternate = absVal.args[2];\n      if (alternate instanceof AbstractValue) {\n        let oldBody = this.emitter.beginEmitting(\n          \"alternate\",\n          {\n            type: \"ConditionalAssignmentBranch\",\n            parentBody: undefined,\n            entries: [],\n            done: false,\n          },\n          /*isChild*/ true\n        );\n        this._emitPropertiesWithComputedNames(obj, alternate);\n        let alternateBody = this.emitter.endEmitting(\"alternate\", oldBody, valuesToProcess, /*isChild*/ true);\n        alternateStatement = t.blockStatement(alternateBody.entries);\n      }\n      if (consequentStatement) {\n        this.emitter.emit(t.ifStatement(serializedCond, consequentStatement, alternateStatement));\n      } else if (alternateStatement) {\n        this.emitter.emit(t.ifStatement(t.unaryExpression(\"!\", serializedCond), alternateStatement));\n      }\n      this.emitter.processValues(valuesToProcess);\n    }\n  }\n\n  // Overridable.\n  getSerializeObjectIdentifier(val: Value): BabelNodeIdentifier {\n    return this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(val);\n  }\n\n  _emitProperty(\n    val: ObjectValue,\n    key: string | SymbolValue | AbstractValue,\n    desc: Descriptor | void,\n    deleteIfMightHaveBeenDeleted: boolean = false\n  ): void {\n    // Location for the property to be assigned to\n    let locationFunction = () => {\n      let serializedKey =\n        key instanceof SymbolValue || key instanceof AbstractValue\n          ? this.serializeValue(key)\n          : getAsPropertyNameExpression(key);\n      let computed = key instanceof SymbolValue || key instanceof AbstractValue || !t.isIdentifier(serializedKey);\n      return t.memberExpression(this.getSerializeObjectIdentifier(val), serializedKey, computed);\n    };\n    if (desc === undefined) {\n      this._deleteProperty(locationFunction());\n    } else {\n      this.emitter.emit(this.emitDefinePropertyBody(deleteIfMightHaveBeenDeleted, locationFunction, val, key, desc));\n    }\n  }\n\n  emitDefinePropertyBody(\n    deleteIfMightHaveBeenDeleted: boolean,\n    locationFunction: void | (() => BabelNodeLVal),\n    val: ObjectValue,\n    key: string | SymbolValue | AbstractValue,\n    desc: Descriptor\n  ): BabelNodeStatement {\n    if (desc instanceof AbstractJoinedDescriptor) {\n      let cond = this.serializeValue(desc.joinCondition);\n      invariant(cond !== undefined);\n      let trueBody;\n      let falseBody;\n      if (desc.descriptor1)\n        trueBody = this.emitDefinePropertyBody(\n          deleteIfMightHaveBeenDeleted,\n          locationFunction,\n          val,\n          key,\n          desc.descriptor1\n        );\n      if (desc.descriptor2)\n        falseBody = this.emitDefinePropertyBody(\n          deleteIfMightHaveBeenDeleted,\n          locationFunction,\n          val,\n          key,\n          desc.descriptor2\n        );\n      if (trueBody && falseBody) return t.ifStatement(cond, trueBody, falseBody);\n      if (trueBody) return t.ifStatement(cond, trueBody);\n      if (falseBody) return t.ifStatement(t.unaryExpression(\"!\", cond), falseBody);\n      invariant(false);\n    }\n    invariant(desc instanceof PropertyDescriptor);\n    if (locationFunction !== undefined && this._canEmbedProperty(val, key, desc)) {\n      let descValue = desc.value;\n      invariant(descValue instanceof Value);\n      invariant(!this.emitter.getReasonToWaitForDependencies([descValue, val]), \"precondition of _emitProperty\");\n      let mightHaveBeenDeleted = descValue.mightHaveBeenDeleted();\n      // The only case we do not need to remove the dummy property is array index property.\n      return this._getPropertyAssignmentStatement(\n        locationFunction(),\n        descValue,\n        mightHaveBeenDeleted,\n        deleteIfMightHaveBeenDeleted\n      );\n    }\n    let body = [];\n    let descProps = [];\n    let boolKeys = [\"enumerable\", \"configurable\"];\n    let valKeys = [];\n\n    if (!desc.get && !desc.set) {\n      boolKeys.push(\"writable\");\n      valKeys.push(\"value\");\n    } else {\n      valKeys.push(\"set\", \"get\");\n    }\n\n    let descriptorsKey = [];\n    for (let boolKey of boolKeys) {\n      if ((desc: any)[boolKey] !== undefined) {\n        let b: boolean = (desc: any)[boolKey];\n        invariant(b !== undefined);\n        descProps.push(t.objectProperty(t.identifier(boolKey), t.booleanLiteral(b)));\n        descriptorsKey.push(`${boolKey}:${b.toString()}`);\n      }\n    }\n\n    descriptorsKey = descriptorsKey.join(\",\");\n    let descriptorId = this._descriptors.get(descriptorsKey);\n    if (descriptorId === undefined) {\n      descriptorId = t.identifier(this.descriptorNameGenerator.generate(descriptorsKey));\n      let declar = t.variableDeclaration(\"var\", [t.variableDeclarator(descriptorId, t.objectExpression(descProps))]);\n      // The descriptors are used across all scopes, and thus must be declared in the prelude.\n      this.prelude.push(declar);\n      this._descriptors.set(descriptorsKey, descriptorId);\n    }\n    invariant(descriptorId !== undefined);\n\n    for (let descKey of valKeys) {\n      if ((desc: any)[descKey] !== undefined) {\n        let descValue: Value = (desc: any)[descKey];\n        invariant(descValue instanceof Value);\n        if (descValue instanceof UndefinedValue) {\n          this.serializeValue(descValue);\n          continue;\n        }\n        invariant(!this.emitter.getReasonToWaitForDependencies([descValue]), \"precondition of _emitProperty\");\n        body.push(\n          t.assignmentExpression(\n            \"=\",\n            t.memberExpression(descriptorId, t.identifier(descKey)),\n            this.serializeValue(descValue)\n          )\n        );\n      }\n    }\n    let serializedKey =\n      key instanceof SymbolValue || key instanceof AbstractValue\n        ? this.serializeValue(key)\n        : getAsPropertyNameExpression(key, /*canBeIdentifier*/ false);\n    invariant(!this.emitter.getReasonToWaitForDependencies([val]), \"precondition of _emitProperty\");\n    body.push(\n      t.callExpression(this.preludeGenerator.memoizeReference(\"Object.defineProperty\"), [\n        this.getSerializeObjectIdentifier(val),\n        serializedKey,\n        descriptorId,\n      ])\n    );\n    return t.expressionStatement(t.sequenceExpression(body));\n  }\n\n  _serializeDeclarativeEnvironmentRecordBinding(residualFunctionBinding: ResidualFunctionBinding): void {\n    if (!residualFunctionBinding.serializedValue) {\n      let value = residualFunctionBinding.value;\n      invariant(residualFunctionBinding.declarativeEnvironmentRecord);\n\n      if (residualFunctionBinding.hasLeaked) {\n        this.referentializer.referentializeLeakedBinding(residualFunctionBinding);\n      } else {\n        residualFunctionBinding.serializedValue = value !== undefined ? this.serializeValue(value) : voidExpression;\n        if (residualFunctionBinding.modified) {\n          this.referentializer.referentializeModifiedBinding(residualFunctionBinding);\n        }\n      }\n\n      if (value !== undefined && value.mightBeObject()) {\n        // Increment ref count one more time to ensure that this object will be assigned a unique id.\n        // This ensures that only once instance is created across all possible residual function invocations.\n        this.residualHeapValueIdentifiers.incrementReferenceCount(value);\n      }\n    }\n  }\n\n  // Augments an initial set of generators with all generators from\n  // which any of a given set of function values is referenced.\n  _getReferencingGenerators(\n    initialGenerators: Array<Generator>,\n    functionValues: Array<FunctionValue>,\n    referencingOnlyOptimizedFunction: void | FunctionValue\n  ): Array<Generator> {\n    let result = new Set(initialGenerators);\n    let activeFunctions = functionValues.slice();\n    let visitedFunctions = new Set();\n\n    while (activeFunctions.length > 0) {\n      let f = activeFunctions.pop();\n      if (visitedFunctions.has(f)) continue;\n      visitedFunctions.add(f);\n\n      if (f === referencingOnlyOptimizedFunction) {\n        let g = this.additionalFunctionGenerators.get(f);\n        invariant(g !== undefined);\n        result.add(g);\n      } else {\n        let scopes = this.residualValues.get(f);\n        invariant(scopes);\n        for (let scope of scopes)\n          if (scope instanceof FunctionValue) {\n            activeFunctions.push(scope);\n          } else {\n            invariant(scope instanceof Generator);\n            result.add(scope);\n          }\n      }\n    }\n    return Array.from(result);\n  }\n\n  _getActiveBodyOfGenerator(generator: Generator): void | SerializedBody {\n    return generator === this.generator ? this.mainBody : this.activeGeneratorBodies.get(generator);\n  }\n\n  // Determine whether initialization code for a value should go into the main body, or a more specific initialization body.\n  _getTarget(\n    val: Value,\n    trace?: true\n  ): {\n    body: SerializedBody,\n    usedOnlyByResidualFunctions?: true,\n    optimizedFunctionRoot?: void | FunctionValue,\n    commonAncestor?: Scope,\n    description?: string,\n  } {\n    let scopes = this.residualValues.get(val);\n    invariant(scopes !== undefined, \"value must have been visited\");\n\n    // All relevant values were visited in at least one scope.\n    invariant(scopes.size >= 1);\n    if (trace) this._logScopes(scopes);\n\n    // If a value is used in more than one scope, prevent inlining as it might be an additional root with a particular creation scope\n    if (scopes.size > 1) this.residualHeapValueIdentifiers.incrementReferenceCount(val);\n\n    // First, let's figure out from which function and generator scopes this value is referenced.\n    let functionValues = [];\n    let generators = [];\n    for (let scope of scopes) {\n      if (scope instanceof FunctionValue) {\n        functionValues.push(scope);\n      } else {\n        invariant(scope instanceof Generator, \"scope must be either function value or generator\");\n        generators.push(scope);\n      }\n    }\n\n    let optimizedFunctionRoot = this._residualOptimizedFunctions.tryGetOptimizedFunctionRoot(val);\n    if (generators.length === 0) {\n      // This value is only referenced from residual functions.\n      if (\n        this._options.delayInitializations &&\n        (optimizedFunctionRoot === undefined || !functionValues.includes(optimizedFunctionRoot))\n      ) {\n        // We can delay the initialization, and move it into a conditional code block in the residual functions!\n        let body = this.residualFunctions.residualFunctionInitializers.registerValueOnlyReferencedByResidualFunctions(\n          functionValues,\n          val\n        );\n\n        return {\n          body,\n          usedOnlyByResidualFunctions: true,\n          optimizedFunctionRoot,\n          description: \"delay_initializer\",\n        };\n      }\n    }\n\n    if (trace) console.log(`  has optimized function root? ${optimizedFunctionRoot !== undefined ? \"yes\" : \"no\"}`);\n\n    // flatten all function values into the scopes that use them\n    generators = this._getReferencingGenerators(generators, functionValues, optimizedFunctionRoot);\n\n    if (optimizedFunctionRoot === undefined) {\n      // Remove all generators rooted in optimized functions,\n      // since we know that there's at least one root that's not in an optimized function\n      // which requires the value to be emitted outside of the optimized function.\n      generators = generators.filter(generator => {\n        let s = generator;\n        while (s instanceof Generator) {\n          s = this.generatorTree.getParent(s);\n        }\n        return s === \"GLOBAL\";\n      });\n      if (generators.length === 0) {\n        // This means that the value was referenced by multiple optimized functions (but not by global code itself),\n        // and thus it must have existed at the end of global code execution.\n        // TODO: Emit to the end, not somewhere in the middle of the mainBody.\n\n        if (trace) console.log(`  no filtered generators`);\n        // TODO #2426: Revisit for nested optimized functions\n        return { body: this.mainBody };\n      }\n    }\n\n    const getGeneratorParent = g => {\n      let s = this.generatorTree.getParent(g);\n      return s instanceof Generator ? s : undefined;\n    };\n    // This value is referenced from more than one generator.\n    // Let's find the body associated with their common ancestor.\n    let commonAncestor = Array.from(generators).reduce(\n      (x, y) => commonAncestorOf(x, y, getGeneratorParent),\n      generators[0]\n    );\n    // In the case where we have no common ancestor but we have an optimized function reference,\n    // we can attempt to use the generator of the single optimized function\n    if (commonAncestor === undefined && optimizedFunctionRoot !== undefined) {\n      commonAncestor = this.additionalFunctionGenerators.get(optimizedFunctionRoot);\n    }\n    invariant(commonAncestor !== undefined, \"there must always be a common generator ancestor\");\n    if (trace) console.log(`  common ancestor: ${commonAncestor.getName()}`);\n\n    let body;\n    while (true) {\n      body = this._getActiveBodyOfGenerator(commonAncestor);\n      if (body !== undefined) break;\n      commonAncestor = getGeneratorParent(commonAncestor);\n      invariant(commonAncestor !== undefined, \"there must always be an active body for the common generator ancestor\");\n    }\n\n    // So we have a (common ancestor) body now.\n    invariant(body !== undefined, \"there must always be an active body\");\n\n    // However, there's a potential problem: That body might belong to a generator\n    // which has nested generators that are currently being processed (they are not \"done\" yet).\n    // This becomes a problem when the value for which we are trying to determine the target body\n    // depends on other values which are only declared in such not-yet-done nested generator!\n    // So we find all such not-yet-done bodies here, and pick a most nested one\n    // which is related to one of the scopes this value is used by.\n    let notYetDoneBodies = new Set();\n    this.emitter.dependenciesVisitor(val, {\n      onIntrinsicDerivedObject: dependency => {\n        if (trace) {\n          console.log(`  depending on intrinsic derived object and an identifier ${dependency.intrinsicName || \"?\"}`);\n        }\n        invariant(\n          optimizedFunctionRoot === undefined || !!this.emitter.getActiveOptimizedFunction(),\n          \"optimized function inconsistency\"\n        );\n        let declarationBody = this.emitter.getDeclarationBody(dependency);\n        if (declarationBody !== undefined) {\n          if (trace) console.log(`    has declaration body`);\n          for (let b = declarationBody; b !== undefined; b = b.parentBody) {\n            if (notYetDoneBodies.has(b)) break;\n            notYetDoneBodies.add(b);\n          }\n        }\n      },\n      onAbstractValueWithIdentifier: dependency => {\n        if (trace) console.log(`  depending on abstract value with identifier ${dependency.intrinsicName || \"?\"}`);\n        invariant(\n          optimizedFunctionRoot === undefined || !!this.emitter.getActiveOptimizedFunction(),\n          \"optimized function inconsistency\"\n        );\n        let declarationBody = this.emitter.getDeclarationBody(dependency);\n        if (declarationBody !== undefined) {\n          if (trace) console.log(`    has declaration body`);\n          for (let b = declarationBody; b !== undefined; b = b.parentBody) {\n            if (notYetDoneBodies.has(b)) break;\n            notYetDoneBodies.add(b);\n          }\n        }\n      },\n    });\n    if (trace) console.log(`  got ${notYetDoneBodies.size} not yet done bodies`);\n    for (let s of generators)\n      for (let g = s; g !== undefined; g = getGeneratorParent(g)) {\n        let scopeBody = this._getActiveBodyOfGenerator(g);\n        if (\n          scopeBody !== undefined &&\n          (scopeBody.nestingLevel || 0) > (body.nestingLevel || 0) &&\n          notYetDoneBodies.has(scopeBody)\n        ) {\n          // TODO: If there are multiple such scopeBody's, why is it okay to pick an arbitrary one?\n          body = scopeBody;\n          break;\n        }\n      }\n\n    return { body, commonAncestor };\n  }\n\n  _getValueDebugName(val: Value): string {\n    let name;\n    if (val instanceof FunctionValue) {\n      name = val.getName();\n    } else {\n      const id = this.residualHeapValueIdentifiers.getIdentifier(val);\n      invariant(id);\n      name = id.name;\n    }\n    return name;\n  }\n\n  _getResidualFunctionBinding(binding: Binding): void | ResidualFunctionBinding {\n    let environment = binding.environment;\n    if (environment === this.globalEnvironmentRecord.$DeclarativeRecord) environment = this.globalEnvironmentRecord;\n\n    if (environment === this.globalEnvironmentRecord) {\n      return this.globalBindings.get(binding.name);\n    }\n\n    invariant(environment instanceof DeclarativeEnvironmentRecord, \"only declarative environments have bindings\");\n    let residualFunctionBindings = this.declarativeEnvironmentRecordsBindings.get(environment);\n    if (residualFunctionBindings === undefined) return undefined;\n    return residualFunctionBindings.get(binding.name);\n  }\n\n  serializeBinding(binding: Binding): BabelNodeIdentifier | BabelNodeMemberExpression {\n    let residualBinding = this._getResidualFunctionBinding(binding);\n    invariant(residualBinding !== undefined, \"any referenced residual binding should have been visited\");\n\n    this._serializeDeclarativeEnvironmentRecordBinding(residualBinding);\n\n    let location = residualBinding.serializedUnscopedLocation;\n    invariant(location !== undefined);\n    return location;\n  }\n\n  getPrelude(optimizedFunction: void | FunctionValue): Array<BabelNodeStatement> {\n    if (optimizedFunction !== undefined) {\n      let body = this.residualFunctions.additionalFunctionPreludes.get(optimizedFunction);\n      invariant(body !== undefined);\n      return body;\n    } else {\n      return this.prelude;\n    }\n  }\n\n  _declare(\n    emittingToResidualFunction: boolean,\n    optimizedFunctionRoot: void | FunctionValue,\n    bindingType: BabelVariableKind,\n    id: BabelNodeLVal,\n    init: BabelNodeExpression\n  ): void {\n    if (emittingToResidualFunction) {\n      let declar = t.variableDeclaration(bindingType, [t.variableDeclarator(id)]);\n      this.getPrelude(optimizedFunctionRoot).push(declar);\n      let assignment = t.expressionStatement(t.assignmentExpression(\"=\", id, init));\n      this.emitter.emit(assignment);\n    } else {\n      let declar = t.variableDeclaration(bindingType, [t.variableDeclarator(id, init)]);\n      this.emitter.emit(declar);\n    }\n  }\n\n  serializeValue(val: Value, referenceOnly?: boolean, bindingType?: BabelVariableKind): BabelNodeExpression {\n    invariant(!(val instanceof ObjectValue && val.refuseSerialization));\n    if (val instanceof AbstractValue) {\n      if (val.kind === \"widened\") {\n        this.serializedValues.add(val);\n        let name = val.intrinsicName;\n        invariant(name !== undefined);\n        return t.identifier(name);\n      } else if (val.kind === \"widened property\") {\n        this.serializedValues.add(val);\n        return this._serializeAbstractValueHelper(val);\n      }\n    }\n\n    // make sure we're not serializing a class method here\n    if (val instanceof ECMAScriptSourceFunctionValue && this.residualClassMethodInstances.has(val)) {\n      let classMethodInstance = this.residualClassMethodInstances.get(val);\n      invariant(classMethodInstance);\n      // anything other than a class constructor should never go through serializeValue()\n      // so we need to log a nice error message to the user\n      if (classMethodInstance.methodType !== \"constructor\") {\n        let error = new CompilerDiagnostic(\n          \"a class method incorrectly went through the serializeValue() code path\",\n          val.$ECMAScriptCode.loc,\n          \"PP0022\",\n          \"FatalError\"\n        );\n        this.realm.handleError(error);\n        throw new FatalError();\n      }\n    }\n\n    if (this._serializedValueWithIdentifiers.has(val)) {\n      return this.getSerializeObjectIdentifier(val);\n    }\n\n    this.serializedValues.add(val);\n    if (!referenceOnly && HeapInspector.isLeaf(val)) {\n      let res = this._serializeValue(val);\n      invariant(res !== undefined);\n      return res;\n    }\n    this._serializedValueWithIdentifiers.add(val);\n\n    let target = this._getTarget(val);\n    let oldBody = this.emitter.beginEmitting(val, target.body);\n    let init = this._serializeValue(val);\n\n    let id = this.residualHeapValueIdentifiers.getIdentifier(val);\n    if (this._options.debugIdentifiers !== undefined && this._options.debugIdentifiers.includes(id.name)) {\n      console.log(`Tracing value with identifier ${id.name} (${val.constructor.name}) targetting ${target.body.type}`);\n      this._getTarget(val, true);\n    }\n    let result = id;\n    this.residualHeapValueIdentifiers.incrementReferenceCount(val);\n\n    if (this.residualHeapValueIdentifiers.needsIdentifier(val)) {\n      if (init) {\n        if (this._options.debugScopes) {\n          let scopes = this.residualValues.get(val);\n          invariant(scopes !== undefined);\n          const scopeList = Array.from(scopes)\n            .map(s => `\"${s.getName()}\"`)\n            .join(\",\");\n          let comment = `${this._getValueDebugName(val)} referenced from scopes [${scopeList}]`;\n          if (target.commonAncestor !== undefined)\n            comment = `${comment} with common ancestor: ${target.commonAncestor.getName()}`;\n          if (target.description !== undefined) comment = `${comment} => ${target.description} `;\n          this.emitter.emit(commentStatement(comment));\n        }\n        if (init !== id) {\n          this._declare(\n            !!target.usedOnlyByResidualFunctions,\n            target.optimizedFunctionRoot,\n            bindingType || \"var\",\n            id,\n            init\n          );\n        }\n        this.getStatistics().valueIds++;\n        if (target.usedOnlyByResidualFunctions) this.getStatistics().delayedValues++;\n      }\n    } else {\n      if (init) {\n        this.residualHeapValueIdentifiers.deleteIdentifier(val);\n        result = init;\n        this.getStatistics().valuesInlined++;\n      }\n    }\n\n    this.emitter.endEmitting(val, oldBody);\n    return result;\n  }\n\n  _serializeValueIntrinsic(val: Value): BabelNodeExpression {\n    let intrinsicName = val.intrinsicName;\n    invariant(intrinsicName);\n    if (val instanceof ObjectValue && val.intrinsicNameGenerated) {\n      // The intrinsic was generated at a particular point in time.\n      return this.preludeGenerator.convertStringToMember(intrinsicName);\n    } else {\n      // The intrinsic conceptually exists ahead of time.\n      invariant(\n        this.emitter.getBody().type === \"MainGenerator\" ||\n          this.emitter.getBody().type === \"OptimizedFunction\" ||\n          this.emitter.getBody().type === \"DelayInitializations\"\n      );\n      return this.preludeGenerator.memoizeReference(intrinsicName);\n    }\n  }\n\n  _getDescriptorValues(desc: void | Descriptor): Array<Value> {\n    if (desc === undefined) {\n      return [];\n    } else if (desc instanceof PropertyDescriptor) {\n      invariant(desc.value === undefined || desc.value instanceof Value);\n      if (desc.value !== undefined) return [desc.value];\n      invariant(desc.get !== undefined);\n      invariant(desc.set !== undefined);\n      return [desc.get, desc.set];\n    } else if (desc instanceof AbstractJoinedDescriptor) {\n      return [\n        desc.joinCondition,\n        ...this._getDescriptorValues(desc.descriptor1),\n        ...this._getDescriptorValues(desc.descriptor2),\n      ];\n    } else {\n      invariant(false, \"unknown descriptor\");\n    }\n  }\n\n  _deleteProperty(location: BabelNodeLVal): void {\n    invariant(location.type === \"MemberExpression\");\n    this.emitter.emit(\n      t.expressionStatement(t.unaryExpression(\"delete\", ((location: any): BabelNodeMemberExpression), true))\n    );\n  }\n\n  _assignProperty(\n    location: BabelNodeLVal,\n    value: Value,\n    mightHaveBeenDeleted: boolean,\n    deleteIfMightHaveBeenDeleted: boolean = false\n  ): void {\n    this.emitter.emit(\n      this._getPropertyAssignmentStatement(location, value, mightHaveBeenDeleted, deleteIfMightHaveBeenDeleted)\n    );\n  }\n\n  _getPropertyAssignmentStatement(\n    location: BabelNodeLVal,\n    value: Value,\n    mightHaveBeenDeleted: boolean,\n    deleteIfMightHaveBeenDeleted: boolean = false\n  ): BabelNodeStatement {\n    if (mightHaveBeenDeleted) {\n      // We always need to serialize this value in order to keep the invariants happy.\n      let serializedValue = this.serializeValue(value);\n      let condition;\n      if (value instanceof AbstractValue && value.kind === \"conditional\") {\n        let [c, x, y] = value.args;\n        if (x instanceof EmptyValue) {\n          if (c instanceof AbstractValue && c.kind === \"!\") condition = this.serializeValue(c.args[0]);\n          else condition = t.unaryExpression(\"!\", this.serializeValue(c));\n          serializedValue = this.serializeValue(y);\n        } else if (y instanceof EmptyValue) {\n          condition = this.serializeValue(c);\n          serializedValue = this.serializeValue(x);\n        }\n      }\n      if (condition === undefined) {\n        condition = t.binaryExpression(\"!==\", this.serializeValue(value), this._serializeEmptyValue());\n      }\n      let assignment = t.expressionStatement(t.assignmentExpression(\"=\", location, serializedValue));\n      let deletion = null;\n      if (deleteIfMightHaveBeenDeleted) {\n        invariant(location.type === \"MemberExpression\");\n        deletion = t.expressionStatement(\n          t.unaryExpression(\"delete\", ((location: any): BabelNodeMemberExpression), true)\n        );\n      }\n      return t.ifStatement(condition, assignment, deletion);\n    } else {\n      return t.expressionStatement(t.assignmentExpression(\"=\", location, this.serializeValue(value)));\n    }\n  }\n\n  _serializeArrayIndexProperties(\n    array: ObjectValue,\n    indexPropertyLength: number,\n    remainingProperties: Map<string, PropertyBinding>\n  ): Array<null | BabelNodeExpression | BabelNodeSpreadElement> {\n    let elems = [];\n    for (let i = 0; i < indexPropertyLength; i++) {\n      let key = i + \"\";\n      let propertyBinding = remainingProperties.get(key);\n      let elem = null;\n      // \"propertyBinding === undefined\" means array has a hole in the middle.\n      if (propertyBinding !== undefined) {\n        let descriptor = propertyBinding.descriptor;\n        // \"descriptor === undefined\" means this array item has been deleted.\n        invariant(descriptor === undefined || descriptor instanceof PropertyDescriptor);\n        if (\n          descriptor !== undefined &&\n          descriptor.value !== undefined &&\n          this._canEmbedProperty(array, key, descriptor)\n        ) {\n          let elemVal = descriptor.value;\n          invariant(elemVal instanceof Value);\n          let mightHaveBeenDeleted = elemVal.mightHaveBeenDeleted();\n          let instantRenderMode = this.realm.instantRender.enabled;\n\n          let delayReason;\n          /* In Instant Render mode, deleted indices are initialized\n          to the __empty built-in */\n          if (instantRenderMode) {\n            if (this.emitter.getReasonToWaitForDependencies(elemVal)) {\n              this.realm.instantRenderBailout(\n                \"InstantRender does not yet support cyclical arrays or objects\",\n                array.expressionLocation\n              );\n            }\n            delayReason = undefined;\n          } else {\n            delayReason =\n              this.emitter.getReasonToWaitForDependencies(elemVal) ||\n              this.emitter.getReasonToWaitForActiveValue(array, mightHaveBeenDeleted);\n          }\n          if (!delayReason) {\n            elem = this.serializeValue(elemVal);\n            remainingProperties.delete(key);\n          }\n        }\n      }\n      elems.push(elem);\n    }\n    return elems;\n  }\n\n  _serializeArrayLengthIfNeeded(\n    val: ObjectValue,\n    numberOfIndexProperties: number,\n    remainingProperties: Map<string, PropertyBinding>\n  ): void {\n    const realm = this.realm;\n    let lenProperty;\n    if (val.mightBeLeakedObject()) {\n      lenProperty = this.realm.evaluateWithoutLeakLogic(() => Get(realm, val, \"length\"));\n    } else {\n      lenProperty = Get(realm, val, \"length\");\n    }\n    // Need to serialize length property if:\n    // 1. array length is abstract.\n    // 2. array length is concrete, but different from number of index properties\n    //  we put into initialization list.\n    if (lenProperty instanceof AbstractValue || To.ToLength(realm, lenProperty) !== numberOfIndexProperties) {\n      if (!(lenProperty instanceof AbstractValue) || lenProperty.kind !== \"widened property\") {\n        let semaphore = this._acquireOneObjectSemaphore(val);\n        this.emitter.emitNowOrAfterWaitingForDependencies(\n          [val, lenProperty],\n          () => {\n            this._assignProperty(\n              t.memberExpression(this.getSerializeObjectIdentifier(val), t.identifier(\"length\")),\n              lenProperty,\n              false /*mightHaveBeenDeleted*/\n            );\n            if (semaphore !== undefined) semaphore.releaseOne();\n          },\n          this.emitter.getBody()\n        );\n      }\n      remainingProperties.delete(\"length\");\n    }\n  }\n\n  _serializeValueArray(val: ObjectValue): BabelNodeExpression {\n    let remainingProperties = new Map(val.properties);\n\n    let [unconditionalLength, assignmentNotNeeded] = getSuggestedArrayLiteralLength(this.realm, val);\n    // Use the unconditional serialized index properties as array initialization list.\n    const initProperties = this._serializeArrayIndexProperties(val, unconditionalLength, remainingProperties);\n    if (!assignmentNotNeeded) this._serializeArrayLengthIfNeeded(val, unconditionalLength, remainingProperties);\n    this._emitObjectProperties(val, remainingProperties);\n    return t.arrayExpression(initProperties);\n  }\n\n  _serializeValueMap(val: ObjectValue): BabelNodeExpression {\n    let kind = val.getKind();\n    let elems = [];\n\n    let entries;\n    let omitDeadEntries;\n\n    if (kind === \"Map\") {\n      entries = val.$MapData;\n      omitDeadEntries = false;\n    } else {\n      invariant(kind === \"WeakMap\");\n      entries = val.$WeakMapData;\n      omitDeadEntries = true;\n    }\n    invariant(entries !== undefined);\n    let len = entries.length;\n    let mapConstructorDoesntTakeArguments = this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION);\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      let key = entry.$Key;\n      let value = entry.$Value;\n      if (key === undefined || value === undefined || (omitDeadEntries && !this.residualValues.has(key))) continue;\n      let mightHaveBeenDeleted = key.mightHaveBeenDeleted();\n      let delayReason =\n        this.emitter.getReasonToWaitForDependencies(key) ||\n        this.emitter.getReasonToWaitForDependencies(value) ||\n        this.emitter.getReasonToWaitForActiveValue(val, mightHaveBeenDeleted || mapConstructorDoesntTakeArguments);\n      if (delayReason) {\n        this.emitter.emitAfterWaiting(\n          delayReason,\n          [key, value, val],\n          () => {\n            invariant(key !== undefined);\n            invariant(value !== undefined);\n            this.emitter.emit(\n              t.expressionStatement(\n                t.callExpression(\n                  t.memberExpression(\n                    this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(val),\n                    t.identifier(\"set\")\n                  ),\n                  [this.serializeValue(key), this.serializeValue(value)]\n                )\n              )\n            );\n          },\n          this.emitter.getBody()\n        );\n      } else {\n        let serializedKey = this.serializeValue(key);\n        let serializedValue = this.serializeValue(value);\n        let elem = t.arrayExpression([serializedKey, serializedValue]);\n        elems.push(elem);\n      }\n    }\n\n    this._emitObjectProperties(val);\n    let args = elems.length > 0 ? [t.arrayExpression(elems)] : [];\n    return t.newExpression(this.preludeGenerator.memoizeReference(kind), args);\n  }\n\n  _serializeValueSet(val: ObjectValue): BabelNodeExpression {\n    let kind = val.getKind();\n    let elems = [];\n\n    let entries;\n    let omitDeadEntries;\n\n    if (kind === \"Set\") {\n      entries = val.$SetData;\n      omitDeadEntries = false;\n    } else {\n      invariant(kind === \"WeakSet\");\n      entries = val.$WeakSetData;\n      omitDeadEntries = true;\n    }\n\n    invariant(entries !== undefined);\n    let len = entries.length;\n    let setConstructorDoesntTakeArguments = this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION);\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      if (entry === undefined || (omitDeadEntries && !this.residualValues.has(entry))) continue;\n      let mightHaveBeenDeleted = entry.mightHaveBeenDeleted();\n      let delayReason =\n        this.emitter.getReasonToWaitForDependencies(entry) ||\n        this.emitter.getReasonToWaitForActiveValue(val, mightHaveBeenDeleted || setConstructorDoesntTakeArguments);\n      if (delayReason) {\n        this.emitter.emitAfterWaiting(\n          delayReason,\n          [entry, val],\n          () => {\n            invariant(entry !== undefined);\n            this.emitter.emit(\n              t.expressionStatement(\n                t.callExpression(\n                  t.memberExpression(\n                    this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(val),\n                    t.identifier(\"add\")\n                  ),\n                  [this.serializeValue(entry)]\n                )\n              )\n            );\n          },\n          this.emitter.getBody()\n        );\n      } else {\n        let elem = this.serializeValue(entry);\n        elems.push(elem);\n      }\n    }\n\n    this._emitObjectProperties(val);\n    let args = elems.length > 0 ? [t.arrayExpression(elems)] : [];\n    return t.newExpression(this.preludeGenerator.memoizeReference(kind), args);\n  }\n\n  _serializeValueTypedArrayOrDataView(val: ObjectValue): BabelNodeExpression {\n    let buf = val.$ViewedArrayBuffer;\n    invariant(buf !== undefined);\n    let outlinedArrayBuffer = this.serializeValue(buf, true);\n    this._emitObjectProperties(val);\n    return t.newExpression(this.preludeGenerator.memoizeReference(val.getKind()), [outlinedArrayBuffer]);\n  }\n\n  _serializeValueArrayBuffer(val: ObjectValue): BabelNodeExpression {\n    let elems = [];\n\n    let len = val.$ArrayBufferByteLength;\n    let db = val.$ArrayBufferData;\n    invariant(len !== undefined);\n    invariant(db);\n    let allzero = true;\n    for (let i = 0; i < len; i++) {\n      if (db[i] !== 0) {\n        allzero = false;\n      }\n      let elem = t.numericLiteral(db[i]);\n      elems.push(elem);\n    }\n\n    this._emitObjectProperties(val);\n    if (allzero) {\n      // if they're all zero, just emit the array buffer constructor\n      return t.newExpression(this.preludeGenerator.memoizeReference(val.getKind()), [t.numericLiteral(len)]);\n    } else {\n      // initialize from a byte array otherwise\n      let arrayValue = t.arrayExpression(elems);\n      let consExpr = t.newExpression(this.preludeGenerator.memoizeReference(\"Uint8Array\"), [arrayValue]);\n      // access the Uint8Array.buffer property to extract the created buffer\n      return t.memberExpression(consExpr, t.identifier(\"buffer\"));\n    }\n  }\n\n  _serializeValueFunction(val: FunctionValue): void | BabelNodeExpression {\n    if (val instanceof BoundFunctionValue) {\n      this._emitObjectProperties(val);\n      return t.callExpression(\n        t.memberExpression(this.serializeValue(val.$BoundTargetFunction), t.identifier(\"bind\")),\n        [].concat(\n          this.serializeValue(val.$BoundThis),\n          val.$BoundArguments.map((boundArg, i) => this.serializeValue(boundArg))\n        )\n      );\n    }\n\n    invariant(!(val instanceof NativeFunctionValue), \"all native function values should be intrinsics\");\n    invariant(val instanceof ECMAScriptSourceFunctionValue);\n\n    let instance = this.residualFunctionInstances.get(val);\n    invariant(instance !== undefined);\n    let residualBindings = instance.residualFunctionBindings;\n\n    let inOptimizedFunction = this._residualOptimizedFunctions.tryGetOptimizedFunctionRoot(val);\n    if (inOptimizedFunction !== undefined) instance.containingAdditionalFunction = inOptimizedFunction;\n    let bindingsEmittedSemaphore = new CountingSemaphore(() => {\n      invariant(instance);\n      // hoist if we are in an additionalFunction\n      if (inOptimizedFunction !== undefined && canHoistFunction(this.realm, val, undefined, new Set())) {\n        instance.insertionPoint = new BodyReference(this.mainBody, this.mainBody.entries.length);\n        instance.containingAdditionalFunction = undefined;\n      } else {\n        instance.insertionPoint = this.emitter.getBodyReference();\n      }\n    });\n\n    for (let [boundName, residualBinding] of residualBindings) {\n      let referencedValues = [];\n      let serializeBindingFunc;\n      if (!residualBinding.declarativeEnvironmentRecord) {\n        serializeBindingFunc = () => this._serializeGlobalBinding(boundName, residualBinding);\n      } else {\n        serializeBindingFunc = () => this._serializeDeclarativeEnvironmentRecordBinding(residualBinding);\n        if (residualBinding.value !== undefined) referencedValues.push(residualBinding.value);\n      }\n      bindingsEmittedSemaphore.acquireOne();\n      this.emitter.emitNowOrAfterWaitingForDependencies(\n        referencedValues,\n        () => {\n          serializeBindingFunc();\n          bindingsEmittedSemaphore.releaseOne();\n        },\n        this.emitter.getBody()\n      );\n    }\n    if (val.$FunctionKind === \"classConstructor\") {\n      let homeObject = val.$HomeObject;\n      if (homeObject instanceof ObjectValue && homeObject.$IsClassPrototype) {\n        this._serializeClass(val, homeObject, bindingsEmittedSemaphore);\n        return;\n      }\n    }\n    bindingsEmittedSemaphore.releaseOne();\n    this._emitObjectProperties(val);\n    let additionalEffects = this.additionalFunctionValuesAndEffects.get(val);\n    if (additionalEffects) this._serializeAdditionalFunction(val, additionalEffects);\n  }\n\n  _serializeClass(\n    classFunc: ECMAScriptSourceFunctionValue,\n    classPrototype: ObjectValue,\n    bindingsEmittedSemaphore: CountingSemaphore\n  ): void {\n    let classMethodInstance = this.residualClassMethodInstances.get(classFunc);\n\n    invariant(classMethodInstance !== undefined);\n\n    let classProtoId;\n    let hasSerializedClassProtoId = false;\n    let propertiesToSerialize = new Map();\n\n    // handle class inheritance\n    if (!(classFunc.$Prototype instanceof NativeFunctionValue)) {\n      classMethodInstance.classSuperNode = this.serializeValue(classFunc.$Prototype);\n    }\n\n    let serializeClassPrototypeId = () => {\n      if (!hasSerializedClassProtoId) {\n        let classId = this.getSerializeObjectIdentifier(classFunc);\n        classProtoId = t.identifier(this.intrinsicNameGenerator.generate());\n        hasSerializedClassProtoId = true;\n        this.emitter.emit(\n          t.variableDeclaration(\"var\", [\n            t.variableDeclarator(classProtoId, t.memberExpression(classId, t.identifier(\"prototype\"))),\n          ])\n        );\n      }\n    };\n\n    let serializeClassMethodOrProperty = (propertyNameOrSymbol, methodFuncOrProperty) => {\n      const serializeNameAndId = () => {\n        let methodFuncOrPropertyId = this.serializeValue(methodFuncOrProperty);\n        let name;\n\n        if (typeof propertyNameOrSymbol === \"string\") {\n          name = t.identifier(propertyNameOrSymbol);\n        } else {\n          name = this.serializeValue(propertyNameOrSymbol);\n        }\n        return { name, methodFuncOrPropertyId };\n      };\n\n      if (methodFuncOrProperty instanceof ECMAScriptSourceFunctionValue) {\n        if (methodFuncOrProperty !== classFunc) {\n          // if the method does not have a $HomeObject, it's not a class method\n          if (methodFuncOrProperty.$HomeObject !== undefined) {\n            this.serializedValues.add(methodFuncOrProperty);\n            this._serializeClassMethod(propertyNameOrSymbol, methodFuncOrProperty);\n          } else {\n            // if the method is not part of the class, we have to assign it to the prototype\n            // we can't serialize via emitting the properties as that will emit all\n            // the prototype and we only want to mutate the prototype here\n            serializeClassPrototypeId();\n            invariant(classProtoId !== undefined);\n            let { name, methodFuncOrPropertyId } = serializeNameAndId();\n            this.emitter.emit(\n              t.expressionStatement(\n                t.assignmentExpression(\"=\", t.memberExpression(classProtoId, name), methodFuncOrPropertyId)\n              )\n            );\n          }\n        }\n      } else {\n        let prototypeId = t.memberExpression(this.getSerializeObjectIdentifier(classFunc), t.identifier(\"prototype\"));\n        let { name, methodFuncOrPropertyId } = serializeNameAndId();\n        this.emitter.emit(\n          t.expressionStatement(\n            t.assignmentExpression(\"=\", t.memberExpression(prototypeId, name), methodFuncOrPropertyId)\n          )\n        );\n      }\n    };\n\n    let serializeClassProperty = (propertyNameOrSymbol, propertyValue) => {\n      // we handle the prototype via class syntax\n      if (propertyNameOrSymbol === \"prototype\") {\n        this.serializedValues.add(propertyValue);\n      } else if (propertyValue instanceof ECMAScriptSourceFunctionValue && propertyValue.$HomeObject === classFunc) {\n        serializeClassMethodOrProperty(propertyNameOrSymbol, propertyValue);\n      } else {\n        let prop = classFunc.properties.get(propertyNameOrSymbol);\n        invariant(prop);\n        propertiesToSerialize.set(propertyNameOrSymbol, prop);\n      }\n    };\n\n    // find the all the properties on the class that we need to serialize\n    for (let [propertyName, method] of classFunc.properties) {\n      if (\n        !this.residualHeapInspector.canIgnoreProperty(classFunc, propertyName) &&\n        !ClassPropertiesToIgnore.has(propertyName) &&\n        method.descriptor !== undefined &&\n        !(propertyName === \"length\" && canIgnoreClassLengthProperty(classFunc, method.descriptor, this.logger))\n      ) {\n        withDescriptorValue(propertyName, method.descriptor, serializeClassProperty);\n      }\n    }\n    // pass in the properties and set it so we don't serialize the prototype\n    bindingsEmittedSemaphore.releaseOne();\n    this._emitObjectProperties(classFunc, propertiesToSerialize, undefined, undefined, true);\n\n    // handle non-symbol properties\n    for (let [propertyName, method] of classPrototype.properties) {\n      withDescriptorValue(propertyName, method.descriptor, serializeClassMethodOrProperty);\n    }\n    // handle symbol properties\n    for (let [symbol, method] of classPrototype.symbols) {\n      withDescriptorValue(symbol, method.descriptor, serializeClassMethodOrProperty);\n    }\n    // assign the AST method key node for the \"constructor\"\n    classMethodInstance.classMethodKeyNode = t.identifier(\"constructor\");\n  }\n\n  _serializeClassMethod(key: string | SymbolValue, methodFunc: ECMAScriptSourceFunctionValue): void {\n    let classMethodInstance = this.residualClassMethodInstances.get(methodFunc);\n\n    invariant(classMethodInstance !== undefined);\n    if (typeof key === \"string\") {\n      classMethodInstance.classMethodKeyNode = t.identifier(key);\n      // as we know the method name is a string again, we can remove the computed status\n      classMethodInstance.classMethodComputed = false;\n    } else if (key instanceof SymbolValue) {\n      classMethodInstance.classMethodKeyNode = this.serializeValue(key);\n    } else {\n      invariant(false, \"Unknown method key type\");\n    }\n    this._serializeValueFunction(methodFunc);\n  }\n\n  // Checks whether a property can be defined via simple assignment, or using object literal syntax.\n  _canEmbedProperty(obj: ObjectValue, key: string | SymbolValue | AbstractValue, prop: Descriptor): boolean {\n    if (!(prop instanceof PropertyDescriptor)) return false;\n\n    let targetDescriptor = this.residualHeapInspector.getTargetIntegrityDescriptor(obj);\n\n    if ((obj instanceof FunctionValue && key === \"prototype\") || (obj.getKind() === \"RegExp\" && key === \"lastIndex\"))\n      return (\n        prop.writable === targetDescriptor.writable && !prop.configurable && !prop.enumerable && !prop.set && !prop.get\n      );\n    else if (\n      prop.writable === targetDescriptor.writable &&\n      prop.configurable === targetDescriptor.configurable &&\n      !!prop.enumerable &&\n      !prop.set &&\n      !prop.get\n    ) {\n      return !(prop.value instanceof AbstractValue && prop.value.kind === \"widened property\");\n    } else {\n      return false;\n    }\n  }\n\n  _findLastObjectPrototype(obj: ObjectValue): ObjectValue {\n    while (obj.$Prototype instanceof ObjectValue) obj = obj.$Prototype;\n    return obj;\n  }\n\n  _serializeValueRegExpObject(val: ObjectValue): BabelNodeExpression {\n    let source = val.$OriginalSource;\n    let flags = val.$OriginalFlags;\n    invariant(typeof source === \"string\");\n    invariant(typeof flags === \"string\");\n    this._emitObjectProperties(val);\n    source = new RegExp(source).source; // add escapes as per 21.2.3.2.4\n    return t.regExpLiteral(source, flags);\n  }\n\n  // Overridable.\n  serializeValueRawObject(\n    val: ObjectValue,\n    skipPrototype: boolean,\n    emitIntegrityCommand: void | (SerializedBody => void)\n  ): BabelNodeExpression {\n    let remainingProperties = new Map(val.properties);\n    const dummyProperties = new Set();\n    let props = [];\n    let isCertainlyLeaked = !val.mightNotBeLeakedObject();\n\n    // TODO #2259: Make deduplication in the face of leaking work for custom accessors\n    let shouldDropAsAssignedProp = (descriptor: Descriptor | void) =>\n      isCertainlyLeaked &&\n      (descriptor instanceof PropertyDescriptor && (descriptor.get === undefined && descriptor.set === undefined));\n\n    if (val.temporalAlias !== undefined) {\n      return t.objectExpression(props);\n    } else {\n      for (let [key, propertyBinding] of val.properties) {\n        if (propertyBinding.descriptor !== undefined && shouldDropAsAssignedProp(propertyBinding.descriptor)) {\n          remainingProperties.delete(key);\n          continue;\n        }\n\n        if (propertyBinding.pathNode !== undefined) continue; // written to inside loop\n        let descriptor = propertyBinding.descriptor;\n        if (descriptor === undefined || !(descriptor instanceof PropertyDescriptor) || descriptor.value === undefined)\n          continue; // deleted\n\n        let serializedKey = getAsPropertyNameExpression(key);\n        if (this._canEmbedProperty(val, key, descriptor)) {\n          let propValue = descriptor.value;\n          invariant(propValue instanceof Value);\n          if (this.residualHeapInspector.canIgnoreProperty(val, key)) continue;\n          let mightHaveBeenDeleted = propValue.mightHaveBeenDeleted();\n\n          let instantRenderMode = this.realm.instantRender.enabled;\n\n          let delayReason;\n          if (instantRenderMode) {\n            if (this.emitter.getReasonToWaitForDependencies(propValue)) {\n              this.realm.instantRenderBailout(\n                \"InstantRender does not yet support cyclical arrays or objects\",\n                val.expressionLocation\n              );\n            }\n            delayReason = undefined;\n          } else {\n            delayReason =\n              this.emitter.getReasonToWaitForDependencies(propValue) ||\n              this.emitter.getReasonToWaitForActiveValue(val, mightHaveBeenDeleted);\n          }\n\n          // Although the property needs to be delayed, we still want to emit dummy \"undefined\"\n          // value as part of the object literal to ensure a consistent property ordering.\n          let serializedValue = !instantRenderMode ? voidExpression : emptyExpression;\n          if (delayReason) {\n            // May need to be cleaned up later.\n            dummyProperties.add(key);\n          } else {\n            remainingProperties.delete(key);\n            serializedValue = this.serializeValue(propValue);\n          }\n          props.push(t.objectProperty(serializedKey, serializedValue));\n        } else if (descriptor.value instanceof Value && descriptor.value.mightHaveBeenDeleted()) {\n          dummyProperties.add(key);\n          props.push(t.objectProperty(serializedKey, voidExpression));\n        }\n      }\n    }\n\n    this._emitObjectProperties(\n      val,\n      remainingProperties,\n      /*objectPrototypeAlreadyEstablished*/ false,\n      dummyProperties,\n      skipPrototype\n    );\n\n    return t.objectExpression(props);\n  }\n\n  _serializeValueObjectViaConstructor(\n    val: ObjectValue,\n    skipPrototype: boolean,\n    classConstructor?: Value\n  ): BabelNodeExpression {\n    let proto = val.$Prototype;\n    this._emitObjectProperties(\n      val,\n      val.properties,\n      /*objectPrototypeAlreadyEstablished*/ true,\n      undefined,\n      skipPrototype\n    );\n    let serializedProto = this.serializeValue(classConstructor ? classConstructor : proto);\n    if (val.temporalAlias === undefined) {\n      this.needsAuxiliaryConstructor = true;\n      return t.sequenceExpression([\n        t.assignmentExpression(\n          \"=\",\n          t.memberExpression(constructorExpression, t.identifier(\"prototype\")),\n          classConstructor ? t.memberExpression(serializedProto, t.identifier(\"prototype\")) : serializedProto\n        ),\n        t.newExpression(constructorExpression, []),\n      ]);\n    } else {\n      this.emitter.emitAfterWaiting(\n        val.temporalAlias,\n        [],\n        () => {\n          invariant(val.temporalAlias !== undefined);\n          let uid = this.serializeValue(val.temporalAlias);\n          this.emitter.emit(\n            t.expressionStatement(\n              t.callExpression(this.preludeGenerator.memoizeReference(\"Object.setPrototypeOf\"), [uid, serializedProto])\n            )\n          );\n        },\n        this.emitter.getBody()\n      );\n      return t.objectExpression([]);\n    }\n  }\n\n  serializeValueObject(\n    val: ObjectValue,\n    emitIntegrityCommand: void | (SerializedBody => void)\n  ): BabelNodeExpression | void {\n    // If this object is a prototype object that was implicitly created by the runtime\n    // for a constructor, then we can obtain a reference to this object\n    // in a special way that's handled alongside function serialization.\n    let constructor = val.originalConstructor;\n    if (constructor !== undefined) {\n      let prototypeId = this.residualHeapValueIdentifiers.getIdentifier(val);\n      this.emitter.emitNowOrAfterWaitingForDependencies(\n        [constructor],\n        () => {\n          invariant(constructor !== undefined);\n          invariant(prototypeId !== undefined);\n          this.serializeValue(constructor);\n          this._emitObjectProperties(val);\n          invariant(prototypeId.type === \"Identifier\");\n          this.residualFunctions.setFunctionPrototype(constructor, prototypeId);\n        },\n        this.emitter.getBody()\n      );\n      return prototypeId;\n    }\n\n    let kind = val.getKind();\n    switch (kind) {\n      case \"RegExp\":\n        return this._serializeValueRegExpObject(val);\n      case \"Number\":\n        let numberData = val.$NumberData;\n        invariant(numberData !== undefined);\n        numberData.throwIfNotConcreteNumber();\n        invariant(numberData instanceof NumberValue, \"expected number data internal slot to be a number value\");\n        this._emitObjectProperties(val);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"Number\"), [t.numericLiteral(numberData.value)]);\n      case \"String\":\n        let stringData = val.$StringData;\n        invariant(stringData !== undefined);\n        stringData.throwIfNotConcreteString();\n        invariant(stringData instanceof StringValue, \"expected string data internal slot to be a string value\");\n        this._emitObjectProperties(val);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"String\"), [t.stringLiteral(stringData.value)]);\n      case \"Boolean\":\n        let booleanData = val.$BooleanData;\n        invariant(booleanData !== undefined);\n        booleanData.throwIfNotConcreteBoolean();\n        invariant(booleanData instanceof BooleanValue, \"expected boolean data internal slot to be a boolean value\");\n        this._emitObjectProperties(val);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"Boolean\"), [\n          t.booleanLiteral(booleanData.value),\n        ]);\n      case \"Date\":\n        let dateValue = val.$DateValue;\n        invariant(dateValue !== undefined);\n        let serializedDateValue = this.serializeValue(dateValue);\n        this._emitObjectProperties(val);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"Date\"), [serializedDateValue]);\n      case \"Float32Array\":\n      case \"Float64Array\":\n      case \"Int8Array\":\n      case \"Int16Array\":\n      case \"Int32Array\":\n      case \"Uint8Array\":\n      case \"Uint16Array\":\n      case \"Uint32Array\":\n      case \"Uint8ClampedArray\":\n      case \"DataView\":\n        return this._serializeValueTypedArrayOrDataView(val);\n      case \"ArrayBuffer\":\n        return this._serializeValueArrayBuffer(val);\n      case \"ReactElement\":\n        this.residualReactElementSerializer.serializeReactElement(val);\n        return;\n      case \"Map\":\n      case \"WeakMap\":\n        return this._serializeValueMap(val);\n      case \"Set\":\n      case \"WeakSet\":\n        return this._serializeValueSet(val);\n      default:\n        invariant(kind === \"Object\", \"invariant established by visitor\");\n\n        let proto = val.$Prototype;\n        let { skipPrototype, constructor: _constructor } = getObjectPrototypeMetadata(this.realm, val);\n        let createViaAuxiliaryConstructor =\n          val.temporalAlias === undefined &&\n          proto !== this.realm.intrinsics.ObjectPrototype &&\n          this._findLastObjectPrototype(val) === this.realm.intrinsics.ObjectPrototype &&\n          proto instanceof ObjectValue &&\n          !skipPrototype;\n\n        return createViaAuxiliaryConstructor || _constructor\n          ? this._serializeValueObjectViaConstructor(val, skipPrototype, _constructor)\n          : this.serializeValueRawObject(val, skipPrototype, emitIntegrityCommand);\n    }\n  }\n\n  _serializeValueSymbol(val: SymbolValue): BabelNodeExpression {\n    let args = [];\n    if (val.$Description instanceof Value) {\n      let serializedArg = this.serializeValue(val.$Description);\n      invariant(serializedArg);\n      args.push(serializedArg);\n    }\n    // check if symbol value exists in the global symbol map, in that case we emit an invocation of System.for\n    // to look it up\n    let globalReg = this.realm.globalSymbolRegistry.find(e => e.$Symbol === val) !== undefined;\n    if (globalReg) {\n      return t.callExpression(this.preludeGenerator.memoizeReference(\"Symbol.for\"), args);\n    } else {\n      return t.callExpression(this.preludeGenerator.memoizeReference(\"Symbol\"), args);\n    }\n  }\n\n  _serializeValueProxy(val: ProxyValue): BabelNodeExpression {\n    return t.newExpression(this.preludeGenerator.memoizeReference(\"Proxy\"), [\n      this.serializeValue(val.$ProxyTarget),\n      this.serializeValue(val.$ProxyHandler),\n    ]);\n  }\n\n  _serializeAbstractValueHelper(val: AbstractValue): BabelNodeExpression {\n    let serializedArgs = val.args.map((abstractArg, i) => this.serializeValue(abstractArg));\n    if (val.kind === \"abstractConcreteUnion\") {\n      invariant(val.args.length >= 2);\n      invariant(val.args[0] instanceof AbstractValue);\n      return serializedArgs[0];\n    }\n    if (val.kind === \"explicit conversion to object\") {\n      let ob = serializedArgs[0];\n      invariant(ob !== undefined);\n      return t.callExpression(this.preludeGenerator.memoizeReference(\"Object.assign\"), [ob]);\n    } else if (val.kind === \"template for prototype member expression\") {\n      let obj = this.serializeValue(val.args[0]);\n      let prop = this.serializeValue(val.args[1]);\n      return t.memberExpression(obj, prop, true);\n    }\n    invariant(val.operationDescriptor !== undefined);\n    let serializedValue = this.residualOperationSerializer.serializeExpression(val.operationDescriptor, serializedArgs);\n    if (serializedValue.type === \"Identifier\") {\n      let id = ((serializedValue: any): BabelNodeIdentifier);\n      invariant(\n        !this.realm.derivedIds.has(id.name) ||\n          this.emitter.cannotDeclare() ||\n          this.emitter.hasBeenDeclared(val) ||\n          !!this.emitter.getActiveOptimizedFunction(),\n        `an abstract value with an identifier \"${id.name}\" was referenced before being declared`\n      );\n    }\n    return serializedValue;\n  }\n\n  _serializeAbstractValue(val: AbstractValue): void | BabelNodeExpression {\n    invariant(val.kind !== \"sentinel member expression\", \"invariant established by visitor\");\n    if (val.kind === \"conditional\") {\n      let cf = this.conditionalFeasibility.get(val);\n      invariant(cf !== undefined);\n      if (cf.t && !cf.f) return this.serializeValue(val.args[1]);\n      else if (!cf.t && cf.f) return this.serializeValue(val.args[2]);\n      else invariant(cf.t && cf.f);\n    }\n    if (val.hasIdentifier()) {\n      return this._serializeAbstractValueHelper(val);\n    } else {\n      // This abstract value's dependencies should all be declared\n      // but still need to check them again in case their serialized bodies are in different generator scope.\n      let reason = this.emitter.getReasonToWaitForDependencies(val.args);\n      if (reason === undefined) {\n        return this._serializeAbstractValueHelper(val);\n      } else {\n        this.emitter.emitAfterWaiting(\n          reason,\n          val.args,\n          () => {\n            const serializedValue = this._serializeAbstractValueHelper(val);\n            let uid = this.getSerializeObjectIdentifier(val);\n            this._declare(this.emitter.cannotDeclare(), undefined, \"var\", uid, serializedValue);\n          },\n          this.emitter.getBody()\n        );\n      }\n    }\n  }\n\n  _serializeEmptyValue(): BabelNodeExpression {\n    this.needsEmptyVar = !this.realm.instantRender.enabled;\n    return emptyExpression;\n  }\n\n  _serializeValue(val: Value): void | BabelNodeExpression {\n    if (val instanceof AbstractValue) {\n      return this._serializeAbstractValue(val);\n    } else if (val.isIntrinsic()) {\n      return this._serializeValueIntrinsic(val);\n    } else if (val instanceof EmptyValue) {\n      return this._serializeEmptyValue();\n    } else if (val instanceof UndefinedValue) {\n      return voidExpression;\n    } else if (HeapInspector.isLeaf(val)) {\n      return t.valueToNode(val.serialize());\n    } else if (val instanceof ObjectValue) {\n      return this._serializeValueObjectBase(val);\n    } else {\n      invariant(val instanceof SymbolValue);\n      return this._serializeValueSymbol(val);\n    }\n  }\n\n  _serializeValueObjectBase(obj: ObjectValue): void | BabelNodeExpression {\n    if (obj instanceof ProxyValue) {\n      return this._serializeValueProxy(obj);\n    }\n\n    let objectSemaphore;\n    let targetCommand = this.residualHeapInspector.getTargetIntegrityCommand(obj);\n    let emitIntegrityCommand;\n    if (targetCommand) {\n      let body = this.emitter.getBody();\n      objectSemaphore = new CountingSemaphore(() => {\n        this.emitter.emitNowOrAfterWaitingForDependencies(\n          [obj],\n          () => {\n            let uid = this.getSerializeObjectIdentifier(obj);\n            this.emitter.emit(\n              t.expressionStatement(\n                t.callExpression(this.preludeGenerator.memoizeReference(\"Object.\" + targetCommand), [uid])\n              )\n            );\n          },\n          body\n        );\n      });\n      this._objectSemaphores.set(obj, objectSemaphore);\n      emitIntegrityCommand = alternateBody => {\n        if (objectSemaphore !== undefined) {\n          if (alternateBody !== undefined) body = alternateBody;\n          objectSemaphore.releaseOne();\n          this._objectSemaphores.delete(obj);\n        }\n        objectSemaphore = undefined;\n      };\n    }\n    let res;\n    if (IsArray(this.realm, obj)) {\n      res = this._serializeValueArray(obj);\n    } else if (obj instanceof FunctionValue) {\n      res = this._serializeValueFunction(obj);\n    } else {\n      res = this.serializeValueObject(obj, emitIntegrityCommand);\n    }\n    if (emitIntegrityCommand !== undefined) emitIntegrityCommand();\n    return res;\n  }\n\n  _serializeGlobalBinding(boundName: string, binding: ResidualFunctionBinding): void {\n    invariant(!binding.declarativeEnvironmentRecord);\n    if (!binding.serializedValue) {\n      binding.referentialized = true;\n      if (boundName === \"undefined\") {\n        binding.serializedValue = voidExpression;\n      } else if (binding.value !== undefined) {\n        binding.serializedValue = t.identifier(boundName);\n        invariant(binding.value !== undefined);\n        this.declaredGlobalLets.set(boundName, binding.value);\n      }\n    }\n  }\n\n  _annotateGeneratorStatements(generator: Generator, statements: Array<BabelNodeStatement>): void {\n    let comment = `generator \"${generator.getName()}\"`;\n    let parent = this.generatorTree.getParent(generator);\n    if (parent instanceof Generator) {\n      comment = `${comment} with parent \"${parent.getName()}\"`;\n    } else if (parent instanceof FunctionValue) {\n      comment = `${comment} with function parent`;\n    } else {\n      invariant(parent === \"GLOBAL\");\n      comment = `${comment} with global parent`;\n    }\n    let beginComments = [commentStatement(\"begin \" + comment)];\n    let effects = generator.effectsToApply;\n    if (effects) {\n      let valueToString = value =>\n        this.residualHeapValueIdentifiers.hasIdentifier(value)\n          ? this.residualHeapValueIdentifiers.getIdentifier(value).name\n          : \"?\";\n      let keyToString = key => (typeof key === \"string\" ? key : key instanceof Value ? valueToString(key) : \"?\");\n\n      beginComments.push(\n        commentStatement(\n          `  has effects: ${effects.createdObjects.size} created objects, ${\n            effects.modifiedBindings.size\n          } modified bindings, ${effects.modifiedProperties.size} modified properties`\n        )\n      );\n      if (effects.createdObjects.size > 0)\n        beginComments.push(\n          commentStatement(\n            `    created objects: ${Array.from(effects.createdObjects)\n              .map(valueToString)\n              .join(\", \")}`\n          )\n        );\n      if (effects.modifiedBindings.size > 0)\n        beginComments.push(\n          commentStatement(\n            `    modified bindings: ${Array.from(effects.modifiedBindings.keys())\n              .map(b => b.name)\n              .join(\", \")}`\n          )\n        );\n      if (effects.modifiedProperties.size > 0)\n        beginComments.push(\n          commentStatement(\n            `    modified properties: ${Array.from(effects.modifiedProperties.keys())\n              .map(b => `${valueToString(b.object)}.${keyToString(b.key)}`)\n              .join(\", \")}`\n          )\n        );\n    }\n    statements.unshift(...beginComments);\n    statements.push(commentStatement(\"end \" + comment));\n  }\n\n  _withGeneratorScope(\n    type: \"Generator\" | \"OptimizedFunction\",\n    generator: Generator,\n    valuesToProcess: void | Set<AbstractValue | ObjectValue>,\n    callback: SerializedBody => void,\n    optimizedFunction?: void | FunctionValue\n  ): Array<BabelNodeStatement> {\n    let newBody = { type, parentBody: undefined, entries: [], done: false, optimizedFunction };\n    let optimizedFunctionRoot =\n      optimizedFunction === undefined\n        ? undefined\n        : this._residualOptimizedFunctions.tryGetOptimizedFunctionRoot(optimizedFunction);\n    let isChild = !!optimizedFunctionRoot || type === \"Generator\";\n    let oldBody = this.emitter.beginEmitting(generator, newBody, /*isChild*/ isChild);\n    invariant(!this.activeGeneratorBodies.has(generator));\n    this.activeGeneratorBodies.set(generator, newBody);\n    callback(newBody);\n    invariant(this.activeGeneratorBodies.has(generator));\n    this.activeGeneratorBodies.delete(generator);\n    const statements = this.emitter.endEmitting(generator, oldBody, valuesToProcess, /*isChild*/ isChild).entries;\n    if (this._options.debugScopes) this._annotateGeneratorStatements(generator, statements);\n    this.getStatistics().generators++;\n    return statements;\n  }\n\n  _getContext(): SerializationContext {\n    let context = {\n      serializeOperationDescriptor: this.residualOperationSerializer.serializeStatement.bind(\n        this.residualOperationSerializer\n      ),\n      serializeBinding: this.serializeBinding.bind(this),\n      serializeBindingAssignment: (binding: Binding, bindingValue: Value) => {\n        let serializeBinding = this.serializeBinding(binding);\n        let serializedValue = context.serializeValue(bindingValue);\n        return t.expressionStatement(t.assignmentExpression(\"=\", serializeBinding, serializedValue));\n      },\n      serializeCondition: (\n        condition: Value,\n        consequentGenerator: Generator,\n        alternateGenerator: Generator,\n        valuesToProcess: Set<AbstractValue | ObjectValue>\n      ) => {\n        let serializedCondition = this.serializeValue(condition);\n        let consequentBody = context.serializeGenerator(consequentGenerator, valuesToProcess);\n        let alternateBody = context.serializeGenerator(alternateGenerator, valuesToProcess);\n        return t.ifStatement(serializedCondition, t.blockStatement(consequentBody), t.blockStatement(alternateBody));\n      },\n      serializeDebugScopeComment(declared: ObjectValue | AbstractValue) {\n        let s = t.emptyStatement();\n        s.leadingComments = [({ type: \"BlockComment\", value: `declaring ${declared.intrinsicName || \"?\"}` }: any)];\n        return s;\n      },\n      serializeReturnValue: (val: Value) => {\n        return t.returnStatement(this.serializeValue(val));\n      },\n      serializeGenerator: (\n        generator: Generator,\n        valuesToProcess: Set<AbstractValue | ObjectValue>\n      ): Array<BabelNodeStatement> =>\n        this._withGeneratorScope(\"Generator\", generator, valuesToProcess, () =>\n          generator.serialize(((context: any): SerializationContext))\n        ),\n      serializeValue: this.serializeValue.bind(this),\n      initGenerator: (generator: Generator) => {\n        let activeGeneratorBody = this._getActiveBodyOfGenerator(generator);\n        invariant(activeGeneratorBody === this.emitter.getBody(), \"generator to init must be current emitter body\");\n        let s = this.additionalGeneratorRoots.get(generator);\n        if (s !== undefined) for (let value of s) this.serializeValue(value);\n      },\n      finalizeGenerator: (generator: Generator) => {\n        let activeGeneratorBody = this._getActiveBodyOfGenerator(generator);\n        invariant(activeGeneratorBody === this.emitter.getBody(), \"generator to finalize must be current emitter body\");\n        this.emitter.finalizeCurrentBody();\n      },\n      emit: (statement: BabelNodeStatement) => {\n        this.emitter.emit(statement);\n      },\n      processValues: (valuesToProcess: Set<AbstractValue | ObjectValue>) => {\n        this.emitter.processValues(valuesToProcess);\n      },\n      getPropertyAssignmentStatement: this._getPropertyAssignmentStatement.bind(this),\n      emitDefinePropertyBody: this.emitDefinePropertyBody.bind(this, false, undefined),\n      canOmit: (value: Value) => {\n        let canOmit = !this.referencedDeclaredValues.has(value) && !this.residualValues.has(value);\n        if (!canOmit) {\n          return false;\n        }\n        if (value instanceof ObjectValue && value.temporalAlias !== undefined) {\n          let temporalAlias = value.temporalAlias;\n          return !this.referencedDeclaredValues.has(temporalAlias) && !this.residualValues.has(temporalAlias);\n        }\n        return canOmit;\n      },\n      declare: (value: AbstractValue | ObjectValue) => {\n        this.emitter.declare(value);\n      },\n      emitBindingModification: (binding: Binding) => {\n        let residualFunctionBinding = this._getResidualFunctionBinding(binding);\n        if (residualFunctionBinding !== undefined) {\n          invariant(residualFunctionBinding.referentialized);\n          invariant(\n            residualFunctionBinding.serializedValue,\n            \"ResidualFunctionBinding must be referentialized before serializing a mutation to it.\"\n          );\n          let newValue = binding.value;\n          invariant(newValue);\n          let bindingReference = ((residualFunctionBinding.serializedValue: any): BabelNodeLVal);\n          invariant(\n            t.isLVal(bindingReference),\n            \"Referentialized values must be LVals even though serializedValues may be any Expression\"\n          );\n          let serializedNewValue = this.serializeValue(newValue);\n          this.emitter.emit(t.expressionStatement(t.assignmentExpression(\"=\", bindingReference, serializedNewValue)));\n        }\n      },\n      emitPropertyModification: (propertyBinding: PropertyBinding) => {\n        let desc = propertyBinding.descriptor;\n        let object = propertyBinding.object;\n        invariant(object instanceof ObjectValue);\n        if (this.residualValues.has(object)) {\n          let key = propertyBinding.key;\n          invariant(key !== undefined, \"established by visitor\");\n          let dependencies = [];\n          if (desc !== undefined) dependencies.push(...this._getDescriptorValues(desc));\n          dependencies.push(object);\n          if (key instanceof Value) dependencies.push(key);\n          this.emitter.emitNowOrAfterWaitingForDependencies(\n            dependencies,\n            () => {\n              // separate serialize object, as _emitProperty assumes that this already happened\n              this.serializeValue(object);\n              this._emitProperty(object, key, desc, true);\n            },\n            this.emitter.getBody()\n          );\n        }\n      },\n      options: this._options,\n    };\n    return context;\n  }\n\n  _shouldBeWrapped(body: Array<any>): boolean {\n    for (let i = 0; i < body.length; i++) {\n      let item = body[i];\n      if (item.type === \"ExpressionStatement\") {\n        continue;\n      } else if (item.type === \"VariableDeclaration\" || item.type === \"FunctionDeclaration\") {\n        return true;\n      } else if (item.type === \"BlockStatement\") {\n        if (this._shouldBeWrapped(item.body)) {\n          return true;\n        }\n      } else if (item.type === \"IfStatement\") {\n        if (item.alternate) {\n          if (this._shouldBeWrapped(item.alternate.body)) {\n            return true;\n          }\n        }\n        if (item.consequent) {\n          if (this._shouldBeWrapped(item.consequent.body)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  _serializeAdditionalFunctionGeneratorAndEffects(\n    generator: Generator,\n    functionValue: FunctionValue,\n    additionalEffects: AdditionalFunctionEffects\n  ): Array<BabelNodeStatement> {\n    return this._withGeneratorScope(\n      \"OptimizedFunction\",\n      generator,\n      /*valuesToProcess*/ undefined,\n      newBody => {\n        let effectsGenerator = additionalEffects.generator;\n        invariant(effectsGenerator === generator);\n        effectsGenerator.serialize(this._getContext());\n        this.realm.withEffectsAppliedInGlobalEnv(() => {\n          const lazyHoistedReactNodes = this.residualReactElementSerializer.serializeLazyHoistedNodes(functionValue);\n          this.mainBody.entries.push(...lazyHoistedReactNodes);\n          return null;\n        }, additionalEffects.effects);\n      },\n      functionValue\n    );\n  }\n\n  // result -- serialize it, a return statement will be generated later, must be a Value\n  // Generator -- visit all entries\n  // Bindings -- only need to serialize bindings if they're captured by some nested function?\n  //          -- need to apply them and maybe need to revisit functions in ancestors to make sure\n  //          -- we don't overwrite anything they capture\n  // PropertyBindings -- visit any property bindings that aren't to createdobjects\n  // CreatedObjects -- should take care of itself\n  _serializeAdditionalFunction(\n    additionalFunctionValue: FunctionValue,\n    additionalEffects: AdditionalFunctionEffects\n  ): void {\n    let { effects, transforms, generator, additionalRoots } = additionalEffects;\n    // No function info means the function is dead code, also break recursive cycles where we've already started\n    // serializing this value\n    if (\n      !this.additionalFunctionValueInfos.has(additionalFunctionValue) ||\n      this.rewrittenAdditionalFunctions.has(additionalFunctionValue)\n    ) {\n      return;\n    }\n    this.rewrittenAdditionalFunctions.set(additionalFunctionValue, []);\n\n    // visit all additional roots before going into the additional functions;\n    // this ensures that those potentially stateful additional roots will get\n    // initially serialized with the right initial effects applied.\n    for (let additionalRoot of additionalRoots) this.serializeValue(additionalRoot);\n\n    let createdObjects = effects.createdObjects;\n    let nestedFunctions = new Set([...createdObjects].filter(object => object instanceof FunctionValue));\n    // Allows us to emit function declarations etc. inside of this additional\n    // function instead of adding them at global scope\n    // TODO: make sure this generator isn't getting mutated oddly\n    ((nestedFunctions: any): Set<FunctionValue>).forEach(val => this.additionalFunctionValueNestedFunctions.add(val));\n    let body = this._serializeAdditionalFunctionGeneratorAndEffects(\n      generator,\n      additionalFunctionValue,\n      additionalEffects\n    );\n    invariant(additionalFunctionValue instanceof ECMAScriptSourceFunctionValue);\n    for (let transform of transforms) {\n      transform(body);\n    }\n    this.rewrittenAdditionalFunctions.set(additionalFunctionValue, body);\n  }\n\n  prepareAdditionalFunctionValues(): void {\n    for (let [additionalFunctionValue, { generator }] of this.additionalFunctionValuesAndEffects.entries()) {\n      invariant(!this.additionalFunctionGenerators.has(additionalFunctionValue));\n      this.additionalFunctionGenerators.set(additionalFunctionValue, generator);\n    }\n  }\n\n  // Hook point for any serialization needs to be done after generator serialization is complete.\n  postGeneratorSerialization(): void {\n    // For overriding only.\n  }\n\n  serialize(): BabelNodeFile {\n    this.prepareAdditionalFunctionValues();\n\n    this.generator.serialize(this._getContext());\n    this.getStatistics().generators++;\n    invariant(this.emitter.declaredCount() <= this.realm.derivedIds.size);\n\n    // TODO #20: add timers\n\n    // TODO #21: add event listeners\n\n    for (let [moduleId, moduleValue] of this.modules.initializedModules)\n      this.requireReturns.set(moduleId, getReplacement(this.serializeValue(moduleValue), moduleValue));\n\n    for (let [name, value] of this.declaredGlobalLets) {\n      this.emitter.emit(\n        t.expressionStatement(t.assignmentExpression(\"=\", t.identifier(name), this.serializeValue(value)))\n      );\n    }\n\n    this.postGeneratorSerialization();\n\n    Array.prototype.push.apply(this.prelude, this.preludeGenerator.prelude);\n\n    this.emitter.finalize();\n\n    this.residualFunctions.residualFunctionInitializers.factorifyInitializers(this.factoryNameGenerator);\n    let { unstrictFunctionBodies, strictFunctionBodies } = this.residualFunctions.spliceFunctions(\n      this.rewrittenAdditionalFunctions\n    );\n\n    // add strict modes\n    let strictDirective = t.directive(t.directiveLiteral(\"use strict\"));\n    let globalDirectives = [];\n    if (!this.realm.isStrict && !unstrictFunctionBodies.length && strictFunctionBodies.length) {\n      // no unstrict functions, only strict ones\n      globalDirectives.push(strictDirective);\n    } else if (unstrictFunctionBodies.length && strictFunctionBodies.length) {\n      // strict and unstrict functions\n      funcLoop: for (let node of strictFunctionBodies) {\n        if (t.isFunctionExpression(node)) {\n          let func = ((node: any): BabelNodeFunctionExpression);\n          if (func.body.directives) {\n            for (let directive of func.body.directives) {\n              if (directive.value.value === \"use strict\") {\n                // already have a use strict directive\n                continue funcLoop;\n              }\n            }\n          } else func.body.directives = [];\n\n          func.body.directives.unshift(strictDirective);\n        }\n      }\n    }\n\n    // build ast\n    if (this.needsEmptyVar) {\n      this.prelude.push(t.variableDeclaration(\"var\", [t.variableDeclarator(emptyExpression, t.objectExpression([]))]));\n    }\n    if (this.needsAuxiliaryConstructor) {\n      this.prelude.push(\n        t.variableDeclaration(\"var\", [\n          t.variableDeclarator(constructorExpression, t.functionExpression(null, [], t.blockStatement([]))),\n        ])\n      );\n    }\n\n    let body = this.prelude.concat(this.emitter.getBody().entries);\n    factorifyObjects(body, this.factoryNameGenerator);\n\n    let ast_body = [];\n    if (this.preludeGenerator.declaredGlobals.size > 0)\n      ast_body.push(\n        t.variableDeclaration(\n          \"var\",\n          Array.from(this.preludeGenerator.declaredGlobals).map(key => t.variableDeclarator(t.identifier(key)))\n        )\n      );\n    if (this.declaredGlobalLets.size > 0)\n      ast_body.push(\n        t.variableDeclaration(\n          \"let\",\n          Array.from(this.declaredGlobalLets.keys()).map(key => t.variableDeclarator(t.identifier(key)))\n        )\n      );\n    if (body.length) {\n      if (this.realm.isCompatibleWith(\"node-source-maps\")) {\n        ast_body.push(\n          t.expressionStatement(\n            t.callExpression(\n              t.memberExpression(\n                t.callExpression(t.identifier(\"require\"), [t.stringLiteral(\"source-map-support\")]),\n                t.identifier(\"install\")\n              ),\n              []\n            )\n          )\n        );\n      }\n\n      if (this._shouldBeWrapped(body)) {\n        let globalExpression = t.thisExpression();\n\n        let functionExpression = t.functionExpression(null, [], t.blockStatement(body, globalDirectives));\n        let callExpression = this.preludeGenerator.usesThis\n          ? t.callExpression(t.memberExpression(functionExpression, t.identifier(\"call\")), [globalExpression])\n          : t.callExpression(functionExpression, []);\n        ast_body.push(t.expressionStatement(callExpression));\n      } else {\n        Array.prototype.push.apply(ast_body, body);\n      }\n    }\n\n    // Make sure that the visitor visited exactly the same values as the serializer\n    if (\n      this.serializedValues.size !== this.residualValues.size ||\n      !Array.from(this.serializedValues).every(val => this.residualValues.has(val))\n    ) {\n      this._logSerializedResidualMismatches();\n      invariant(false, \"serialized \" + this.serializedValues.size + \" of \" + this.residualValues.size);\n    }\n\n    // TODO: find better way to do this?\n    // revert changes to functionInstances in case we do multiple serialization passes\n    for (let instance of this.residualFunctionInstances.values()) {\n      this.referentializer.cleanInstance(instance);\n    }\n\n    let program_directives = [];\n    if (this.realm.isStrict) program_directives.push(strictDirective);\n    return t.file(t.program(ast_body, program_directives));\n  }\n\n  _logScopes(scopes: Set<Scope>): void {\n    console.log(`  referenced by ${scopes.size} scopes`);\n    for (let s of scopes)\n      if (s instanceof Generator) {\n        let text = \"\";\n        for (; s instanceof Generator; s = this.generatorTree.getParent(s)) text += \"=>\" + s.getName();\n        console.log(`      ${text}`);\n      } else {\n        invariant(s instanceof FunctionValue);\n        console.log(`      ${s.__originalName || JSON.stringify(s.expressionLocation) || s.constructor.name}`);\n      }\n  }\n\n  _logSerializedResidualMismatches(): void {\n    let logValue = value => {\n      console.log(describeValue(value));\n      let scopes = this.residualValues.get(value);\n      if (scopes !== undefined) this._logScopes(scopes);\n    };\n    console.log(\"=== serialized but not visited values\");\n    for (let value of this.serializedValues) if (!this.residualValues.has(value)) logValue(value);\n    console.log(\"=== visited but not serialized values\");\n    for (let value of this.residualValues.keys()) if (!this.serializedValues.has(value)) logValue(value);\n  }\n}\n"],"file":"ResidualHeapSerializer.js"}