{"version":3,"sources":["../../src/serializer/ResidualHeapGraphGenerator.js"],"names":["ResidualHeapGraphGenerator","ResidualHeapVisitor","constructor","realm","logger","modules","additionalFunctionValuesAndEffects","valueIdentifiers","valueToEdgeRecord","_valueToEdgeRecord","_valueIdentifiers","_visitedValues","Set","_valueIds","Map","_idSeed","_path","_edges","preProcessValue","val","_shouldIgnore","_updateEdge","has","add","postProcessValue","length","pop","_getValueId","id","get","undefined","set","EmptyValue","isIntrinsic","HeapInspector","isLeaf","parent","push","fromId","toId","_getValueLabel","serializedId","getIdentifier","__originalName","name","_generateDotGraphData","nodes","edges","content","nodeId","_getValueShape","edge","_generateVisJSGraphData","nodesData","edgesData","node","nodeData","label","shape","color","_getValueColor","index","entries","edgeData","from","to","arrows","graphData","JSON","stringify","FunctionValue","AbstractValue","ProxyValue","SymbolValue","ObjectValue","generateResult","heapGraphFormat"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Logger } from \"../utils/logger.js\";\nimport type { Modules } from \"../utils/modules.js\";\nimport type { Realm } from \"../realm.js\";\nimport type { ObjectRefCount, AdditionalFunctionEffects } from \"./types.js\";\nimport type { ResidualHeapValueIdentifiers } from \"./ResidualHeapValueIdentifiers\";\n\nimport invariant from \"../invariant.js\";\nimport {\n  Value,\n  EmptyValue,\n  FunctionValue,\n  AbstractValue,\n  SymbolValue,\n  ProxyValue,\n  ObjectValue,\n} from \"../values/index.js\";\nimport { HeapInspector } from \"../utils/HeapInspector.js\";\nimport { ResidualHeapVisitor } from \"./ResidualHeapVisitor.js\";\n\ntype Edge = {\n  fromId: number,\n  toId: number,\n};\n\n/**\n * Generate a visualizable objects graph for Prepack heap.\n */\nexport class ResidualHeapGraphGenerator extends ResidualHeapVisitor {\n  constructor(\n    realm: Realm,\n    logger: Logger,\n    modules: Modules,\n    additionalFunctionValuesAndEffects: Map<FunctionValue, AdditionalFunctionEffects>,\n    valueIdentifiers: ResidualHeapValueIdentifiers,\n    valueToEdgeRecord: Map<Value, ObjectRefCount>\n  ) {\n    super(realm, logger, modules, additionalFunctionValuesAndEffects);\n    this._valueToEdgeRecord = valueToEdgeRecord;\n    this._valueIdentifiers = valueIdentifiers;\n    this._visitedValues = new Set();\n    this._valueIds = new Map();\n    this._idSeed = 0;\n    this._path = [];\n    this._edges = [];\n  }\n\n  _valueIdentifiers: ResidualHeapValueIdentifiers;\n  _valueToEdgeRecord: Map<Value, ObjectRefCount>;\n  _valueIds: Map<Value, number>;\n  _idSeed: number;\n  _visitedValues: Set<Value>;\n  _path: Array<Value>; // Contains the path of nodes from root to current visiting node.\n  _edges: Array<Edge>;\n\n  // Override.\n  preProcessValue(val: Value): boolean {\n    if (this._shouldIgnore(val)) {\n      return true;\n    }\n    this._updateEdge(val);\n\n    if (this._visitedValues.has(val)) {\n      return false; // Already visited.\n    }\n    this._visitedValues.add(val);\n    return true;\n  }\n\n  // Override.\n  postProcessValue(val: Value): void {\n    if (this._shouldIgnore(val)) {\n      return;\n    }\n    invariant(this._path.length > 0);\n    this._path.pop();\n  }\n\n  _getValueId(val: Value): number {\n    let id = this._valueIds.get(val);\n    if (id === undefined) {\n      this._valueIds.set(val, ++this._idSeed);\n      id = this._idSeed;\n    }\n    return id;\n  }\n\n  _shouldIgnore(val: Value): boolean {\n    return val instanceof EmptyValue || val.isIntrinsic() || HeapInspector.isLeaf(val);\n  }\n\n  _updateEdge(val: Value): void {\n    if (this._path.length > 0) {\n      const parent = this._path[this._path.length - 1];\n      this._edges.push({ fromId: this._getValueId(parent), toId: this._getValueId(val) });\n    }\n    this._path.push(val);\n  }\n\n  _getValueLabel(val: Value): string {\n    // TODO: does not use ref count yet, figure out how to best visualize it later.\n    const serializedId = this._valueIdentifiers.getIdentifier(val);\n    invariant(serializedId);\n    return val.__originalName !== undefined ? `${serializedId.name}(${val.__originalName})` : serializedId.name;\n  }\n\n  _generateDotGraphData(nodes: Set<Value>, edges: Array<Edge>): string {\n    let content = \"digraph{\\n\";\n    for (const val of nodes) {\n      const nodeId = this._getValueId(val);\n      content += `  node${nodeId} [shape=${this._getValueShape(val)} label=${this._getValueLabel(val)}];\\n`;\n    }\n    for (const edge of edges) {\n      content += `  node${edge.fromId} -> node${edge.toId};\\n`;\n    }\n    content += \"}\";\n    return content;\n  }\n\n  _generateVisJSGraphData(nodes: Set<Value>, edges: Array<Edge>): string {\n    let nodesData = [];\n    let edgesData = [];\n\n    for (let node of nodes) {\n      const nodeId = this._getValueId(node);\n      let nodeData = {\n        id: `${nodeId}`,\n        label: this._getValueLabel(node),\n        shape: this._getValueShape(node),\n        color: this._getValueColor(node),\n      };\n      nodesData.push(nodeData);\n    }\n\n    for (let [index, edge] of edges.entries()) {\n      let edgeData = {\n        id: index,\n        from: `${edge.fromId}`,\n        to: `${edge.toId}`,\n        arrows: \"to\",\n      };\n      edgesData.push(edgeData);\n    }\n\n    let graphData = {\n      nodes: nodesData,\n      edges: edgesData,\n    };\n    return JSON.stringify(graphData);\n  }\n\n  // TODO: find a way to comment the meaning of shape => value mapping in final graph language.\n  _getValueShape(val: Value): string {\n    let shape = null;\n    if (val instanceof FunctionValue) {\n      shape = \"circle\";\n    } else if (val instanceof AbstractValue) {\n      shape = \"diamond\";\n    } else if (val instanceof ProxyValue) {\n      shape = \"triangle\";\n    } else if (val instanceof SymbolValue) {\n      shape = \"star\";\n    } else if (val instanceof ObjectValue) {\n      shape = \"box\";\n    } else {\n      shape = \"ellipse\";\n    }\n    return shape;\n  }\n\n  // TODO: find a way to comment the meaning of shape => value mapping in final graph language.\n  _getValueColor(val: Value): string {\n    let shape = null;\n    if (val instanceof FunctionValue) {\n      shape = \"red\";\n    } else if (val instanceof AbstractValue) {\n      shape = \"green\";\n    } else if (val instanceof ProxyValue) {\n      shape = \"orange\";\n    } else if (val instanceof SymbolValue) {\n      shape = \"yellow\";\n    } else if (val instanceof ObjectValue) {\n      shape = \"#3BB9FF\"; // light blue\n    } else {\n      shape = \"grey\";\n    }\n    return shape;\n  }\n\n  generateResult(heapGraphFormat: \"DotLanguage\" | \"VISJS\"): string {\n    return heapGraphFormat === \"DotLanguage\"\n      ? this._generateDotGraphData(this._visitedValues, this._edges)\n      : this._generateVisJSGraphData(this._visitedValues, this._edges);\n  }\n}\n"],"file":"ResidualHeapGraphGenerator.js"}