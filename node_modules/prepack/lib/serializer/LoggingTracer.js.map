{"version":3,"sources":["../../src/serializer/LoggingTracer.js"],"names":["describeValue","realm","v","NumberValue","BooleanValue","value","toString","UndefinedValue","NullValue","StringValue","JSON","stringify","FunctionValue","To","ToStringPartial","ObjectValue","AbstractValue","LoggingTracer","Tracer","constructor","nesting","log","message","console","map","_","join","beginEvaluateForEffects","state","push","endEvaluateForEffects","effects","name","pop","beforeCall","F","thisArgument","argumentsList","newTarget","afterCall","result","ThrowCompletion","beginOptimizingFunction","optimizedFunctionId","functionValue","intrinsicName","expressionLocation","endOptimizingFunction"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Reference } from \"../environment.js\";\nimport { Realm, Tracer } from \"../realm.js\";\nimport type { Effects } from \"../realm.js\";\nimport { Get } from \"../methods/index.js\";\nimport { ThrowCompletion, AbruptCompletion } from \"../completions.js\";\nimport {\n  FunctionValue,\n  Value,\n  NumberValue,\n  BooleanValue,\n  StringValue,\n  UndefinedValue,\n  NullValue,\n  ObjectValue,\n  AbstractValue,\n} from \"../values/index.js\";\nimport { To } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport { stringOfLocation } from \"../utils/babelhelpers.js\";\n\nfunction describeValue(realm: Realm, v: Value): string {\n  if (v instanceof NumberValue || v instanceof BooleanValue) return v.value.toString();\n  if (v instanceof UndefinedValue) return \"undefined\";\n  if (v instanceof NullValue) return \"null\";\n  if (v instanceof StringValue) return JSON.stringify(v.value);\n  if (v instanceof FunctionValue) return To.ToStringPartial(realm, Get(realm, v, \"name\")) || \"(anonymous function)\";\n  if (v instanceof ObjectValue) return \"(some object)\";\n  if (v instanceof AbstractValue) return \"(some abstract value)\";\n  invariant(false);\n}\n\nexport class LoggingTracer extends Tracer {\n  constructor(realm: Realm) {\n    super();\n    this.realm = realm;\n    this.nesting = [];\n  }\n\n  realm: Realm;\n  nesting: Array<string>;\n\n  log(message: string): void {\n    console.log(`[calls] ${this.nesting.map(_ => \"  \").join(\"\")}${message}`);\n  }\n\n  beginEvaluateForEffects(state: any): void {\n    this.log(`>evaluate for effects`);\n    this.nesting.push(\"(evaluate for effects)\");\n  }\n\n  endEvaluateForEffects(state: any, effects: void | Effects): void {\n    let name = this.nesting.pop();\n    invariant(name === \"(evaluate for effects)\");\n    this.log(`<evaluate for effects`);\n  }\n\n  beforeCall(\n    F: FunctionValue,\n    thisArgument: void | Value,\n    argumentsList: Array<Value>,\n    newTarget: void | ObjectValue\n  ): void {\n    let realm = this.realm;\n    let name = describeValue(realm, F);\n    this.log(`>${name}(${argumentsList.map(v => describeValue(realm, v)).join(\", \")})`);\n    this.nesting.push(name);\n  }\n\n  afterCall(\n    F: FunctionValue,\n    thisArgument: void | Value,\n    argumentsList: Array<Value>,\n    newTarget: void | ObjectValue,\n    result: void | Reference | Value | AbruptCompletion\n  ): void {\n    let name = this.nesting.pop();\n    this.log(`<${name}${result instanceof ThrowCompletion ? \": error\" : \"\"}`);\n  }\n\n  beginOptimizingFunction(optimizedFunctionId: number, functionValue: FunctionValue): void {\n    this.log(\n      `>Starting Optimized Function ${optimizedFunctionId} ${\n        functionValue.intrinsicName ? functionValue.intrinsicName : \"[unknown name]\"\n      } ${functionValue.expressionLocation ? stringOfLocation(functionValue.expressionLocation) : \"\"}`\n    );\n  }\n\n  endOptimizingFunction(optimizedFunctionId: number): void {\n    this.log(`<Ending Optimized Function ${optimizedFunctionId}`);\n  }\n}\n"],"file":"LoggingTracer.js"}