{"version":3,"sources":["../../src/serializer/ResidualReactElementVisitor.js"],"names":["ResidualReactElementVisitor","constructor","realm","residualHeapVisitor","reactOutput","react","output","defaultEquivalenceSet","reactEquivalenceSet","ReactEquivalenceSet","reactElementEquivalenceSet","ReactElementSet","reactPropsEquivalenceSet","ReactPropsSet","visitReactElement","reactElement","reactElementData","reactElements","get","undefined","firstRenderOnly","isReactFragment","visitType","typeValue","reactElementStringTypeReferences","StringValue","has","value","reference","AbstractValue","visitValue","SymbolValue","visitKey","keyValue","visitRef","refValue","visitAbstractOrPartialProps","propsValue","visitConcreteProps","propName","binding","properties","descriptor","propValue","visitChildNode","childValue","reactLibraryObject","_getReactLibraryValue","ObjectValue","createElement","reactCreateElement","_visitInUnrelatedScope","globalGenerator","withCleanEquivalenceSet","func","saveEquivalenceSet","loadEquivalenceSet","save","result","wasTemporalAliasDeclaredInCurrentScope","temporalAlias","scope","FunctionValue","values","i","_entries","length","entry","TemporalOperationEntry","declared","fbLibraries"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { Realm } from \"../realm.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  FunctionValue,\n  ObjectValue,\n  StringValue,\n  SymbolValue,\n  Value,\n} from \"../values/index.js\";\nimport { ResidualHeapVisitor } from \"./ResidualHeapVisitor.js\";\nimport { determineIfReactElementCanBeHoisted } from \"../react/hoisting.js\";\nimport { traverseReactElement } from \"../react/elements.js\";\nimport {\n  canExcludeReactElementObjectProperty,\n  getProperty,\n  getReactSymbol,\n  hardModifyReactObjectPropertyBinding,\n} from \"../react/utils.js\";\nimport invariant from \"../invariant.js\";\nimport { TemporalOperationEntry } from \"../utils/generator.js\";\nimport { ReactEquivalenceSet } from \"../react/ReactEquivalenceSet.js\";\nimport { ReactElementSet } from \"../react/ReactElementSet.js\";\nimport { ReactPropsSet } from \"../react/ReactPropsSet.js\";\nimport type { ReactOutputTypes } from \"../options.js\";\nimport { Get } from \"../methods/index.js\";\n\nexport opaque type ReactEquivalenceSetSave = {|\n  +reactEquivalenceSet: ReactEquivalenceSet,\n  +reactElementEquivalenceSet: ReactElementSet,\n  +reactPropsEquivalenceSet: ReactPropsSet,\n|};\n\nexport class ResidualReactElementVisitor {\n  constructor(realm: Realm, residualHeapVisitor: ResidualHeapVisitor) {\n    this.realm = realm;\n    this.residualHeapVisitor = residualHeapVisitor;\n    this.reactOutput = realm.react.output || \"create-element\";\n    this.defaultEquivalenceSet = true;\n    this.reactEquivalenceSet = new ReactEquivalenceSet(realm, this);\n    this.reactElementEquivalenceSet = new ReactElementSet(realm, this.reactEquivalenceSet);\n    this.reactPropsEquivalenceSet = new ReactPropsSet(realm, this.reactEquivalenceSet);\n  }\n\n  realm: Realm;\n  residualHeapVisitor: ResidualHeapVisitor;\n  reactOutput: ReactOutputTypes;\n  defaultEquivalenceSet: boolean;\n  reactEquivalenceSet: ReactEquivalenceSet;\n  reactElementEquivalenceSet: ReactElementSet;\n  reactPropsEquivalenceSet: ReactPropsSet;\n\n  visitReactElement(reactElement: ObjectValue): void {\n    let reactElementData = this.realm.react.reactElements.get(reactElement);\n    invariant(reactElementData !== undefined);\n    let { firstRenderOnly } = reactElementData;\n    let isReactFragment = false;\n\n    traverseReactElement(this.realm, reactElement, {\n      visitType: (typeValue: Value) => {\n        let reactElementStringTypeReferences = this.realm.react.reactElementStringTypeReferences;\n\n        // If the type is a text value, and we have a derived reference for it\n        // then use that derived reference instead of the string value. This is\n        // primarily designed around RCTView and RCTText, which are string values\n        // for RN apps, but are treated as special host components.\n        if (typeValue instanceof StringValue && reactElementStringTypeReferences.has(typeValue.value)) {\n          let reference = reactElementStringTypeReferences.get(typeValue.value);\n          invariant(reference instanceof AbstractValue);\n          hardModifyReactObjectPropertyBinding(this.realm, reactElement, \"type\", reference);\n          this.residualHeapVisitor.visitValue(reference);\n          return;\n        }\n        isReactFragment =\n          typeValue instanceof SymbolValue && typeValue === getReactSymbol(\"react.fragment\", this.realm);\n        // we don't want to visit fragments as they are internal values\n        if (!isReactFragment) {\n          this.residualHeapVisitor.visitValue(typeValue);\n        }\n      },\n      visitKey: (keyValue: Value) => {\n        this.residualHeapVisitor.visitValue(keyValue);\n      },\n      visitRef: (refValue: Value) => {\n        if (!firstRenderOnly) {\n          this.residualHeapVisitor.visitValue(refValue);\n        }\n      },\n      visitAbstractOrPartialProps: (propsValue: AbstractValue | ObjectValue) => {\n        this.residualHeapVisitor.visitValue(propsValue);\n      },\n      visitConcreteProps: (propsValue: ObjectValue) => {\n        for (let [propName, binding] of propsValue.properties) {\n          invariant(propName !== \"key\" && propName !== \"ref\", `\"${propName}\" is a reserved prop name`);\n          if (binding.descriptor === undefined || propName === \"children\") {\n            continue;\n          }\n          let propValue = getProperty(this.realm, propsValue, propName);\n          if (canExcludeReactElementObjectProperty(this.realm, reactElement, propName, propValue)) {\n            continue;\n          }\n          this.residualHeapVisitor.visitValue(propValue);\n        }\n      },\n      visitChildNode: (childValue: Value) => {\n        this.residualHeapVisitor.visitValue(childValue);\n      },\n    });\n\n    // Our serializer requires that every value we serialize must first be visited in every scope where it appears. In\n    // our React element serializer we serialize some values (namely `React.createElement` and `React.Fragment`) that do\n    // not necessarily appear in our source code. We must manually visit these values in our visitor pass for the values\n    // to be serializable.\n    if (this.realm.react.output === \"create-element\") {\n      const reactLibraryObject = this._getReactLibraryValue();\n      invariant(reactLibraryObject instanceof ObjectValue);\n      const createElement = reactLibraryObject.properties.get(\"createElement\");\n      invariant(createElement !== undefined);\n      const reactCreateElement = Get(this.realm, reactLibraryObject, \"createElement\");\n      // Our `createElement` value will be used in the prelude of the optimized function we serialize to initialize\n      // our hoisted React elements. So we need to ensure that we visit our value in a scope above our own to allow\n      // the function to be used in our optimized function prelude. We use our global scope to accomplish this. We are\n      // a \"friend\" class of `ResidualHeapVisitor` so we call one of its private methods.\n      this.residualHeapVisitor._visitInUnrelatedScope(this.residualHeapVisitor.globalGenerator, reactCreateElement);\n    }\n    if (isReactFragment) {\n      const reactLibraryObject = this._getReactLibraryValue();\n      // Our `React.Fragment` value will be used in the function to lazily initialize hoisted JSX elements. So we need\n      // to visit the library in our global generator so that it is available when creating the hoisted elements.\n      this.residualHeapVisitor._visitInUnrelatedScope(this.residualHeapVisitor.globalGenerator, reactLibraryObject);\n    }\n\n    // determine if this ReactElement node tree is going to be hoistable\n    determineIfReactElementCanBeHoisted(this.realm, reactElement, this.residualHeapVisitor);\n  }\n\n  withCleanEquivalenceSet(func: () => void): void {\n    let defaultEquivalenceSet = this.defaultEquivalenceSet;\n    let reactEquivalenceSet = this.reactEquivalenceSet;\n    let reactElementEquivalenceSet = this.reactElementEquivalenceSet;\n    let reactPropsEquivalenceSet = this.reactPropsEquivalenceSet;\n    this.defaultEquivalenceSet = false;\n    this.reactEquivalenceSet = new ReactEquivalenceSet(this.realm, this);\n    this.reactElementEquivalenceSet = new ReactElementSet(this.realm, this.reactEquivalenceSet);\n    this.reactPropsEquivalenceSet = new ReactPropsSet(this.realm, this.reactEquivalenceSet);\n    func();\n    // Cleanup\n    this.defaultEquivalenceSet = defaultEquivalenceSet;\n    this.reactEquivalenceSet = reactEquivalenceSet;\n    this.reactElementEquivalenceSet = reactElementEquivalenceSet;\n    this.reactPropsEquivalenceSet = reactPropsEquivalenceSet;\n  }\n\n  saveEquivalenceSet(): ReactEquivalenceSetSave {\n    const { reactEquivalenceSet, reactElementEquivalenceSet, reactPropsEquivalenceSet } = this;\n    return { reactEquivalenceSet, reactElementEquivalenceSet, reactPropsEquivalenceSet };\n  }\n\n  loadEquivalenceSet<T>(save: ReactEquivalenceSetSave, func: () => T): T {\n    const defaultEquivalenceSet = this.defaultEquivalenceSet;\n    const reactEquivalenceSet = this.reactEquivalenceSet;\n    const reactElementEquivalenceSet = this.reactElementEquivalenceSet;\n    const reactPropsEquivalenceSet = this.reactPropsEquivalenceSet;\n    this.defaultEquivalenceSet = false;\n    this.reactEquivalenceSet = save.reactEquivalenceSet;\n    this.reactElementEquivalenceSet = save.reactElementEquivalenceSet;\n    this.reactPropsEquivalenceSet = save.reactPropsEquivalenceSet;\n    const result = func();\n    // Cleanup\n    this.defaultEquivalenceSet = defaultEquivalenceSet;\n    this.reactEquivalenceSet = reactEquivalenceSet;\n    this.reactElementEquivalenceSet = reactElementEquivalenceSet;\n    this.reactPropsEquivalenceSet = reactPropsEquivalenceSet;\n    return result;\n  }\n\n  wasTemporalAliasDeclaredInCurrentScope(temporalAlias: AbstractObjectValue): boolean {\n    let scope = this.residualHeapVisitor.scope;\n    if (scope instanceof FunctionValue) {\n      return false;\n    }\n    // If the temporal has already been visited, then we know the temporal\n    // value was used and thus declared in another scope\n    if (this.residualHeapVisitor.values.has(temporalAlias)) {\n      return false;\n    }\n    // Otherwise, we check the current scope and see if the\n    // temporal value was declared in one of the entries\n    for (let i = 0; i < scope._entries.length; i++) {\n      let entry = scope._entries[i];\n      if (entry instanceof TemporalOperationEntry) {\n        if (entry.declared === temporalAlias) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  _getReactLibraryValue() {\n    const reactLibraryObject = this.realm.fbLibraries.react;\n    invariant(reactLibraryObject, \"Unable to find React library reference in scope.\");\n    return reactLibraryObject;\n  }\n}\n"],"file":"ResidualReactElementVisitor.js"}