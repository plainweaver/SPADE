{"version":3,"sources":["../../src/serializer/factorify.js"],"names":["isLiteral","node","type","operator","argument","isSameNode","left","right","name","Object","is","value","getObjectKeys","obj","keys","prop","properties","key","push","computed","indexOf","join","factorifyObjects","body","factoryNameGenerator","signatures","create","declar","declarations","init","initializerAstNodeName","declars","expr","expression","signatureKey","length","split","rootFactoryParams","rootFactoryProps","keyIndex","id","t","identifier","keyNode","isValidIdentifier","stringLiteral","objectProperty","rootFactoryId","generate","rootFactoryBody","blockStatement","returnStatement","objectExpression","rootFactory","functionDeclaration","unshift","args","callExpression","seen","Set","has","common","mostSharedArgsLength","declar2","initializerAstNodeName2","sharedArgs","i","arguments","Math","max","sharedPairs","pair","highestPairArgs","highestPairCount","pairArgs","undefined","declarsSub","removeArgs","subFactoryArgs","subFactoryParams","arg","subFactoryId","subFactoryBody","subFactory","add","call","callee","filter","val"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport * as t from \"@babel/types\";\nimport type { BabelNodeStatement, BabelNodeObjectExpression, BabelNodeLVal } from \"@babel/types\";\nimport { NameGenerator } from \"../utils/NameGenerator\";\n\nfunction isLiteral(node) {\n  switch (node.type) {\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n      return true;\n    case \"UnaryExpression\":\n      return node.operator === \"void\" && isLiteral(node.argument);\n    default:\n      return false;\n  }\n}\n\nfunction isSameNode(left, right) {\n  let type = left.type;\n\n  if (type !== right.type) {\n    return false;\n  }\n\n  if (type === \"Identifier\") {\n    return left.name === right.name;\n  }\n\n  if (type === \"NullLiteral\") {\n    return true;\n  }\n\n  if (type === \"BooleanLiteral\" || type === \"StringLiteral\" || type === \"NumericLiteral\") {\n    return Object.is(left.value, right.value);\n  }\n\n  if (type === \"UnaryExpression\") {\n    return (\n      left.operator === \"void\" && right.operator === \"void\" && isLiteral(left.argument) && isLiteral(right.argument)\n    );\n  }\n\n  return false;\n}\n\nfunction getObjectKeys(obj: BabelNodeObjectExpression): string | false {\n  let keys = [];\n\n  for (let prop of obj.properties) {\n    if (prop.type !== \"ObjectProperty\") return false;\n\n    let key = prop.key;\n    if (key.type === \"StringLiteral\") {\n      keys.push(key.value);\n    } else if (key.type === \"Identifier\") {\n      if (prop.computed) return false;\n      keys.push(key.name);\n    } else {\n      return false;\n    }\n  }\n\n  for (let key of keys) {\n    if (key.indexOf(\"|\") >= 0) return false;\n  }\n\n  return keys.join(\"|\");\n}\n\n// This function looks for recurring initialization patterns in the code of the form\n//   var x = { a: literal1, b: literal2 }\n//   var y = { a: literal1, b: literal3 }\n// and transforms them into something like\n//   function factory(b) { return { a: literal1, b } }\n//   var x = factory(literal2);\n//   var y = factory(literal3);\n// TODO #884: Right now, the visitor below only looks into top-level variable declaration\n// with a flat object literal initializer.\n// It should also look into conditional control flow, residual functions, and nested object literals.\nexport function factorifyObjects(body: Array<BabelNodeStatement>, factoryNameGenerator: NameGenerator): void {\n  let signatures = Object.create(null);\n\n  for (let node of body) {\n    switch (node.type) {\n      case \"VariableDeclaration\":\n        for (let declar of node.declarations) {\n          let { init } = declar;\n          if (!init) continue;\n          if (init.type !== \"ObjectExpression\") continue;\n\n          let keys = getObjectKeys(init);\n          if (!keys) continue;\n\n          let initializerAstNodeName = \"init\";\n          let declars = (signatures[keys] = signatures[keys] || []);\n          declars.push({ declar, initializerAstNodeName });\n        }\n        break;\n\n      case \"ExpressionStatement\":\n        const expr = node.expression;\n        if (expr.type !== \"AssignmentExpression\") {\n          break;\n        }\n        const { right } = expr;\n        if (right.type !== \"ObjectExpression\") {\n          break;\n        }\n\n        let keys = getObjectKeys(right);\n        if (!keys) continue;\n\n        let initializerAstNodeName = \"right\";\n        let declars = (signatures[keys] = signatures[keys] || []);\n        declars.push({ declar: node.expression, initializerAstNodeName });\n        break;\n\n      default:\n        // Continue to next node.\n        break;\n    }\n  }\n\n  for (let signatureKey in signatures) {\n    let declars = signatures[signatureKey];\n    if (declars.length < 5) continue;\n\n    let keys = signatureKey.split(\"|\");\n\n    let rootFactoryParams: Array<BabelNodeLVal> = [];\n    let rootFactoryProps = [];\n    for (let keyIndex = 0; keyIndex < keys.length; keyIndex++) {\n      let key = keys[keyIndex];\n      let id = t.identifier(`__${keyIndex}`);\n      rootFactoryParams.push(id);\n      let keyNode = t.isValidIdentifier(key) ? t.identifier(key) : t.stringLiteral(key);\n      rootFactoryProps.push(t.objectProperty(keyNode, id));\n    }\n\n    let rootFactoryId = t.identifier(factoryNameGenerator.generate(\"root\"));\n    let rootFactoryBody = t.blockStatement([t.returnStatement(t.objectExpression(rootFactoryProps))]);\n    let rootFactory = t.functionDeclaration(rootFactoryId, rootFactoryParams, rootFactoryBody);\n    body.unshift(rootFactory);\n\n    for (let { declar, initializerAstNodeName } of declars) {\n      let args = [];\n      for (let prop of declar[initializerAstNodeName].properties) {\n        args.push(prop.value);\n      }\n\n      declar[initializerAstNodeName] = t.callExpression(rootFactoryId, args);\n    }\n\n    let seen = new Set();\n    for (let { declar, initializerAstNodeName } of declars) {\n      if (seen.has(declar)) continue;\n\n      // build up a map containing the arguments that are shared\n      let common = [];\n      let mostSharedArgsLength = 0;\n      for (let { declar: declar2, initializerAstNodeName: initializerAstNodeName2 } of declars) {\n        if (seen.has(declar2)) continue;\n        if (declar === declar2) continue;\n\n        let sharedArgs = [];\n        for (let i = 0; i < keys.length; i++) {\n          if (isSameNode(declar[initializerAstNodeName].arguments[i], declar2[initializerAstNodeName2].arguments[i])) {\n            sharedArgs.push(i);\n          }\n        }\n        if (!sharedArgs.length) continue;\n\n        mostSharedArgsLength = Math.max(mostSharedArgsLength, sharedArgs.length);\n        common.push({ declar: declar2, initializerAstNodeName: initializerAstNodeName2, sharedArgs });\n      }\n\n      // build up a mapping of the argument positions that are shared so we can pick the top one\n      let sharedPairs = Object.create(null);\n      for (let { declar: declar2, initializerAstNodeName: initializerAstNodeName2, sharedArgs } of common) {\n        if (sharedArgs.length === mostSharedArgsLength) {\n          sharedArgs = sharedArgs.join(\",\");\n          let pair = (sharedPairs[sharedArgs] = sharedPairs[sharedArgs] || [{ declar, initializerAstNodeName }]);\n          pair.push({ declar: declar2, initializerAstNodeName: initializerAstNodeName2 });\n        }\n      }\n\n      // get the highest pair\n      let highestPairArgs;\n      let highestPairCount;\n      for (let pairArgs in sharedPairs) {\n        let pair = sharedPairs[pairArgs];\n        if (highestPairArgs === undefined || pair.length > highestPairCount) {\n          highestPairCount = pair.length;\n          highestPairArgs = pairArgs;\n        }\n      }\n      if (highestPairArgs === undefined) continue;\n\n      let declarsSub = sharedPairs[highestPairArgs];\n      let removeArgs = highestPairArgs.split(\",\");\n\n      let subFactoryArgs = [];\n      let subFactoryParams = [];\n      let sharedArgs = declar[initializerAstNodeName].arguments;\n      for (let i = 0; i < sharedArgs.length; i++) {\n        let arg = sharedArgs[i];\n        if (removeArgs.indexOf(i + \"\") >= 0) {\n          subFactoryArgs.push(arg);\n        } else {\n          let id = t.identifier(`__${i}`);\n          subFactoryArgs.push(id);\n          subFactoryParams.push(id);\n        }\n      }\n\n      let subFactoryId = t.identifier(factoryNameGenerator.generate(\"sub\"));\n      let subFactoryBody = t.blockStatement([t.returnStatement(t.callExpression(rootFactoryId, subFactoryArgs))]);\n      let subFactory = t.functionDeclaration(subFactoryId, subFactoryParams, subFactoryBody);\n      body.unshift(subFactory);\n\n      for (let { declar: declar2, initializerAstNodeName: initializerAstNodeName2 } of declarsSub) {\n        seen.add(declar2);\n\n        let call = declar2[initializerAstNodeName2];\n        call.callee = subFactoryId;\n        call.arguments = call.arguments.filter(function(val, i) {\n          return removeArgs.indexOf(i + \"\") < 0;\n        });\n      }\n    }\n  }\n}\n"],"file":"factorify.js"}