{"version":3,"sources":["../../src/serializer/ResidualHeapValueIdentifiers.js"],"names":["ResidualHeapValueIdentifiers","constructor","values","preludeGenerator","collectValToRefCountOnly","_valueNameGenerator","createNameGenerator","_populateIdentifierMap","initPass1","valToRefCount","Map","initPass2","refs","val","_setIdentifier","_createNewIdentifier","name","generate","__originalName","t","identifier","id","has","set","hasIdentifier","getIdentifier","get","undefined","deleteIdentifier","delete","getIdentifierAndIncrementReferenceCount","incrementReferenceCount","refCount","needsIdentifier"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { Value } from \"../values/index.js\";\nimport type { BabelNodeIdentifier } from \"@babel/types\";\nimport invariant from \"../invariant.js\";\nimport type { PreludeGenerator } from \"../utils/PreludeGenerator.js\";\nimport type { NameGenerator } from \"../utils/NameGenerator.js\";\nimport * as t from \"@babel/types\";\n\n// This class maintains a map of values to babel identifiers.\n// This class can optionally track how often such value identifiers are referenced\n// when pass 1 is activated, which is usually followed by pass 2 in which\n// unneeded identifiers (those which were only ever referenced once) are\n// eliminated as the defining expression can be inlined.\nexport class ResidualHeapValueIdentifiers {\n  constructor(values: Iterator<Value>, preludeGenerator: PreludeGenerator) {\n    this.collectValToRefCountOnly = false;\n    this._valueNameGenerator = preludeGenerator.createNameGenerator(\"_\");\n    this._populateIdentifierMap(values);\n  }\n\n  initPass1(): void {\n    this.collectValToRefCountOnly = true;\n    this.valToRefCount = new Map();\n  }\n\n  initPass2(): void {\n    this.collectValToRefCountOnly = false;\n  }\n\n  collectValToRefCountOnly: boolean;\n  valToRefCount: void | Map<Value, number>;\n  refs: Map<Value, BabelNodeIdentifier>;\n  _valueNameGenerator: NameGenerator;\n\n  _populateIdentifierMap(values: Iterator<Value>): void {\n    this.refs = new Map();\n    for (const val of values) {\n      this._setIdentifier(val, this._createNewIdentifier(val));\n    }\n  }\n\n  _createNewIdentifier(val: Value): BabelNodeIdentifier {\n    const name = this._valueNameGenerator.generate(val.__originalName || \"\");\n    return t.identifier(name);\n  }\n\n  _setIdentifier(val: Value, id: BabelNodeIdentifier) {\n    invariant(!this.refs.has(val));\n    this.refs.set(val, id);\n  }\n\n  hasIdentifier(val: Value): boolean {\n    return this.refs.has(val);\n  }\n\n  getIdentifier(val: Value): BabelNodeIdentifier {\n    let id = this.refs.get(val);\n    invariant(id !== undefined);\n    return id;\n  }\n\n  deleteIdentifier(val: Value): void {\n    invariant(this.refs.has(val));\n    this.refs.delete(val);\n  }\n\n  getIdentifierAndIncrementReferenceCount(val: Value): BabelNodeIdentifier {\n    this.incrementReferenceCount(val);\n    let id = this.refs.get(val);\n    invariant(id !== undefined, \"Value Id cannot be null or undefined\");\n    return id;\n  }\n\n  incrementReferenceCount(val: Value): void {\n    if (this.collectValToRefCountOnly) {\n      let valToRefCount = this.valToRefCount;\n      invariant(valToRefCount !== undefined);\n      let refCount = valToRefCount.get(val);\n      if (refCount !== undefined) {\n        refCount++;\n      } else {\n        refCount = 1;\n      }\n      valToRefCount.set(val, refCount);\n    }\n  }\n\n  needsIdentifier(val: Value): boolean {\n    if (this.collectValToRefCountOnly || this.valToRefCount === undefined) return true;\n    let refCount = this.valToRefCount.get(val);\n    invariant(refCount !== undefined && refCount > 0);\n    return refCount !== 1;\n  }\n}\n"],"file":"ResidualHeapValueIdentifiers.js"}