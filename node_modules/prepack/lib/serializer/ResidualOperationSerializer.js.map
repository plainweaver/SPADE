{"version":3,"sources":["../../src/serializer/ResidualOperationSerializer.js"],"names":["serializeBody","generator","context","valuesToProcess","statements","serializeGenerator","length","type","t","blockStatement","isSelfReferential","value","pathNode","AbstractValue","undefined","v","args","ResidualOperationSerializer","constructor","realm","preludeGenerator","getErrorStatement","message","invariantMode","throwStatement","newExpression","memoizeReference","targetReference","i","indexOf","s","substr","x","Number","parseInt","push","isNaN","stringLiteral","numericLiteral","expressionStatement","callExpression","serializeStatement","operationDescriptor","nodes","declaredId","data","babelNode","_serializeAssumeCall","_serializeConcreteModel","_serializeConditionalPropertyAssignment","_serializeConditionalThrow","_serializeConsoleLog","_serializeDefineProperty","_serializeDoWhile","_serializeEmitCall","_serializeEmitPropertyAssignment","_serializeForIn","_serializeGlobalAssignment","_serializeGlobalDelete","_serializeJoinGenerators","_serializeLocalAssignment","emptyStatement","_serializeObjectSetPartial","_serializePropertyAssignment","_serializePropertyDelete","_serializeThrow","_serializeInvariant","variableDeclaration","variableDeclarator","identifier","regExpLiteral","booleanLiteral","babelNodeExpression","serializeExpression","_serializeDerivedOperationDescriptor","_serializeVoidOperationDescriptor","_serializeIdentifier","_serializeRebuiltObject","_serializeBinaryExpression","_serializeLogicalExpression","_serializeConditionalExpression","_serializeUnaryExpression","_serializeAbstractProperty","_serializeAbstractFromTemplate","_serializeCoerceToString","_serializeObjectAssign","_serializeSingleArg","_serializeCallBailout","_serializeEmitCallAndCaptureResults","_serializeNewExpression","_serializeForFunctionCall","_serializeGetBinding","_serializeUnknownArrayMethodCall","_serializeUnknownArrayMethodPropertyCall","_serializeUnknownArrayLength","_serializeUnknownArrayGetPartial","_serializeObjectGetPartial","_serializeAbstractObjectGetPartial","_serializeAbstractObjectGetProtoOf","_serializeAbstractObjectGet","_serializeObjectProtoHasOwnProperty","_serializeObjectProtoGetOwnPropertyDescriptor","_serializeDirectCallWithArgList","_serializeCallAbstractFunc","_serializeCallAbstractFuncThis","_serializeLogicalPropertyAssignment","_serializeUpdateIncrementor","_serializeModulesRequires","_serializeResidualCall","_serializeCannotBecomeObject","_serializeWidenProperty","_serializeWidenPropertyAssignment","_serializeDerivedAbstractInvariant","_serializePropertyInvariant","_serializeInvariantAppend","_serializeFullInvariant","_serializeFullInvariantAbstract","_serializeFullInvariantFunction","_serializeReactDefaultPropsHelper","_serializeReactRenderValueHelper","_serializeReactSSRTemplateLiteral","_serializeReactTemporalFunc","_serializeReactCreateContextProvider","_serializeReactNativeStringLiteral","_serializeReactRelayMockContainer","_serializeFBMocksBootloaderLoadModules","_serializeFBMocksMagicGlobalFunction","_serializeBabelHelpersObjectWithoutProperties","c","errorLiteral","ifStatement","unaryExpression","o","propName","assignmentExpression","_serializeWidenAbstractProperty","p","propertyGetter","P","memberExpression","getPrototypeOf","isCompatibleWith","MOBILE_JSC_VERSION","protoExpression","n","callFunc","slice","valueNode","propString","globalReference","testId","intrinsicName","block","doWhileStatement","boundName","lh","obj","tgt","src","forInStatement","objectNode","binaryExpression","concreteComparisons","typeComparisons","checks","map","concreteValue","valueToNode","serialize","concat","typeValue","typeString","Utils","typeToString","reduce","expr","newCondition","logicalExpression","state","incrementor","oldValNode","typeOfStringNode","typeofNode","typeofString","condition","nullExpression","appendLastToInvariantOperationDescriptor","violationConditionOperationDescriptor","messageComponents","nextInvariantId","last","pop","throwString","consequent","reactRelayIdent","otherArgs","path","e","keyKey","mightHaveBeenDeleted","mightBeUndefined","r","emptyTest","undefinedTest","voidExpression","inTest","guard","deleteIt","propertyBinding","Value","key","addEmpty","conditionalExpression","emptyExpression","id","consumerNode","renderNode","_args","fun_args","methodNode","nameNode","node","isValidIdentifier","object","descriptor","emitDefinePropertyBody","keyNode","objNode","propRemoveNode","argument","createStatement","val","kind","serializeValue","cond","trueVal","falseVal","condVal","trueStat","falseStat","EmptyValue","quasis","valueNodes","templateLiteral","helperNode","binding","serializeBinding","usesThis","func","thisExpr","constructorNode","argListNodes","callFunctionRef","callFunction","funcNode","propRef","thisArg","argStart","generators","generator1","generator2","block1","empty","block2","getPropertyAssignmentStatement","unaryOperator","prefix","y","binaryOperator","logicalOperator","templateSource","templateArguments","Placeholders","buildExpression","targetNode","sourceNodes"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport {\n  Generator,\n  type SerializationContext,\n  type OperationDescriptor,\n  type OperationDescriptorData,\n} from \"../utils/generator.js\";\nimport { PreludeGenerator, Placeholders } from \"../utils/PreludeGenerator.js\";\nimport {\n  emptyExpression,\n  memberExpressionHelper,\n  nullExpression,\n  protoExpression,\n  voidExpression,\n} from \"../utils/babelhelpers.js\";\nimport invariant from \"../invariant.js\";\nimport * as t from \"@babel/types\";\nimport { AbstractValue, EmptyValue, ObjectValue, Value } from \"../values/index.js\";\nimport type {\n  BabelNodeBlockStatement,\n  BabelNodeExpression,\n  BabelNodeSpreadElement,\n  BabelNodeStringLiteral,\n} from \"@babel/types\";\nimport { Utils } from \"../singletons.js\";\n\nfunction serializeBody(\n  generator: Generator,\n  context: SerializationContext,\n  valuesToProcess: Set<AbstractValue | ObjectValue>\n): BabelNodeBlockStatement {\n  let statements = context.serializeGenerator(generator, valuesToProcess);\n  if (statements.length === 1 && statements[0].type === \"BlockStatement\") return (statements[0]: any);\n  return t.blockStatement(statements);\n}\n\nfunction isSelfReferential(value: Value, pathNode: void | AbstractValue): boolean {\n  if (value === pathNode) return true;\n  if (value instanceof AbstractValue && pathNode !== undefined) {\n    for (let v of value.args) {\n      if (isSelfReferential(v, pathNode)) return true;\n    }\n  }\n  return false;\n}\n\nexport class ResidualOperationSerializer {\n  constructor(realm: Realm, preludeGenerator: PreludeGenerator) {\n    this.realm = realm;\n    this.preludeGenerator = preludeGenerator;\n  }\n  realm: Realm;\n  preludeGenerator: PreludeGenerator;\n\n  getErrorStatement(message: BabelNodeExpression): BabelNodeStatement {\n    if (this.realm.invariantMode === \"throw\")\n      return t.throwStatement(t.newExpression(this.preludeGenerator.memoizeReference(\"Error\"), [message]));\n    else {\n      let targetReference = this.realm.invariantMode;\n      let args = [message];\n      let i = targetReference.indexOf(\"+\");\n      if (i !== -1) {\n        let s = targetReference.substr(i + 1);\n        let x = Number.parseInt(s, 10);\n        args.push(isNaN(x) ? t.stringLiteral(s) : t.numericLiteral(x));\n        targetReference = targetReference.substr(0, i);\n      }\n      return t.expressionStatement(t.callExpression(this.preludeGenerator.memoizeReference(targetReference), args));\n    }\n  }\n\n  serializeStatement(\n    operationDescriptor: OperationDescriptor,\n    nodes: Array<BabelNodeExpression>,\n    context: SerializationContext,\n    valuesToProcess: Set<AbstractValue | ObjectValue>,\n    declaredId: void | string\n  ): BabelNodeStatement {\n    let { data, type } = operationDescriptor;\n    let babelNode;\n\n    switch (type) {\n      case \"ASSUME_CALL\":\n        babelNode = this._serializeAssumeCall(data, nodes);\n        break;\n      case \"CONCRETE_MODEL\":\n        babelNode = this._serializeConcreteModel(data, nodes);\n        break;\n      case \"CONDITIONAL_PROPERTY_ASSIGNMENT\":\n        babelNode = this._serializeConditionalPropertyAssignment(data, nodes, context, valuesToProcess);\n        break;\n      case \"CONDITIONAL_THROW\":\n        babelNode = this._serializeConditionalThrow(data, nodes, context);\n        break;\n      case \"CONSOLE_LOG\":\n        babelNode = this._serializeConsoleLog(data, nodes);\n        break;\n      case \"DEFINE_PROPERTY\":\n        babelNode = this._serializeDefineProperty(data, nodes, context);\n        break;\n      case \"DO_WHILE\":\n        babelNode = this._serializeDoWhile(data, nodes, context, valuesToProcess);\n        break;\n      case \"EMIT_CALL\":\n        babelNode = this._serializeEmitCall(data, nodes);\n        break;\n      case \"EMIT_PROPERTY_ASSIGNMENT\":\n        babelNode = this._serializeEmitPropertyAssignment(data, nodes, context);\n        break;\n      case \"FOR_IN\":\n        babelNode = this._serializeForIn(data, nodes);\n        break;\n      case \"GLOBAL_ASSIGNMENT\":\n        babelNode = this._serializeGlobalAssignment(data, nodes);\n        break;\n      case \"GLOBAL_DELETE\":\n        babelNode = this._serializeGlobalDelete(data, nodes);\n        break;\n      case \"JOIN_GENERATORS\":\n        babelNode = this._serializeJoinGenerators(data, nodes, context, valuesToProcess);\n        break;\n      case \"LOCAL_ASSIGNMENT\":\n        babelNode = this._serializeLocalAssignment(data, nodes, context, valuesToProcess);\n        break;\n      case \"NOOP\":\n        babelNode = t.emptyStatement();\n        break;\n      case \"OBJECT_SET_PARTIAL\":\n        babelNode = this._serializeObjectSetPartial(data, nodes);\n        break;\n      case \"PROPERTY_ASSIGNMENT\":\n        babelNode = this._serializePropertyAssignment(data, nodes, context, valuesToProcess);\n        break;\n      case \"PROPERTY_DELETE\":\n        babelNode = this._serializePropertyDelete(data, nodes);\n        break;\n      case \"THROW\":\n        babelNode = this._serializeThrow(data, nodes);\n        break;\n\n      // Invariants\n      case \"INVARIANT\":\n        babelNode = this._serializeInvariant(data, nodes);\n        break;\n\n      // React\n      case \"REACT_SSR_REGEX_CONSTANT\":\n        return t.variableDeclaration(\"var\", [\n          t.variableDeclarator(t.identifier(\"matchHtmlRegExp\"), t.regExpLiteral(\"[\\\"'&<>]\")),\n        ]);\n      case \"REACT_SSR_PREV_TEXT_NODE\":\n        return t.variableDeclaration(\"var\", [\n          t.variableDeclarator(t.identifier(\"previousWasTextNode\"), t.booleanLiteral(false)),\n        ]);\n\n      default:\n        let babelNodeExpression = this.serializeExpression(operationDescriptor, nodes, context);\n        if (declaredId !== undefined)\n          babelNode = this._serializeDerivedOperationDescriptor(declaredId, babelNodeExpression);\n        else babelNode = this._serializeVoidOperationDescriptor(babelNodeExpression);\n        return babelNode;\n    }\n\n    invariant(declaredId === undefined);\n    return babelNode;\n  }\n\n  serializeExpression(\n    operationDescriptor: OperationDescriptor,\n    nodes: Array<BabelNodeExpression>,\n    context?: SerializationContext,\n    valuesToProcess?: Set<AbstractValue | ObjectValue>\n  ): BabelNodeExpression {\n    let { data, type } = operationDescriptor;\n    let babelNode;\n\n    switch (type) {\n      case \"IDENTIFIER\":\n        babelNode = this._serializeIdentifier(data, nodes);\n        break;\n      case \"REBUILT_OBJECT\":\n        babelNode = this._serializeRebuiltObject(data, nodes);\n        break;\n      case \"BINARY_EXPRESSION\":\n        babelNode = this._serializeBinaryExpression(data, nodes);\n        break;\n      case \"LOGICAL_EXPRESSION\":\n        babelNode = this._serializeLogicalExpression(data, nodes);\n        break;\n      case \"CONDITIONAL_EXPRESSION\":\n        babelNode = this._serializeConditionalExpression(data, nodes);\n        break;\n      case \"UNARY_EXPRESSION\":\n        babelNode = this._serializeUnaryExpression(data, nodes);\n        break;\n      case \"ABSTRACT_PROPERTY\":\n        babelNode = this._serializeAbstractProperty(data, nodes);\n        break;\n      case \"ABSTRACT_FROM_TEMPLATE\":\n        babelNode = this._serializeAbstractFromTemplate(data, nodes);\n        break;\n      case \"COERCE_TO_STRING\":\n        babelNode = this._serializeCoerceToString(data, nodes);\n        break;\n      case \"OBJECT_ASSIGN\":\n        babelNode = this._serializeObjectAssign(data, nodes);\n        break;\n      case \"SINGLE_ARG\":\n        babelNode = this._serializeSingleArg(data, nodes);\n        break;\n      case \"CALL_BAILOUT\":\n        babelNode = this._serializeCallBailout(data, nodes);\n        break;\n      case \"EMIT_CALL_AND_CAPTURE_RESULT\":\n        babelNode = this._serializeEmitCallAndCaptureResults(data, nodes);\n        break;\n      case \"NEW_EXPRESSION\":\n        babelNode = this._serializeNewExpression(data, nodes);\n        break;\n      case \"FOR_STATEMENT_FUNC\":\n        babelNode = this._serializeForFunctionCall(data, nodes);\n        break;\n      case \"GET_BINDING\":\n        babelNode = this._serializeGetBinding(data, nodes, context);\n        break;\n      case \"UNKNOWN_ARRAY_METHOD_CALL\":\n        babelNode = this._serializeUnknownArrayMethodCall(data, nodes);\n        break;\n      case \"UNKNOWN_ARRAY_METHOD_PROPERTY_CALL\":\n        babelNode = this._serializeUnknownArrayMethodPropertyCall(data, nodes);\n        break;\n      case \"UNKNOWN_ARRAY_LENGTH\":\n        babelNode = this._serializeUnknownArrayLength(data, nodes);\n        break;\n      case \"UNKNOWN_ARRAY_GET_PARTIAL\":\n        babelNode = this._serializeUnknownArrayGetPartial(data, nodes);\n        break;\n      case \"OBJECT_GET_PARTIAL\":\n        babelNode = this._serializeObjectGetPartial(data, nodes);\n        break;\n      case \"ABSTRACT_OBJECT_GET_PARTIAL\":\n        babelNode = this._serializeAbstractObjectGetPartial(data, nodes);\n        break;\n      case \"ABSTRACT_OBJECT_GET_PROTO_OF\":\n        babelNode = this._serializeAbstractObjectGetProtoOf(data, nodes);\n        break;\n      case \"ABSTRACT_OBJECT_GET\":\n        babelNode = this._serializeAbstractObjectGet(data, nodes);\n        break;\n      case \"OBJECT_PROTO_HAS_OWN_PROPERTY\":\n        babelNode = this._serializeObjectProtoHasOwnProperty(data, nodes);\n        break;\n      case \"OBJECT_PROTO_GET_OWN_PROPERTY_DESCRIPTOR\":\n        babelNode = this._serializeObjectProtoGetOwnPropertyDescriptor(data, nodes);\n        break;\n      case \"DIRECT_CALL_WITH_ARG_LIST\":\n        babelNode = this._serializeDirectCallWithArgList(data, nodes);\n        break;\n      case \"CALL_ABSTRACT_FUNC\":\n        babelNode = this._serializeCallAbstractFunc(data, nodes);\n        break;\n      case \"CALL_ABSTRACT_FUNC_THIS\":\n        babelNode = this._serializeCallAbstractFuncThis(data, nodes);\n        break;\n      case \"LOGICAL_PROPERTY_ASSIGNMENT\":\n        babelNode = this._serializeLogicalPropertyAssignment(data, nodes);\n        break;\n      case \"UPDATE_INCREMENTOR\":\n        babelNode = this._serializeUpdateIncrementor(data, nodes);\n        break;\n      case \"MODULES_REQUIRE\":\n        babelNode = this._serializeModulesRequires(data, nodes);\n        break;\n      case \"RESIDUAL_CALL\":\n        babelNode = this._serializeResidualCall(data, nodes);\n        break;\n      case \"CANNOT_BECOME_OBJECT\":\n        babelNode = this._serializeCannotBecomeObject(data, nodes);\n        break;\n      case \"WIDENED_IDENTIFIER\":\n        babelNode = this._serializeIdentifier(data, nodes);\n        break;\n      case \"WIDEN_PROPERTY\":\n        babelNode = this._serializeWidenProperty(data, nodes);\n        break;\n      case \"WIDEN_PROPERTY_ASSIGNMENT\":\n        babelNode = this._serializeWidenPropertyAssignment(data, nodes);\n        break;\n\n      // Invariants\n      case \"DERIVED_ABSTRACT_INVARIANT\":\n        babelNode = this._serializeDerivedAbstractInvariant(data, nodes);\n        break;\n      case \"PROPERTY_INVARIANT\":\n        babelNode = this._serializePropertyInvariant(data, nodes);\n        break;\n      case \"INVARIANT_APPEND\":\n        babelNode = this._serializeInvariantAppend(data, nodes);\n        break;\n      case \"FULL_INVARIANT\":\n        babelNode = this._serializeFullInvariant(data, nodes);\n        break;\n      case \"FULL_INVARIANT_ABSTRACT\":\n        babelNode = this._serializeFullInvariantAbstract(data, nodes);\n        break;\n      case \"FULL_INVARIANT_FUNCTION\":\n        babelNode = this._serializeFullInvariantFunction(data, nodes);\n        break;\n\n      // React\n      case \"REACT_DEFAULT_PROPS_HELPER\":\n        babelNode = this._serializeReactDefaultPropsHelper(data, nodes);\n        break;\n      case \"REACT_SSR_RENDER_VALUE_HELPER\":\n        babelNode = this._serializeReactRenderValueHelper(data, nodes);\n        break;\n      case \"REACT_SSR_TEMPLATE_LITERAL\":\n        babelNode = this._serializeReactSSRTemplateLiteral(data, nodes);\n        break;\n      case \"REACT_TEMPORAL_FUNC\":\n        babelNode = this._serializeReactTemporalFunc(data, nodes);\n        break;\n      case \"REACT_CREATE_CONTEXT_PROVIDER\":\n        babelNode = this._serializeReactCreateContextProvider(data, nodes);\n        break;\n      case \"REACT_NATIVE_STRING_LITERAL\":\n        babelNode = this._serializeReactNativeStringLiteral(data, nodes);\n        break;\n      case \"REACT_RELAY_MOCK_CONTAINER\":\n        babelNode = this._serializeReactRelayMockContainer(data, nodes);\n        break;\n\n      // FB Mocks\n      case \"FB_MOCKS_BOOTLOADER_LOAD_MODULES\":\n        babelNode = this._serializeFBMocksBootloaderLoadModules(data, nodes);\n        break;\n      case \"FB_MOCKS_MAGIC_GLOBAL_FUNCTION\":\n        babelNode = this._serializeFBMocksMagicGlobalFunction(data, nodes);\n        break;\n\n      // Babel helpers\n      case \"BABEL_HELPERS_OBJECT_WITHOUT_PROPERTIES\":\n        babelNode = this._serializeBabelHelpersObjectWithoutProperties(data, nodes);\n        break;\n      default:\n        invariant(false, `operation descriptor \"type\" not recognized when serializing operation descriptor`);\n    }\n\n    return babelNode;\n  }\n\n  _serializeAssumeCall({  }: OperationDescriptorData, [c, s]: Array<BabelNodeExpression>): BabelNodeStatement {\n    let errorLiteral = s.type === \"StringLiteral\" ? s : t.stringLiteral(\"Assumption violated\");\n    return t.ifStatement(\n      t.unaryExpression(\"!\", c),\n      t.blockStatement([t.throwStatement(t.newExpression(t.identifier(\"Error\"), [errorLiteral]))])\n    );\n  }\n\n  _serializeWidenPropertyAssignment(\n    {  }: OperationDescriptorData,\n    [o, propName, v]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.assignmentExpression(\"=\", memberExpressionHelper(o, propName), v);\n  }\n\n  _serializeWidenAbstractProperty(\n    {  }: OperationDescriptorData,\n    [o, p]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return memberExpressionHelper(o, p);\n  }\n\n  _serializeWidenProperty(\n    {  }: OperationDescriptorData,\n    [o, propName]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return memberExpressionHelper(o, propName);\n  }\n\n  _serializeAbstractObjectGet(\n    { propertyGetter }: OperationDescriptorData,\n    [o, P]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return propertyGetter !== undefined\n      ? t.callExpression(t.memberExpression(t.identifier(\"global\"), t.identifier(\"__prop_\" + propertyGetter)), [o, P])\n      : memberExpressionHelper(o, P);\n  }\n\n  _serializeAbstractObjectGetProtoOf(\n    {  }: OperationDescriptorData,\n    [p]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    invariant(this.realm.preludeGenerator !== undefined);\n    let getPrototypeOf = this.realm.preludeGenerator.memoizeReference(\"Object.getPrototypeOf\");\n    return this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION) || this.realm.isCompatibleWith(\"mobile\")\n      ? t.memberExpression(p, protoExpression)\n      : t.callExpression(getPrototypeOf, [p]);\n  }\n\n  _serializeCannotBecomeObject({  }: OperationDescriptorData, [n]: Array<BabelNodeExpression>): BabelNodeExpression {\n    let callFunc = t.identifier(\"global.__cannotBecomeObject\");\n    return t.callExpression(callFunc, [n]);\n  }\n\n  _serializeResidualCall({  }: OperationDescriptorData, nodes: Array<BabelNodeExpression>): BabelNodeExpression {\n    return t.callExpression(nodes[0], ((nodes.slice(1): any): Array<BabelNodeExpression | BabelNodeSpreadElement>));\n  }\n\n  _serializeModulesRequires(\n    {  }: OperationDescriptorData,\n    [propName]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.callExpression(t.identifier(\"require\"), [propName]);\n  }\n\n  _serializeConcreteModel(\n    {  }: OperationDescriptorData,\n    [valueNode, propName]: Array<BabelNodeExpression>\n  ): BabelNodeStatement {\n    let propString = ((propName: any): BabelNodeStringLiteral).value;\n    return t.expressionStatement(\n      t.assignmentExpression(\"=\", this.preludeGenerator.globalReference(propString, false), valueNode)\n    );\n  }\n\n  _serializeConsoleLog(\n    {  }: OperationDescriptorData,\n    [propName, ...nodes]: Array<BabelNodeExpression>\n  ): BabelNodeStatement {\n    let propString = ((propName: any): BabelNodeStringLiteral).value;\n    return t.expressionStatement(\n      t.callExpression(t.memberExpression(t.identifier(\"console\"), t.identifier(propString)), [...nodes])\n    );\n  }\n\n  _serializeDoWhile(\n    { generator, value }: OperationDescriptorData,\n    nodes: Array<BabelNodeExpression>,\n    context?: SerializationContext,\n    valuesToProcess?: Set<AbstractValue | ObjectValue>\n  ): BabelNodeStatement {\n    invariant(context !== undefined);\n    invariant(valuesToProcess !== undefined);\n    invariant(value !== undefined);\n    let testId = value.intrinsicName;\n    invariant(testId !== undefined);\n    invariant(generator !== undefined);\n    let statements = context.serializeGenerator(generator, valuesToProcess);\n    let block = t.blockStatement(statements);\n    return t.doWhileStatement(t.identifier(testId), block);\n  }\n\n  _serializeForIn(\n    { boundName, lh }: OperationDescriptorData,\n    [obj, tgt, src]: Array<BabelNodeExpression>\n  ): BabelNodeStatement {\n    invariant(boundName !== undefined);\n    invariant(lh !== undefined);\n    return t.forInStatement(\n      lh,\n      obj,\n      t.blockStatement([\n        t.expressionStatement(\n          t.assignmentExpression(\"=\", memberExpressionHelper(tgt, boundName), memberExpressionHelper(src, boundName))\n        ),\n      ])\n    );\n  }\n\n  _serializeFullInvariant(\n    {  }: OperationDescriptorData,\n    [propName, objectNode, valueNode]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.binaryExpression(\"!==\", memberExpressionHelper(objectNode, propName), valueNode);\n  }\n\n  _serializeFullInvariantFunction(\n    {  }: OperationDescriptorData,\n    [propName, objectNode]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.binaryExpression(\n      \"!==\",\n      t.unaryExpression(\"typeof\", memberExpressionHelper(objectNode, propName), true),\n      t.stringLiteral(\"function\")\n    );\n  }\n\n  _serializeFullInvariantAbstract(\n    { concreteComparisons, typeComparisons }: OperationDescriptorData,\n    [propName, valueNode]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    invariant(concreteComparisons !== undefined);\n    invariant(typeComparisons !== undefined);\n    // Create `object.property !== concreteValue`\n    let checks = concreteComparisons.map(concreteValue =>\n      t.binaryExpression(\"!==\", valueNode, t.valueToNode(concreteValue.serialize()))\n    );\n    // Create `typeof object.property !== typeValue`\n    checks = checks.concat(\n      [...typeComparisons].map(typeValue => {\n        let typeString = Utils.typeToString(typeValue);\n        invariant(typeString !== undefined, typeValue);\n        return t.binaryExpression(\"!==\", t.unaryExpression(\"typeof\", valueNode, true), t.stringLiteral(typeString));\n      })\n    );\n    return checks.reduce((expr, newCondition) => t.logicalExpression(\"&&\", expr, newCondition));\n  }\n\n  _serializeInvariantAppend(\n    {  }: OperationDescriptorData,\n    [propName, objectNode]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return memberExpressionHelper(objectNode, propName);\n  }\n\n  _serializePropertyInvariant(\n    { state }: OperationDescriptorData,\n    [propName, objectNode]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    invariant(state !== undefined);\n    let n = t.callExpression(\n      t.memberExpression(\n        this.preludeGenerator.memoizeReference(\"Object.prototype.hasOwnProperty\"),\n        t.identifier(\"call\")\n      ),\n      [objectNode, propName]\n    );\n    if (state !== \"MISSING\") {\n      n = t.unaryExpression(\"!\", n, true);\n      if (state === \"DEFINED\")\n        n = t.logicalExpression(\n          \"||\",\n          n,\n          t.binaryExpression(\"===\", memberExpressionHelper(objectNode, propName), t.valueToNode(undefined))\n        );\n    }\n    return n;\n  }\n\n  _serializeUpdateIncrementor(\n    { incrementor }: OperationDescriptorData,\n    [oldValNode]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    invariant(incrementor !== undefined);\n    return t.binaryExpression(incrementor, oldValNode, t.numericLiteral(1));\n  }\n\n  _serializeDerivedAbstractInvariant(\n    {  }: OperationDescriptorData,\n    [typeOfStringNode, typeofNode]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    let typeofString = ((typeOfStringNode: any): BabelNodeStringLiteral).value;\n    let condition = t.binaryExpression(\"!==\", t.unaryExpression(\"typeof\", typeofNode), t.stringLiteral(typeofString));\n    if (typeofString === \"object\") {\n      condition = t.logicalExpression(\n        \"&&\",\n        condition,\n        t.binaryExpression(\"!==\", t.unaryExpression(\"typeof\", typeofNode), t.stringLiteral(\"function\"))\n      );\n      condition = t.logicalExpression(\"||\", condition, t.binaryExpression(\"===\", typeofNode, nullExpression));\n    }\n    return condition;\n  }\n\n  _serializeInvariant(\n    { appendLastToInvariantOperationDescriptor, violationConditionOperationDescriptor }: OperationDescriptorData,\n    nodes: Array<BabelNodeExpression>\n  ): BabelNodeStatement {\n    invariant(violationConditionOperationDescriptor !== undefined);\n    let messageComponents = [\n      t.stringLiteral(\"Prepack model invariant violation (\"),\n      t.numericLiteral(this.preludeGenerator.nextInvariantId++),\n    ];\n    if (appendLastToInvariantOperationDescriptor) {\n      let propName = nodes[0];\n      let last = nodes.pop();\n      messageComponents.push(t.stringLiteral(\"): \"));\n      messageComponents.push(this.serializeExpression(appendLastToInvariantOperationDescriptor, [propName, last]));\n    } else {\n      messageComponents.push(t.stringLiteral(\")\"));\n    }\n    let throwString = messageComponents[0];\n    for (let i = 1; i < messageComponents.length; i++)\n      throwString = t.binaryExpression(\"+\", throwString, messageComponents[i]);\n    let condition = this.serializeExpression(violationConditionOperationDescriptor, nodes);\n    let consequent = this.getErrorStatement(throwString);\n    return t.ifStatement(condition, consequent);\n  }\n\n  _serializeReactRelayMockContainer(\n    {  }: OperationDescriptorData,\n    [reactRelayIdent, propName, ...otherArgs]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    let propString = ((propName: any): BabelNodeStringLiteral).value;\n    return t.callExpression(\n      t.memberExpression(reactRelayIdent, t.identifier(propString)),\n      ((otherArgs: any): Array<any>)\n    );\n  }\n\n  _serializePropertyAssignment(\n    { path }: OperationDescriptorData,\n    [o, p, v, e]: Array<BabelNodeExpression>,\n    context?: SerializationContext,\n    valuesToProcess?: Set<AbstractValue | ObjectValue>\n  ): BabelNodeStatement {\n    invariant(path instanceof AbstractValue);\n    invariant(path.operationDescriptor !== undefined);\n    let lh = this.serializeExpression(path.operationDescriptor, [o, p], context, valuesToProcess);\n    return t.expressionStatement(t.assignmentExpression(\"=\", (lh: any), v));\n  }\n\n  _serializeConditionalPropertyAssignment(\n    { path, value }: OperationDescriptorData,\n    [o, v, e, keyKey]: Array<BabelNodeExpression>,\n    context?: SerializationContext,\n    valuesToProcess?: Set<AbstractValue | ObjectValue>\n  ): BabelNodeStatement {\n    invariant(value instanceof AbstractValue);\n    invariant(path instanceof AbstractValue);\n    let mightHaveBeenDeleted = value.mightHaveBeenDeleted();\n    let mightBeUndefined = value.mightBeUndefined();\n    invariant(path.operationDescriptor !== undefined);\n    let lh = this.serializeExpression(path.operationDescriptor, [o, keyKey], context, valuesToProcess);\n    let r = t.expressionStatement(t.assignmentExpression(\"=\", (lh: any), v));\n    if (mightHaveBeenDeleted) {\n      // If v === __empty || (v === undefined  && !(key.key in o))  then delete it\n      let emptyTest = t.binaryExpression(\"===\", v, e);\n      let undefinedTest = t.binaryExpression(\"===\", v, voidExpression);\n      let inTest = t.unaryExpression(\"!\", t.binaryExpression(\"in\", keyKey, o));\n      let guard = t.logicalExpression(\"||\", emptyTest, t.logicalExpression(\"&&\", undefinedTest, inTest));\n      let deleteIt = t.expressionStatement(t.unaryExpression(\"delete\", (lh: any)));\n      return t.ifStatement(mightBeUndefined ? emptyTest : guard, deleteIt, r);\n    }\n    return r;\n  }\n\n  _serializeLogicalPropertyAssignment(\n    { propertyBinding, value }: OperationDescriptorData,\n    [o, n]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    invariant(value instanceof Value);\n    invariant(propertyBinding !== undefined);\n    if (\n      typeof propertyBinding.key === \"string\" &&\n      value.mightHaveBeenDeleted() &&\n      isSelfReferential(value, propertyBinding.pathNode)\n    ) {\n      let inTest = t.binaryExpression(\"in\", t.stringLiteral(propertyBinding.key), o);\n      let addEmpty = t.conditionalExpression(inTest, n, emptyExpression);\n      n = t.logicalExpression(\"||\", n, addEmpty);\n    }\n    return n;\n  }\n\n  _serializeLocalAssignment(\n    { value }: OperationDescriptorData,\n    [v]: Array<BabelNodeExpression>,\n    context?: SerializationContext,\n    valuesToProcess?: Set<AbstractValue | ObjectValue>\n  ): BabelNodeStatement {\n    invariant(value instanceof AbstractValue);\n    invariant(value.operationDescriptor !== undefined);\n    let id = this.serializeExpression(value.operationDescriptor, [], context, valuesToProcess);\n    return t.expressionStatement(t.assignmentExpression(\"=\", (id: any), v));\n  }\n\n  _serializeReactNativeStringLiteral(\n    {  }: OperationDescriptorData,\n    [propName]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return propName;\n  }\n\n  _serializeReactCreateContextProvider(\n    {  }: OperationDescriptorData,\n    [consumerNode]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.memberExpression(consumerNode, t.identifier(\"Provider\"));\n  }\n\n  _serializeReactTemporalFunc(\n    {  }: OperationDescriptorData,\n    [renderNode, ..._args]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.callExpression(renderNode, ((_args: any): Array<any>));\n  }\n\n  _serializeCallAbstractFunc({  }: OperationDescriptorData, nodes: Array<BabelNodeExpression>): BabelNodeExpression {\n    let fun_args = ((nodes.slice(1): any): Array<BabelNodeExpression | BabelNodeSpreadElement>);\n    return t.callExpression(nodes[0], fun_args);\n  }\n\n  _serializeCallAbstractFuncThis(\n    {  }: OperationDescriptorData,\n    nodes: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    let fun_args = ((nodes.slice(1): any): Array<BabelNodeExpression | BabelNodeSpreadElement>);\n    return t.callExpression(t.memberExpression(nodes[0], t.identifier(\"call\")), fun_args);\n  }\n\n  _serializeDirectCallWithArgList(\n    {  }: OperationDescriptorData,\n    nodes: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    let fun_args = nodes.slice(1);\n    return t.callExpression(nodes[0], ((fun_args: any): Array<BabelNodeExpression | BabelNodeSpreadElement>));\n  }\n\n  _serializeObjectProtoHasOwnProperty(\n    {  }: OperationDescriptorData,\n    [methodNode, objectNode, nameNode]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.callExpression(t.memberExpression(methodNode, t.identifier(\"call\")), [objectNode, nameNode]);\n  }\n\n  _serializeRebuiltObject(\n    {  }: OperationDescriptorData,\n    [node, propName]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    let propString = ((propName: any): BabelNodeStringLiteral).value;\n    return t.isValidIdentifier(propString)\n      ? t.memberExpression(node, t.identifier(propString), false)\n      : t.memberExpression(node, propName, true);\n  }\n\n  _serializeGlobalDelete({  }: OperationDescriptorData, [propName]: Array<BabelNodeExpression>): BabelNodeStatement {\n    let propString = ((propName: any): BabelNodeStringLiteral).value;\n    return t.expressionStatement(t.unaryExpression(\"delete\", this.preludeGenerator.globalReference(propString, false)));\n  }\n\n  _serializeDefineProperty(\n    { object, descriptor }: OperationDescriptorData,\n    [propName]: Array<BabelNodeExpression>,\n    context?: SerializationContext\n  ): BabelNodeStatement {\n    let propString = ((propName: any): BabelNodeStringLiteral).value;\n    invariant(object !== undefined);\n    invariant(descriptor !== undefined);\n    invariant(context !== undefined);\n    return context.emitDefinePropertyBody(object, propString, descriptor);\n  }\n\n  _serializeFBMocksMagicGlobalFunction(\n    {  }: OperationDescriptorData,\n    [propName, ...args]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    let propString = ((propName: any): BabelNodeStringLiteral).value;\n    return t.callExpression(t.identifier(propString), ((args: any): Array<any>));\n  }\n\n  _serializeFBMocksBootloaderLoadModules(\n    {  }: OperationDescriptorData,\n    args: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.callExpression(\n      t.memberExpression(t.identifier(\"Bootloader\"), t.identifier(\"loadModules\")),\n      ((args: any): Array<any>)\n    );\n  }\n\n  _serializeUnknownArrayGetPartial(\n    {  }: OperationDescriptorData,\n    [o, p]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return memberExpressionHelper(o, p);\n  }\n\n  _serializeObjectGetPartial({  }: OperationDescriptorData, [o, p]: Array<BabelNodeExpression>): BabelNodeExpression {\n    return memberExpressionHelper(o, p);\n  }\n\n  _serializeAbstractObjectGetPartial(\n    {  }: OperationDescriptorData,\n    [o, p]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return memberExpressionHelper(o, p);\n  }\n\n  _serializeObjectSetPartial(\n    {  }: OperationDescriptorData,\n    [objectNode, keyNode, valueNode]: Array<BabelNodeExpression>\n  ): BabelNodeStatement {\n    return t.expressionStatement(t.assignmentExpression(\"=\", memberExpressionHelper(objectNode, keyNode), valueNode));\n  }\n\n  _serializeIdentifier({ id }: OperationDescriptorData, nodes: Array<BabelNodeExpression>): BabelNodeExpression {\n    invariant(id !== undefined);\n    return t.identifier(id);\n  }\n\n  _serializeCoerceToString({  }: OperationDescriptorData, [p]: Array<BabelNodeExpression>): BabelNodeExpression {\n    return t.binaryExpression(\"+\", t.stringLiteral(\"\"), p);\n  }\n\n  _serializeBabelHelpersObjectWithoutProperties(\n    {  }: OperationDescriptorData,\n    [methodNode, objNode, propRemoveNode]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.callExpression(methodNode, [objNode, propRemoveNode]);\n  }\n\n  _serializeReactDefaultPropsHelper(\n    {  }: OperationDescriptorData,\n    [methodNode, ..._args]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.callExpression(methodNode, ((_args: any): Array<any>));\n  }\n\n  _serializeUnknownArrayMethodCall(\n    {  }: OperationDescriptorData,\n    [methodNode, ..._args]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.callExpression(methodNode, ((_args: any): Array<any>));\n  }\n\n  _serializeUnknownArrayLength({  }: OperationDescriptorData, [o]: Array<BabelNodeExpression>): BabelNodeExpression {\n    return t.memberExpression(o, t.identifier(\"length\"), false);\n  }\n\n  _serializeUnknownArrayMethodPropertyCall(\n    {  }: OperationDescriptorData,\n    [objNode, propName, ..._args]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    let propString = ((propName: any): BabelNodeStringLiteral).value;\n    return t.callExpression(t.memberExpression(objNode, t.identifier(propString)), ((_args: any): Array<any>));\n  }\n\n  _serializeThrow({  }: OperationDescriptorData, [argument]: Array<BabelNodeExpression>): BabelNodeStatement {\n    return t.throwStatement(argument);\n  }\n\n  _serializeConditionalThrow(\n    { value }: OperationDescriptorData,\n    nodes: Array<BabelNodeExpression>,\n    context?: SerializationContext\n  ): BabelNodeStatement {\n    invariant(value instanceof Value);\n\n    function createStatement(val: Value) {\n      invariant(context !== undefined);\n      if (!(val instanceof AbstractValue) || val.kind !== \"conditional\") {\n        return t.throwStatement(context.serializeValue(val));\n      }\n      let [cond, trueVal, falseVal] = val.args;\n      let condVal = context.serializeValue(cond);\n      let trueStat, falseStat;\n      if (trueVal instanceof EmptyValue) trueStat = t.blockStatement([]);\n      else trueStat = createStatement(trueVal);\n      if (falseVal instanceof EmptyValue) falseStat = t.blockStatement([]);\n      else falseStat = createStatement(falseVal);\n      return t.ifStatement(condVal, trueStat, falseStat);\n    }\n    return createStatement(value);\n  }\n\n  _serializeReactSSRTemplateLiteral(\n    { quasis }: OperationDescriptorData,\n    valueNodes: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    invariant(quasis !== undefined);\n    return t.templateLiteral(quasis, valueNodes);\n  }\n\n  _serializeReactRenderValueHelper(\n    {  }: OperationDescriptorData,\n    [helperNode, valueNode]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.callExpression(helperNode, [valueNode]);\n  }\n\n  _serializePropertyDelete(\n    {  }: OperationDescriptorData,\n    [objectNode, propName]: Array<BabelNodeExpression>\n  ): BabelNodeStatement {\n    return t.expressionStatement(t.unaryExpression(\"delete\", memberExpressionHelper(objectNode, propName)));\n  }\n\n  _serializeGetBinding(\n    { binding }: OperationDescriptorData,\n    nodes: Array<BabelNodeExpression>,\n    context?: SerializationContext\n  ): BabelNodeExpression {\n    invariant(binding !== undefined);\n    invariant(context !== undefined);\n    return context.serializeBinding(binding);\n  }\n\n  _serializeForFunctionCall(\n    { usesThis }: OperationDescriptorData,\n    [func, thisExpr]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return usesThis\n      ? t.callExpression(t.memberExpression(func, t.identifier(\"call\")), [thisExpr])\n      : t.callExpression(func, []);\n  }\n\n  _serializeNewExpression(\n    {  }: OperationDescriptorData,\n    [constructorNode, ...argListNodes]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.newExpression(constructorNode, argListNodes);\n  }\n\n  _serializeEmitCall(\n    { callFunctionRef }: OperationDescriptorData,\n    nodes: Array<BabelNodeExpression>\n  ): BabelNodeStatement {\n    invariant(callFunctionRef !== undefined);\n    let callFunction = this.preludeGenerator.memoizeReference(callFunctionRef);\n    return t.expressionStatement(t.callExpression(callFunction, [...nodes]));\n  }\n\n  _serializeEmitCallAndCaptureResults(\n    { callFunctionRef }: OperationDescriptorData,\n    nodes: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    invariant(callFunctionRef !== undefined);\n    let callFunction = this.preludeGenerator.memoizeReference(callFunctionRef);\n    return t.callExpression(callFunction, ((nodes: any): Array<BabelNodeExpression | BabelNodeSpreadElement>));\n  }\n\n  _serializeObjectProtoGetOwnPropertyDescriptor(\n    {  }: OperationDescriptorData,\n    [funcNode, ...args]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.callExpression(funcNode, ((args: any): Array<BabelNodeExpression | BabelNodeSpreadElement>));\n  }\n\n  _serializeCallBailout(\n    { propRef, thisArg }: OperationDescriptorData,\n    nodes: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    let callFunc;\n    let argStart = 1;\n    if (thisArg instanceof Value) {\n      if (typeof propRef === \"string\") {\n        callFunc = memberExpressionHelper(nodes[0], propRef);\n      } else {\n        callFunc = memberExpressionHelper(nodes[0], nodes[1]);\n        argStart = 2;\n      }\n    } else {\n      callFunc = nodes[0];\n    }\n    let fun_args = ((nodes.slice(argStart): any): Array<BabelNodeExpression | BabelNodeSpreadElement>);\n    return t.callExpression(callFunc, fun_args);\n  }\n\n  _serializeJoinGenerators(\n    { generators }: OperationDescriptorData,\n    [cond]: Array<BabelNodeExpression>,\n    context?: SerializationContext,\n    valuesToProcess?: Set<AbstractValue | ObjectValue>\n  ): BabelNodeStatement {\n    invariant(context !== undefined);\n    invariant(valuesToProcess !== undefined);\n    invariant(generators !== undefined);\n    let [generator1, generator2] = generators;\n    let block1 = generator1.empty() ? null : serializeBody(generator1, context, valuesToProcess);\n    let block2 = generator2.empty() ? null : serializeBody(generator2, context, valuesToProcess);\n    if (block1) return t.ifStatement(cond, block1, block2);\n    invariant(block2);\n    return t.ifStatement(t.unaryExpression(\"!\", cond), block2);\n  }\n\n  _serializeEmitPropertyAssignment(\n    { value }: OperationDescriptorData,\n    [objectNode, valueNode, propName]: Array<BabelNodeExpression>,\n    context?: SerializationContext\n  ): BabelNodeStatement {\n    invariant(context !== undefined);\n    invariant(value instanceof Value);\n    return context.getPropertyAssignmentStatement(\n      memberExpressionHelper(objectNode, propName),\n      value,\n      value.mightHaveBeenDeleted(),\n      /* deleteIfMightHaveBeenDeleted */ true\n    );\n  }\n\n  _serializeGlobalAssignment(\n    {  }: OperationDescriptorData,\n    [valueNode, propName]: Array<BabelNodeExpression>\n  ): BabelNodeStatement {\n    let propString = ((propName: any): BabelNodeStringLiteral).value;\n    return t.expressionStatement(\n      t.assignmentExpression(\"=\", this.preludeGenerator.globalReference(propString, false), valueNode)\n    );\n  }\n\n  _serializeSingleArg({  }: OperationDescriptorData, [o]: Array<BabelNodeExpression>): BabelNodeExpression {\n    return o;\n  }\n\n  _serializeAbstractProperty(\n    {  }: OperationDescriptorData,\n    [o, propName]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return memberExpressionHelper(o, propName);\n  }\n\n  _serializeUnaryExpression(\n    { unaryOperator, prefix }: OperationDescriptorData,\n    [x, y]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    invariant(unaryOperator !== undefined);\n    return t.unaryExpression(unaryOperator, x, prefix);\n  }\n\n  _serializeBinaryExpression(\n    { binaryOperator }: OperationDescriptorData,\n    [x, y]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    invariant(binaryOperator !== undefined);\n    return t.binaryExpression(binaryOperator, x, y);\n  }\n\n  _serializeLogicalExpression(\n    { logicalOperator }: OperationDescriptorData,\n    [x, y]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    invariant(logicalOperator !== undefined);\n    return t.logicalExpression(logicalOperator, x, y);\n  }\n\n  _serializeConditionalExpression(\n    {  }: OperationDescriptorData,\n    [c, x, y]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.conditionalExpression(c, x, y);\n  }\n\n  _serializeDerivedOperationDescriptor(id: string, babelNode: BabelNodeExpression): BabelNodeStatement {\n    return t.variableDeclaration(\"var\", [t.variableDeclarator(t.identifier(id), babelNode)]);\n  }\n\n  _serializeVoidOperationDescriptor(babelNode: BabelNodeExpression): BabelNodeStatement {\n    return t.expressionStatement(babelNode);\n  }\n\n  _serializeAbstractFromTemplate(\n    { templateSource }: OperationDescriptorData,\n    nodes: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    let templateArguments = {};\n    let i = 0;\n    for (let node of nodes) templateArguments[Placeholders[i++]] = node;\n    invariant(templateSource !== undefined);\n    return this.preludeGenerator.buildExpression(templateSource, templateArguments);\n  }\n\n  _serializeObjectAssign(\n    {  }: OperationDescriptorData,\n    [targetNode, ...sourceNodes]: Array<BabelNodeExpression>\n  ): BabelNodeExpression {\n    return t.callExpression(this.preludeGenerator.memoizeReference(\"Object.assign\"), [targetNode, ...sourceNodes]);\n  }\n}\n"],"file":"ResidualOperationSerializer.js"}