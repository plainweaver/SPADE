{"version":3,"sources":["../../src/values/Value.js"],"names":["Value","constructor","realm","intrinsicName","$Realm","expressionLocation","currentLocation","toDisplayString","name","__originalName","equals","x","getHash","getType","isTypeCompatibleWith","type","Constructor","prototype","implies","val","depth","mightNotBeFalse","impliesNot","isIntrinsic","isTemporal","isPartialObject","isSimpleObject","mightBeFalse","mightBeNull","mightNotBeNull","mightBeNumber","mightNotBeNumber","mightNotBeObject","mightBeObject","mightBeString","mightNotBeString","mightBeTrue","mightNotBeTrue","mightBeUndefined","mightNotBeUndefined","mightHaveBeenDeleted","promoteEmptyToUndefined","throwIfNotConcrete","throwIfNotConcreteNumber","throwIfNotConcreteString","Error","throwIfNotConcreteBoolean","throwIfNotConcreteSymbol","throwIfNotConcreteObject","throwIfNotConcretePrimitive","throwIfNotObject","serialize","stack","Map","has","get","set","_serialize","getDebugName"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { BabelNodeSourceLocation } from \"@babel/types\";\nimport type { Realm } from \"../realm.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  BooleanValue,\n  ConcreteValue,\n  NumberValue,\n  ObjectValue,\n  PrimitiveValue,\n  StringValue,\n  SymbolValue,\n} from \"./index.js\";\nimport invariant from \"../invariant.js\";\n\nexport default class Value {\n  constructor(realm: Realm, intrinsicName?: string) {\n    invariant(realm, \"realm required\");\n\n    this.$Realm = realm;\n    this.intrinsicName = intrinsicName;\n    this.expressionLocation = realm.currentLocation;\n  }\n  // Name from original source if existant\n  __originalName: void | string;\n\n  toDisplayString(): string {\n    return (\n      \"[\" + this.constructor.name + \" originally; \" + (this.__originalName ? this.__originalName : \"undefined\") + \"]\"\n    );\n  }\n\n  equals(x: Value): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  getHash(): number {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  getType(): typeof Value {\n    return this.constructor;\n  }\n\n  static isTypeCompatibleWith(type: typeof Value, Constructor: typeof Value): boolean {\n    return (type: any).prototype instanceof Constructor || (type: any).prototype === Constructor.prototype;\n  }\n\n  intrinsicName: void | string;\n\n  // The source location of the expression that first produced this value.\n  expressionLocation: ?BabelNodeSourceLocation;\n  $Realm: Realm;\n\n  // this => val. A false value does not imply that !(this => val).\n  implies(val: AbstractValue, depth: number = 0): boolean {\n    if (!this.mightNotBeFalse()) return true;\n    if (this.equals(val)) return true;\n    return false;\n  }\n\n  // this => !val. A false value does not imply that !(this => !val).\n  impliesNot(val: AbstractValue, depth: number = 0): boolean {\n    if (!this.mightNotBeFalse()) return true;\n    if (this.equals(val)) return false;\n    return false;\n  }\n\n  isIntrinsic(): boolean {\n    return !!this.intrinsicName;\n  }\n\n  isTemporal() {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  isPartialObject(): boolean {\n    return false;\n  }\n\n  isSimpleObject(): boolean {\n    return false;\n  }\n\n  mightBeFalse(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightNotBeFalse(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightBeNull(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightNotBeNull(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightBeNumber(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightNotBeNumber(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightNotBeObject(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightBeObject(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightBeString(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightNotBeString(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightBeTrue(): boolean {\n    return this.mightNotBeFalse();\n  }\n\n  mightNotBeTrue(): boolean {\n    return this.mightBeFalse();\n  }\n\n  mightBeUndefined(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightNotBeUndefined(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  mightHaveBeenDeleted(): boolean {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  promoteEmptyToUndefined(): Value {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  throwIfNotConcrete(): ConcreteValue {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  throwIfNotConcreteNumber(): NumberValue {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  throwIfNotConcreteString(): StringValue {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  throwIfNotConcreteBoolean(): BooleanValue {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  throwIfNotConcreteSymbol(): SymbolValue {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  throwIfNotConcreteObject(): ObjectValue {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  throwIfNotConcretePrimitive(): PrimitiveValue {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  throwIfNotObject(): ObjectValue | AbstractObjectValue {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  serialize(stack: Map<Value, any> = new Map()): any {\n    if (stack.has(this)) {\n      return stack.get(this);\n    } else {\n      let set = val => {\n        stack.set(this, val);\n        return val;\n      };\n\n      return set(this._serialize(set, stack));\n    }\n  }\n\n  _serialize(set: Function, stack: Map<Value, any>): any {\n    invariant(false, \"abstract method; please override\");\n  }\n\n  getDebugName(): string | void {\n    return this.intrinsicName || this.__originalName;\n  }\n}\n"],"file":"Value.js"}