{"version":3,"sources":["../../src/values/StringExotic.js"],"names":["StringExotic","ObjectValue","constructor","realm","intrinsicName","intrinsics","StringPrototype","$GetOwnProperty","P","desc","Properties","OrdinaryGetOwnProperty","$Realm","undefined","ThrowIfMightHaveBeenDeleted","StringValue","index","To","CanonicalNumericIndexString","Infinity","str","$StringData","throwIfNotConcreteString","len","value","length","resultStr","charAt","PropertyDescriptor","writable","enumerable","configurable","$OwnPropertyKeys","keys","i","push","ToString","NumberValue","properties","GetOwnPropertyKeysArray","key","filter","x","map","parseInt","ToInteger","sort","y","symbols"],"mappings":";;;;;;;AAaA;;AACA;;AACA;;AACA;;AACA;;;;AAjBA;;;;;;;;;AASA;AAUe,MAAMA,YAAN,SAA2BC,kBAA3B,CAAuC;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAeC,aAAf,EAAuC;AAChD,UAAMD,KAAN,EAAaA,KAAK,CAACE,UAAN,CAAiBC,eAA9B,EAA+CF,aAA/C;AACD,GAHmD,CAKpD;;;AACAG,EAAAA,eAAe,CAACC,CAAD,EAAyC;AACtD;AAEA;AACA,QAAIC,IAAI,GAAGC,uBAAWC,sBAAX,CAAkC,KAAKC,MAAvC,EAA+C,IAA/C,EAAqDJ,CAArD,CAAX,CAJsD,CAMtD;;;AACA,QAAIC,IAAI,KAAKI,SAAb,EAAwB;AACtBH,6BAAWI,2BAAX,CAAuCL,IAAvC;;AACA,aAAOA,IAAP;AACD,KAVqD,CAYtD;;;AACA,QAAI,OAAOD,CAAP,KAAa,QAAb,IAAyB,EAAEA,CAAC,YAAYO,kBAAf,CAA7B,EAA0D,OAAOF,SAAP,CAbJ,CAetD;;AACA,QAAIG,KAAK,GAAGC,eAAGC,2BAAH,CACV,KAAKN,MADK,EAEV,OAAOJ,CAAP,KAAa,QAAb,GAAwB,IAAIO,kBAAJ,CAAgB,KAAKH,MAArB,EAA6BJ,CAA7B,CAAxB,GAA0DA,CAFhD,CAAZ,CAhBsD,CAqBtD;;;AACA,QAAIQ,KAAK,KAAKH,SAAV,IAAuBG,KAAK,KAAK,IAArC,EAA2C,OAAOH,SAAP,CAtBW,CAwBtD;;AACA,QAAI,mBAAU,KAAKD,MAAf,EAAuBI,KAAvB,MAAkC,KAAtC,EAA6C,OAAOH,SAAP,CAzBS,CA2BtD;;AACA,QAAI,MAAMG,KAAN,KAAgB,CAACG,QAArB,EAA+B,OAAON,SAAP,CA5BuB,CA8BtD;;AACA,QAAIO,GAAG,GAAG,KAAKC,WAAf;AACA,4BAAUD,GAAV;AACAA,IAAAA,GAAG,GAAGA,GAAG,CAACE,wBAAJ,EAAN,CAjCsD,CAmCtD;;AACA,QAAIC,GAAG,GAAGH,GAAG,CAACI,KAAJ,CAAUC,MAApB,CApCsD,CAsCtD;;AACA,QAAIT,KAAK,GAAG,CAAR,IAAaO,GAAG,IAAIP,KAAxB,EAA+B,OAAOH,SAAP,CAvCuB,CAyCtD;;AACA,QAAIa,SAAS,GAAG,IAAIX,kBAAJ,CAAgB,KAAKH,MAArB,EAA6BQ,GAAG,CAACI,KAAJ,CAAUG,MAAV,CAAiBX,KAAjB,CAA7B,CAAhB,CA1CsD,CA4CtD;;AACA,WAAO,IAAIY,+BAAJ,CAAuB;AAC5BJ,MAAAA,KAAK,EAAEE,SADqB;AAE5BG,MAAAA,QAAQ,EAAE,KAFkB;AAG5BC,MAAAA,UAAU,EAAE,IAHgB;AAI5BC,MAAAA,YAAY,EAAE;AAJc,KAAvB,CAAP;AAMD,GAzDmD,CA2DpD;;;AACAC,EAAAA,gBAAgB,GAA4B;AAC1C;AACA,QAAIC,IAAI,GAAG,EAAX,CAF0C,CAI1C;;AACA,QAAIb,GAAG,GAAG,KAAKC,WAAf;AACA,4BAAUD,GAAV;AACAA,IAAAA,GAAG,GAAGA,GAAG,CAACE,wBAAJ,EAAN,CAP0C,CAS1C;;AACA,QAAIC,GAAG,GAAGH,GAAG,CAACI,KAAJ,CAAUC,MAApB;AAEA,QAAItB,KAAK,GAAG,KAAKS,MAAjB,CAZ0C,CAa1C;;AACA,SAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,GAApB,EAAyB,EAAEW,CAA3B,EAA8B;AAC5B;AACAD,MAAAA,IAAI,CAACE,IAAL,CAAU,IAAIpB,kBAAJ,CAAgBZ,KAAhB,EAAuBc,eAAGmB,QAAH,CAAYjC,KAAZ,EAAmB,IAAIkC,kBAAJ,CAAgBlC,KAAhB,EAAuB+B,CAAvB,CAAnB,CAAvB,CAAV;AACD,KAjByC,CAmB1C;;;AACA,QAAII,UAAU,GAAG5B,uBAAW6B,uBAAX,CAAmCpC,KAAnC,EAA0C,IAA1C,EAAgD,KAAhD,EAAuD,KAAvD,CAAjB;;AACA,SAAK,IAAIqC,GAAT,IAAgBF,UAAU,CACvBG,MADa,CACNC,CAAC,IAAI,sBAAavC,KAAb,EAAoBuC,CAApB,CADC,EAEbC,GAFa,CAETD,CAAC,IAAIE,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAFJ,EAGbD,MAHa,CAGNC,CAAC,IAAIzB,eAAG4B,SAAH,CAAa1C,KAAb,EAAoBuC,CAApB,KAA0BnB,GAHzB,EAIbuB,IAJa,CAIR,CAACJ,CAAD,EAAIK,CAAJ,KAAUL,CAAC,GAAGK,CAJN,CAAhB,EAI0B;AACxB;AACAd,MAAAA,IAAI,CAACE,IAAL,CAAU,IAAIpB,kBAAJ,CAAgBZ,KAAhB,EAAuBqC,GAAG,GAAG,EAA7B,CAAV;AACD,KA5ByC,CA8B1C;;;AACA,SAAK,IAAIA,GAAT,IAAgBF,UAAU,CAACG,MAAX,CAAkBC,CAAC,IAAI,CAAC,sBAAavC,KAAb,EAAoBuC,CAApB,CAAxB,CAAhB,EAAiE;AAC/D;AACAT,MAAAA,IAAI,CAACE,IAAL,CAAU,IAAIpB,kBAAJ,CAAgBZ,KAAhB,EAAuBqC,GAAvB,CAAV;AACD,KAlCyC,CAoC1C;;;AACA,SAAK,IAAIA,GAAT,IAAgB,KAAKQ,OAAL,CAAaf,IAAb,EAAhB,EAAqC;AACnC;AACAA,MAAAA,IAAI,CAACE,IAAL,CAAUK,GAAV;AACD,KAxCyC,CA0C1C;;;AACA,WAAOP,IAAP;AACD;;AAxGmD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport type { PropertyKeyValue, Descriptor } from \"../types.js\";\nimport { ObjectValue, NumberValue, StringValue } from \"./index.js\";\nimport { IsInteger, IsArrayIndex } from \"../methods/is.js\";\nimport { Properties, To } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport { PropertyDescriptor } from \"../descriptors.js\";\n\nexport default class StringExotic extends ObjectValue {\n  constructor(realm: Realm, intrinsicName?: string) {\n    super(realm, realm.intrinsics.StringPrototype, intrinsicName);\n  }\n\n  // ECMA262 9.4.3.1\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    // 1. Assert: IsPropertyKey(P) is true.\n\n    // 2. Let desc be OrdinaryGetOwnProperty(S, P).\n    let desc = Properties.OrdinaryGetOwnProperty(this.$Realm, this, P);\n\n    // 3. If desc is not undefined, return desc.\n    if (desc !== undefined) {\n      Properties.ThrowIfMightHaveBeenDeleted(desc);\n      return desc;\n    }\n\n    // 4. If Type(P) is not String, return undefined.\n    if (typeof P !== \"string\" && !(P instanceof StringValue)) return undefined;\n\n    // 5. Let index be ! CanonicalNumericIndexString(P).\n    let index = To.CanonicalNumericIndexString(\n      this.$Realm,\n      typeof P === \"string\" ? new StringValue(this.$Realm, P) : P\n    );\n\n    // 6. If index is undefined, return undefined.\n    if (index === undefined || index === null) return undefined;\n\n    // 7. If IsInteger(index) is false, return undefined.\n    if (IsInteger(this.$Realm, index) === false) return undefined;\n\n    // 8. If index = -0, return undefined.\n    if (1.0 / index === -Infinity) return undefined;\n\n    // 9. Let str be the String value of S.[[StringData]].\n    let str = this.$StringData;\n    invariant(str);\n    str = str.throwIfNotConcreteString();\n\n    // 10. Let len be the number of elements in str.\n    let len = str.value.length;\n\n    // 11. If index < 0 or len ≤ index, return undefined.\n    if (index < 0 || len <= index) return undefined;\n\n    // 12. Let resultStr be a String value of length 1, containing one code unit from str, specifically the code unit at index index.\n    let resultStr = new StringValue(this.$Realm, str.value.charAt(index));\n\n    // 13. Return a PropertyDescriptor{[[Value]]: resultStr, [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: false}.\n    return new PropertyDescriptor({\n      value: resultStr,\n      writable: false,\n      enumerable: true,\n      configurable: false,\n    });\n  }\n\n  // ECMA262 9.4.3.2\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    // 1. Let keys be a new empty List.\n    let keys = [];\n\n    // 2. Let str be the String value of O.[[StringData]].\n    let str = this.$StringData;\n    invariant(str);\n    str = str.throwIfNotConcreteString();\n\n    // 3. Let len be the number of elements in str.\n    let len = str.value.length;\n\n    let realm = this.$Realm;\n    // 4. For each integer i starting with 0 such that i < len, in ascending order,\n    for (let i = 0; i < len; ++i) {\n      // a. Add ! ToString(i) as the last element of keys.\n      keys.push(new StringValue(realm, To.ToString(realm, new NumberValue(realm, i))));\n    }\n\n    // 5. For each own property key P of O such that P is an integer index and ToInteger(P) ≥ len, in ascending numeric index order,\n    let properties = Properties.GetOwnPropertyKeysArray(realm, this, false, false);\n    for (let key of properties\n      .filter(x => IsArrayIndex(realm, x))\n      .map(x => parseInt(x, 10))\n      .filter(x => To.ToInteger(realm, x) >= len)\n      .sort((x, y) => x - y)) {\n      // i. Add P as the last element of keys.\n      keys.push(new StringValue(realm, key + \"\"));\n    }\n\n    // 6. For each own property key P of O such that Type(P) is String and P is not an integer index, in ascending chronological order of property creation,\n    for (let key of properties.filter(x => !IsArrayIndex(realm, x))) {\n      // i. Add P as the last element of keys.\n      keys.push(new StringValue(realm, key));\n    }\n\n    // 7. For each own property key P of O such that Type(P) is Symbol, in ascending chronological order of property creation,\n    for (let key of this.symbols.keys()) {\n      // i. Add P as the last element of keys.\n      keys.push(key);\n    }\n\n    // 12. Return keys.\n    return keys;\n  }\n}\n"],"file":"StringExotic.js"}