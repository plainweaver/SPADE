{"version":3,"sources":["../../src/values/ArgumentsExotic.js"],"names":["ArgumentsExotic","ObjectValue","constructor","realm","intrinsicName","intrinsics","ObjectPrototype","$GetOwnProperty","P","args","desc","Properties","OrdinaryGetOwnProperty","$Realm","undefined","ThrowIfMightHaveBeenDeleted","throwIfNotConcrete","map","$ParameterMap","isMapped","value","$DefineOwnProperty","_Desc","Desc","newArgDesc","writable","PropertyDescriptor","allowed","OrdinaryDefineOwnProperty","$Delete","Value","setStatus","Set","$Get","Receiver","$Set","V","OrdinarySet","result","OrdinaryDelete"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport type { PropertyKeyValue, Descriptor } from \"../types.js\";\nimport { ObjectValue, Value } from \"./index.js\";\nimport { IsDataDescriptor, IsAccessorDescriptor } from \"../methods/is.js\";\nimport { HasOwnProperty } from \"../methods/has.js\";\nimport { SameValuePartial } from \"../methods/abstract.js\";\nimport { Get, OrdinaryGet } from \"../methods/get.js\";\nimport { Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport { PropertyDescriptor } from \"../descriptors.js\";\n\nexport default class ArgumentsExotic extends ObjectValue {\n  constructor(realm: Realm, intrinsicName?: string) {\n    super(realm, realm.intrinsics.ObjectPrototype, intrinsicName);\n  }\n\n  $ParameterMap: void | ObjectValue;\n\n  // ECMA262 9.4.4.1\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    // 1. Let args be the arguments object.\n    let args = this;\n\n    // 2. Let desc be OrdinaryGetOwnProperty(args, P).\n    let desc = Properties.OrdinaryGetOwnProperty(this.$Realm, args, P);\n\n    // 3. If desc is undefined, return desc.\n    if (desc === undefined) return undefined;\n    Properties.ThrowIfMightHaveBeenDeleted(desc);\n    desc = desc.throwIfNotConcrete(this.$Realm);\n\n    // 4. Let map be args.[[ParameterMap]].\n    let map = args.$ParameterMap;\n    invariant(map);\n\n    // 5. Let isMapped be ! HasOwnProperty(map, P).\n    let isMapped = HasOwnProperty(this.$Realm, map, P);\n\n    // 6. If isMapped is true, then\n    if (isMapped === true) {\n      // a. Set desc.[[Value]] to Get(map, P).\n      desc.value = Get(this.$Realm, map, P);\n    }\n\n    // 7. Return desc.\n    return desc;\n  }\n\n  // ECMA262 9.4.4.2\n  $DefineOwnProperty(P: PropertyKeyValue, _Desc: Descriptor): boolean {\n    let Desc = _Desc.throwIfNotConcrete(this.$Realm);\n\n    // 1. Let args be the arguments object.\n    let args = this;\n\n    // 2. Let map be args.[[ParameterMap]].\n    let map = args.$ParameterMap;\n    invariant(map);\n\n    // 3. Let isMapped be HasOwnProperty(map, P).\n    let isMapped = HasOwnProperty(this.$Realm, map, P);\n\n    // 4. Let newArgDesc be Desc.\n    let newArgDesc = Desc;\n\n    // 5. If isMapped is true and IsDataDescriptor(Desc) is true, then\n    if (isMapped === true && IsDataDescriptor(this.$Realm, Desc) === true) {\n      // a. If Desc.[[Value]] is not present and Desc.[[Writable]] is present and its value is false, then\n      if (Desc.value === undefined && Desc.writable === false) {\n        // i. Let newArgDesc be a copy of Desc.\n        newArgDesc = new PropertyDescriptor(Desc);\n\n        // ii. Set newArgDesc.[[Value]] to Get(map, P).\n        newArgDesc.value = Get(this.$Realm, map, P);\n      }\n    }\n\n    // 6. Let allowed be ? OrdinaryDefineOwnProperty(args, P, newArgDesc).\n    let allowed = Properties.OrdinaryDefineOwnProperty(this.$Realm, args, P, newArgDesc);\n\n    // 7. If allowed is false, return false.\n    if (allowed === false) return false;\n\n    // 8. If isMapped is true, then\n    if (isMapped === true) {\n      // a. If IsAccessorDescriptor(Desc) is true, then\n      if (IsAccessorDescriptor(this.$Realm, Desc) === true) {\n        // i. Call map.[[Delete]](P).\n        map.$Delete(P);\n      } else {\n        // b. Else,\n        // i. If Desc.[[Value]] is present, then\n        if (Desc.value !== undefined) {\n          // 1. Let setStatus be Set(map, P, Desc.[[Value]], false).\n          invariant(Desc.value instanceof Value);\n          let setStatus = Properties.Set(this.$Realm, map, P, Desc.value, false);\n\n          // 2. Assert: setStatus is true because formal parameters mapped by argument objects are always writable.\n          invariant(setStatus === true);\n        }\n\n        // ii. If Desc.[[Writable]] is present and its value is false, then\n        if (Desc.writable === false) {\n          // 1. Call map.[[Delete]](P).\n          map.$Delete(P);\n        }\n      }\n    }\n\n    // 9. Return true.\n    return true;\n  }\n\n  // ECMA262 9.4.4.3\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    // 1. Let args be the arguments object.\n    let args = this;\n\n    // 2. Let map be args.[[ParameterMap]].\n    let map = args.$ParameterMap;\n    invariant(map);\n\n    // 3. Let isMapped be ! HasOwnProperty(map, P).\n    let isMapped = HasOwnProperty(this.$Realm, map, P);\n\n    // 4. If isMapped is false, then\n    if (isMapped === false) {\n      // a. Return ? OrdinaryGet(args, P, Receiver).\n      return OrdinaryGet(this.$Realm, args, P, Receiver);\n    } else {\n      // 5. Else map contains a formal parameter mapping for P,\n      // b. Return Get(map, P).\n      return Get(this.$Realm, map, P);\n    }\n  }\n\n  // ECMA262 9.4.4.4\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    // 1. Let args be the arguments object.\n    let args = this;\n\n    let isMapped, map;\n    // 2. If SameValue(args, Receiver) is false, then\n    if (SameValuePartial(this.$Realm, args, Receiver) === false) {\n      // a. Let isMapped be false.\n      isMapped = false;\n    } else {\n      // 3. Else,\n      // a. Let map be args.[[ParameterMap]].\n      map = args.$ParameterMap;\n      invariant(map);\n\n      // b. Let isMapped be ! HasOwnProperty(map, P).\n      isMapped = HasOwnProperty(this.$Realm, map, P);\n    }\n\n    // 4. If isMapped is true, then\n    if (isMapped === true) {\n      invariant(map);\n      // a. Let setStatus be Set(map, P, V, false).\n      let setStatus = Properties.Set(this.$Realm, map, P, V, false);\n\n      // b. Assert: setStatus is true because formal parameters mapped by argument objects are always writable.\n      invariant(setStatus === true);\n    }\n\n    // 5. Return ? OrdinarySet(args, P, V, Receiver).\n    return Properties.OrdinarySet(this.$Realm, args, P, V, Receiver);\n  }\n\n  // ECMA262 9.4.4.5\n  $Delete(P: PropertyKeyValue): boolean {\n    // 1. Let args be the arguments object.\n    let args = this;\n\n    // 2. Let map be args.[[ParameterMap]].\n    let map = args.$ParameterMap;\n    invariant(map);\n\n    // 3. Let isMapped be ! HasOwnProperty(map, P).\n    let isMapped = HasOwnProperty(this.$Realm, map, P);\n\n    // 4. Let result be ? OrdinaryDelete(args, P).\n    let result = Properties.OrdinaryDelete(this.$Realm, args, P);\n\n    // 5. If result is true and isMapped is true, then\n    if (result === true && isMapped === true) {\n      // a. Call map.[[Delete]](P).\n      map.$Delete(P);\n    }\n\n    // 6. Return result.\n    return result;\n  }\n}\n"],"file":"ArgumentsExotic.js"}