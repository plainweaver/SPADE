{"version":3,"sources":["../../src/values/ECMAScriptSourceFunctionValue.js"],"names":["ECMAScriptSourceFunctionValue","ECMAScriptFunctionValue","constructor","realm","intrinsicName","initialize","params","body","node","getHash","uniqueOrderedTag","undefined","$Realm","functionBodyUniqueTagSeed","$ECMAScriptCode","$FormalParameters","getName","uniqueTag","__originalName","hasDefaultLength","expected","length","i","param","t","isAssignmentPattern","isRestElement","getLength"],"mappings":";;;;;;;AAcA;;AACA;;AACA;;;;;;AAhBA;;;;;;;;;AAkBA;AACe,MAAMA,6BAAN,SAA4CC,8BAA5C,CAAoE;AACjFC,EAAAA,WAAW,CAACC,KAAD,EAAeC,aAAf,EAAuC;AAChD,UAAMD,KAAN,EAAaC,aAAb;AACD;;AASDC,EAAAA,UAAU,CAACC,MAAD,EAA+BC,IAA/B,EAA8D;AACtE,QAAIC,IAAI,GAAKD,IAAb;AACA,SAAKE,OAAL,GAFsE,CAGtE;;AACA,QAAID,IAAI,CAACE,gBAAL,KAA0BC,SAA9B,EAAyCH,IAAI,CAACE,gBAAL,GAAwB,KAAKE,MAAL,CAAYC,yBAAZ,EAAxB;AACzC,SAAKC,eAAL,GAAuBP,IAAvB;AACA,SAAKQ,iBAAL,GAAyBT,MAAzB;AACD,GAnBgF,CAqBjF;;;AACAU,EAAAA,OAAO,GAAW;AAChB,UAAMC,SAAS,GAAK,KAAKH,eAAP,CAAmDJ,gBAArE,CADgB,CAEhB;;AACA,4BAAUO,SAAV;AACA,WAAO,KAAKC,cAAL,GAAsB,KAAKA,cAA3B,GAA6C,YAAWD,SAAU,EAAzE;AACD;;AAEDE,EAAAA,gBAAgB,GAAY;AAC1B,QAAIb,MAAM,GAAG,KAAKS,iBAAlB;AACA,QAAIK,QAAQ,GAAGd,MAAM,CAACe,MAAtB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,MAAM,CAACe,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,UAAIC,KAAK,GAAGjB,MAAM,CAACgB,CAAD,CAAlB;;AACA,UAAIE,CAAC,CAACC,mBAAF,CAAsBF,KAAtB,KAAgCC,CAAC,CAACE,aAAF,CAAgBH,KAAhB,CAApC,EAA4D;AAC1DH,QAAAA,QAAQ,GAAGE,CAAX;AACA;AACD;AACF;;AACD,WAAOF,QAAQ,KAAK,KAAKO,SAAL,EAApB;AACD;;AAxCgF","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { BabelNodeBlockStatement, BabelNodeSourceLocation, BabelNodeLVal } from \"@babel/types\";\nimport type { FunctionBodyAstNode } from \"../types.js\";\nimport { ECMAScriptFunctionValue } from \"./index.js\";\nimport * as t from \"@babel/types\";\nimport invariant from \"../invariant.js\";\n\n/* Non built-in ECMAScript function objects with source code */\nexport default class ECMAScriptSourceFunctionValue extends ECMAScriptFunctionValue {\n  constructor(realm: Realm, intrinsicName?: string) {\n    super(realm, intrinsicName);\n  }\n\n  $Strict: boolean;\n  $FormalParameters: Array<BabelNodeLVal>;\n  $ECMAScriptCode: BabelNodeBlockStatement;\n  $HasComputedName: ?boolean;\n  $HasEmptyConstructor: ?boolean;\n  loc: ?BabelNodeSourceLocation;\n\n  initialize(params: Array<BabelNodeLVal>, body: BabelNodeBlockStatement) {\n    let node = ((body: any): FunctionBodyAstNode);\n    this.getHash();\n    // Record the sequence number, reflecting when this function was initialized for the first time\n    if (node.uniqueOrderedTag === undefined) node.uniqueOrderedTag = this.$Realm.functionBodyUniqueTagSeed++;\n    this.$ECMAScriptCode = body;\n    this.$FormalParameters = params;\n  }\n\n  // Override.\n  getName(): string {\n    const uniqueTag = ((this.$ECMAScriptCode: any): FunctionBodyAstNode).uniqueOrderedTag;\n    // Should only be called after the function is initialized.\n    invariant(uniqueTag);\n    return this.__originalName ? this.__originalName : `function#${uniqueTag}`;\n  }\n\n  hasDefaultLength(): boolean {\n    let params = this.$FormalParameters;\n    let expected = params.length;\n    for (let i = 0; i < params.length; i++) {\n      let param = params[i];\n      if (t.isAssignmentPattern(param) || t.isRestElement(param)) {\n        expected = i;\n        break;\n      }\n    }\n    return expected === this.getLength();\n  }\n}\n"],"file":"ECMAScriptSourceFunctionValue.js"}