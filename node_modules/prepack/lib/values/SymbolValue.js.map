{"version":3,"sources":["../../src/values/SymbolValue.js"],"names":["SymbolValue","PrimitiveValue","constructor","realm","desc","intrinsicName","$Description","equals","x","getHash","hashValue","undefined","$Realm","symbolCount","mightBeFalse","throwIfNotConcreteSymbol","_serialize","Symbol","toDisplayString"],"mappings":";;;;;;;AAWA;;AAXA;;;;;;;;;AASA;AAKe,MAAMA,WAAN,SAA0BC,qBAA1B,CAAyC;AACtDC,EAAAA,WAAW,CAACC,KAAD,EAAeC,IAAf,EAAmCC,aAAnC,EAA2D;AACpE,UAAMF,KAAN,EAAaE,aAAb;AACA,SAAKC,YAAL,GAAoBF,IAApB;AACD;;AAMDG,EAAAA,MAAM,CAACC,CAAD,EAAoB;AACxB,WAAO,SAASA,CAAhB;AACD;;AAEDC,EAAAA,OAAO,GAAW;AAChB,QAAI,KAAKC,SAAL,KAAmBC,SAAvB,EAAkC;AAChC,WAAKD,SAAL,GAAiB,EAAE,KAAKE,MAAL,CAAYC,WAA/B;AACD;;AACD,WAAO,KAAKH,SAAZ;AACD;;AAEDI,EAAAA,YAAY,GAAY;AACtB,WAAO,KAAP;AACD;;AAEDC,EAAAA,wBAAwB,GAAgB;AACtC,WAAO,IAAP;AACD;;AAEDC,EAAAA,UAAU,GAAW;AACnB,WAAOC,MAAM,CAAC,KAAKX,YAAN,CAAb;AACD;;AAEDY,EAAAA,eAAe,GAAW;AACxB,QAAI,KAAKZ,YAAT,EAAuB;AACrB,UAAI,KAAKA,YAAL,YAA6BL,qBAAjC,EAAiD;AAC/C,eAAQ,UAAS,KAAKK,YAAL,CAAkBY,eAAlB,EAAoC,GAArD;AACD;AACF;;AACD,WAAO,yBAAP;AACD;;AAxCqD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { PrimitiveValue, Value } from \"./index.js\";\nimport type { Realm } from \"../realm.js\";\n\nexport default class SymbolValue extends PrimitiveValue {\n  constructor(realm: Realm, desc: void | Value, intrinsicName?: string) {\n    super(realm, intrinsicName);\n    this.$Description = desc;\n  }\n\n  $Description: void | Value;\n\n  hashValue: void | number;\n\n  equals(x: Value): boolean {\n    return this === x;\n  }\n\n  getHash(): number {\n    if (this.hashValue === undefined) {\n      this.hashValue = ++this.$Realm.symbolCount;\n    }\n    return this.hashValue;\n  }\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  throwIfNotConcreteSymbol(): SymbolValue {\n    return this;\n  }\n\n  _serialize(): Symbol {\n    return Symbol(this.$Description);\n  }\n\n  toDisplayString(): string {\n    if (this.$Description) {\n      if (this.$Description instanceof PrimitiveValue) {\n        return `Symbol(${this.$Description.toDisplayString()})`;\n      }\n    }\n    return \"Symbol(to be supported)\";\n  }\n}\n"],"file":"SymbolValue.js"}