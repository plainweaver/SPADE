{"version":3,"sources":["../../src/values/BooleanValue.js"],"names":["BooleanValue","PrimitiveValue","constructor","realm","value","intrinsicName","intrinsics","true","false","equals","x","getHash","mightBeFalse","throwIfNotConcreteBoolean","_serialize","toDisplayString","toString"],"mappings":";;;;;;;AAWA;;AAXA;;;;;;;;;AASA;AAKe,MAAMA,YAAN,SAA2BC,qBAA3B,CAA0C;AACvDC,EAAAA,WAAW,CAACC,KAAD,EAAeC,KAAf,EAA+BC,aAA/B,EAAuD;AAChE,UAAMF,KAAN,EAAaE,aAAb;AACA,SAAKD,KAAL,GAAaA,KAAb;AAEA,QAAIA,KAAK,IAAID,KAAK,CAACG,UAAN,CAAiBC,IAA9B,EAAoC,OAAOJ,KAAK,CAACG,UAAN,CAAiBC,IAAxB;AACpC,QAAI,CAACH,KAAD,IAAUD,KAAK,CAACG,UAAN,CAAiBE,KAA/B,EAAsC,OAAOL,KAAK,CAACG,UAAN,CAAiBE,KAAxB;AACvC;;AAIDC,EAAAA,MAAM,CAACC,CAAD,EAAoB;AACxB,WAAOA,CAAC,YAAYV,YAAb,IAA6B,KAAKI,KAAL,KAAeM,CAAC,CAACN,KAArD;AACD;;AAEDO,EAAAA,OAAO,GAAW;AAChB,WAAO,KAAKP,KAAL,GAAa,iBAAb,GAAiC,gBAAxC;AACD;;AAEDQ,EAAAA,YAAY,GAAY;AACtB,WAAO,CAAC,KAAKR,KAAb;AACD;;AAEDS,EAAAA,yBAAyB,GAAiB;AACxC,WAAO,IAAP;AACD;;AAEDC,EAAAA,UAAU,GAAY;AACpB,WAAO,KAAKV,KAAZ;AACD;;AAEDW,EAAAA,eAAe,GAAW;AACxB,WAAO,KAAKX,KAAL,CAAWY,QAAX,EAAP;AACD;;AAjCsD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { PrimitiveValue, Value } from \"./index.js\";\nimport type { Realm } from \"../realm.js\";\n\nexport default class BooleanValue extends PrimitiveValue {\n  constructor(realm: Realm, value: boolean, intrinsicName?: string) {\n    super(realm, intrinsicName);\n    this.value = value;\n\n    if (value && realm.intrinsics.true) return realm.intrinsics.true;\n    if (!value && realm.intrinsics.false) return realm.intrinsics.false;\n  }\n\n  value: boolean;\n\n  equals(x: Value): boolean {\n    return x instanceof BooleanValue && this.value === x.value;\n  }\n\n  getHash(): number {\n    return this.value ? 12484058682847432 : 3777063795205331;\n  }\n\n  mightBeFalse(): boolean {\n    return !this.value;\n  }\n\n  throwIfNotConcreteBoolean(): BooleanValue {\n    return this;\n  }\n\n  _serialize(): boolean {\n    return this.value;\n  }\n\n  toDisplayString(): string {\n    return this.value.toString();\n  }\n}\n"],"file":"BooleanValue.js"}