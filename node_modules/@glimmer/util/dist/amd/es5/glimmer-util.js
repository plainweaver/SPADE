define('@glimmer/util', ['exports'], function (exports) { 'use strict';

    var EMPTY_ARRAY = Object.freeze([]);

    // import Logger from './logger';
    // let alreadyWarned = false;
    function debugAssert(test, msg) {
        // if (!alreadyWarned) {
        //   alreadyWarned = true;
        //   Logger.warn("Don't leave debug assertions on in public builds");
        // }
        if (!test) {
            throw new Error(msg || 'assertion failure');
        }
    }
    function deprecate(desc) {
        console.warn('DEPRECATION: ' + desc);
    }

    var GUID = 0;
    function initializeGuid(object) {
        return object._guid = ++GUID;
    }
    function ensureGuid(object) {
        return object._guid || initializeGuid(object);
    }

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    function dict() {
        return Object.create(null);
    }
    function isDict(u) {
        return u !== null && u !== undefined;
    }
    function isObject(u) {
        return typeof u === 'object' && u !== null;
    }
    var DictSet = function () {
        function DictSet() {
            _classCallCheck(this, DictSet);

            this.dict = dict();
        }

        DictSet.prototype.add = function add(obj) {
            if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;
            return this;
        };

        DictSet.prototype.delete = function _delete(obj) {
            if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];
        };

        return DictSet;
    }();
    var StackImpl = function () {
        function StackImpl() {
            _classCallCheck(this, StackImpl);

            this.stack = [];
            this.current = null;
        }

        StackImpl.prototype.push = function push(item) {
            this.current = item;
            this.stack.push(item);
        };

        StackImpl.prototype.pop = function pop() {
            var item = this.stack.pop();
            var len = this.stack.length;
            this.current = len === 0 ? null : this.stack[len - 1];
            return item === undefined ? null : item;
        };

        StackImpl.prototype.nth = function nth(from) {
            var len = this.stack.length;
            return len < from ? null : this.stack[len - from];
        };

        StackImpl.prototype.isEmpty = function isEmpty() {
            return this.stack.length === 0;
        };

        StackImpl.prototype.toArray = function toArray() {
            return this.stack;
        };

        _createClass(StackImpl, [{
            key: 'size',
            get: function get() {
                return this.stack.length;
            }
        }]);

        return StackImpl;
    }();

    function keys(obj) {
        return Object.keys(obj);
    }
    function unwrap(val) {
        if (val === null || val === undefined) throw new Error('Expected value to be present');
        return val;
    }
    function expect(val, message) {
        if (val === null || val === undefined) throw new Error(message);
        return val;
    }
    function unreachable() {
        var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unreachable';

        return new Error(message);
    }
    function exhausted(value) {
        throw new Error('Exhausted ' + value);
    }
    var tuple = function tuple() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return args;
    };
    var symbol = typeof Symbol !== 'undefined' ? Symbol : function (key) {
        return '__' + key + Math.floor(Math.random() * Date.now()) + '__';
    };

    var DESTROY = symbol('DESTROY');
    function isDestroyable(value) {
        return !!(value && value[DESTROY] !== undefined);
    }
    function isStringDestroyable(value) {
        return !!(value && typeof value === 'object' && typeof value.destroy === 'function');
    }

    function clearElement(parent) {
        var current = parent.firstChild;
        while (current) {
            var next = current.nextSibling;
            parent.removeChild(current);
            current = next;
        }
    }

    var SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
    function isSerializationFirstNode(node) {
        return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
    }

    var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    var LINKED = new WeakMap();
    var WILL_DROP = symbol('WILL_DROP');
    var DID_DROP = symbol('DID_DROP');
    var CHILDREN = symbol('CHILDREN');
    var DESTRUCTORS = new WeakMap();
    function isDrop(value) {
        if (value === null || typeof value !== 'object') return false;
        return value[DID_DROP] !== undefined;
    }
    function associate(parent, child) {
        associateDestructor(parent, destructor(child));
    }
    function associateDestructor(parent, child) {
        var associated = LINKED.get(parent);
        if (!associated) {
            associated = new Set();
            LINKED.set(parent, associated);
        }
        associated.add(child);
    }
    function peekAssociated(parent) {
        return LINKED.get(parent) || null;
    }
    function takeAssociated(parent) {
        var linked = LINKED.get(parent);
        if (linked && linked.size > 0) {
            LINKED.delete(parent);
            return linked;
        } else {
            return null;
        }
    }
    function willDestroyAssociated(parent) {
        var associated = LINKED.get(parent);
        if (associated) {
            associated.forEach(function (item) {
                item[WILL_DROP]();
            });
        }
    }
    function didDestroyAssociated(parent) {
        var associated = LINKED.get(parent);
        if (associated) {
            associated.forEach(function (item) {
                item[DID_DROP]();
                associated.delete(item);
            });
        }
    }
    function destructor(value) {
        var d = DESTRUCTORS.get(value);
        if (!d) {
            if (isDestroyable(value)) {
                d = new DestroyableDestructor(value);
            } else if (isStringDestroyable(value)) {
                d = new StringDestroyableDestructor(value);
            } else {
                d = new SimpleDestructor(value);
            }
            DESTRUCTORS.set(value, d);
        }
        return d;
    }
    function snapshot(values) {
        return new SnapshotDestructor(values);
    }

    var SnapshotDestructor = function () {
        function SnapshotDestructor(destructors) {
            _classCallCheck$1(this, SnapshotDestructor);

            this.destructors = destructors;
        }

        SnapshotDestructor.prototype[WILL_DROP] = function () {
            this.destructors.forEach(function (item) {
                return item[WILL_DROP]();
            });
        };

        SnapshotDestructor.prototype[DID_DROP] = function () {
            this.destructors.forEach(function (item) {
                return item[DID_DROP]();
            });
        };

        SnapshotDestructor.prototype.toString = function toString() {
            return 'SnapshotDestructor';
        };

        _createClass$1(SnapshotDestructor, [{
            key: CHILDREN,
            get: function get() {
                return this.destructors;
            }
        }]);

        return SnapshotDestructor;
    }();

    var DestroyableDestructor = function () {
        function DestroyableDestructor(inner) {
            _classCallCheck$1(this, DestroyableDestructor);

            this.inner = inner;
        }

        DestroyableDestructor.prototype[WILL_DROP] = function () {
            willDestroyAssociated(this.inner);
        };

        DestroyableDestructor.prototype[DID_DROP] = function () {
            this.inner[DESTROY]();
            didDestroyAssociated(this.inner);
        };

        DestroyableDestructor.prototype.toString = function toString() {
            return 'DestroyableDestructor';
        };

        _createClass$1(DestroyableDestructor, [{
            key: CHILDREN,
            get: function get() {
                return LINKED.get(this.inner) || [];
            }
        }]);

        return DestroyableDestructor;
    }();

    var StringDestroyableDestructor = function () {
        function StringDestroyableDestructor(inner) {
            _classCallCheck$1(this, StringDestroyableDestructor);

            this.inner = inner;
        }

        StringDestroyableDestructor.prototype[WILL_DROP] = function () {
            if (typeof this.inner.willDestroy === 'function') {
                this.inner.willDestroy();
            }
            willDestroyAssociated(this.inner);
        };

        StringDestroyableDestructor.prototype[DID_DROP] = function () {
            this.inner.destroy();
            didDestroyAssociated(this.inner);
        };

        StringDestroyableDestructor.prototype.toString = function toString() {
            return 'StringDestroyableDestructor';
        };

        _createClass$1(StringDestroyableDestructor, [{
            key: CHILDREN,
            get: function get() {
                return LINKED.get(this.inner) || [];
            }
        }]);

        return StringDestroyableDestructor;
    }();

    var SimpleDestructor = function () {
        function SimpleDestructor(inner) {
            _classCallCheck$1(this, SimpleDestructor);

            this.inner = inner;
        }

        SimpleDestructor.prototype[WILL_DROP] = function () {
            willDestroyAssociated(this.inner);
        };

        SimpleDestructor.prototype[DID_DROP] = function () {
            didDestroyAssociated(this.inner);
        };

        SimpleDestructor.prototype.toString = function toString() {
            return 'SimpleDestructor';
        };

        _createClass$1(SimpleDestructor, [{
            key: CHILDREN,
            get: function get() {
                return LINKED.get(this.inner) || [];
            }
        }]);

        return SimpleDestructor;
    }();

    var ListContentsDestructor = function () {
        function ListContentsDestructor(inner) {
            _classCallCheck$1(this, ListContentsDestructor);

            this.inner = inner;
        }

        ListContentsDestructor.prototype[WILL_DROP] = function () {
            this.inner.forEachNode(function (d) {
                return destructor(d)[WILL_DROP]();
            });
        };

        ListContentsDestructor.prototype[DID_DROP] = function () {
            this.inner.forEachNode(function (d) {
                return destructor(d)[DID_DROP]();
            });
        };

        ListContentsDestructor.prototype.toString = function toString() {
            return 'ListContentsDestructor';
        };

        _createClass$1(ListContentsDestructor, [{
            key: CHILDREN,
            get: function get() {
                var out = [];
                this.inner.forEachNode(function (d) {
                    return out.push.apply(out, destructor(d)[CHILDREN]);
                });
                return out;
            }
        }]);

        return ListContentsDestructor;
    }();
    function debugDropTree(inner) {
        var hasDrop = isDrop(inner);
        var rawChildren = LINKED.get(inner) || null;
        var children = null;
        if (rawChildren) {
            children = [];
            for (var _iterator = rawChildren, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                var child = _ref;

                children.push(debugDropTree(child));
            }
        }
        var obj = Object.create(null);
        obj.inner = inner;
        if (children) {
            obj.children = children;
        }
        obj.hasDrop = hasDrop;
        return obj;
    }
    function printDropTree(inner) {
        printDrop(destructor(inner));
    }
    function printDrop(inner) {
        console.group(String(inner));
        console.log(inner);
        var children = inner[CHILDREN] || null;
        if (children) {
            for (var _iterator2 = children, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                var child = _ref2;

                printDrop(child);
            }
        }
        console.groupEnd();
    }

    var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    var ListNode = function ListNode(value) {
        _classCallCheck$2(this, ListNode);

        this.next = null;
        this.prev = null;
        this.value = value;
    };
    var LinkedList = function () {
        function LinkedList() {
            _classCallCheck$2(this, LinkedList);

            this.clear();
        }

        LinkedList.prototype.head = function head() {
            return this._head;
        };

        LinkedList.prototype.tail = function tail() {
            return this._tail;
        };

        LinkedList.prototype.clear = function clear() {
            this._head = this._tail = null;
        };

        LinkedList.prototype.toArray = function toArray() {
            var out = [];
            this.forEachNode(function (n) {
                return out.push(n);
            });
            return out;
        };

        LinkedList.prototype.nextNode = function nextNode(node) {
            return node.next;
        };

        LinkedList.prototype.forEachNode = function forEachNode(callback) {
            var node = this._head;
            while (node !== null) {
                callback(node);
                node = node.next;
            }
        };

        LinkedList.prototype.insertBefore = function insertBefore(node) {
            var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (reference === null) return this.append(node);
            if (reference.prev) reference.prev.next = node;else this._head = node;
            node.prev = reference.prev;
            node.next = reference;
            reference.prev = node;
            return node;
        };

        LinkedList.prototype.append = function append(node) {
            var tail = this._tail;
            if (tail) {
                tail.next = node;
                node.prev = tail;
                node.next = null;
            } else {
                this._head = node;
            }
            return this._tail = node;
        };

        LinkedList.prototype.remove = function remove(node) {
            if (node.prev) node.prev.next = node.next;else this._head = node.next;
            if (node.next) node.next.prev = node.prev;else this._tail = node.prev;
            return node;
        };

        LinkedList.prototype[WILL_DROP] = function () {
            this.forEachNode(function (d) {
                return destructor(d)[WILL_DROP]();
            });
        };

        LinkedList.prototype[DID_DROP] = function () {
            this.forEachNode(function (d) {
                return destructor(d)[DID_DROP]();
            });
        };

        _createClass$2(LinkedList, [{
            key: CHILDREN,
            get: function get() {
                var out = [];
                this.forEachNode(function (d) {
                    return out.push.apply(out, destructor(d)[CHILDREN]);
                });
                return out;
            }
        }]);

        return LinkedList;
    }();
    var ListSlice = function () {
        function ListSlice(head, tail) {
            _classCallCheck$2(this, ListSlice);

            this._head = head;
            this._tail = tail;
        }

        ListSlice.prototype.forEachNode = function forEachNode(callback) {
            var node = this._head;
            while (node !== null) {
                callback(node);
                node = this.nextNode(node);
            }
        };

        ListSlice.prototype.head = function head() {
            return this._head;
        };

        ListSlice.prototype.tail = function tail() {
            return this._tail;
        };

        ListSlice.prototype.toArray = function toArray() {
            var out = [];
            this.forEachNode(function (n) {
                return out.push(n);
            });
            return out;
        };

        ListSlice.prototype.nextNode = function nextNode(node) {
            if (node === this._tail) return null;
            return node.next;
        };

        return ListSlice;
    }();
    var EMPTY_SLICE = new ListSlice(null, null);

    var objKeys = Object.keys;

    function assign(obj) {
        for (var i = 1; i < arguments.length; i++) {
            var assignment = arguments[i];
            if (assignment === null || typeof assignment !== 'object') continue;
            var keys = objKeys(assignment);
            for (var j = 0; j < keys.length; j++) {
                var key = keys[j];
                obj[key] = assignment[key];
            }
        }
        return obj;
    }
    function fillNulls(count) {
        var arr = new Array(count);
        for (var i = 0; i < count; i++) {
            arr[i] = null;
        }
        return arr;
    }
    function values(obj) {
        var vals = [];
        for (var key in obj) {
            vals.push(obj[key]);
        }
        return vals;
    }

    function strip(strings) {
        var out = '';

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        for (var i = 0; i < strings.length; i++) {
            var string = strings[i];
            var dynamic = args[i] !== undefined ? String(args[i]) : '';
            out += '' + string + dynamic;
        }
        var lines = out.split('\n');
        while (lines.length && lines[0].match(/^\s*$/)) {
            lines.shift();
        }
        while (lines.length && lines[lines.length - 1].match(/^\s*$/)) {
            lines.pop();
        }
        var min = Infinity;
        for (var _iterator = lines, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var line = _ref;

            var leading = line.match(/^\s*/)[0].length;
            min = Math.min(min, leading);
        }
        var stripped = [];
        for (var _iterator2 = lines, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var _line = _ref2;

            stripped.push(_line.slice(min));
        }
        return stripped.join('\n');
    }

    function assertNever(value) {
        var desc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unexpected unreachable branch';

        console.log('unreachable', value);
        console.trace(desc + ' :: ' + JSON.stringify(value) + ' (' + value + ')');
    }

    exports.assertNever = assertNever;
    exports.EMPTY_ARRAY = EMPTY_ARRAY;
    exports.assert = debugAssert;
    exports.deprecate = deprecate;
    exports.dict = dict;
    exports.DictSet = DictSet;
    exports.isDict = isDict;
    exports.isObject = isObject;
    exports.Stack = StackImpl;
    exports.ensureGuid = ensureGuid;
    exports.initializeGuid = initializeGuid;
    exports.isSerializationFirstNode = isSerializationFirstNode;
    exports.SERIALIZATION_FIRST_NODE_STRING = SERIALIZATION_FIRST_NODE_STRING;
    exports.EMPTY_SLICE = EMPTY_SLICE;
    exports.LinkedList = LinkedList;
    exports.ListNode = ListNode;
    exports.ListSlice = ListSlice;
    exports.assign = assign;
    exports.fillNulls = fillNulls;
    exports.values = values;
    exports.DESTROY = DESTROY;
    exports.isDestroyable = isDestroyable;
    exports.isStringDestroyable = isStringDestroyable;
    exports.clearElement = clearElement;
    exports.LINKED = LINKED;
    exports.WILL_DROP = WILL_DROP;
    exports.DID_DROP = DID_DROP;
    exports.CHILDREN = CHILDREN;
    exports.DESTRUCTORS = DESTRUCTORS;
    exports.isDrop = isDrop;
    exports.associate = associate;
    exports.associateDestructor = associateDestructor;
    exports.peekAssociated = peekAssociated;
    exports.takeAssociated = takeAssociated;
    exports.willDestroyAssociated = willDestroyAssociated;
    exports.didDestroyAssociated = didDestroyAssociated;
    exports.destructor = destructor;
    exports.snapshot = snapshot;
    exports.ListContentsDestructor = ListContentsDestructor;
    exports.debugDropTree = debugDropTree;
    exports.printDropTree = printDropTree;
    exports.printDrop = printDrop;
    exports.keys = keys;
    exports.unwrap = unwrap;
    exports.expect = expect;
    exports.unreachable = unreachable;
    exports.exhausted = exhausted;
    exports.tuple = tuple;
    exports.symbol = symbol;
    exports.strip = strip;

    Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,