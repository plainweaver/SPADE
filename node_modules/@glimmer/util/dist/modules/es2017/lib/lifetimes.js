import { isDestroyable, isStringDestroyable, DESTROY } from './destroy';

import { symbol } from './platform-utils';
export const LINKED = new WeakMap();
export const WILL_DROP = symbol('WILL_DROP');
export const DID_DROP = symbol('DID_DROP');
export const CHILDREN = symbol('CHILDREN');
export const DESTRUCTORS = new WeakMap();
export function isDrop(value) {
    if (value === null || typeof value !== 'object') return false;
    return value[DID_DROP] !== undefined;
}
export function associate(parent, child) {
    associateDestructor(parent, destructor(child));
}
export function associateDestructor(parent, child) {
    let associated = LINKED.get(parent);
    if (!associated) {
        associated = new Set();
        LINKED.set(parent, associated);
    }
    associated.add(child);
}
export function peekAssociated(parent) {
    return LINKED.get(parent) || null;
}
export function takeAssociated(parent) {
    let linked = LINKED.get(parent);
    if (linked && linked.size > 0) {
        LINKED.delete(parent);
        return linked;
    } else {
        return null;
    }
}
export function willDestroyAssociated(parent) {
    let associated = LINKED.get(parent);
    if (associated) {
        associated.forEach(item => {
            item[WILL_DROP]();
        });
    }
}
export function didDestroyAssociated(parent) {
    let associated = LINKED.get(parent);
    if (associated) {
        associated.forEach(item => {
            item[DID_DROP]();
            associated.delete(item);
        });
    }
}
export function destructor(value) {
    let d = DESTRUCTORS.get(value);
    if (!d) {
        if (isDestroyable(value)) {
            d = new DestroyableDestructor(value);
        } else if (isStringDestroyable(value)) {
            d = new StringDestroyableDestructor(value);
        } else {
            d = new SimpleDestructor(value);
        }
        DESTRUCTORS.set(value, d);
    }
    return d;
}
export function snapshot(values) {
    return new SnapshotDestructor(values);
}
class SnapshotDestructor {
    constructor(destructors) {
        this.destructors = destructors;
    }
    [WILL_DROP]() {
        this.destructors.forEach(item => item[WILL_DROP]());
    }
    [DID_DROP]() {
        this.destructors.forEach(item => item[DID_DROP]());
    }
    get [CHILDREN]() {
        return this.destructors;
    }
    toString() {
        return 'SnapshotDestructor';
    }
}
class DestroyableDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [WILL_DROP]() {
        willDestroyAssociated(this.inner);
    }
    [DID_DROP]() {
        this.inner[DESTROY]();
        didDestroyAssociated(this.inner);
    }
    get [CHILDREN]() {
        return LINKED.get(this.inner) || [];
    }
    toString() {
        return 'DestroyableDestructor';
    }
}
class StringDestroyableDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [WILL_DROP]() {
        if (typeof this.inner.willDestroy === 'function') {
            this.inner.willDestroy();
        }
        willDestroyAssociated(this.inner);
    }
    [DID_DROP]() {
        this.inner.destroy();
        didDestroyAssociated(this.inner);
    }
    get [CHILDREN]() {
        return LINKED.get(this.inner) || [];
    }
    toString() {
        return 'StringDestroyableDestructor';
    }
}
class SimpleDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [WILL_DROP]() {
        willDestroyAssociated(this.inner);
    }
    [DID_DROP]() {
        didDestroyAssociated(this.inner);
    }
    get [CHILDREN]() {
        return LINKED.get(this.inner) || [];
    }
    toString() {
        return 'SimpleDestructor';
    }
}
export class ListContentsDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [WILL_DROP]() {
        this.inner.forEachNode(d => destructor(d)[WILL_DROP]());
    }
    [DID_DROP]() {
        this.inner.forEachNode(d => destructor(d)[DID_DROP]());
    }
    get [CHILDREN]() {
        let out = [];
        this.inner.forEachNode(d => out.push(...destructor(d)[CHILDREN]));
        return out;
    }
    toString() {
        return 'ListContentsDestructor';
    }
}
export function debugDropTree(inner) {
    let hasDrop = isDrop(inner);
    let rawChildren = LINKED.get(inner) || null;
    let children = null;
    if (rawChildren) {
        children = [];
        for (let child of rawChildren) {
            children.push(debugDropTree(child));
        }
    }
    let obj = Object.create(null);
    obj.inner = inner;
    if (children) {
        obj.children = children;
    }
    obj.hasDrop = hasDrop;
    return obj;
}
export function printDropTree(inner) {
    printDrop(destructor(inner));
}
export function printDrop(inner) {
    console.group(String(inner));
    console.log(inner);
    let children = inner[CHILDREN] || null;
    if (children) {
        for (let child of children) {
            printDrop(child);
        }
    }
    console.groupEnd();
}
if (false && typeof window !== 'undefined') {
    window.PRINT_DROP = printDropTree;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,