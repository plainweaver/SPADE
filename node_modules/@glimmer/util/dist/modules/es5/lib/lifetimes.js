var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { isDestroyable, isStringDestroyable, DESTROY } from './destroy';

import { symbol } from './platform-utils';
export var LINKED = new WeakMap();
export var WILL_DROP = symbol('WILL_DROP');
export var DID_DROP = symbol('DID_DROP');
export var CHILDREN = symbol('CHILDREN');
export var DESTRUCTORS = new WeakMap();
export function isDrop(value) {
    if (value === null || typeof value !== 'object') return false;
    return value[DID_DROP] !== undefined;
}
export function associate(parent, child) {
    associateDestructor(parent, destructor(child));
}
export function associateDestructor(parent, child) {
    var associated = LINKED.get(parent);
    if (!associated) {
        associated = new Set();
        LINKED.set(parent, associated);
    }
    associated.add(child);
}
export function peekAssociated(parent) {
    return LINKED.get(parent) || null;
}
export function takeAssociated(parent) {
    var linked = LINKED.get(parent);
    if (linked && linked.size > 0) {
        LINKED.delete(parent);
        return linked;
    } else {
        return null;
    }
}
export function willDestroyAssociated(parent) {
    var associated = LINKED.get(parent);
    if (associated) {
        associated.forEach(function (item) {
            item[WILL_DROP]();
        });
    }
}
export function didDestroyAssociated(parent) {
    var associated = LINKED.get(parent);
    if (associated) {
        associated.forEach(function (item) {
            item[DID_DROP]();
            associated.delete(item);
        });
    }
}
export function destructor(value) {
    var d = DESTRUCTORS.get(value);
    if (!d) {
        if (isDestroyable(value)) {
            d = new DestroyableDestructor(value);
        } else if (isStringDestroyable(value)) {
            d = new StringDestroyableDestructor(value);
        } else {
            d = new SimpleDestructor(value);
        }
        DESTRUCTORS.set(value, d);
    }
    return d;
}
export function snapshot(values) {
    return new SnapshotDestructor(values);
}

var SnapshotDestructor = function () {
    function SnapshotDestructor(destructors) {
        _classCallCheck(this, SnapshotDestructor);

        this.destructors = destructors;
    }

    SnapshotDestructor.prototype[WILL_DROP] = function () {
        this.destructors.forEach(function (item) {
            return item[WILL_DROP]();
        });
    };

    SnapshotDestructor.prototype[DID_DROP] = function () {
        this.destructors.forEach(function (item) {
            return item[DID_DROP]();
        });
    };

    SnapshotDestructor.prototype.toString = function toString() {
        return 'SnapshotDestructor';
    };

    _createClass(SnapshotDestructor, [{
        key: CHILDREN,
        get: function get() {
            return this.destructors;
        }
    }]);

    return SnapshotDestructor;
}();

var DestroyableDestructor = function () {
    function DestroyableDestructor(inner) {
        _classCallCheck(this, DestroyableDestructor);

        this.inner = inner;
    }

    DestroyableDestructor.prototype[WILL_DROP] = function () {
        willDestroyAssociated(this.inner);
    };

    DestroyableDestructor.prototype[DID_DROP] = function () {
        this.inner[DESTROY]();
        didDestroyAssociated(this.inner);
    };

    DestroyableDestructor.prototype.toString = function toString() {
        return 'DestroyableDestructor';
    };

    _createClass(DestroyableDestructor, [{
        key: CHILDREN,
        get: function get() {
            return LINKED.get(this.inner) || [];
        }
    }]);

    return DestroyableDestructor;
}();

var StringDestroyableDestructor = function () {
    function StringDestroyableDestructor(inner) {
        _classCallCheck(this, StringDestroyableDestructor);

        this.inner = inner;
    }

    StringDestroyableDestructor.prototype[WILL_DROP] = function () {
        if (typeof this.inner.willDestroy === 'function') {
            this.inner.willDestroy();
        }
        willDestroyAssociated(this.inner);
    };

    StringDestroyableDestructor.prototype[DID_DROP] = function () {
        this.inner.destroy();
        didDestroyAssociated(this.inner);
    };

    StringDestroyableDestructor.prototype.toString = function toString() {
        return 'StringDestroyableDestructor';
    };

    _createClass(StringDestroyableDestructor, [{
        key: CHILDREN,
        get: function get() {
            return LINKED.get(this.inner) || [];
        }
    }]);

    return StringDestroyableDestructor;
}();

var SimpleDestructor = function () {
    function SimpleDestructor(inner) {
        _classCallCheck(this, SimpleDestructor);

        this.inner = inner;
    }

    SimpleDestructor.prototype[WILL_DROP] = function () {
        willDestroyAssociated(this.inner);
    };

    SimpleDestructor.prototype[DID_DROP] = function () {
        didDestroyAssociated(this.inner);
    };

    SimpleDestructor.prototype.toString = function toString() {
        return 'SimpleDestructor';
    };

    _createClass(SimpleDestructor, [{
        key: CHILDREN,
        get: function get() {
            return LINKED.get(this.inner) || [];
        }
    }]);

    return SimpleDestructor;
}();

export var ListContentsDestructor = function () {
    function ListContentsDestructor(inner) {
        _classCallCheck(this, ListContentsDestructor);

        this.inner = inner;
    }

    ListContentsDestructor.prototype[WILL_DROP] = function () {
        this.inner.forEachNode(function (d) {
            return destructor(d)[WILL_DROP]();
        });
    };

    ListContentsDestructor.prototype[DID_DROP] = function () {
        this.inner.forEachNode(function (d) {
            return destructor(d)[DID_DROP]();
        });
    };

    ListContentsDestructor.prototype.toString = function toString() {
        return 'ListContentsDestructor';
    };

    _createClass(ListContentsDestructor, [{
        key: CHILDREN,
        get: function get() {
            var out = [];
            this.inner.forEachNode(function (d) {
                return out.push.apply(out, destructor(d)[CHILDREN]);
            });
            return out;
        }
    }]);

    return ListContentsDestructor;
}();
export function debugDropTree(inner) {
    var hasDrop = isDrop(inner);
    var rawChildren = LINKED.get(inner) || null;
    var children = null;
    if (rawChildren) {
        children = [];
        for (var _iterator = rawChildren, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var child = _ref;

            children.push(debugDropTree(child));
        }
    }
    var obj = Object.create(null);
    obj.inner = inner;
    if (children) {
        obj.children = children;
    }
    obj.hasDrop = hasDrop;
    return obj;
}
export function printDropTree(inner) {
    printDrop(destructor(inner));
}
export function printDrop(inner) {
    console.group(String(inner));
    console.log(inner);
    var children = inner[CHILDREN] || null;
    if (children) {
        for (var _iterator2 = children, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var child = _ref2;

            printDrop(child);
        }
    }
    console.groupEnd();
}
if (false && typeof window !== 'undefined') {
    window.PRINT_DROP = printDropTree;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,