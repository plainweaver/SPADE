'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _tokenizerEventHandlers = require('../parser/tokenizer-event-handlers');

var _util = require('./util');

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var NON_WHITESPACE = /\S/;

var Printer = function () {
    function Printer(options) {
        _classCallCheck(this, Printer);

        this.buffer = '';
        this.options = options;
    }
    /*
      This is used by _all_ methods on this Printer class that add to `this.buffer`,
      it allows consumers of the printer to use alternate string representations for
      a given node.
         The primary use case for this are things like source -> source codemod utilities.
      For example, ember-template-recast attempts to always preserve the original string
      formatting in each AST node if no modifications are made to it.
    */

    Printer.prototype.handledByOverride = function handledByOverride(node) {
        var ensureLeadingWhitespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (this.options.override !== undefined) {
            var result = this.options.override(node, this.options);
            if (typeof result === 'string') {
                if (ensureLeadingWhitespace && NON_WHITESPACE.test(result[0])) {
                    result = ' ' + result;
                }
                this.buffer += result;
                return true;
            }
        }
        return false;
    };

    Printer.prototype.Node = function Node(node) {
        switch (node.type) {
            case 'MustacheStatement':
            case 'BlockStatement':
            case 'PartialStatement':
            case 'MustacheCommentStatement':
            case 'CommentStatement':
            case 'TextNode':
            case 'ElementNode':
            case 'AttrNode':
            case 'Block':
            case 'Template':
                return this.TopLevelStatement(node);
            case 'StringLiteral':
            case 'BooleanLiteral':
            case 'NumberLiteral':
            case 'UndefinedLiteral':
            case 'NullLiteral':
            case 'PathExpression':
            case 'SubExpression':
                return this.Expression(node);
            case 'Program':
                return this.Block(node);
            case 'ConcatStatement':
                // should have an AttrNode parent
                return this.ConcatStatement(node);
            case 'Hash':
                return this.Hash(node);
            case 'HashPair':
                return this.HashPair(node);
            case 'ElementModifierStatement':
                return this.ElementModifierStatement(node);
        }
        return unreachable(node);
    };

    Printer.prototype.Expression = function Expression(expression) {
        switch (expression.type) {
            case 'StringLiteral':
            case 'BooleanLiteral':
            case 'NumberLiteral':
            case 'UndefinedLiteral':
            case 'NullLiteral':
                return this.Literal(expression);
            case 'PathExpression':
                return this.PathExpression(expression);
            case 'SubExpression':
                return this.SubExpression(expression);
        }
        return unreachable(expression);
    };

    Printer.prototype.Literal = function Literal(literal) {
        switch (literal.type) {
            case 'StringLiteral':
                return this.StringLiteral(literal);
            case 'BooleanLiteral':
                return this.BooleanLiteral(literal);
            case 'NumberLiteral':
                return this.NumberLiteral(literal);
            case 'UndefinedLiteral':
                return this.UndefinedLiteral(literal);
            case 'NullLiteral':
                return this.NullLiteral(literal);
        }
        return unreachable(literal);
    };

    Printer.prototype.TopLevelStatement = function TopLevelStatement(statement) {
        switch (statement.type) {
            case 'MustacheStatement':
                return this.MustacheStatement(statement);
            case 'BlockStatement':
                return this.BlockStatement(statement);
            case 'PartialStatement':
                return this.PartialStatement(statement);
            case 'MustacheCommentStatement':
                return this.MustacheCommentStatement(statement);
            case 'CommentStatement':
                return this.CommentStatement(statement);
            case 'TextNode':
                return this.TextNode(statement);
            case 'ElementNode':
                return this.ElementNode(statement);
            case 'Block':
            case 'Template':
                return this.Block(statement);
            case 'AttrNode':
                // should have element
                return this.AttrNode(statement);
        }
        unreachable(statement);
    };

    Printer.prototype.Block = function Block(block) {
        /*
          When processing a template like:
               ```hbs
          {{#if whatever}}
            whatever
          {{else if somethingElse}}
            something else
          {{else}}
            fallback
          {{/if}}
          ```
               The AST still _effectively_ looks like:
               ```hbs
          {{#if whatever}}
            whatever
          {{else}}{{#if somethingElse}}
            something else
          {{else}}
            fallback
          {{/if}}{{/if}}
          ```
               The only way we can tell if that is the case is by checking for
          `block.chained`, but unfortunately when the actual statements are
          processed the `block.body[0]` node (which will always be a
          `BlockStatement`) has no clue that its anscestor `Block` node was
          chained.
               This "forwards" the `chained` setting so that we can check
          it later when processing the `BlockStatement`.
        */
        if (block.chained) {
            var firstChild = block.body[0];
            firstChild.chained = true;
        }
        if (this.handledByOverride(block)) {
            return;
        }
        this.TopLevelStatements(block.body);
    };

    Printer.prototype.TopLevelStatements = function TopLevelStatements(statements) {
        var _this = this;

        statements.forEach(function (statement) {
            return _this.TopLevelStatement(statement);
        });
    };

    Printer.prototype.ElementNode = function ElementNode(el) {
        if (this.handledByOverride(el)) {
            return;
        }
        this.OpenElementNode(el);
        this.TopLevelStatements(el.children);
        this.CloseElementNode(el);
    };

    Printer.prototype.OpenElementNode = function OpenElementNode(el) {
        var _this2 = this;

        this.buffer += '<' + el.tag;
        if (el.attributes.length) {
            el.attributes.forEach(function (attr) {
                _this2.buffer += ' ';
                _this2.AttrNode(attr);
            });
        }
        if (el.modifiers.length) {
            el.modifiers.forEach(function (mod) {
                _this2.buffer += ' ';
                _this2.ElementModifierStatement(mod);
            });
        }
        if (el.comments.length) {
            el.comments.forEach(function (comment) {
                _this2.buffer += ' ';
                _this2.MustacheCommentStatement(comment);
            });
        }
        if (el.blockParams.length) {
            this.BlockParams(el.blockParams);
        }
        if (el.selfClosing) {
            this.buffer += ' /';
        }
        this.buffer += '>';
    };

    Printer.prototype.CloseElementNode = function CloseElementNode(el) {
        if (el.selfClosing || _tokenizerEventHandlers.voidMap[el.tag.toLowerCase()]) {
            return;
        }
        this.buffer += '</' + el.tag + '>';
    };

    Printer.prototype.AttrNode = function AttrNode(attr) {
        if (this.handledByOverride(attr)) {
            return;
        }
        var name = attr.name,
            value = attr.value;

        this.buffer += name;
        if (value.type !== 'TextNode' || value.chars.length > 0) {
            this.buffer += '=';
            this.AttrNodeValue(value);
        }
    };

    Printer.prototype.AttrNodeValue = function AttrNodeValue(value) {
        if (value.type === 'TextNode') {
            this.buffer += '"';
            this.TextNode(value, true);
            this.buffer += '"';
        } else {
            this.Node(value);
        }
    };

    Printer.prototype.TextNode = function TextNode(text, isAttr) {
        if (this.handledByOverride(text)) {
            return;
        }
        if (this.options.entityEncoding === 'raw') {
            this.buffer += text.chars;
        } else if (isAttr) {
            this.buffer += (0, _util.escapeAttrValue)(text.chars);
        } else {
            this.buffer += (0, _util.escapeText)(text.chars);
        }
    };

    Printer.prototype.MustacheStatement = function MustacheStatement(mustache) {
        if (this.handledByOverride(mustache)) {
            return;
        }
        this.buffer += mustache.escaped ? '{{' : '{{{';
        if (mustache.strip.open) {
            this.buffer += '~';
        }
        this.Expression(mustache.path);
        this.Params(mustache.params);
        this.Hash(mustache.hash);
        if (mustache.strip.close) {
            this.buffer += '~';
        }
        this.buffer += mustache.escaped ? '}}' : '}}}';
    };

    Printer.prototype.BlockStatement = function BlockStatement(block) {
        if (this.handledByOverride(block)) {
            return;
        }
        if (block.chained) {
            this.buffer += block.inverseStrip.open ? '{{~' : '{{';
            this.buffer += 'else ';
        } else {
            this.buffer += block.openStrip.open ? '{{~#' : '{{#';
        }
        this.Expression(block.path);
        this.Params(block.params);
        this.Hash(block.hash);
        if (block.program.blockParams.length) {
            this.BlockParams(block.program.blockParams);
        }
        if (block.chained) {
            this.buffer += block.inverseStrip.close ? '~}}' : '}}';
        } else {
            this.buffer += block.openStrip.close ? '~}}' : '}}';
        }
        this.Block(block.program);
        if (block.inverse) {
            if (!block.inverse.chained) {
                this.buffer += block.inverseStrip.open ? '{{~' : '{{';
                this.buffer += 'else';
                this.buffer += block.inverseStrip.close ? '~}}' : '}}';
            }
            this.Block(block.inverse);
        }
        if (!block.chained) {
            this.buffer += block.closeStrip.open ? '{{~/' : '{{/';
            this.Expression(block.path);
            this.buffer += block.closeStrip.close ? '~}}' : '}}';
        }
    };

    Printer.prototype.BlockParams = function BlockParams(blockParams) {
        this.buffer += ' as |' + blockParams.join(' ') + '|';
    };

    Printer.prototype.PartialStatement = function PartialStatement(partial) {
        if (this.handledByOverride(partial)) {
            return;
        }
        this.buffer += '{{>';
        this.Expression(partial.name);
        this.Params(partial.params);
        this.Hash(partial.hash);
        this.buffer += '}}';
    };

    Printer.prototype.ConcatStatement = function ConcatStatement(concat) {
        var _this3 = this;

        if (this.handledByOverride(concat)) {
            return;
        }
        this.buffer += '"';
        concat.parts.forEach(function (part) {
            if (part.type === 'TextNode') {
                _this3.TextNode(part, true);
            } else {
                _this3.Node(part);
            }
        });
        this.buffer += '"';
    };

    Printer.prototype.MustacheCommentStatement = function MustacheCommentStatement(comment) {
        if (this.handledByOverride(comment)) {
            return;
        }
        this.buffer += '{{!--' + comment.value + '--}}';
    };

    Printer.prototype.ElementModifierStatement = function ElementModifierStatement(mod) {
        if (this.handledByOverride(mod)) {
            return;
        }
        this.buffer += '{{';
        this.Expression(mod.path);
        this.Params(mod.params);
        this.Hash(mod.hash);
        this.buffer += '}}';
    };

    Printer.prototype.CommentStatement = function CommentStatement(comment) {
        if (this.handledByOverride(comment)) {
            return;
        }
        this.buffer += '<!--' + comment.value + '-->';
    };

    Printer.prototype.PathExpression = function PathExpression(path) {
        if (this.handledByOverride(path)) {
            return;
        }
        this.buffer += path.original;
    };

    Printer.prototype.SubExpression = function SubExpression(sexp) {
        if (this.handledByOverride(sexp)) {
            return;
        }
        this.buffer += '(';
        this.Expression(sexp.path);
        this.Params(sexp.params);
        this.Hash(sexp.hash);
        this.buffer += ')';
    };

    Printer.prototype.Params = function Params(params) {
        var _this4 = this;

        // TODO: implement a top level Params AST node (just like the Hash object)
        // so that this can also be overridden
        if (params.length) {
            params.forEach(function (param) {
                _this4.buffer += ' ';
                _this4.Expression(param);
            });
        }
    };

    Printer.prototype.Hash = function Hash(hash) {
        var _this5 = this;

        if (this.handledByOverride(hash, true)) {
            return;
        }
        hash.pairs.forEach(function (pair) {
            _this5.buffer += ' ';
            _this5.HashPair(pair);
        });
    };

    Printer.prototype.HashPair = function HashPair(pair) {
        if (this.handledByOverride(pair)) {
            return;
        }
        this.buffer += pair.key;
        this.buffer += '=';
        this.Node(pair.value);
    };

    Printer.prototype.StringLiteral = function StringLiteral(str) {
        if (this.handledByOverride(str)) {
            return;
        }
        this.buffer += JSON.stringify(str.value);
    };

    Printer.prototype.BooleanLiteral = function BooleanLiteral(bool) {
        if (this.handledByOverride(bool)) {
            return;
        }
        this.buffer += bool.value;
    };

    Printer.prototype.NumberLiteral = function NumberLiteral(number) {
        if (this.handledByOverride(number)) {
            return;
        }
        this.buffer += number.value;
    };

    Printer.prototype.UndefinedLiteral = function UndefinedLiteral(node) {
        if (this.handledByOverride(node)) {
            return;
        }
        this.buffer += 'undefined';
    };

    Printer.prototype.NullLiteral = function NullLiteral(node) {
        if (this.handledByOverride(node)) {
            return;
        }
        this.buffer += 'null';
    };

    Printer.prototype.print = function print(node) {
        var options = this.options;

        if (options.override) {
            var result = options.override(node, options);
            if (result !== undefined) {
                return result;
            }
        }
        this.buffer = '';
        this.Node(node);
        return this.buffer;
    };

    return Printer;
}();

exports.default = Printer;


function unreachable(node) {
    throw new Error('Non-exhaustive node narrowing ' + node.type);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,