{"version":3,"sources":["../../src/methods/storages.js"],"names":["options","deferredOpen","openCallback","createIfMissing","forEtc","storageForEtc","forParticles","storageForParticles","forDomains","storageForDomains","forLogs","storageForLogs","self","config","storage","location","createKey","counterName","counter","forCells","storageForCells","generateAddress","relationdb","storageForTypes","typecelldb","forTypes","createDatabase","path","fs","existsSync","mkdirSync","storageForCounter","dbs","emission","forEmission","resolution","forResolution","rejection","forRejection"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport levelup from 'levelup';\nimport rocksdb from 'rocksdb';\nimport object from '../utils/level-object';\nimport subset from '../../utils/level-subset/index';\nimport domain from '../../utils/level-domain/index';\nimport autokey from '../utils/level-auto-inc/autokey';\nimport cam from '../../utils/level-cam';\n\nconst options = {\n  deferredOpen: true,\n  openCallback: true,\n  createIfMissing: true,\n};\n\nexport default {\n  forEtc: storageForEtc,\n  forParticles: storageForParticles,\n  forDomains: storageForDomains,\n  forLogs: storageForLogs,\n};\n\nfunction storageForEtc(self) {\n  const config = self.config.storage;\n  return levelup(rocksdb(config.location.storageForEtc));\n}\n\nfunction storageForParticles(self) {\n  const config = self.config.storage;\n  const { createKey } = autokey(self.storageForEtc, { counterName: config.counter.forCells });\n\n  return cam({\n    storage: levelup(rocksdb(config.location.storageForCells)),\n    generateAddress: createKey,\n  })\n}\n\nfunction storageForDomains(self) {\n  const config = self.config.storage;\n  const relationdb = levelup(rocksdb(config.location.storageForTypes + '/relations'));\n  const typecelldb = object(levelup(rocksdb(config.location.storageForTypes + '/cells')), [ 'id', 'name' ]);\n\n  const { createKey } = autokey(self.storageForEtc, { counterName: config.counter.forTypes });\n\n  return domain(subset(typecelldb, relationdb, createKey));\n}\n\nfunction storageForLogs(self) {\n  const config = self.config.storage;\n  const createDatabase = path => levelup(rocksdb(path));\n\n  if (!fs.existsSync(config.location.storageForLogs)) {\n    fs.mkdirSync(config.location.storageForLogs);\n  }\n\n  const storageForCounter = self.storageForEtc;\n\n  const dbs = [\n    createDatabase(config.location.storageForLogs + '/emission'),\n    createDatabase(config.location.storageForLogs + '/resolution'),\n    createDatabase(config.location.storageForLogs + '/rejection'),\n  ];\n\n  return {\n    emission: autokey(dbs[0], { storageForCounter, counterName: config.counter.forEmission }),\n    resolution: autokey(dbs[1], { storageForCounter, counterName: config.counter.forResolution }),\n    rejection: autokey(dbs[2], { storageForCounter, counterName: config.counter.forRejection }),\n  };\n}\n"],"file":"storages.js"}