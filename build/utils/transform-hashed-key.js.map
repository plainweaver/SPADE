{"version":3,"sources":["../../src/utils/transform-hashed-key.js"],"names":["createHash","data","crypto","update","digest","isOver32Bytes","Buffer","byteLength","transformBefore","key","value","promise","undefined","Error","transformAfter"],"mappings":";;;;;;;;AAKA;;AACA;;;;AANA;AAEA;AACA;AAKA,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOC,gBAAOF,UAAP,CAAkB,QAAlB,EAA4BG,MAA5B,CAAmCF,IAAnC,EAAyCG,MAAzC,CAAgD,QAAhD,CAAP;AACD;;AAED,SAASC,aAAT,CAAuBJ,IAAvB,EAA6B;AAC3B,SAAOK,MAAM,CAACC,UAAP,CAAkBN,IAAlB,EAAwB,QAAxB,IAAoC,EAA3C;AACD,C,CAED;AACA;;;AACO,SAASO,eAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqC;AAC1C,MAAIC,OAAJ;;AAEA,MAAID,KAAK,KAAKE,SAAd,EAAyB;AACvB,QAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAIA,KAAK,CAACA,KAAV,EAAiB;AACf,cAAM,IAAIG,KAAJ,CAAU,yFAAV,CAAN;AACD;AACF,KAJD,MAIO;AACL,YAAM,IAAIA,KAAJ,CAAU,qIAAV,CAAN;AACD;AACF;;AAED,MAAIH,KAAK,KAAKE,SAAV,IAAuBH,GAA3B,EAAgC;AAC9B,QAAIJ,aAAa,CAACI,GAAD,CAAjB,EAAwB;AACtB,UAAIC,KAAK,CAACA,KAAV,EACA,OAAO;AACLD,QAAAA,GAAG,EAAET,UAAU,CAACS,GAAD,CADV;AAELC,QAAAA,KAAK,EAAE;AAAEA,UAAAA,KAAK,EAAED,GAAT;AAAc,aAAGC;AAAjB;AAFF,OAAP;AAID,KAND,MAMO;AACL,aAAO;AACLD,QAAAA,GAAG,EAAEA,GADA;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;AACF,GAbD,MAeK,IAAID,GAAJ,EAAS;AACZ,QAAIJ,aAAa,CAACI,GAAD,CAAjB,EAAwB;AACtB,aAAOT,UAAU,CAACS,GAAD,CAAjB;AACD,KAFD,MAEO;AACL,aAAOA,GAAP;AACD;AACF;AACF,C,CAED;;;AACO,SAASK,cAAT,CAAwBL,GAAxB,EAA6BC,KAA7B,EAAoC;AACzC,MAAI,CAACA,KAAK,CAACA,KAAX,EAAkB;AAAE;AAClB,WAAO;AACLD,MAAAA,GAAG,EAAEA,GADA;AAELC,MAAAA,KAAK,EAAED;AAFF,KAAP;AAID,GALD,MAKO;AAAa;AAClB,WAAO;AACLA,MAAAA,GAAG,EAAEC,KAAK,CAACA,KADN;AAELA,MAAAA,KAAK,EAAEA,KAAK,CAACA;AAFR,KAAP;AAID;AACF","sourcesContent":["// Must be used with transform-key-as-value.\n\n// Replaces key of content that exceeds the size of 256bit (32byte) in base64\n// into hashes self-describing content itself.\n\nimport crypto from 'crypto';\nimport promisify from './promisify';\n\nfunction createHash(data) {\n  return crypto.createHash('sha256').update(data).digest('base64');\n}\n\nfunction isOver32Bytes(data) {\n  return Buffer.byteLength(data, 'base64') > 32;\n}\n\n// key without value is passed for GET or DEL.\n// both key and value are passed before PUT.\nexport function transformBefore(key, value) {\n  let promise;\n\n  if (value !== undefined) {\n    if (typeof value === 'object') {\n      if (value.value) {\n        throw new Error('value cannot have property named value. It is reserved for original value being hashed.')\n      }\n    } else {\n      throw new Error('Storage, transformed to use key which is hashed from value, must take value an object that contains additional minimal information.');\n    }\n  }\n\n  if (value !== undefined && key) {\n    if (isOver32Bytes(key)) {\n      if (value.value)\n      return {\n        key: createHash(key),\n        value: { value: key, ...value },\n      };\n    } else {\n      return {\n        key: key,\n        value: {},\n      };\n    }\n  }\n\n  else if (key) {\n    if (isOver32Bytes(key)) {\n      return createHash(key);\n    } else {\n      return key;\n    }\n  }\n}\n\n// always both key and value will be passed.\nexport function transformAfter(key, value) {\n  if (!value.value) { // when key hasn't been replaced\n    return {\n      key: key,\n      value: key,\n    }\n  } else {            // when key is hashed\n    return {\n      key: value.value,\n      value: value.value,\n    }\n  }\n}\n"],"file":"transform-hashed-key.js"}