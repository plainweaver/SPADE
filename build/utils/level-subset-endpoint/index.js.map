{"version":3,"sources":["../../../src/utils/level-subset-endpoint/index.js"],"names":["LevelSubsetEndpoint","levelsubset","endpointdb","rootdb","leafdb","prototype","createSet","cell","id","push","createSetInSet","targetSetId","parentSetId","exist","putSetInAnotherSet","get","subject","predicate","object","e","name","Error","put","subset","storage","Object","assign","root","leaf","setPrototypeOf","getPrototypeOf","getRoots","_getAll","getLeaves","callback"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;;;AALA;;;AAOA,SAASA,mBAAT,CAA6BC,WAA7B,EAA0CC,UAA1C,EAAsD;AACpD,MAAI,EAAE,gBAAgBF,mBAAlB,CAAJ,EAA4C;AAC1C,WAAO,IAAIA,mBAAJ,CAAwBC,WAAxB,EAAqCC,UAArC,CAAP;AACD;;AAED,QAAMC,MAAM,GAAG,yBAAM,2BAASD,UAAT,EAAqB,MAArB,CAAN,CAAf;AACA,QAAME,MAAM,GAAG,yBAAM,2BAASF,UAAT,EAAqB,MAArB,CAAN,CAAf;AAEA,QAAMG,SAAS,GAAG;AAChBC,IAAAA,SAAS,EAAE,gBAAeC,IAAf,EAAqB;AAC9B,YAAMC,EAAE,GAAG,MAAMP,WAAW,CAACK,SAAZ,CAAsBC,IAAtB,CAAjB;AACA,YAAMJ,MAAM,CAACM,IAAP,CAAYD,EAAZ,CAAN;AACA,aAAOA,EAAP;AACD,KALe;AAMhBE,IAAAA,cAAc,EAAE,gBAAeC,WAAf,EAA4BC,WAA5B,EAAyC;AACvD;AACA,YAAMC,KAAK,GAAG,MAAMZ,WAAW,CAACS,cAAZ,CAA2BC,WAA3B,EAAwCC,WAAxC,CAApB,CAFuD,CAGvD;AACD,KAVe;AAWhBE,IAAAA,kBAAkB,EAAE,gBAAeH,WAAf,EAA4BC,WAA5B,EAAyC;AAC3D,UAAIC,KAAJ;;AAEA,UAAI;AACFA,QAAAA,KAAK,GAAG,MAAMZ,WAAW,CAACc,GAAZ,CAAgB;AAAEC,UAAAA,OAAO,EAAEL,WAAX;AAAwBM,UAAAA,SAAS,EAAE,YAAnC;AAAiDC,UAAAA,MAAM,EAAEN;AAAzD,SAAhB,CAAd;AACD,OAFD,CAEE,OAAOO,CAAP,EAAU;AACV,YAAIA,CAAC,CAACC,IAAF,KAAW,eAAf,EAAgC,MAAMD,CAAN;AACjC;;AAED,UAAIN,KAAJ,EAAW;AACT,cAAM,IAAIQ,KAAJ,CAAU,wDAAV,CAAN;AACD;;AAED,YAAMpB,WAAW,CAACqB,GAAZ,CAAgB;AAAEC,QAAAA,MAAM,EAAEZ,WAAV;AAAuBM,QAAAA,SAAS,EAAE,YAAlC;AAAgDC,QAAAA,MAAM,EAAEN;AAAxD,OAAhB,CAAN;AACD;AAzBe,GAAlB;AA4BA,QAAMY,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;AAC5BC,IAAAA,IAAI,EAAExB,MADsB;AAE5ByB,IAAAA,IAAI,EAAExB;AAFsB,GAAd,EAGbH,WAHa,CAAhB;AAKAwB,EAAAA,MAAM,CAACI,cAAP,CAAsBL,OAAtB,EAA+B,EAC7B,GAAGC,MAAM,CAACK,cAAP,CAAsB7B,WAAtB,CAD0B;AAE7B,OAAGD,mBAAmB,CAACK,SAFM;AAG7B,OAAGA;AAH0B,GAA/B;AAKA,SAAOmB,OAAP;AACD;;AAEDxB,mBAAmB,CAACK,SAApB,CAA8B0B,QAA9B,GAAyC,sCAAc,CAAd,EAAiB,kBAAiB;AACzE,SAAO,MAAM,KAAKJ,IAAL,CAAUK,OAAV,EAAb;AACD,CAFwC,CAAzC;AAIAhC,mBAAmB,CAACK,SAApB,CAA8B4B,SAA9B,GAA0C,sCAAc,CAAd,EAAiB,gBAAeC,QAAf,EAAyB;AAClF,SAAO,MAAM,KAAKN,IAAL,CAAUI,OAAV,EAAb;AACD,CAFyC,CAA1C;eAIehC,mB","sourcesContent":["/**\n * Adds features, that are related to endpoints, to level-subset.\n */\nimport sublevel from 'subleveldown';\nimport array from '../level-array';\nimport { appendCallback, returnPromise } from '../versatile-function';\n\nfunction LevelSubsetEndpoint(levelsubset, endpointdb) {\n  if (!(this instanceof LevelSubsetEndpoint)) {\n    return new LevelSubsetEndpoint(levelsubset, endpointdb);\n  }\n\n  const rootdb = array(sublevel(endpointdb, 'root'));\n  const leafdb = array(sublevel(endpointdb, 'leaf'));\n\n  const prototype = {\n    createSet: async function(cell) {\n      const id = await levelsubset.createSet(cell);\n      await rootdb.push(id);\n      return id;\n    },\n    createSetInSet: async function(targetSetId, parentSetId) {\n      // find out it is circular\n      const exist = await levelsubset.createSetInSet(targetSetId, parentSetId);\n      // throw error if set creating right\n    },\n    putSetInAnotherSet: async function(targetSetId, parentSetId) {\n      let exist;\n\n      try {\n        exist = await levelsubset.get({ subject: targetSetId, predicate: 'isSubsetOf', object: parentSetId });\n      } catch (e) {\n        if (e.name !== 'NotFoundError') throw e;\n      }\n\n      if (exist) {\n        throw new Error('Cannot put set in another set, it is already a subset.');\n      }\n\n      await levelsubset.put({ subset: targetSetId, predicate: 'isSubsetOf', object: parentSetId });\n    }\n  };\n\n  const storage = Object.assign({\n    root: rootdb,\n    leaf: leafdb,\n  }, levelsubset);\n\n  Object.setPrototypeOf(storage, {\n    ...Object.getPrototypeOf(levelsubset),\n    ...LevelSubsetEndpoint.prototype,\n    ...prototype });\n\n  return storage;\n}\n\nLevelSubsetEndpoint.prototype.getRoots = returnPromise(0, async function() {\n  return await this.root._getAll();\n});\n\nLevelSubsetEndpoint.prototype.getLeaves = returnPromise(0, async function(callback) {\n  return await this.leaf._getAll();\n});\n\nexport default LevelSubsetEndpoint;\n"],"file":"index.js"}