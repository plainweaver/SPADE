{"version":3,"sources":["../../../src/utils/level-array/index.test.js"],"names":["DB_LOCATION","db","storage","after","Promise","all","close","then","fs","rmdirSync","recursive","describe","afterEach","clear","it","push","result","pop","assert","exists","equal","shift","second","get","third","unshift","index","indexOf"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,WAAW,GAAG,4BAApB;AACA,MAAMC,EAAE,GAAG,sBAAQ,sBAAQD,WAAR,CAAR,CAAX;AACA,MAAME,OAAO,GAAG,oBAAWD,EAAX,CAAhB;AAEAE,KAAK,CAAC,MAAM;AACV,SAAOC,OAAO,CAACC,GAAR,CAAY,CACjBJ,EAAE,CAACK,KAAH,EADiB,CAAZ,EAEJC,IAFI,CAEC,MAAM;AACZC,gBAAGC,SAAH,CAAaT,WAAb,EAA0B;AAAEU,MAAAA,SAAS,EAAE;AAAb,KAA1B;AACD,GAJM,CAAP;AAKD,CANI,CAAL;AAQAC,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCC,EAAAA,SAAS,CAAC,MAAM;AACd,WAAOV,OAAO,CAACW,KAAR,EAAP;AACD,GAFQ,CAAT;AAIAC,EAAAA,EAAE,CAAC,aAAD,EAAgB,YAAY;AAC5B,UAAMZ,OAAO,CAACa,IAAR,CAAa,MAAb,CAAN;AACA,UAAMC,MAAM,GAAG,MAAMd,OAAO,CAACe,GAAR,EAArB;;AACAC,iBAAOC,MAAP,CAAcH,MAAd;AACD,GAJC,CAAF;AAMAF,EAAAA,EAAE,CAAC,iBAAD,EAAoB,YAAY;AAChC,UAAMZ,OAAO,CAACa,IAAR,CAAa,OAAb,CAAN;AACA,UAAMb,OAAO,CAACa,IAAR,CAAa,QAAb,CAAN;AACA,UAAMC,MAAM,GAAG,MAAMd,OAAO,CAACe,GAAR,EAArB;;AACAC,iBAAOE,KAAP,CAAaJ,MAAb,EAAqB,QAArB;AACD,GALC,CAAF;AAOAF,EAAAA,EAAE,CAAC,eAAD,EAAkB,YAAY;AAC9B,UAAMZ,OAAO,CAACa,IAAR,CAAa,OAAb,CAAN;AACA,UAAMb,OAAO,CAACa,IAAR,CAAa,QAAb,CAAN;AACA,UAAMb,OAAO,CAACa,IAAR,CAAa,OAAb,CAAN;AACA,UAAMC,MAAM,GAAG,MAAMd,OAAO,CAACmB,KAAR,EAArB;;AACAH,iBAAOE,KAAP,CAAaJ,MAAb,EAAqB,OAArB;;AACA,UAAMM,MAAM,GAAG,MAAMrB,EAAE,CAACsB,GAAH,CAAO,CAAP,CAArB;AACA,UAAMC,KAAK,GAAG,MAAMvB,EAAE,CAACsB,GAAH,CAAO,CAAP,CAApB;;AACAL,iBAAOE,KAAP,CAAaE,MAAb,EAAqB,QAArB;;AACAJ,iBAAOE,KAAP,CAAaI,KAAb,EAAoB,OAApB;AACD,GAVC,CAAF;AAYAV,EAAAA,EAAE,CAAC,iBAAD,EAAoB,YAAY;AAChC,UAAMZ,OAAO,CAACa,IAAR,CAAa,OAAb,CAAN;AACA,UAAMb,OAAO,CAACuB,OAAR,CAAgB,MAAhB,CAAN;AACA,UAAMT,MAAM,GAAG,MAAMf,EAAE,CAACsB,GAAH,CAAO,CAAP,CAArB;;AACAL,iBAAOE,KAAP,CAAaJ,MAAb,EAAqB,MAArB;AACD,GALC,CAAF;AAOAF,EAAAA,EAAE,CAAC,SAAD,EAAY,YAAY;AACxB,UAAMZ,OAAO,CAACa,IAAR,CAAa,OAAb,CAAN;AACA,UAAMb,OAAO,CAACa,IAAR,CAAa,QAAb,CAAN;AACA,UAAMb,OAAO,CAACa,IAAR,CAAa,OAAb,CAAN;AACA,UAAMW,KAAK,GAAG,MAAMxB,OAAO,CAACyB,OAAR,CAAgB,QAAhB,CAApB;;AACAT,iBAAOE,KAAP,CAAaM,KAAb,EAAoB,CAApB;AACD,GANC,CAAF;AAOD,CA5CO,CAAR","sourcesContent":["import fs from 'fs';\nimport levelup from 'levelup';\nimport rocksdb from 'rocksdb';\nimport LevelArray from './index'\nimport { assert } from 'chai';\n\nconst DB_LOCATION = './storage/test/level-array';\nconst db = levelup(rocksdb(DB_LOCATION));\nconst storage = LevelArray(db);\n\nafter(() => {\n  return Promise.all([\n    db.close(),\n  ]).then(() => {\n    fs.rmdirSync(DB_LOCATION, { recursive: true });\n  });\n});\n\ndescribe('intergrated tests', () => {\n  afterEach(() => {\n    return storage.clear();\n  });\n\n  it('push -> pop', async () => {\n    await storage.push('item');\n    const result = await storage.pop();\n    assert.exists(result);\n  });\n\n  it('push * 2 -> pop', async () => {\n    await storage.push('first');\n    await storage.push('second');\n    const result = await storage.pop();\n    assert.equal(result, 'second');\n  });\n\n  it('push -> shift', async () => {\n    await storage.push('first');\n    await storage.push('second');\n    await storage.push('third');\n    const result = await storage.shift();\n    assert.equal(result, 'first');\n    const second = await db.get(0);\n    const third = await db.get(1);\n    assert.equal(second, 'second');\n    assert.equal(third, 'third');\n  });\n\n  it('push -> unshift', async () => {\n    await storage.push('first');\n    await storage.unshift('zero');\n    const result = await db.get(0);\n    assert.equal(result, 'zero');\n  });\n\n  it('indexOf', async () => {\n    await storage.push('first');\n    await storage.push('second');\n    await storage.push('third');\n    const index = await storage.indexOf('second');\n    assert.equal(index, 1);\n  })\n});\n"],"file":"index.test.js"}