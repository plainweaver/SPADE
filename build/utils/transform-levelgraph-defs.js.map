{"version":3,"sources":["../../src/utils/transform-levelgraph-defs.js"],"names":["defs","spo","sop","pos","pso","ops","osp","transformBefore","key","value","console","log","undefined","transformAfter","originalKey","emptyValue","transformKeyToValue","chunks","split","type","shift","def","reduce","acc","cur","index","toString","JSON","stringify","transformLtgt","options"],"mappings":";;;;;;;;AAAA,MAAMA,IAAI,GAAG;AACXC,EAAAA,GAAG,EAAE,CAAC,SAAD,EAAY,WAAZ,EAAyB,QAAzB,CADM;AAEXC,EAAAA,GAAG,EAAE,CAAC,SAAD,EAAY,QAAZ,EAAsB,WAAtB,CAFM;AAGXC,EAAAA,GAAG,EAAE,CAAC,WAAD,EAAc,QAAd,EAAwB,SAAxB,CAHM;AAIXC,EAAAA,GAAG,EAAE,CAAC,WAAD,EAAc,SAAd,EAAyB,QAAzB,CAJM;AAKXC,EAAAA,GAAG,EAAE,CAAC,QAAD,EAAW,WAAX,EAAwB,SAAxB,CALM;AAMXC,EAAAA,GAAG,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB;AANM,CAAb,C,CASA;AACA;;AACO,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqC;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBC,KAAjB;;AACA,MAAIA,KAAK,KAAKG,SAAd,EAAyB;AACvB,WAAO;AACLJ,MAAAA,GAAG,EAAEA;AADA,KAAP;AAGD;;AAED,MAAIA,GAAG,IAAIC,KAAK,KAAKG,SAArB,EAAgC;AAC9B,WAAO;AACLJ,MAAAA,GAAG,EAAEA,GADA;AAELC,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;AACF,C,CAED;;;AACO,SAASI,cAAT,CAAwBC,WAAxB,EAAqCC,UAArC,EAAiD;AACtD,WAASC,mBAAT,CAA6BF,WAA7B,EAA0C;AACxC,UAAMG,MAAM,GAAGH,WAAW,CAACI,KAAZ,CAAkB,IAAlB,CAAf;AACA,UAAMC,IAAI,GAAGF,MAAM,CAACG,KAAP,EAAb;AACA,UAAMC,GAAG,GAAGrB,IAAI,CAACmB,IAAD,CAAhB;AAEA,WAAOF,MAAM,CAACK,MAAP,CAAc,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,KAApB,EAA2B;AAC9CF,MAAAA,GAAG,CAACF,GAAG,CAACI,KAAD,CAAJ,CAAH,GAAkBD,GAAlB;AACA,aAAOD,GAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;;AAED,MAAI,CAACT,WAAD,IAAgB,CAACC,UAArB,EAAiC;AAC/B,WAAO;AACLP,MAAAA,GAAG,EAAEI,SADA;AAELH,MAAAA,KAAK,EAAEG;AAFF,KAAP;AAID;;AAED,MAAIE,WAAW,IAAIC,UAAnB,EAA+B;AAC7B,UAAMP,GAAG,GAAGM,WAAW,CAACY,QAAZ,EAAZ;AACA,WAAO;AACLlB,MAAAA,GAAG,EAAEA,GADA;AAELC,MAAAA,KAAK,EAAEkB,IAAI,CAACC,SAAL,CAAeZ,mBAAmB,CAACR,GAAD,CAAlC;AAFF,KAAP;AAID;AACF;;AAEM,SAASqB,aAAT,CAAuBC,OAAvB,EAAgC,CAEtC","sourcesContent":["const defs = {\n  spo: ['subject', 'predicate', 'object'],\n  sop: ['subject', 'object', 'predicate'],\n  pos: ['predicate', 'object', 'subject'],\n  pso: ['predicate', 'subject', 'object'],\n  ops: ['object', 'predicate', 'subject'],\n  osp: ['object', 'subject', 'predicate'],\n};\n\n// key without value is passed for GET or DEL.\n// both key and value are passed before PUT.\nexport function transformBefore(key, value) {\n  console.log(key, value);\n  if (value === undefined) {\n    return {\n      key: key,\n    };\n  }\n\n  if (key && value !== undefined) {\n    return {\n      key: key,\n      value: '',\n    }\n  }\n}\n\n// always both key and value will be passed.\nexport function transformAfter(originalKey, emptyValue) {\n  function transformKeyToValue(originalKey) {\n    const chunks = originalKey.split('::');\n    const type = chunks.shift();\n    const def = defs[type];\n\n    return chunks.reduce(function (acc, cur, index) {\n      acc[def[index]] = cur;\n      return acc;\n    }, {});\n  }\n\n  if (!originalKey && !emptyValue) {\n    return {\n      key: undefined,\n      value: undefined,\n    };\n  }\n\n  if (originalKey && emptyValue) {\n    const key = originalKey.toString();\n    return {\n      key: key,\n      value: JSON.stringify(transformKeyToValue(key)),\n    }\n  }\n}\n\nexport function transformLtgt(options) {\n\n}\n"],"file":"transform-levelgraph-defs.js"}