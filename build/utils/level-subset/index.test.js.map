{"version":3,"sources":["../../../src/utils/level-subset/index.test.js"],"names":["LOCATION_CELLS","LOCATION_RELATIONS","fs","mkdirSync","recursive","dbForCells","dbForRelations","counter","storage","primaryIndex","generateId","callback","after","Promise","all","close","then","rmdirSync","describe","it","createSet","catch","err","assert","instanceOf","Error","name","id","exists","generatedId","getSetById","set","deepEqual","updateSet","createSetInSet","deleteSet","e","id1","id2","subsets","getSubsetIds","isEmpty","isUndefined","ids","before","parent","child1","child2","grandchild","putSetInSet","getSubsetCells","result","includeDeepMembers","includeMembers","getSubsetIdsRecursively","getSubsetCellsRecursively","getSupersetIds","getSupersetIdsRecursively","isSubsetOfSet","equal","id3","include","message","parent1","parent2","child"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport { assert } from 'chai';\nimport levelup from 'levelup';\nimport rocksdb from 'rocksdb';\nimport LevelGraph from 'levelgraph';\nimport LevelIndex from '../level-second-index';\nimport LevelSubset from './index';\n\nconst LOCATION_CELLS = './storage/test/level-subset/cells';\nconst LOCATION_RELATIONS = './storage/test/level-subset/relations';\n\nfs.mkdirSync(LOCATION_CELLS, { recursive: true });\nfs.mkdirSync(LOCATION_RELATIONS, { recursive: true });\n\nconst dbForCells = levelup(rocksdb(LOCATION_CELLS));\nconst dbForRelations = levelup(rocksdb(LOCATION_RELATIONS));\n\nlet counter = 0;\n\nconst storage = LevelSubset(\n  LevelIndex(dbForCells, { primaryIndex: 'id' }),\n  LevelGraph(dbForRelations),\n  function generateId(callback) {\n    counter += 1;\n    if (callback) callback(null, counter);\n    return counter;\n  });\n\nafter(() => {\n  return Promise.all([\n    dbForCells.close(),\n    dbForRelations.close()\n  ]).then(() => {\n    fs.rmdirSync(LOCATION_CELLS, { recursive: true });\n    fs.rmdirSync(LOCATION_RELATIONS, { recursive: true });\n  });\n});\n\ndescribe('createSet(cellObject, callback)', () => {\n  it('throws when cellObject does not have name property.', () => {\n    return storage.createSet({})\n      .catch(err => {\n        assert.instanceOf(err, Error);\n      })\n  });\n\n  it('should return id, which is generated for a set.', () => {\n    return storage.createSet({ name: 'A' })\n      .then(id => {\n        assert.exists(id);\n      })\n  })\n});\n\ndescribe('intergration', () => {\n  it('createSet -> getSetById', () => {\n    let generatedId;\n    return storage.createSet({ name: 'A' })\n      .then(id => {\n        generatedId = id;\n        return storage.getSetById(id);\n      })\n      .then(set => {\n        assert.deepEqual(set, { id: generatedId, name: 'A'});\n      })\n  });\n\n  it('createSet -> updateSet -> getSetById', () => {\n    let generatedId;\n    return storage.createSet({ name: 'A' })\n      .then(id => {\n        generatedId = id;\n        return storage.updateSet(id, { name: 'B' })\n      })\n      .then(() => {\n        return storage.getSetById(generatedId);\n      })\n      .then(set => {\n        assert.deepEqual(set, { id: generatedId, name: 'B'});\n      })\n  });\n\n  it ('deleteSetById() throws if it has subset', async () => {\n    let err;\n\n    try {\n      const id = await storage.createSet({ name: 'A' });\n      await storage.createSetInSet({ name: 'B' }, id);\n      await storage.deleteSet(id);\n    } catch (e) {\n      err = e;\n    }\n\n    assert.instanceOf(err, Error);\n  });\n\n  it('createSet -> createSetInSet -> deleteSet -> no cell and any relation', async () => {\n    const id1 = await storage.createSet({ name: 'A' });\n    const id2 = await storage.createSetInSet({ name: 'B' }, id1);\n\n    await storage.deleteSet(id2);\n\n    const subsets = await storage.getSubsetIds(id1);\n    let id;\n\n    try {\n      id = await storage.getSetById(id2);\n    } catch (e) {\n      if (e.name !== 'NotFoundError') throw e;\n    }\n\n    assert.isEmpty(subsets);\n    assert.isUndefined(id);\n  });\n});\n\ndescribe('subsets', () => {\n  const ids = {};\n\n  before(async () => {\n    /*\n          parent\n       ┌────┴────┐\n    child1     child2\n       └────┬────┘\n        grandchild\n     */\n    ids.parent = await storage.createSet({ name: 'parent'});\n    ids.child1 = await storage.createSetInSet({ name: 'child_1' }, ids.parent);\n    ids.child2 = await storage.createSetInSet({ name: 'child_2' }, ids.parent);\n    ids.grandchild = await storage.createSet({ name: 'grand_child' });\n    await storage.putSetInSet(ids.grandchild, ids.child1);\n    await storage.putSetInSet(ids.grandchild, ids.child2);\n  });\n\n  it('getSubsetCells(mainSetId, callback)', () => {\n    return storage.getSubsetCells(ids.parent)\n      .then(result => {\n        assert.includeDeepMembers(result, [ { id: ids.child1, name: 'child_1' }, { id: ids.child2, name: 'child_2' } ]);\n      })\n  });\n\n  it('getSubsetIds(mainSetId, callback)', () => {\n    return storage.getSubsetIds(ids.parent)\n      .then(result => {\n        assert.includeMembers(result, [ ids.child1, ids.child2 ]);\n      })\n  });\n\n  it('getSubsetsRecursively(biggestSetId, callback)', () => {\n    return storage.getSubsetIdsRecursively(ids.parent)\n      .then(result => {\n        assert.includeMembers(result, [ ids.child1, ids.child2, ids.grandchild ]);\n      })\n  });\n\n  it('getSubsetsRecursively(biggestSetId, callback)', () => {\n    return storage.getSubsetCellsRecursively(ids.parent)\n      .then(result => {\n        assert.exists(result[0].id);\n        assert.exists(result[1].id);\n        assert.exists(result[2].id);\n      })\n  });\n\n  it('getSupersetIds(setId)', () => {\n    return storage.getSupersetIds(ids.grandchild)\n      .then(result => {\n        assert.includeMembers(result, [ ids.child1, ids.child2 ])\n      })\n  });\n\n  it('getSupersetIdsRecursively(setId)', () => {\n    return storage.getSupersetIdsRecursively(ids.grandchild)\n      .then(result => {\n        assert.includeMembers(result, [ ids.child1, ids.child2, ids.parent ])\n      })\n  });\n\n  it('isSubsetOfSet(setId, biggerSetId)', () => {\n    return storage.isSubsetOfSet(ids.grandchild, ids.parent)\n      .then(result => {\n        assert.equal(result, true);\n      });\n  })\n});\n\ndescribe('meaningless relation', () => {\n  it('throws if meaningless shortcut is going to be created', async () => {\n    const id1 = await storage.createSet({ name: 'A' });\n    const id2 = await storage.createSetInSet({ name: 'B' }, id1);\n    const id3 = await storage.createSetInSet({ name: 'C' }, id2);\n\n    try {\n      await storage.putSetInSet(id3, id1);\n    } catch (e) {\n      assert.include(e.message, 'Meaningless shortcut');\n    }\n  })\n});\n\ndescribe('circular set', () => {\n  it('throws if circular set is going to be created', async () => {\n    const id1 = await storage.createSet({ name: 'A' });\n    const id2 = await storage.createSetInSet({ name: 'B' }, id1);\n\n    try {\n      await storage.putSetInSet(id1, id2);\n    } catch (e) {\n      assert.include(e.message, 'Circular set');\n    }\n  })\n});\n\ndescribe('multiple parents', () => {\n  const ids = {};\n\n  before(async () => {\n    /*\n     parent1     parent2\n        └─────┬────┘\n            child\n              │\n          grandchild\n    */\n    ids.parent1 = await storage.createSet({ name: 'parent1'});\n    ids.parent2 = await storage.createSet({ name: 'parent2'});\n    ids.child = await storage.createSet({ name: 'child' });\n    await storage.putSetInSet(ids.child, ids.parent1);\n    await storage.putSetInSet(ids.child, ids.parent2);\n    ids.grandchild = await storage.createSetInSet({ name: 'grand_child' }, ids.child);\n  });\n});\n"],"file":"index.test.js"}