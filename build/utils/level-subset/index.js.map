{"version":3,"sources":["../../../src/utils/level-subset/index.js"],"names":["LevelSubset","setcelldb","relationdb","generateId","Error","primaryIndex","callback","prototype","createSet","cell","id","Promise","all","putIndexedObject","put","subject","updateSet","setId","cellInfo","delByPrimaryValue","deleteSet","failIfSupersetExist","subsets","getSubsetIds","length","supersets","getSupersetCells","reverse","map","triple","res","rej","del","err","getSetById","getByPrimaryValue","getSetIdsByName","name","getObjectIdsByIndex","mainsetId","get","predicate","object","result","item","JSON","parse","toString","getSubsetCells","ids","getSubsetIdsRecursively","biggestSetId","self","findSubset","filter","includes","push","getSubsetCellsRecursively","getSupersetIds","list","set","getSupersetIdsRecursively","getSupersets","target","supersetId","e","undefined","splice","indexOf","isSubsetOfSet","subsetId","found","compare","createSetInSet","setCell","biggerSetId","putSetInSet","targetSetId","isMeaningless","isCircular","removeSetFromSet","targetSubsetId"],"mappings":"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","sourcesContent":["// name with adjective (part of bigger part) (sum after)\n// name without adjective\n//  - outside of any adjectives but within the set.\n\n// get all data\n// get all data, only in subsets\n// get all data, outside of subsets\n\n// todo) Same name, but different id.\nimport { returnPromise, appendCallback } from '../versatile-function';\n\nfunction LevelSubset(setcelldb, relationdb, generateId) {\n  if (!(this instanceof LevelSubset)) {\n    return new LevelSubset(setcelldb, relationdb, generateId);\n  }\n\n  if (!generateId) throw new Error('level-subset requires id generator.');\n  if (setcelldb.primaryIndex !== 'id') throw new Error(`level-subset requires setcelldb with a primaryIndex 'id'.`);\n\n  this.setcelldb = setcelldb; // level-object with index [ id, name, ?dscr, ?tags ... (\"?\" means to be supported) ]\n  this.relationdb = relationdb;\n  this.generateId = async function (callback) { // to make sure it supports both callback and promise\n    return await generateId(callback);\n  };\n}\n\nLevelSubset.prototype.createSet = appendCallback(async function(cell) {\n  const id = await this.generateId();\n\n  await Promise.all([\n    this.setcelldb.putIndexedObject({ id: id, ...cell }),\n    this.relationdb.put({ subject: id }),\n  ]);\n\n  return id;\n});\n\nLevelSubset.prototype.updateSet = appendCallback(async function(setId, cellInfo) {\n  await this.setcelldb.delByPrimaryValue(setId);\n  await this.setcelldb.putIndexedObject({ id: setId, ...cellInfo });\n});\n\nLevelSubset.prototype.deleteSet = appendCallback(async function(setId, failIfSupersetExist = false) {\n  const subsets = await this.getSubsetIds(setId);\n\n  if (subsets.length) throw new Error('Cannot delete set which has subsets under itself.');\n\n  const supersets = await this.getSupersetCells(setId);\n\n  if (supersets.length) {\n    if (failIfSupersetExist) {\n      throw new Error(\"Cannot delete a set which is linked to superset set. 'failIfSupersetsExist' should be not true to forcefully remove all supersets.\");\n    }\n\n    // TODO) ensure there's no double deletion or skip to delete\n    await Promise.all(supersets.reverse().map(triple => {\n      return new Promise((res, rej) => {\n        this.relationdb.del(triple, (err) => err ? rej(err) : res())\n      });\n    }));\n  }\n\n  await this.setcelldb.delByPrimaryValue(setId);\n});\n\nLevelSubset.prototype.getSetById = returnPromise(1, function(id, callback) {\n  return this.setcelldb.getByPrimaryValue(id, callback);\n});\n\nLevelSubset.prototype.getSetIdsByName = returnPromise(1, function(name, callback) {\n  return this.setcelldb.getObjectIdsByIndex('name', name, callback);\n});\n\n// -- Getters --\n\nLevelSubset.prototype.getSubsetIds = returnPromise(1, function(mainsetId, callback) {\n  this.relationdb.get({ predicate: 'isSubsetOf', object: mainsetId }, (err, result) => {\n    if (err) return callback(err);\n    callback(null, result.map(item => JSON.parse(item.toString()).subject));\n  });\n});\n\nLevelSubset.prototype.getSubsetCells = appendCallback(async function(mainsetId) {\n  const ids = await this.getSubsetIds(mainsetId);\n  return await Promise.all(ids.map(id => this.getSetById(id)));\n});\n\nLevelSubset.prototype.getSubsetIdsRecursively = appendCallback(async function(biggestSetId) {\n  const self = this;\n  const result = [];\n\n  async function findSubset(setId) {\n    let ids = await self.getSubsetIds(setId);\n\n    // delete sets already gotten. (circularly related ones)\n    ids = ids.filter(id => !result.includes(id));\n\n    result.push(...ids);\n\n    await Promise.all(ids.map(id => findSubset(id)));\n  }\n\n  await findSubset(biggestSetId);\n\n  return result;\n});\n\nLevelSubset.prototype.getSubsetCellsRecursively = appendCallback(async function(biggestSetId) {\n  const ids = await this.getSubsetIdsRecursively(biggestSetId);\n  return await Promise.all(ids.map(id => this.getSetById(id)));\n});\n\nLevelSubset.prototype.getSupersetIds = appendCallback(async function(setId) {\n  const supersets = await this.getSupersetCells(setId);\n  return supersets.map(triple => triple.object);\n});\n\nLevelSubset.prototype.getSupersetCells = returnPromise(1, function(setId, callback) {\n  this.relationdb.get({ subject: setId, predicate: 'isSubsetOf' }, (err, list) => {\n    if (err && err.name !== 'NotFoundError') return callback(err);\n    return callback(null, list.map(set => JSON.parse(set.toString())));\n  });\n});\n\nLevelSubset.prototype.getSupersetIdsRecursively = appendCallback(async function(setId) {\n  const self = this;\n  const supersets = [];\n  async function getSupersets(target) {\n    try {\n      let list = await new Promise((res, rej) => self.relationdb.get({ subject: target, predicate: 'isSubsetOf' }, (err, result) => {\n        if (err && err.name !== 'NotFoundError') return rej(err);\n        return res(result);\n      }));\n\n      if (list.length) {\n        list = list.map(set => JSON.parse(set.toString()).object).filter(id => !supersets.includes(id));\n        supersets.push(...list);\n        await Promise.all(list.map(supersetId => getSupersets(supersetId)));\n      }\n    } catch (e) {\n      if (e.name === 'NotFoundError') return undefined;\n      else throw e;\n    }\n  }\n\n  await getSupersets(setId);\n  if (supersets.includes(setId)) supersets.splice(supersets.indexOf(setId), 1);\n  return supersets;\n});\n\n// -- Relations --\n\nLevelSubset.prototype.isSubsetOfSet = appendCallback(async function(subsetId, supersetId) {\n  const self = this;\n  let found = false;\n\n  async function compare(id) {\n    if (found) return;\n\n    if (id === supersetId) {\n      return found = true;\n    }\n\n    const supersets = await self.getSupersetIds(id);\n    await Promise.all(supersets.map(id => compare(id)));\n  }\n\n  await compare(subsetId);\n  return found;\n});\n\nLevelSubset.prototype.createSetInSet = appendCallback(async function(setCell, biggerSetId) {\n  const id = await this.createSet(setCell);\n  await this.putSetInSet(id, biggerSetId);\n  return id;\n});\n\nLevelSubset.prototype.putSetInSet = appendCallback(async function(targetSetId, biggerSetId) {\n  // if wrapperSet is a superset (recursively) of target -> creating meaningless shortcut\n  const isMeaningless = await this.isSubsetOfSet(targetSetId, biggerSetId);\n  if (isMeaningless) throw new Error('Meaningless shortcut across sets is not allowed. To modify, remove relations first and construct them again.');\n\n  // if wrapperSet is a subset (recursively) of target -> circular set\n  const isCircular = await this.isSubsetOfSet(biggerSetId, targetSetId);\n  if (isCircular) throw new Error('Circular set is not allowed.');\n\n  await this.relationdb.put({ subject: targetSetId, predicate: 'isSubsetOf', object: biggerSetId });\n});\n\nLevelSubset.prototype.removeSetFromSet = returnPromise(2, function(targetSubsetId, biggerSetId, callback) {\n  this.relationdb.del({ subject: targetSubsetId, predicate: 'isSubsetOf', object: biggerSetId }, callback);\n});\n\nexport default LevelSubset;\n"],"file":"index.js"}