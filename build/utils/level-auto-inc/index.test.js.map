{"version":3,"sources":["../../../src/utils/level-auto-inc/index.test.js"],"names":["describe","it","db","put","autoStorage","result","_getCurrentCount","assert","equal","storage","count","createKey","count0","count1","putWithAutoInc"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC7BC,EAAAA,EAAE,CAAC,KAAD,EAAQ,YAAY;AACpB,UAAMC,EAAE,GAAG,sBAAQ,uBAAR,CAAX;AACA,UAAMA,EAAE,CAACC,GAAH,CAAO,UAAP,EAAmB,CAAnB,CAAN;AACA,UAAMC,WAAW,GAAG,oBAAQF,EAAR,CAApB;AACA,UAAMG,MAAM,GAAG,MAAMD,WAAW,CAACE,gBAAZ,EAArB;;AACAC,iBAAOC,KAAP,CAAaH,MAAb,EAAqB,CAArB;AACD,GANC,CAAF;AAOD,CARO,CAAR;AAUAL,QAAQ,CAAC,aAAD,EAAgB,YAAY;AAClCC,EAAAA,EAAE,CAAC,qBAAD,EAAwB,YAAY;AACpC,UAAMC,EAAE,GAAG,sBAAQ,uBAAR,CAAX;AACA,UAAMO,OAAO,GAAG,oBAAQP,EAAR,CAAhB;AACA,UAAMQ,KAAK,GAAG,MAAMD,OAAO,CAACE,SAAR,EAApB;;AACAJ,iBAAOC,KAAP,CAAaE,KAAb,EAAoB,CAApB;AACD,GALC,CAAF;AAOAT,EAAAA,EAAE,CAAC,WAAD,EAAc,YAAY;AAC1B,UAAMC,EAAE,GAAG,sBAAQ,uBAAR,CAAX;AACA,UAAMO,OAAO,GAAG,oBAAQP,EAAR,CAAhB;AACA,UAAMU,MAAM,GAAG,MAAMH,OAAO,CAACE,SAAR,EAArB;;AACAJ,iBAAOC,KAAP,CAAaI,MAAb,EAAqB,CAArB;;AACA,UAAMC,MAAM,GAAG,MAAMJ,OAAO,CAACE,SAAR,EAArB;;AACAJ,iBAAOC,KAAP,CAAaK,MAAb,EAAqB,CAArB;AACD,GAPC,CAAF;AASAZ,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAC9C,UAAMC,EAAE,GAAG,sBAAQ,uBAAR,CAAX;AACA,UAAMO,OAAO,GAAG,oBAAQP,EAAR,CAAhB;AACA,UAAMO,OAAO,CAACE,SAAR,EAAN;AACA,UAAMC,MAAM,GAAG,MAAMH,OAAO,CAACH,gBAAR,EAArB;;AACAC,iBAAOC,KAAP,CAAaI,MAAb,EAAqB,CAArB;;AACA,UAAMH,OAAO,CAACE,SAAR,EAAN;AACA,UAAME,MAAM,GAAG,MAAMJ,OAAO,CAACH,gBAAR,EAArB;;AACAC,iBAAOC,KAAP,CAAaK,MAAb,EAAqB,CAArB;AACD,GATC,CAAF;AAWAZ,EAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAY;AAC/B,UAAMC,EAAE,GAAG,sBAAQ,uBAAR,CAAX;AACA,UAAMO,OAAO,GAAG,oBAAQP,EAAR,CAAhB;AACA,UAAMU,MAAM,GAAG,MAAMH,OAAO,CAACK,cAAR,CAAuB,YAAvB,CAArB;;AACAP,iBAAOC,KAAP,CAAaI,MAAb,EAAqB,CAArB;;AACA,UAAMC,MAAM,GAAG,MAAMJ,OAAO,CAACK,cAAR,CAAuB,mBAAvB,CAArB;;AACAP,iBAAOC,KAAP,CAAaK,MAAb,EAAqB,CAArB;AACD,GAPC,CAAF;AAQD,CApCO,CAAR","sourcesContent":["import levelup from 'levelup';\nimport memdown from 'memdown';\nimport { assert } from 'chai';\nimport autoinc from './index';\n\ndescribe('construction', () => {\n  it('get', async () => {\n    const db = levelup(memdown());\n    await db.put('~counter', 5);\n    const autoStorage = autoinc(db);\n    const result = await autoStorage._getCurrentCount();\n    assert.equal(result, 5);\n  });\n});\n\ndescribe('integration', function () {\n  it('starts with count 0', async () => {\n    const db = levelup(memdown());\n    const storage = autoinc(db);\n    const count = await storage.createKey();\n    assert.equal(count, 0);\n  });\n\n  it('createKey', async () => {\n    const db = levelup(memdown());\n    const storage = autoinc(db);\n    const count0 = await storage.createKey();\n    assert.equal(count0, 0);\n    const count1 = await storage.createKey();\n    assert.equal(count1, 1);\n  });\n\n  it('createKey -> _getCurrentCount', async () => {\n    const db = levelup(memdown());\n    const storage = autoinc(db);\n    await storage.createKey();\n    const count0 = await storage._getCurrentCount();\n    assert.equal(count0, 0);\n    await storage.createKey();\n    const count1 = await storage._getCurrentCount();\n    assert.equal(count1, 1);\n  });\n\n  it('putWithAutoInc', async () => {\n    const db = levelup(memdown());\n    const storage = autoinc(db);\n    const count0 = await storage.putWithAutoInc('some value');\n    assert.equal(count0, 0);\n    const count1 = await storage.putWithAutoInc('some second value');\n    assert.equal(count1, 1);\n  })\n});\n"],"file":"index.test.js"}