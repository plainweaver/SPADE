{"version":3,"sources":["../../../src/utils/level-second-index/index.test.js"],"names":["TEST_LOCATION","fs","mkdirSync","recursive","db","storage","primaryIndex","after","close","rmdirSync","beforeEach","clear","describe","it","input","id","some","Promise","all","map","x","putIndexedObject","output","getAll","assert","deepEqual","catch","err","include","message","e","objects","getByIndexedValue","first","second","third","arr1","getByQueryObject","arr2","then","delByIndexedValue","equal","name","storageWithoutPrimaryIndex","key0","key1","firstName","lastName","ids"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport { assert } from 'chai';\nimport levelup from 'levelup';\nimport rocksdb from 'rocksdb';\nimport LevelIndex from './index';\n\nconst TEST_LOCATION = './storage/test/level-object';\nfs.mkdirSync(TEST_LOCATION, { recursive: true });\nconst db = levelup(rocksdb(TEST_LOCATION));\nconst storage = LevelIndex(db, { primaryIndex: 'id' });\n\nafter(() => {\n  return db.close(() => {\n    fs.rmdirSync(TEST_LOCATION, { recursive: true });\n  });\n});\n\nbeforeEach(() => {\n  return db.clear();\n});\n\ndescribe('getAll()', () => {\n  it('returns every items', async () => {\n    const input = [{ id: 1, some: 'first' }, { id: 2, some: 'second' }, { id: 3, some: 'third' }];\n    await Promise.all(input.map(x => storage.putIndexedObject(x)));\n    const output = await storage.getAll();\n    assert.deepEqual(input, output);\n  })\n});\n\ndescribe('putIndexedObject(object, callback)', () => {\n  it('throws if object does not have id.', () => {\n    return storage.putIndexedObject({ some: 'value' })\n      .catch(err => {\n        assert.include(err.message, 'primaryIndex must be contained');\n      });\n  });\n\n  it('throws if id is already in use.', async () => {\n    try {\n      await storage.putIndexedObject({ id: 1, some: 'value' });\n      await storage.putIndexedObject({ id: 1, some: 'value' });\n    } catch (e) {\n      assert.include(e.message, 'already in use');\n    }\n  });\n});\n\ndescribe('put-get test', () => {\n  beforeEach(() => {\n    return db.clear();\n  });\n\n  it('finds objects with index.', async () => {\n    await storage.putIndexedObject({ id: 2, some: 'value' });\n    await storage.putIndexedObject({ id: 3, some: 'value' });\n    const objects = await storage.getByIndexedValue('some', 'value');\n    assert.deepEqual(objects, [ { id: 2, some: 'value' }, { id: 3, some: 'value' } ])\n  });\n\n  it('finds objects with queryObject', async () => {\n    await storage.putIndexedObject({ id: 1, first: 'first', second: 'second' });\n    await storage.putIndexedObject({ id: 2, second: 'second', third: 'third' });\n    await storage.putIndexedObject({ id: 3, third: 'third' });\n    const arr1 = await storage.getByQueryObject({ second: 'second' });\n    const arr2 = await storage.getByQueryObject({ second: 'second', third: 'third' });\n    assert.deepEqual(arr1, [ { id: 1, first: 'first', second: 'second' }, { id: 2, second: 'second', third: 'third' } ])\n    assert.deepEqual(arr2, [ { id: 2, second: 'second', third: 'third' } ])\n  })\n});\n\ndescribe('put-del-get test', () => {\n  it('should not be found by getByIndexedValue', () => {\n    return storage.putIndexedObject({ id: 5, some: 'value' })\n      .then(() => storage.delByIndexedValue('id', 5))\n      .then(() => storage.getByIndexedValue('some', 'value'))\n      .catch(err => assert.equal(err.name, 'NotFoundError'));\n  })\n});\n\nlet storageWithoutPrimaryIndex;\n\ndescribe('store constructed without primaryIndex', () => {\n  beforeEach(async () => {\n    await db.clear();\n    storageWithoutPrimaryIndex = LevelIndex(db, {});\n  });\n\n  it('should generate auto key', async () => {\n    const key0 = await storageWithoutPrimaryIndex.putIndexedObject({ some: 'first' });\n    const key1 = await storageWithoutPrimaryIndex.putIndexedObject({ some: 'second' });\n    assert.equal(key0, 0);\n    assert.equal(key1, 1);\n  });\n\n  it('gets indexedObject after put with auto increment', async () => {\n    await storageWithoutPrimaryIndex.putIndexedObject({ firstName: 'Alice', lastName: 'Brown' });\n    await storageWithoutPrimaryIndex.putIndexedObject({ firstName: 'Bob', lastName: 'Brown' });\n    const ids = await storage.getByIndexedValue('lastName', 'Brown');\n    assert.deepEqual(ids, [{ firstName: 'Alice', lastName: 'Brown' }, { firstName: 'Bob', lastName: 'Brown' }]);\n  });\n\n  it('throws when it takes identical indexedObject to one already stored.', async () => {\n    try {\n      await storageWithoutPrimaryIndex.putIndexedObject({ some: 'value' });\n      await storageWithoutPrimaryIndex.putIndexedObject({ some: 'value' });\n    } catch (e) {\n      assert.include(e.message, 'Identical object');\n    }\n  })\n});\n"],"file":"index.test.js"}