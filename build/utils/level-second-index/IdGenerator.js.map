{"version":3,"sources":["../../../src/utils/level-second-index/IdGenerator.js"],"names":["Generator","self","primaryIndex","store","main","generateId","indexedObject","reuseId","id","Error","createKey","key","exist","get","e","name"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,MAAI,CAACA,IAAI,CAACC,YAAV,EAAwB;AACtB;AACAD,IAAAA,IAAI,CAACE,KAAL,CAAWC,IAAX,GAAkB,2BAAQH,IAAI,CAACE,KAAL,CAAWC,IAAnB,CAAlB;AAEA,WAAO,eAAeC,UAAf,CAA0BC,aAA1B,EAAyC;AAC9C,UAAI,CAACL,IAAI,CAACM,OAAN,IAAiBD,aAAa,CAACE,EAAnC,EAAuC,MAAM,IAAIC,KAAJ,CAAU,8DACrD,oFAD2C,CAAN;;AAGvC,UAAIR,IAAI,CAACM,OAAL,IAAgBD,aAAa,CAACE,EAAlC,EAAsC;AACpC,eAAOF,aAAa,CAACE,EAArB;AACD;;AAED,aAAO,MAAMP,IAAI,CAACE,KAAL,CAAWC,IAAX,CAAgBM,SAAhB,EAAb;AACD,KATD;AAUD;;AAED,MAAI,OAAOT,IAAI,CAACC,YAAZ,KAA6B,QAAjC,EAA2C;AACzC,WAAO,eAAeG,UAAf,CAA0BC,aAA1B,EAAyC;AAC9C,UAAIL,IAAI,CAACC,YAAL,IAAqBI,aAAzB,EAAwC;AACtC,cAAMK,GAAG,GAAGL,aAAa,CAACL,IAAI,CAACC,YAAN,CAAzB;AAEA,YAAIU,KAAJ;;AACA,YAAI;AACFA,UAAAA,KAAK,GAAG,MAAMX,IAAI,CAACE,KAAL,CAAWC,IAAX,CAAgBS,GAAhB,CAAoBF,GAApB,CAAd;AACD,SAFD,CAEE,OAAOG,CAAP,EAAU;AACV,cAAIA,CAAC,CAACC,IAAF,KAAW,eAAf,EAAgC,CAC/B,CADD,MACO,MAAMD,CAAN;AACR;;AAED,YAAIF,KAAJ,EAAW,MAAM,IAAIH,KAAJ,CAAU,iEAAV,CAAN,CAAX,KACK;AACH,iBAAOE,GAAP;AACD;AACF,OAfD,MAiBK,MAAM,IAAIF,KAAJ,CAAU,uEAAV,CAAN;AACN,KAnBD;AAoBD;;AAED,MAAI,OAAOR,IAAI,CAACC,YAAZ,KAA6B,UAAjC,EAA6C;AAC3C,WAAO,MAAOI,aAAP,IAAyB,MAAML,IAAI,CAACC,YAAL,CAAkBI,aAAlB,CAAtC;AACD;AACF;;eAEcN,S","sourcesContent":["import sublevel from 'subleveldown';\nimport autoinc from '../level-auto-inc';\nimport deepEqual from 'deep-equal';\n\n// todo) decide how to distinguish between indexedObjects.\n// 1. give nothing to use built-in auto incrementer internally. Same objects will be rejected.\n// 2. give string of index name that will work as unique identifier.\n// 3. give function to manually generate id\nfunction Generator(self) {\n  if (!self.primaryIndex) {\n    // setup auto incrementer\n    self.store.main = autoinc(self.store.main);\n\n    return async function generateId(indexedObject) {\n      if (!self.reuseId && indexedObject.id) throw new Error('[level-second-index] id cannot be exist in indexedObject ' +\n        'since no primaryIndex is specified and ids are being generated auto incrementally.');\n\n      if (self.reuseId && indexedObject.id) {\n        return indexedObject.id;\n      }\n\n      return await self.store.main.createKey();\n    }\n  }\n\n  if (typeof self.primaryIndex === 'string') {\n    return async function generateId(indexedObject) {\n      if (self.primaryIndex in indexedObject) {\n        const key = indexedObject[self.primaryIndex];\n\n        let exist;\n        try {\n          exist = await self.store.main.get(key);\n        } catch (e) {\n          if (e.name === 'NotFoundError') {\n          } else throw e;\n        }\n\n        if (exist) throw new Error('[level-second-index] value with primaryIndex is already in use.');\n        else {\n          return key;\n        }\n      }\n\n      else throw new Error('[level-second-index] primaryIndex must be contained in indexedObject.')\n    };\n  }\n\n  if (typeof self.primaryIndex === 'function') {\n    return async (indexedObject) => await self.primaryIndex(indexedObject);\n  }\n}\n\nexport default Generator;\n"],"file":"IdGenerator.js"}