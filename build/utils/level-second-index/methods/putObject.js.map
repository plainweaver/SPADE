{"version":3,"sources":["../../../../src/utils/level-second-index/methods/putObject.js"],"names":["module","exports","putObject","object","id","Error","objectId","stores","put","indexObject","indexStore","propertyValue","ids","get","split","e","name","message","includes","push","del","Promise","all","Object","keys","map","key"],"mappings":";;AAAAA,MAAM,CAACC,OAAP,GAAiB,eAAeC,SAAf,CAAyBC,MAAzB,EAAiC;AAChD;AACA,MAAI,CAACA,MAAM,CAACC,EAAZ,EAAgB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AAChB,QAAMC,QAAQ,GAAGH,MAAM,CAACC,EAAxB;AACA,SAAOD,MAAM,CAACC,EAAd;AACA,QAAM,KAAKG,MAAL,CAAYH,EAAZ,CAAeI,GAAf,CAAmBF,QAAnB,EAA6BH,MAA7B,CAAN;;AAEA,iBAAeM,WAAf,CAA2BC,UAA3B,EAAuCC,aAAvC,EAAsDL,QAAtD,EAAgE;AAC9D;AACA;AACA,QAAIM,GAAJ;;AAEA,QAAI;AACFA,MAAAA,GAAG,GAAG,MAAMF,UAAU,CAACG,GAAX,CAAeF,aAAf,CAAZ;AACAC,MAAAA,GAAG,GAAGA,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAN;AACD,KAHD,CAGE,OAAOC,CAAP,EAAU;AACV,UAAIA,CAAC,CAACC,IAAF,KAAW,eAAf,EACEJ,GAAG,GAAG,EAAN,CADF,KAEK,IAAIG,CAAC,CAACE,OAAF,CAAUC,QAAV,CAAmB,4BAAnB,CAAJ,EACH,MAAM,IAAIb,KAAJ,CAAU,iGAAV,CAAN,CADG,KAEA,MAAMU,CAAN;AACN;;AAED,QAAI,CAACH,GAAG,CAACM,QAAJ,CAAaZ,QAAb,CAAL,EAA6BM,GAAG,CAACO,IAAJ,CAASb,QAAT;AAC7B,UAAMI,UAAU,CAACU,GAAX,CAAeT,aAAf,CAAN;AACA,UAAMD,UAAU,CAACF,GAAX,CAAeG,aAAf,EAA8BC,GAA9B,CAAN;AACD;;AAED,QAAMS,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYrB,MAAZ,EAAoBsB,GAApB,CAAwBC,GAAG,IAAI;AAC/C,WAAOjB,WAAW,CAAC,KAAKF,MAAL,CAAYmB,GAAZ,CAAD,EAAmBvB,MAAM,CAACuB,GAAD,CAAzB,EAAgCpB,QAAhC,CAAlB;AACD,GAFiB,CAAZ,CAAN;AAGD,CA/BD","sourcesContent":["module.exports = async function putObject(object) {\n  // this.stores.id is special since it stores entire object.\n  if (!object.id) throw new Error('object must have id');\n  const objectId = object.id;\n  delete object.id;\n  await this.stores.id.put(objectId, object);\n\n  async function indexObject(indexStore, propertyValue, objectId) {\n    // indexStore key: property key of object, value: array of ids of objects\n    // indexStore will indicate which objects had a key named as given.\n    let ids;\n\n    try {\n      ids = await indexStore.get(propertyValue);\n      ids = ids.split(',');\n    } catch (e) {\n      if (e.name === 'NotFoundError')\n        ids = [];\n      else if (e.message.includes(\"Cannot read property 'get'\"))\n        throw new Error('Index storage had to be constructed for each object key. Unprepared object key has been passed.');\n      else throw e;\n    }\n\n    if (!ids.includes(objectId)) ids.push(objectId);\n    await indexStore.del(propertyValue);\n    await indexStore.put(propertyValue, ids);\n  }\n\n  await Promise.all(Object.keys(object).map(key => {\n    return indexObject(this.stores[key], object[key], objectId);\n  }));\n};"],"file":"putObject.js"}