{"version":3,"sources":["../../../src/utils/level-domain/index.test.js"],"names":["LOCATION_DB","db","storage","after","close","fs","rmdirSync","recursive","describe","beforeEach","clear","it","domains","getAllDomains","assert","deepEqual","createDomain","domainName","dscrCode","domain","getDomains","name","equal","dscr","ExecutableDomain"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,WAAW,GAAG,6BAApB;AACA,MAAMC,EAAE,GAAG,sBAAQ,sBAAQD,WAAR,CAAR,CAAX;AACA,MAAME,OAAO,GAAG,oBAAYD,EAAZ,CAAhB;AAEAE,KAAK,CAAC,YAAY;AAChB,QAAMF,EAAE,CAACG,KAAH,EAAN;;AACAC,cAAGC,SAAH,CAAaN,WAAb,EAA0B;AAAEO,IAAAA,SAAS,EAAE;AAAb,GAA1B;AACD,CAHI,CAAL;AAKA;;;;;;;;;;;;;;AAcAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BC,EAAAA,UAAU,CAAC,MAAM;AACf,WAAOR,EAAE,CAACS,KAAH,EAAP;AACD,GAFS,CAAV;AAIAC,EAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAY;AACxD,UAAMC,OAAO,GAAG,MAAMV,OAAO,CAACW,aAAR,EAAtB;;AACAC,iBAAOC,SAAP,CAAiBH,OAAjB,EAA0B,EAA1B;AACD,GAHC,CAAF;AAKAD,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AACtC,UAAMT,OAAO,CAACc,YAAR,CAAqB;AAAEC,MAAAA,UAAU,EAAE,OAAd;AAAuBC,MAAAA,QAAQ,EAAE,MAAM;AAAE,eAAO,CAAP;AAAW;AAApD,KAArB,CAAN;AACA,UAAM,CAAEC,MAAF,IAAa,MAAMjB,OAAO,CAACkB,UAAR,CAAmB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAnB,CAAzB;;AACAP,iBAAOQ,KAAP,CAAaH,MAAM,CAACE,IAApB,EAA0B,OAA1B;;AACAP,iBAAOQ,KAAP,CAAaH,MAAM,CAACI,IAAP,EAAb,EAA4B,CAA5B;AACD,GALC,CAAF;AAMD,CAhBO,CAAR;AAmBAf,QAAQ,CAAC,WAAD,EAAc,MAAM;AAC1BG,EAAAA,EAAE,CAAC,uBAAD,EAA0B,MAAM;AAChC,UAAMQ,MAAM,GAAG,IAAIK,wBAAJ,CAAqB;AAAEH,MAAAA,IAAI,EAAE,OAAR;AAAiBE,MAAAA,IAAI,EAAE,MAAM,CAAE;AAA/B,KAArB,CAAf;AAED,GAHC,CAAF;AAID,CALO,CAAR,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import fs from 'fs';\nimport levelup from 'levelup';\nimport rocksdb from 'rocksdb';\nimport { assert } from 'chai';\nimport { ExecutableDomain } from './Domain';\nimport LevelDomain from './index';\n\nconst LOCATION_DB = './storage/test/level-domain';\nconst db = levelup(rocksdb(LOCATION_DB));\nconst storage = LevelDomain(db);\n\nafter(async () => {\n  await db.close();\n  fs.rmdirSync(LOCATION_DB, { recursive: true });\n});\n\n/*\nprocessParticle\ngetParticlesByDomainId\nlistAllDomains\ngetSubDomains\ngetDomainNameById\ngetDomainIdsByName\nleaveIntersectionOnly\ncreateDomain\ncreateSubDomain\ndisableComplement\nsetDomainDiscriminator\n */\n\ndescribe('Get domain', () => {\n  beforeEach(() => {\n    return db.clear();\n  });\n\n  it('returns empty array if no domains found', async () => {\n    const domains = await storage.getAllDomains();\n    assert.deepEqual(domains, []);\n  });\n\n  it('get executable domain', async () => {\n    await storage.createDomain({ domainName: 'apple', dscrCode: () => { return 5; } });\n    const [ domain ] = await storage.getDomains({ name: 'apple' });\n    assert.equal(domain.name, 'apple');\n    assert.equal(domain.dscr(), 5);\n  });\n});\n\n\ndescribe('Particles', () => {\n  it('returns all particles', () => {\n    const domain = new ExecutableDomain({ name: 'apple', dscr: () => {}});\n\n  })\n});\n\n// describe('level-subset compatibility', () => {\n//   it('createDomain(setCell, callback)', () => {\n//     return storage.createDomain({ name: 'A', dscr: () => true, })\n//       .then(id => {\n//         dbForSetCells.createReadStream()\n//           .on('data', data => console.log(data.key.toString(), data.value.toString()));\n//         assert.exists(id);\n//       })\n//   })\n//\n//   //...\n// });\n//\n// describe('updateDomainDscr()', () => {\n//   it('createDomain -> updateDomainDscr -> getDomain has function as dscr.', async () => {\n//     const id = await storage.createDomain({ name: 'A' });\n//     await storage.updateDomainDscr(id, `return value === 'a'`, [ 'a' ]);\n//     const set = await storage.getDomainById(id);\n//\n//     assert.typeOf(set.dscr, 'function');\n//   });\n// });\n//\n// describe('processParticle()', () => {\n//   it('createDomain -> processParticle -> getParticlesByDomainId', async () => {\n//     const script = new vm.Script(function hello() { return 5; });\n//     console.log('!!!!', script)\n//     const id = await storage.createDomain({ name: 'A' });\n//     await storage.processParticle({ info: { address: 'ADDR' } })\n//   })\n// });\n"],"file":"index.test.js"}