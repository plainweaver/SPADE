{"version":3,"sources":["../../src/subsystems/ShardSystem.js"],"names":["ShardSystem","EventEmitter","Transport","Protocol","Permission","constructor","self","transports","protocols","mappings","process","nextTick","particle","action","domain","event","createMapping","name","func","removeMapping","mapping","eventName","data"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACe,MAAMA,WAAN,SAA0B,6BAASC,oBAAT,EAAuBC,yBAAvB,EAAkCC,wBAAlC,EAA4CC,mBAA5C,CAA1B,CAAkF;AAC/FC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB;AAEA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AAEA,SAAKC,QAAL,GAAgB,EAAhB;AAEAC,IAAAA,OAAO,CAACC,QAAR,CAAiB,MAAM;AACrB,WAAKC,QAAL,GAAgBN,IAAI,CAACM,QAArB;AACA,WAAKC,MAAL,GAAcP,IAAI,CAACO,MAAnB;AACA,WAAKC,MAAL,GAAcR,IAAI,CAACQ,MAAnB;AACA,WAAKC,KAAL,GAAaT,IAAI,CAACS,KAAlB;AACD,KALD;AAMD,GAf8F,CAiB/F;;AACA;;;;;;AAIAC,EAAAA,aAAa,CAACC,IAAD,EAAOC,IAAP,EAAa;AACxB,SAAKT,QAAL,CAAcQ,IAAd,IAAsBC,IAAtB;AACD;;AAEDC,EAAAA,aAAa,CAACF,IAAD,EAAO;AAClB,WAAO,KAAKG,OAAL,CAAaH,IAAb,CAAP;AACD,GA5B8F,CA8B/F;;;AACAP,EAAAA,OAAO,CAACW,SAAD,EAAYC,IAAZ,EAAkB,CACvB;AACD;;AAjC8F","sourcesContent":["import classes from 'extends-classes';\nimport { EventEmitter } from 'events';\nimport Transport from './principle/TransportBuilder';\nimport Protocol from './principle/ProtocolBuilder';\nimport Permission from './principle/Permission';\n\n// endpoint IR, building protocol particles -> world\n// access-control, role-oriented, very declarative\n// connects with various other hardwares\nexport default class ShardSystem extends classes (EventEmitter, Transport, Protocol, Permission) {\n  constructor(self) {\n    super();\n\n    this.transports = [];\n    this.protocols = [];\n\n    this.mappings = {};\n\n    process.nextTick(() => {\n      this.particle = self.particle;\n      this.action = self.action;\n      this.domain = self.domain;\n      this.event = self.event;\n    });\n  }\n\n  // function determines boundary of group that consists of particle, action and domain.\n  /**\n   * @param name - name of determiner\n   * @param func - callable function\n   */\n  createMapping(name, func) {\n    this.mappings[name] = func;\n  }\n\n  removeMapping(name) {\n    delete this.mapping[name];\n  }\n\n  // check if emitted data is valuable enough to do something with connected shards.\n  process(eventName, data) {\n    // todo\n  }\n}\n"],"file":"ShardSystem.js"}