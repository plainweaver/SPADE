{"version":3,"sources":["../../src/subsystems/DomainSystem.js"],"names":["DomainSystem","EventEmitter","constructor","self","process","nextTick","shard","particle","action","event","getNouns","queryObject","queryCategories","getObjects","noun","getItemsByCategory","id","classify","buffer","types","listCategories","forEach","qualify","type","qualifier","domain","getVerbs","isType","evaluate","emit","parse"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,MAAMA,YAAN,SAA2B,6BAAS,6BAAS,QAAT,CAAT,EAA6BC,oBAA7B,CAA3B,CAAsE;AACnFC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,UAAMA,IAAN;AAEAC,IAAAA,OAAO,CAACC,QAAR,CAAiB,MAAM;AACrB,WAAKC,KAAL,GAAaH,IAAI,CAACG,KAAlB;AACA,WAAKC,QAAL,GAAgBJ,IAAI,CAACI,QAArB;AACA,WAAKC,MAAL,GAAcL,IAAI,CAACK,MAAnB;AACA,WAAKC,KAAL,GAAaN,IAAI,CAACM,KAAlB;AACD,KALD;AAMD;;AAED,QAAMC,QAAN,CAAeC,WAAf,EAA4B;AAC1B,WAAO,MAAM,KAAKC,eAAL,CAAqBD,WAArB,CAAb;AACD;;AAED,QAAME,UAAN,CAAiBC,IAAjB,EAAuB;AACrB,WAAO,MAAM,KAAKC,kBAAL,CAAwBD,IAAI,CAACE,EAA7B,CAAb;AACD;AAED;;;;;AAGA,QAAMC,QAAN,CAAeD,EAAf,EAAmBE,MAAnB,EAA2B;AACzB,UAAMC,KAAK,GAAG,MAAM,KAAKC,cAAL,EAApB;AAEAD,IAAAA,KAAK,CAACE,OAAN,CAAc,eAAeC,OAAf,CAAuBC,IAAvB,EAA6B;AACzC,YAAMC,SAAS,GAAG,MAAM,KAAKC,MAAL,CAAYC,QAAZ,CAAqB;AAAEV,QAAAA,EAAE,EAAEO,IAAI,CAACC;AAAX,OAArB,CAAxB;AACA,YAAMG,MAAM,GAAG,MAAMH,SAAS,CAACI,QAAV,GAAqBV,MAArB,CAArB;AACA,UAAIS,MAAJ,EAAY,KAAKE,IAAL,CAAU,SAAV,EAAqBb,EAArB,EAAyBO,IAAzB;AACb,KAJD;AAKD;;AAED,QAAMnB,OAAN,CAAcG,QAAd,EAAwB;AACtB,UAAMkB,MAAM,GAAG,MAAM,KAAKK,KAAL,CAAWvB,QAAX,CAArB;AACA,SAAKE,KAAL,CAAWgB,MAAX;AAEA,UAAM,KAAKR,QAAL,CAAcQ,MAAd,CAAN;AACD;;AAtCkF","sourcesContent":["import { EventEmitter } from 'events';\nimport classes from 'extends-classes';\nimport Category from './principle/CategorySystem';\n\nexport default class DomainSystem extends classes (Category('domain'), EventEmitter) {\n  constructor(self) {\n    super(self);\n\n    process.nextTick(() => {\n      this.shard = self.shard;\n      this.particle = self.particle;\n      this.action = self.action;\n      this.event = self.event;\n    })\n  }\n\n  async getNouns(queryObject) {\n    return await this.queryCategories(queryObject);\n  }\n\n  async getObjects(noun) {\n    return await this.getItemsByCategory(noun.id);\n  }\n\n  /**\n   * Get all tags that can be imagined from a particle.\n   */\n  async classify(id, buffer) {\n    const types = await this.listCategories();\n\n    types.forEach(async function qualify(type) {\n      const qualifier = await this.domain.getVerbs({ id: type.qualifier });\n      const isType = await qualifier.evaluate()(buffer);\n      if (isType) this.emit('qualify', id, type);\n    })\n  }\n\n  async process(particle) {\n    const domain = await this.parse(particle);\n    this.event(domain);\n\n    await this.classify(domain);\n  }\n}"],"file":"DomainSystem.js"}