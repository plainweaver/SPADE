{"version":3,"sources":["../../src/subsystems/EventSystem.js"],"names":["EventSystem","EventEmitter","constructor","self","ready","queue","process","nextTick","shard","particle","action","domain","setImmediate","shape","abstract","primaryIndex","schedule","log","script","condition","scripts","forEach","s","push","eval","type","createCondition","name","func","e","Error","put","removeCondition","del","createShape","nodes","edges","validate","startings","n","starting","count","n2","id","nodeids","includes","from","to","p","find","found","e2","toString","putIndexedObject","removeShape","delByPrimaryValue","setScheduleAtDate","start","end","Date","now","setScheduleWithDelay","delay","setScheduleByProcess","scriptName","removeScheduleByProcess","removeSchedule","emit","eventName","args","data"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport sublevel from 'subleveldown';\nimport concat from 'level-concat-iterator';\nimport index from '../../utils/level-second-index';\nimport cache from '../../utils/level-sync-cache';\n\n// finder, performer, scheduler\nexport default class EventSystem extends EventEmitter {\n  constructor(self) {\n    super();\n    this.ready = false;\n    // for schedules that are fired before conditions are fully loaded.\n    this.queue = [];\n\n    process.nextTick(() => {\n      this.shard = self.shard;\n      this.particle = self.particle;\n      this.action = self.action;\n      this.domain = self.domain;\n    });\n\n    setImmediate(() => {\n      // { nodes: Array, edges: Array, createdAt: Date }\n      this.shape = index(sublevel(this.particle.abstract, 'event.node'), { primaryIndex: null });\n      this.schedule = cache(sublevel(this.particle.abstract, 'event.schedule'));\n      this.log = sublevel(this.particle.abstract, 'event.log');\n\n      // eval-able scripts.\n      this.script = sublevel(this.particle.abstract, 'event.script');\n      // condition: Function    input: type: String, data: Buffer    output: shapeId to trigger\n      this.condition = [];\n\n      // load all when the system starts.\n      (async () => {\n        const scripts = await concat(this.script);\n        scripts.forEach(s => this.condition.push(eval(s)));\n        this.ready = true;\n        this.queue.forEach(([type, ]) => {\n          process()\n        })\n      })();\n\n    });\n  }\n\n  // type: String, indicates whether it is for action or domain\n  // name: String, name for the condition function\n  // script: String, eval-able js script\n  async createCondition(type, name, script) {\n    let func;\n\n    try {\n      func = eval(script);\n    } catch (e) {\n      throw new Error('Invalid script was given.');\n    }\n\n    await this.script.put(name, script);\n    this.condition[name] = func;\n\n    return name;\n  }\n\n  async removeCondition(name) {\n    if (this.condition[name]) {\n      delete this.condition[name];\n    }\n\n    await this.script.del(name);\n  }\n\n  /**\n   * Creates a shape. It connects nodes (action and domain) with edges.\n   * @param nodes {Array< Object\n   *   { id: Number, (starting: true), condition: { action, domain } or Function(script) }\n   * >}\n   * @param edges {Array< Object { from: nodeId, to: nodeId, required: boolean } >}\n   * @return shapeId {Number}\n   */\n  async createShape(nodes, edges) {\n    (function validate() {\n      // no mulitple starting nodes\n      let startings = 0;\n      nodes.forEach(n => { if (n.starting) startings += 1; });\n      if (startings !== 1) throw new Error('No multiple starting nodes are allowed.');\n\n      // no multiple same nodes\n      nodes.forEach(n => {\n        let count = 0;\n        nodes.forEach(n2 => {\n          if (n2.id === n.id) count += 1;\n        });\n        if (count > 1) throw new Error('No multiple same nodes are allowed.');\n      });\n\n      // no wrong-pointing edges\n      const nodeids = [];\n      edges.forEach(e => {\n        if (!nodeids.includes(e.from)) nodeids.push(e.from);\n        if (!nodeids.includes(e.to)) nodeids.push(e.from);\n      });\n      nodeids.forEach(p => {\n        if (!nodes.find(p)) throw new Error('No node is found that edge is pointing.');\n      });\n\n      // no multiple same edges\n      edges.forEach(e => {\n        let found = 0;\n        edges.forEach(e2 => {\n          if (e2.from === e.from && e2.to === e.to) {\n            found += 1;\n          }\n        });\n        if (found > 1) throw new Error('No multiple same edges are allowed.');\n      })\n    })();\n\n    const shape = { nodes, edges }.toString();\n    return await this.shape.putIndexedObject(shape);\n  }\n\n  async removeShape(id) {\n    return await this.shape.delByPrimaryValue(id);\n  }\n\n  /**\n   * createSchedule(start, end, interval)(event)\n   * @param start - Date time when schedule starts\n   * @param end - optional, Date time when schedule forcefully stops\n   */\n  async setScheduleAtDate(start, end) {\n    if (start < Date.now()) throw new Error();\n    await this.schedule.put({ type: 'date', start: start, end: end });\n  }\n\n  /**\n   * @param delay - milliseconds from when system started\n   * @return {Promise<void>}\n   */\n  async setScheduleWithDelay(delay, condition) {\n    return await this.schedule.put({ type: 'delay', delay: delay });\n  }\n\n  // trigger new schedule by conditioning data that is passed to process\n  async setScheduleByProcess(scriptName) {\n    return await this.schedule.put();\n  }\n\n  async removeScheduleByProcess(scriptName){\n    await this.schedule.del(scriptName);\n  }\n\n  async removeSchedule(id) {\n    await this.schedule.del(id);\n  }\n\n  emit(eventName, ...args) {\n    if (!this.ready) {\n      this.queue.push([eventName, ...args]);\n      return;\n    }\n\n    // todo\n\n    this.shard.process();\n    this.particle.process();\n  }\n\n  // type: String 'action' or 'domain', data: function or object\n  process(type, data) {\n    // todo\n    this.emit('process', type, data);\n  }\n}\n"],"file":"EventSystem.js"}